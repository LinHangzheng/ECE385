#include <stdio.h>
#include "player_logic.h"

void press_w(saber_t *saber){
	char can_walk = 0;
	if (saber->state <= WALK_LEFT6 ){
		// if count reach the state_count_max we set, update the saber state
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
			saber->state_count = 0;
		}
		can_walk = 1;
	}
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
			saber->state_count = 0;
		}
		can_walk = 1;
	}
    if (can_walk == 1 && saber->vy > -VY_MOST){
    	saber->vy--;
    }
}

void press_s(saber_t *saber){
	char can_walk = 0;
	if (saber->state <= WALK_LEFT6 ){
		if (saber->state_count ++ > STATE_COUNT_MAX){
		saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
		saber->state_count = 0;
		}
		can_walk = 1;
	}
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
		if (saber->state_count ++ > STATE_COUNT_MAX){
		saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
		saber->state_count = 0;
		}
		can_walk = 1;
	}
    if (can_walk == 1 && saber->vy < VY_MOST){
    	saber->vy++;
    }
}

void press_a(saber_t *saber){
	if (saber->state <= WALK_LEFT6 ){
		if (saber->state_count ++ > STATE_COUNT_MAX){
		saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
		saber->state_count = 0;
		}
		if (saber->vx > -VX_MOST){
			saber->vx--;
		}
	}
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
		saber->state = WALK_LEFT1;
		saber -> vx = 0;
		saber->FaceDirection = -1;
	}
}

void press_d(saber_t *saber){
	if (saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6 ){
		if (saber->state_count ++ > STATE_COUNT_MAX){
		saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
		saber->state_count = 0;
		}
		if (saber->vx < VX_MOST){
			saber->vx++;
		}
	}
	else if(saber->state <= WALK_LEFT6){
		saber->state = WALK_RIGHT1;
		saber-> vx = 0;
		saber->FaceDirection = 1;
	}
}

void press_j(saber_t *saber){
	if (saber->state <= WALK_LEFT6){
		saber-> state = ATTACK_LEFT1;
		saber-> state_count = 0;
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
		saber-> state = ATTACK_RIGHT1;
		saber-> state_count = 0;
	}
}


void saber_init(saber_t *saber){
	saber -> vx = 0;
	saber -> vy = 0;
	saber -> x = INIT_X;
	saber -> y = INIT_Y;
	saber -> HP = 3;
	saber -> ATK = 3;
	saber -> state = 6;
	saber -> state_count = 0;
}

void update(saber_t *saber){
	saber -> x = saber ->x + saber->vx;
	if (saber-> x < LEFT_MOST){
		saber-> x = LEFT_MOST;
	}
	if (saber-> x > RIGHT_MOST){
		saber-> x = RIGHT_MOST;
	}

	saber -> y = saber ->y + saber->vy;
	if (saber-> y < UP_MOST){
		saber-> y = UP_MOST;
	}
	if (saber-> y > DOWN_MOST){
		saber-> y = DOWN_MOST;
	}

	update_helper(saber, ATTACK_LEFT1, ATTACK_LEFT4);
	update_helper(saber, ATTACK_RIGHT1, ATTACK_RIGHT4);
	update_helper(saber, SKILL_LEFT1, SKILL_LEFT4);
	update_helper(saber, SKILL_RIGHT1, SKILL_RIGHT4);
	update_helper(saber, ATTACK_LEFT1, ATTACK_LEFT4);
	// update attack
	if (saber->state >= ATTACK_LEFT1 && saber->state<= ATTACK_LEFT4){
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == ATTACK_LEFT4)? ATTACK_LEFT1:saber->state+1;
			saber->state_count = 0;
		}
	}

	if (saber->state >= ATTACK_RIGHT1 && saber->state<= ATTACK_RIGHT4){
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == ATTACK_RIGHT4)? ATTACK_RIGHT1:saber->state+1;
			saber->state_count = 0;
		}
	}

	// update skill
	if (saber->state >= SKILL_LEFT1 && saber->state<= SKILL_LEFT4){
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == SKILL_LEFT4)? SKILL_LEFT1:saber->state+1;
			saber->state_count = 0;
		}
	}

	if (saber->state >= SKILL_RIGHT1 && saber->state<= SKILL_RIGHT4){
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == SKILL_RIGHT4)? SKILL_RIGHT1:saber->state+1;
			saber->state_count = 0;
		}
	}

	if (saber->state >= SKILL_LEFT1 && saber->state<= SKILL_LEFT4){
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == SKILL_LEFT4)? SKILL_LEFT1:saber->state+1;
			saber->state_count = 0;
		}
	}

	if (saber->state >= POSE_RIGHT1 && saber->state<= POSE_RIGHT2){
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == SKILL_RIGHT4)? SKILL_RIGHT1:saber->state+1;
			saber->state_count = 0;
		}
	}

}

void stop(saber_t *saber){
	saber-> vx =0;
	saber-> vy =0;
	if (saber -> FaceDirection == 1){
		saber -> state = WALK_RIGHT1;
	}else{
		saber -> state = WALK_LEFT1;
	}

}

void update_helper(saber_t*saber, int state_start, int state_end){
	if (saber->state >= state_start && saber->state<= state_end){
		if (saber->state_count ++ > STATE_COUNT_MAX){
			saber->state = (saber->state == state_end)? state_start:saber->state+1;
			saber->state_count = 0;
		}
	}
}





usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00014870 memsz 0x00014870 flags r-x
    LOAD off    0x00015890 vaddr 0x10014890 paddr 0x10016380 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00017e70 vaddr 0x10017e70 paddr 0x10017e70 align 2**12
         filesz 0x00000000 memsz 0x00000194 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013c00  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a60  10013e30  10013e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  10014890  10016380  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000194  10017e70  10017e70  00017e70  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00017380  2**0
                  CONTENTS
  7 .sdram        00000000  10018004  10018004  00017380  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017380  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001020  00000000  00000000  000173a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002695e  00000000  00000000  000183c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009c2c  00000000  00000000  0003ed26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c699  00000000  00000000  00048952  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000028d4  00000000  00000000  00054fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000421e  00000000  00000000  000578c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a3c  00000000  00000000  0005bade  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007351c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019b0  00000000  00000000  00073560  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00078832  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00078835  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00078841  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00078842  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00078843  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00078847  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007884b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007884f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007885a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00078865  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00078870  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002b  00000000  00000000  00078878  2**0
                  CONTENTS, READONLY
 30 .jdi          00005256  00000000  00000000  000788a3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000773bc  00000000  00000000  0007daf9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10013e30 l    d  .rodata	00000000 .rodata
10014890 l    d  .rwdata	00000000 .rwdata
10017e70 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10018004 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 monster_logic.c
00000000 l    df *ABS*	00000000 saber_logic.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_main.c
10017e8c l     O .bss	00000002 ctl_reg
10017e8e l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
10014890 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
100146da l     O .rodata	00000010 zeroes.4404
10007868 l     F .text	000000bc __sbprintf
100146ea l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10007a78 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100095d0 l     F .text	00000008 __fp_unlock
100095e4 l     F .text	0000019c __sinit.part.1
10009780 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
10014cd4 l     O .rwdata	00000020 lc_ctype_charset
10014cb4 l     O .rwdata	00000020 lc_message_charset
10014cf4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014718 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000cc54 l     F .text	000000fc __sprint_r.part.0
1001483c l     O .rodata	00000010 zeroes.4349
1000e290 l     F .text	000000bc __sbprintf
1001484c l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_close.c
1001155c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011670 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1001169c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10011790 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10011878 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10011964 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10011b40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10016370 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
10011db4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10011e98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10011fd4 l     F .text	00000034 alt_dev_reg
100152dc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100122b0 l     F .text	0000020c altera_avalon_jtag_uart_irq
100124bc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10012d98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100131f8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10013358 l     F .text	0000003c alt_get_errno
10013394 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10017ed8 g     O .bss	00000004 alt_instruction_exception_handler
1000c298 g     F .text	00000074 _mprec_log10
10000ba4 g     F .text	00000084 game_update
1000c384 g     F .text	0000008c __any_on
1000e844 g     F .text	00000054 _isatty_r
10014724 g     O .rodata	00000028 __mprec_tinytens
10011a7c g     F .text	0000007c alt_main
10005380 g     F .text	000000c0 _puts_r
10017f04 g     O .bss	00000100 alt_irq
1000e898 g     F .text	00000060 _lseek_r
10016380 g       *ABS*	00000000 __flash_rwdata_start
10010210 g     F .text	00000088 .hidden __eqdf2
100006a0 g     F .text	00000100 round3
10018004 g       *ABS*	00000000 __alt_heap_start
10005344 g     F .text	0000003c printf
1000eab0 g     F .text	0000009c _wcrtomb_r
10017e9a g     O .bss	00000002 usb_ctl_val
1000cb14 g     F .text	0000005c __sseek
10009930 g     F .text	00000010 __sinit
10017e94 g     O .bss	00000004 keycode
1000e958 g     F .text	00000140 __swbuf_r
1000a404 g     F .text	0000007c _setlocale_r
10009788 g     F .text	00000078 __sfmoreglue
10011b1c g     F .text	00000024 __malloc_unlock
1000155c g     F .text	00000144 saber_be_attacked_check
10003538 g     F .text	00000080 UsbGetRetryCnt
1000b0d4 g     F .text	0000015c memmove
1000026c g     F .text	00000088 IO_init
10009918 g     F .text	00000018 _cleanup
1000b358 g     F .text	000000a8 _Balloc
10010298 g     F .text	000000dc .hidden __gtdf2
10013780 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10011df0 g     F .text	00000078 times
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000e7e8 g     F .text	0000005c _fstat_r
10017ebc g     O .bss	00000004 errno
1000ca90 g     F .text	00000008 __seofread
10004138 g     F .text	00000308 get_keycode
10017ec4 g     O .bss	00000004 alt_argv
1001e33c g       *ABS*	00000000 _gp
10011e68 g     F .text	00000030 usleep
1001515c g     O .rwdata	00000180 alt_fd_list
100137a4 g     F .text	00000090 alt_find_dev
1000af8c g     F .text	00000148 memcpy
10005568 g     F .text	00000008 _times_r
100095d8 g     F .text	0000000c _cleanup_r
100050b8 g     F .text	000000dc .hidden __floatsidf
100132dc g     F .text	0000007c alt_io_redirect
10017e9c g     O .bss	00000001 data_size
10004fc4 g     F .text	000000f4 .hidden __ltdf2
10013e30 g       *ABS*	00000000 __DTOR_END__
10005440 g     F .text	00000014 puts
10013a00 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10017e70 g     O .bss	00000004 developer_mode
1000c974 g     F .text	00000074 __fpclassifyd
1000c1f4 g     F .text	000000a4 __ratio
1000e274 g     F .text	0000001c __vfiprintf_internal
100126b4 g     F .text	0000021c altera_avalon_jtag_uart_read
10005314 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10004538 g     F .text	00000064 .hidden __udivsi3
100117cc g     F .text	000000ac isatty
10014774 g     O .rodata	000000c8 __mprec_tens
10003638 g     F .text	00000b00 usb_init
1000a480 g     F .text	0000000c __locale_charset
100016a0 g     F .text	000003b8 monster_update
10017eb8 g     O .bss	00000004 __malloc_top_pad
10002bc4 g     F .text	00000268 UsbGetConfigDesc2
10016348 g     O .rwdata	00000004 __mb_cur_max
1000a4b0 g     F .text	0000000c _localeconv_r
1000b78c g     F .text	0000003c __i2b
10009db4 g     F .text	000004c8 __sfvwrite_r
10001db8 g     F .text	000000ec press_d
10017e9e g     O .bss	00000002 intStat
1000c9e8 g     F .text	00000054 _sbrk_r
1000e8f8 g     F .text	00000060 _read_r
10016368 g     O .rwdata	00000004 alt_max_fd
1000e4dc g     F .text	000000f0 _fclose_r
100095a0 g     F .text	00000030 fflush
10017eb4 g     O .bss	00000004 __malloc_max_sbrked_mem
1000f964 g     F .text	000008ac .hidden __adddf3
1000bf9c g     F .text	0000010c __b2d
1000f3a0 g     F .text	000005c4 .hidden __umoddi3
100119a0 g     F .text	000000dc lseek
10016340 g     O .rwdata	00000004 _global_impure_ptr
1000c410 g     F .text	00000564 _realloc_r
10018004 g       *ABS*	00000000 __bss_end
10013108 g     F .text	000000f0 alt_iic_isr_register
10013678 g     F .text	00000108 alt_tick
1000eda4 g     F .text	000005fc .hidden __udivdi3
1000e744 g     F .text	00000024 _fputwc_r
1001474c g     O .rodata	00000028 __mprec_bigtens
1000b570 g     F .text	00000104 __s2b
10005194 g     F .text	000000a8 .hidden __floatunsidf
1000bcdc g     F .text	00000060 __mcmp
10002614 g     F .text	00000100 UsbSetAddress
10009950 g     F .text	00000018 __fp_lock_all
100130bc g     F .text	0000004c alt_ic_irq_enabled
100135dc g     F .text	0000009c alt_alarm_stop
10017ecc g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10015134 g     O .rwdata	00000028 alt_dev_null
10012d78 g     F .text	00000020 alt_dcache_flush_all
1000b674 g     F .text	00000068 __hi0bits
10000364 g     F .text	00000068 IO_read
100114dc g     F .text	00000080 .hidden __fixdfsi
10001cd0 g     F .text	000000e8 press_a
10016380 g       *ABS*	00000000 __ram_rwdata_end
10016360 g     O .rwdata	00000008 alt_dev_list
10011ed4 g     F .text	00000100 write
10014890 g       *ABS*	00000000 __ram_rodata_end
100116d8 g     F .text	000000b8 fstat
10004fc4 g     F .text	000000f4 .hidden __ledf2
100035b8 g     F .text	00000080 UsbPrintMem
1000ba54 g     F .text	00000140 __pow5mult
1000cd68 g     F .text	0000150c ___vfiprintf_internal_r
10017eac g     O .bss	00000004 __nlocale_changed
1000459c g     F .text	00000058 .hidden __umodsi3
10017e74 g     O .bss	00000004 blood_state
10000c28 g     F .text	00000330 gamefile_update
10018004 g       *ABS*	00000000 end
100121f0 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10013e30 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000523c g     F .text	00000064 .hidden __clzsi2
100128d0 g     F .text	00000224 altera_avalon_jtag_uart_write
10009940 g     F .text	00000004 __sfp_lock_acquire
1000aea8 g     F .text	000000e4 memchr
10005570 g     F .text	000022dc ___vfprintf_internal_r
10002f2c g     F .text	00000100 UsbClassRequest
10009aa4 g     F .text	00000310 _free_r
1000a48c g     F .text	00000010 __locale_mb_cur_max
10013c7c g     F .text	00000180 __call_exitprocs
10017ea8 g     O .bss	00000004 __mlocale_changed
10017e78 g     O .bss	00000004 win
1001634c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100023e0 g     F .text	000000e4 update_helper
10017ed0 g     O .bss	00000004 _alt_tick_rate
1000546c g     F .text	00000064 rand
100008a0 g     F .text	0000010c round5
1000bb94 g     F .text	00000148 __lshift
10017ed4 g     O .bss	00000004 _alt_nticks
10011b7c g     F .text	00000104 read
10012040 g     F .text	0000004c alt_sys_init
10013b64 g     F .text	00000118 __register_exitproc
1001633c g     O .rwdata	00000004 game_file
1000b7c8 g     F .text	0000028c __multiply
1001255c g     F .text	00000068 altera_avalon_jtag_uart_close
100052a0 g     F .text	00000028 .hidden __mulsi3
10014890 g       *ABS*	00000000 __ram_rwdata_start
10013e30 g       *ABS*	00000000 __ram_rodata_start
10017edc g     O .bss	00000028 __malloc_current_mallinfo
1000c0a8 g     F .text	0000014c __d2b
10002714 g     F .text	00000148 UsbGetDeviceDesc1
1001208c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1001393c g     F .text	000000c4 alt_get_fd
10012c20 g     F .text	00000158 alt_busy_sleep
1000e3ac g     F .text	00000054 _close_r
10013ae8 g     F .text	0000007c memcmp
1001214c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100020cc g     F .text	000000c0 saber_init
10018004 g       *ABS*	00000000 __alt_stack_base
1001219c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10007924 g     F .text	00000154 __swsetup_r
100045f4 g     F .text	000009d0 .hidden __divdf3
10009800 g     F .text	00000118 __sfp
1000c30c g     F .text	00000078 __copybits
100003cc g     F .text	000000b8 frame_clock
10014d2c g     O .rwdata	00000408 __malloc_av_
1000994c g     F .text	00000004 __sinit_lock_release
10010374 g     F .text	0000086c .hidden __muldf3
1000ca3c g     F .text	00000054 __sread
100034b4 g     F .text	00000084 UsbWaitTDListDone
10013834 g     F .text	00000108 alt_find_file
10012dd4 g     F .text	000000a4 alt_dev_llist_insert
10011af8 g     F .text	00000024 __malloc_lock
10011d04 g     F .text	000000b0 sbrk
10001144 g     F .text	00000138 monster_init
10009544 g     F .text	0000005c _fflush_r
1000e400 g     F .text	000000dc _calloc_r
10017ea0 g     O .bss	00000001 hot_plug_count
10017e70 g       *ABS*	00000000 __bss_start
1000b230 g     F .text	00000128 memset
10000f58 g     F .text	000001ec main
10017ec8 g     O .bss	00000004 alt_envp
10017eb0 g     O .bss	00000004 __malloc_max_total_mem
100120ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002e2c g     F .text	00000100 UsbSetConfig
1000ea98 g     F .text	00000018 __swbuf
10005454 g     F .text	00000018 srand
1000cb70 g     F .text	00000008 __sclose
10017e7c g     O .bss	00000004 event
18000000 g       *ABS*	00000000 __alt_heap_limit
1000e5cc g     F .text	00000014 fclose
10007ca0 g     F .text	00001688 _dtoa_r
1000a69c g     F .text	0000080c _malloc_r
1000ec0c g     F .text	00000030 __ascii_wctomb
10017e80 g     O .bss	00000004 saber_state
1000200c g     F .text	000000c0 press_l
10000484 g     F .text	0000011c round1
1001636c g     O .rwdata	00000004 alt_errno
1000a27c g     F .text	000000c4 _fwalk
1000127c g     F .text	000002e0 monster_hit_check
10004440 g     F .text	00000084 .hidden __divsi3
10009980 g     F .text	00000124 _malloc_trim_r
1000302c g     F .text	00000148 UsbGetHidDesc
10013e30 g       *ABS*	00000000 __CTOR_END__
10001b94 g     F .text	0000013c press_s
1000cb78 g     F .text	000000dc strcmp
10013e30 g       *ABS*	00000000 __flash_rodata_start
10013e30 g       *ABS*	00000000 __DTOR_LIST__
100005a0 g     F .text	00000100 round2
10010210 g     F .text	00000088 .hidden __nedf2
1000251c g     F .text	00000044 UsbRead
10012008 g     F .text	00000038 alt_irq_init
10011c80 g     F .text	00000084 alt_release_fd
10014590 g     O .rodata	00000100 .hidden __clz_tab
10017ea4 g     O .bss	00000004 _PathLocale
10013a9c g     F .text	00000014 atexit
1000e34c g     F .text	00000060 _write_r
100009ac g     F .text	000001f8 key_event
1000a4bc g     F .text	00000018 setlocale
10017e84 g     O .bss	00000004 monster_state
10016344 g     O .rwdata	00000004 _impure_ptr
10017ec0 g     O .bss	00000004 alt_argc
10009328 g     F .text	0000021c __sflush_r
10012ed8 g     F .text	00000060 _do_dtors
1000a4a8 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000bf38 g     F .text	00000064 __ulp
10009968 g     F .text	00000018 __fp_unlock_all
10017e98 g     O .bss	00000001 toggle
10016358 g     O .rwdata	00000008 alt_fs_list
10003174 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000a4d4 g     F .text	0000000c localeconv
10012f58 g     F .text	00000050 alt_ic_isr_register
10016380 g       *ABS*	00000000 _edata
10018004 g       *ABS*	00000000 _end
100024c4 g     F .text	00000058 UsbWrite
1000e5e0 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100125c4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10017ea2 g     O .bss	00000002 code
10013030 g     F .text	0000008c alt_ic_irq_disable
1000ca98 g     F .text	0000007c __swrite
10001a58 g     F .text	0000013c press_w
10016350 g     O .rwdata	00000004 __malloc_trim_threshold
1000a49c g     F .text	0000000c __locale_msgcharset
10017e90 g     O .bss	00000002 fs_device
10013ab0 g     F .text	00000038 exit
1000a340 g     F .text	000000c4 _fwalk_reent
1000bd3c g     F .text	000001fc __mdiff
100044c4 g     F .text	00000074 .hidden __modsi3
10001f3c g     F .text	000000d0 press_k
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10009944 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100007a0 g     F .text	00000100 round4
100002f4 g     F .text	00000070 IO_write
1000218c g     F .text	000001fc update
10013dfc g     F .text	00000034 _exit
10012af4 g     F .text	0000012c alt_alarm_start
1000ec98 g     F .text	0000010c .hidden __muldi3
10001ea4 g     F .text	00000098 press_j
1000a4e0 g     F .text	000001bc __smakebuf_r
100054d0 g     F .text	00000098 strlen
10013480 g     F .text	0000015c open
10010298 g     F .text	000000dc .hidden __gedf2
10002388 g     F .text	00000058 stop
100052c8 g     F .text	0000004c clock
10016354 g     O .rwdata	00000004 __wctomb
1000cd50 g     F .text	00000018 __sprint_r
10012f38 g     F .text	00000020 alt_icache_flush_all
10016374 g     O .rwdata	00000004 alt_priority_mask
10012fa8 g     F .text	00000088 alt_ic_irq_enable
1000784c g     F .text	0000001c __vfprintf_internal
10017e88 g     O .bss	00000004 Excalibur_state
1000ec3c g     F .text	0000005c _wctomb_r
10010be0 g     F .text	000008fc .hidden __subdf3
1000b6dc g     F .text	000000b0 __lo0bits
10002a34 g     F .text	00000190 UsbGetConfigDesc1
10016378 g     O .rwdata	00000008 alt_alarm_list
10012e78 g     F .text	00000060 _do_ctors
10002560 g     F .text	000000b4 UsbSoftReset
1000eb4c g     F .text	000000c0 wcrtomb
10011598 g     F .text	000000d8 close
1000285c g     F .text	000001d8 UsbGetDeviceDesc2
100118e0 g     F .text	00000084 alt_load
1000e768 g     F .text	00000080 fputwc
10009948 g     F .text	00000004 __sinit_lock_acquire
1000b428 g     F .text	00000148 __multadd
1000b400 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	109fc104 	addi	r2,r2,32516
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	109fc104 	addi	r2,r2,32516
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6e717 	ldw	r2,-25700(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6e717 	ldw	r2,-25700(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b8cf14 	ori	gp,gp,58172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	109f9c14 	ori	r2,r2,32368

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18e00114 	ori	r3,r3,32772

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00118e00 	call	100118e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0011a7c0 	call	10011a7c <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00800804 	movi	r2,32
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00800c04 	movi	r2,48
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801404 	movi	r2,80
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801004 	movi	r2,64
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00801c04 	movi	r2,112
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00801804 	movi	r2,96
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00800c04 	movi	r2,48
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00800804 	movi	r2,32
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00800804 	movi	r2,32
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00800c04 	movi	r2,48
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	0001883a 	nop
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f4:	defffd04 	addi	sp,sp,-12
100002f8:	df000215 	stw	fp,8(sp)
100002fc:	df000204 	addi	fp,sp,8
10000300:	2007883a 	mov	r3,r4
10000304:	2805883a 	mov	r2,r5
10000308:	e0fffe05 	stb	r3,-8(fp)
1000030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000310:	00801c04 	movi	r2,112
10000314:	e0fffe03 	ldbu	r3,-8(fp)
10000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000031c:	00801804 	movi	r2,96
10000320:	e0ffff0b 	ldhu	r3,-4(fp)
10000324:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000328:	00800c04 	movi	r2,48
1000032c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000330:	00801004 	movi	r2,64
10000334:	10000005 	stb	zero,0(r2)

	// Reset OTG chip
	*otg_hpi_w = 1;
10000338:	00801004 	movi	r2,64
1000033c:	00c00044 	movi	r3,1
10000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000344:	00800c04 	movi	r2,48
10000348:	00c00044 	movi	r3,1
1000034c:	10c00005 	stb	r3,0(r2)

}
10000350:	0001883a 	nop
10000354:	e037883a 	mov	sp,fp
10000358:	df000017 	ldw	fp,0(sp)
1000035c:	dec00104 	addi	sp,sp,4
10000360:	f800283a 	ret

10000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000364:	defffd04 	addi	sp,sp,-12
10000368:	df000215 	stw	fp,8(sp)
1000036c:	df000204 	addi	fp,sp,8
10000370:	2005883a 	mov	r2,r4
10000374:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
10000378:	00801c04 	movi	r2,112
1000037c:	e0ffff03 	ldbu	r3,-4(fp)
10000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000384:	00800c04 	movi	r2,48
10000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000038c:	00801404 	movi	r2,80
10000390:	10000005 	stb	zero,0(r2)

	temp = *otg_hpi_data;
10000394:	00801804 	movi	r2,96
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe0d 	sth	r2,-8(fp)
	// Reset OTG chip
	*otg_hpi_r = 1;
100003a0:	00801404 	movi	r2,80
100003a4:	00c00044 	movi	r3,1
100003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003ac:	00800c04 	movi	r2,48
100003b0:	00c00044 	movi	r3,1
100003b4:	10c00005 	stb	r3,0(r2)

	return temp;
100003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100003bc:	e037883a 	mov	sp,fp
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00104 	addi	sp,sp,4
100003c8:	f800283a 	ret

100003cc <frame_clock>:
enum Key_event
{PRESS_UP = 1, PRESS_DOWN, PRESS_LEFT, PRESS_RIGHT, PRESS_ATK, PRESS_SKILL
}event;


void frame_clock (double frame_time){
100003cc:	defff804 	addi	sp,sp,-32
100003d0:	dfc00715 	stw	ra,28(sp)
100003d4:	df000615 	stw	fp,24(sp)
100003d8:	df000604 	addi	fp,sp,24
100003dc:	e13ffe15 	stw	r4,-8(fp)
100003e0:	e17fff15 	stw	r5,-4(fp)
	double time_to_switch = frame_time;
100003e4:	e0bffe17 	ldw	r2,-8(fp)
100003e8:	e0bffb15 	stw	r2,-20(fp)
100003ec:	e0bfff17 	ldw	r2,-4(fp)
100003f0:	e0bffc15 	stw	r2,-16(fp)
	clock_t begin = clock();
100003f4:	00052c80 	call	100052c8 <clock>
100003f8:	e0bffd15 	stw	r2,-12(fp)
	clock_t end = clock();
100003fc:	00052c80 	call	100052c8 <clock>
10000400:	e0bffa15 	stw	r2,-24(fp)
	while ((double)(end-begin)/CLOCKS_PER_SEC <time_to_switch){
10000404:	00000206 	br	10000410 <frame_clock+0x44>
		end = clock();
10000408:	00052c80 	call	100052c8 <clock>
1000040c:	e0bffa15 	stw	r2,-24(fp)

void frame_clock (double frame_time){
	double time_to_switch = frame_time;
	clock_t begin = clock();
	clock_t end = clock();
	while ((double)(end-begin)/CLOCKS_PER_SEC <time_to_switch){
10000410:	e0fffa17 	ldw	r3,-24(fp)
10000414:	e0bffd17 	ldw	r2,-12(fp)
10000418:	1885c83a 	sub	r2,r3,r2
1000041c:	1009883a 	mov	r4,r2
10000420:	00051940 	call	10005194 <__floatunsidf>
10000424:	1011883a 	mov	r8,r2
10000428:	1813883a 	mov	r9,r3
1000042c:	000d883a 	mov	r6,zero
10000430:	01d023f4 	movhi	r7,16527
10000434:	39d00004 	addi	r7,r7,16384
10000438:	4009883a 	mov	r4,r8
1000043c:	480b883a 	mov	r5,r9
10000440:	00045f40 	call	100045f4 <__divdf3>
10000444:	1009883a 	mov	r4,r2
10000448:	180b883a 	mov	r5,r3
1000044c:	2005883a 	mov	r2,r4
10000450:	2807883a 	mov	r3,r5
10000454:	e1bffb17 	ldw	r6,-20(fp)
10000458:	e1fffc17 	ldw	r7,-16(fp)
1000045c:	1009883a 	mov	r4,r2
10000460:	180b883a 	mov	r5,r3
10000464:	0004fc40 	call	10004fc4 <__ledf2>
10000468:	103fe716 	blt	r2,zero,10000408 <__alt_data_end+0xf8000408>
		end = clock();
	}
}
1000046c:	0001883a 	nop
10000470:	e037883a 	mov	sp,fp
10000474:	dfc00117 	ldw	ra,4(sp)
10000478:	df000017 	ldw	fp,0(sp)
1000047c:	dec00204 	addi	sp,sp,8
10000480:	f800283a 	ret

10000484 <round1>:


void round1 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
10000484:	defff504 	addi	sp,sp,-44
10000488:	dfc00a15 	stw	ra,40(sp)
1000048c:	df000915 	stw	fp,36(sp)
10000490:	df000904 	addi	fp,sp,36
10000494:	e13ffc15 	stw	r4,-16(fp)
10000498:	e17ffd15 	stw	r5,-12(fp)
1000049c:	e1bffe15 	stw	r6,-8(fp)
100004a0:	e1ffff15 	stw	r7,-4(fp)
	saber_init(saber);
100004a4:	e13ffd17 	ldw	r4,-12(fp)
100004a8:	00020cc0 	call	100020cc <saber_init>
	if (developer_mode){saber->Excalibur_remain = 30;}
100004ac:	d0a6cd17 	ldw	r2,-25804(gp)
100004b0:	10000326 	beq	r2,zero,100004c0 <round1+0x3c>
100004b4:	e0bffd17 	ldw	r2,-12(fp)
100004b8:	00c00784 	movi	r3,30
100004bc:	10c00c15 	stw	r3,48(r2)
	monster_init(snowman, 1, 1, 30, 15, 1, -30, 20,40);
100004c0:	00800a04 	movi	r2,40
100004c4:	d8800415 	stw	r2,16(sp)
100004c8:	00800504 	movi	r2,20
100004cc:	d8800315 	stw	r2,12(sp)
100004d0:	00bff884 	movi	r2,-30
100004d4:	d8800215 	stw	r2,8(sp)
100004d8:	00800044 	movi	r2,1
100004dc:	d8800115 	stw	r2,4(sp)
100004e0:	008003c4 	movi	r2,15
100004e4:	d8800015 	stw	r2,0(sp)
100004e8:	01c00784 	movi	r7,30
100004ec:	01800044 	movi	r6,1
100004f0:	01400044 	movi	r5,1
100004f4:	e13ffe17 	ldw	r4,-8(fp)
100004f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 0, 1, 30, 25, 1, -20, 80,40);
100004fc:	00800a04 	movi	r2,40
10000500:	d8800415 	stw	r2,16(sp)
10000504:	00801404 	movi	r2,80
10000508:	d8800315 	stw	r2,12(sp)
1000050c:	00bffb04 	movi	r2,-20
10000510:	d8800215 	stw	r2,8(sp)
10000514:	00800044 	movi	r2,1
10000518:	d8800115 	stw	r2,4(sp)
1000051c:	00800644 	movi	r2,25
10000520:	d8800015 	stw	r2,0(sp)
10000524:	01c00784 	movi	r7,30
10000528:	01800044 	movi	r6,1
1000052c:	000b883a 	mov	r5,zero
10000530:	e13fff17 	ldw	r4,-4(fp)
10000534:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000538:	00000d06 	br	10000570 <round1+0xec>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000053c:	e1ffff17 	ldw	r7,-4(fp)
10000540:	e1bffe17 	ldw	r6,-8(fp)
10000544:	e17ffd17 	ldw	r5,-12(fp)
10000548:	e13ffc17 	ldw	r4,-16(fp)
1000054c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000550:	e1ffff17 	ldw	r7,-4(fp)
10000554:	e1bffe17 	ldw	r6,-8(fp)
10000558:	e17ffd17 	ldw	r5,-12(fp)
1000055c:	e13ffc17 	ldw	r4,-16(fp)
10000560:	0000ba40 	call	10000ba4 <game_update>
		if (snowman->exist == 0){
10000564:	e0bffe17 	ldw	r2,-8(fp)
10000568:	10800017 	ldw	r2,0(r2)
1000056c:	10000526 	beq	r2,zero,10000584 <round1+0x100>
void round1 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	saber_init(saber);
	if (developer_mode){saber->Excalibur_remain = 30;}
	monster_init(snowman, 1, 1, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 0, 1, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
10000570:	e0bffc17 	ldw	r2,-16(fp)
10000574:	10800017 	ldw	r2,0(r2)
10000578:	10800060 	cmpeqi	r2,r2,1
1000057c:	103fef1e 	bne	r2,zero,1000053c <__alt_data_end+0xf800053c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (snowman->exist == 0){
			break;
		}
	}
}
10000580:	00000106 	br	10000588 <round1+0x104>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (snowman->exist == 0){
			break;
10000584:	0001883a 	nop
		}
	}
}
10000588:	0001883a 	nop
1000058c:	e037883a 	mov	sp,fp
10000590:	dfc00117 	ldw	ra,4(sp)
10000594:	df000017 	ldw	fp,0(sp)
10000598:	dec00204 	addi	sp,sp,8
1000059c:	f800283a 	ret

100005a0 <round2>:

void round2 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
100005a0:	defff504 	addi	sp,sp,-44
100005a4:	dfc00a15 	stw	ra,40(sp)
100005a8:	df000915 	stw	fp,36(sp)
100005ac:	df000904 	addi	fp,sp,36
100005b0:	e13ffc15 	stw	r4,-16(fp)
100005b4:	e17ffd15 	stw	r5,-12(fp)
100005b8:	e1bffe15 	stw	r6,-8(fp)
100005bc:	e1ffff15 	stw	r7,-4(fp)
	monster_init(snowman, 1, 2, 30, 15, 1, -30, 20,40);
100005c0:	00800a04 	movi	r2,40
100005c4:	d8800415 	stw	r2,16(sp)
100005c8:	00800504 	movi	r2,20
100005cc:	d8800315 	stw	r2,12(sp)
100005d0:	00bff884 	movi	r2,-30
100005d4:	d8800215 	stw	r2,8(sp)
100005d8:	00800044 	movi	r2,1
100005dc:	d8800115 	stw	r2,4(sp)
100005e0:	008003c4 	movi	r2,15
100005e4:	d8800015 	stw	r2,0(sp)
100005e8:	01c00784 	movi	r7,30
100005ec:	01800084 	movi	r6,2
100005f0:	01400044 	movi	r5,1
100005f4:	e13ffe17 	ldw	r4,-8(fp)
100005f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 0, 2, 30, 25, 1, -20, 80,40);
100005fc:	00800a04 	movi	r2,40
10000600:	d8800415 	stw	r2,16(sp)
10000604:	00801404 	movi	r2,80
10000608:	d8800315 	stw	r2,12(sp)
1000060c:	00bffb04 	movi	r2,-20
10000610:	d8800215 	stw	r2,8(sp)
10000614:	00800044 	movi	r2,1
10000618:	d8800115 	stw	r2,4(sp)
1000061c:	00800644 	movi	r2,25
10000620:	d8800015 	stw	r2,0(sp)
10000624:	01c00784 	movi	r7,30
10000628:	01800084 	movi	r6,2
1000062c:	000b883a 	mov	r5,zero
10000630:	e13fff17 	ldw	r4,-4(fp)
10000634:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000638:	00000d06 	br	10000670 <round2+0xd0>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000063c:	e1ffff17 	ldw	r7,-4(fp)
10000640:	e1bffe17 	ldw	r6,-8(fp)
10000644:	e17ffd17 	ldw	r5,-12(fp)
10000648:	e13ffc17 	ldw	r4,-16(fp)
1000064c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000650:	e1ffff17 	ldw	r7,-4(fp)
10000654:	e1bffe17 	ldw	r6,-8(fp)
10000658:	e17ffd17 	ldw	r5,-12(fp)
1000065c:	e13ffc17 	ldw	r4,-16(fp)
10000660:	0000ba40 	call	10000ba4 <game_update>
		if (snowman->exist == 0){
10000664:	e0bffe17 	ldw	r2,-8(fp)
10000668:	10800017 	ldw	r2,0(r2)
1000066c:	10000526 	beq	r2,zero,10000684 <round2+0xe4>
}

void round2 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	monster_init(snowman, 1, 2, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 0, 2, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
10000670:	e0bffc17 	ldw	r2,-16(fp)
10000674:	10800017 	ldw	r2,0(r2)
10000678:	10800060 	cmpeqi	r2,r2,1
1000067c:	103fef1e 	bne	r2,zero,1000063c <__alt_data_end+0xf800063c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (snowman->exist == 0){
			break;
		}
	}
}
10000680:	00000106 	br	10000688 <round2+0xe8>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (snowman->exist == 0){
			break;
10000684:	0001883a 	nop
		}
	}
}
10000688:	0001883a 	nop
1000068c:	e037883a 	mov	sp,fp
10000690:	dfc00117 	ldw	ra,4(sp)
10000694:	df000017 	ldw	fp,0(sp)
10000698:	dec00204 	addi	sp,sp,8
1000069c:	f800283a 	ret

100006a0 <round3>:


void round3 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
100006a0:	defff504 	addi	sp,sp,-44
100006a4:	dfc00a15 	stw	ra,40(sp)
100006a8:	df000915 	stw	fp,36(sp)
100006ac:	df000904 	addi	fp,sp,36
100006b0:	e13ffc15 	stw	r4,-16(fp)
100006b4:	e17ffd15 	stw	r5,-12(fp)
100006b8:	e1bffe15 	stw	r6,-8(fp)
100006bc:	e1ffff15 	stw	r7,-4(fp)
	monster_init(snowman, 0, 3, 30, 15, 1, -30, 20,40);
100006c0:	00800a04 	movi	r2,40
100006c4:	d8800415 	stw	r2,16(sp)
100006c8:	00800504 	movi	r2,20
100006cc:	d8800315 	stw	r2,12(sp)
100006d0:	00bff884 	movi	r2,-30
100006d4:	d8800215 	stw	r2,8(sp)
100006d8:	00800044 	movi	r2,1
100006dc:	d8800115 	stw	r2,4(sp)
100006e0:	008003c4 	movi	r2,15
100006e4:	d8800015 	stw	r2,0(sp)
100006e8:	01c00784 	movi	r7,30
100006ec:	018000c4 	movi	r6,3
100006f0:	000b883a 	mov	r5,zero
100006f4:	e13ffe17 	ldw	r4,-8(fp)
100006f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 1, 2, 30, 25, 1, -20, 80,40);
100006fc:	00800a04 	movi	r2,40
10000700:	d8800415 	stw	r2,16(sp)
10000704:	00801404 	movi	r2,80
10000708:	d8800315 	stw	r2,12(sp)
1000070c:	00bffb04 	movi	r2,-20
10000710:	d8800215 	stw	r2,8(sp)
10000714:	00800044 	movi	r2,1
10000718:	d8800115 	stw	r2,4(sp)
1000071c:	00800644 	movi	r2,25
10000720:	d8800015 	stw	r2,0(sp)
10000724:	01c00784 	movi	r7,30
10000728:	01800084 	movi	r6,2
1000072c:	01400044 	movi	r5,1
10000730:	e13fff17 	ldw	r4,-4(fp)
10000734:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000738:	00000d06 	br	10000770 <round3+0xd0>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000073c:	e1ffff17 	ldw	r7,-4(fp)
10000740:	e1bffe17 	ldw	r6,-8(fp)
10000744:	e17ffd17 	ldw	r5,-12(fp)
10000748:	e13ffc17 	ldw	r4,-16(fp)
1000074c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000750:	e1ffff17 	ldw	r7,-4(fp)
10000754:	e1bffe17 	ldw	r6,-8(fp)
10000758:	e17ffd17 	ldw	r5,-12(fp)
1000075c:	e13ffc17 	ldw	r4,-16(fp)
10000760:	0000ba40 	call	10000ba4 <game_update>
		if (gingerbreadman->exist == 0){
10000764:	e0bfff17 	ldw	r2,-4(fp)
10000768:	10800017 	ldw	r2,0(r2)
1000076c:	10000526 	beq	r2,zero,10000784 <round3+0xe4>


void round3 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	monster_init(snowman, 0, 3, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 1, 2, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
10000770:	e0bffc17 	ldw	r2,-16(fp)
10000774:	10800017 	ldw	r2,0(r2)
10000778:	10800060 	cmpeqi	r2,r2,1
1000077c:	103fef1e 	bne	r2,zero,1000073c <__alt_data_end+0xf800073c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0){
			break;
		}
	}
}
10000780:	00000106 	br	10000788 <round3+0xe8>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0){
			break;
10000784:	0001883a 	nop
		}
	}
}
10000788:	0001883a 	nop
1000078c:	e037883a 	mov	sp,fp
10000790:	dfc00117 	ldw	ra,4(sp)
10000794:	df000017 	ldw	fp,0(sp)
10000798:	dec00204 	addi	sp,sp,8
1000079c:	f800283a 	ret

100007a0 <round4>:


void round4 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
100007a0:	defff504 	addi	sp,sp,-44
100007a4:	dfc00a15 	stw	ra,40(sp)
100007a8:	df000915 	stw	fp,36(sp)
100007ac:	df000904 	addi	fp,sp,36
100007b0:	e13ffc15 	stw	r4,-16(fp)
100007b4:	e17ffd15 	stw	r5,-12(fp)
100007b8:	e1bffe15 	stw	r6,-8(fp)
100007bc:	e1ffff15 	stw	r7,-4(fp)
	monster_init(snowman, 0, 2, 30, 15, 1, -30, 20,40);
100007c0:	00800a04 	movi	r2,40
100007c4:	d8800415 	stw	r2,16(sp)
100007c8:	00800504 	movi	r2,20
100007cc:	d8800315 	stw	r2,12(sp)
100007d0:	00bff884 	movi	r2,-30
100007d4:	d8800215 	stw	r2,8(sp)
100007d8:	00800044 	movi	r2,1
100007dc:	d8800115 	stw	r2,4(sp)
100007e0:	008003c4 	movi	r2,15
100007e4:	d8800015 	stw	r2,0(sp)
100007e8:	01c00784 	movi	r7,30
100007ec:	01800084 	movi	r6,2
100007f0:	000b883a 	mov	r5,zero
100007f4:	e13ffe17 	ldw	r4,-8(fp)
100007f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 1, 3, 30, 25, 1, -20, 80,40);
100007fc:	00800a04 	movi	r2,40
10000800:	d8800415 	stw	r2,16(sp)
10000804:	00801404 	movi	r2,80
10000808:	d8800315 	stw	r2,12(sp)
1000080c:	00bffb04 	movi	r2,-20
10000810:	d8800215 	stw	r2,8(sp)
10000814:	00800044 	movi	r2,1
10000818:	d8800115 	stw	r2,4(sp)
1000081c:	00800644 	movi	r2,25
10000820:	d8800015 	stw	r2,0(sp)
10000824:	01c00784 	movi	r7,30
10000828:	018000c4 	movi	r6,3
1000082c:	01400044 	movi	r5,1
10000830:	e13fff17 	ldw	r4,-4(fp)
10000834:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000838:	00000d06 	br	10000870 <round4+0xd0>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000083c:	e1ffff17 	ldw	r7,-4(fp)
10000840:	e1bffe17 	ldw	r6,-8(fp)
10000844:	e17ffd17 	ldw	r5,-12(fp)
10000848:	e13ffc17 	ldw	r4,-16(fp)
1000084c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000850:	e1ffff17 	ldw	r7,-4(fp)
10000854:	e1bffe17 	ldw	r6,-8(fp)
10000858:	e17ffd17 	ldw	r5,-12(fp)
1000085c:	e13ffc17 	ldw	r4,-16(fp)
10000860:	0000ba40 	call	10000ba4 <game_update>
		if (gingerbreadman->exist == 0){
10000864:	e0bfff17 	ldw	r2,-4(fp)
10000868:	10800017 	ldw	r2,0(r2)
1000086c:	10000526 	beq	r2,zero,10000884 <round4+0xe4>


void round4 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	monster_init(snowman, 0, 2, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 1, 3, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
10000870:	e0bffc17 	ldw	r2,-16(fp)
10000874:	10800017 	ldw	r2,0(r2)
10000878:	10800060 	cmpeqi	r2,r2,1
1000087c:	103fef1e 	bne	r2,zero,1000083c <__alt_data_end+0xf800083c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0){
			break;
		}
	}
}
10000880:	00000106 	br	10000888 <round4+0xe8>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0){
			break;
10000884:	0001883a 	nop
		}
	}
}
10000888:	0001883a 	nop
1000088c:	e037883a 	mov	sp,fp
10000890:	dfc00117 	ldw	ra,4(sp)
10000894:	df000017 	ldw	fp,0(sp)
10000898:	dec00204 	addi	sp,sp,8
1000089c:	f800283a 	ret

100008a0 <round5>:

void round5 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
100008a0:	defff504 	addi	sp,sp,-44
100008a4:	dfc00a15 	stw	ra,40(sp)
100008a8:	df000915 	stw	fp,36(sp)
100008ac:	df000904 	addi	fp,sp,36
100008b0:	e13ffc15 	stw	r4,-16(fp)
100008b4:	e17ffd15 	stw	r5,-12(fp)
100008b8:	e1bffe15 	stw	r6,-8(fp)
100008bc:	e1ffff15 	stw	r7,-4(fp)
	monster_init(snowman, 1, 2, 30, 15, 1, -30, 20,40);
100008c0:	00800a04 	movi	r2,40
100008c4:	d8800415 	stw	r2,16(sp)
100008c8:	00800504 	movi	r2,20
100008cc:	d8800315 	stw	r2,12(sp)
100008d0:	00bff884 	movi	r2,-30
100008d4:	d8800215 	stw	r2,8(sp)
100008d8:	00800044 	movi	r2,1
100008dc:	d8800115 	stw	r2,4(sp)
100008e0:	008003c4 	movi	r2,15
100008e4:	d8800015 	stw	r2,0(sp)
100008e8:	01c00784 	movi	r7,30
100008ec:	01800084 	movi	r6,2
100008f0:	01400044 	movi	r5,1
100008f4:	e13ffe17 	ldw	r4,-8(fp)
100008f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 1, 3, 30, 25, 1, -20, 80,40);
100008fc:	00800a04 	movi	r2,40
10000900:	d8800415 	stw	r2,16(sp)
10000904:	00801404 	movi	r2,80
10000908:	d8800315 	stw	r2,12(sp)
1000090c:	00bffb04 	movi	r2,-20
10000910:	d8800215 	stw	r2,8(sp)
10000914:	00800044 	movi	r2,1
10000918:	d8800115 	stw	r2,4(sp)
1000091c:	00800644 	movi	r2,25
10000920:	d8800015 	stw	r2,0(sp)
10000924:	01c00784 	movi	r7,30
10000928:	018000c4 	movi	r6,3
1000092c:	01400044 	movi	r5,1
10000930:	e13fff17 	ldw	r4,-4(fp)
10000934:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000938:	00001006 	br	1000097c <round5+0xdc>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000093c:	e1ffff17 	ldw	r7,-4(fp)
10000940:	e1bffe17 	ldw	r6,-8(fp)
10000944:	e17ffd17 	ldw	r5,-12(fp)
10000948:	e13ffc17 	ldw	r4,-16(fp)
1000094c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000950:	e1ffff17 	ldw	r7,-4(fp)
10000954:	e1bffe17 	ldw	r6,-8(fp)
10000958:	e17ffd17 	ldw	r5,-12(fp)
1000095c:	e13ffc17 	ldw	r4,-16(fp)
10000960:	0000ba40 	call	10000ba4 <game_update>
		if (gingerbreadman->exist == 0 && snowman->exist ==0){
10000964:	e0bfff17 	ldw	r2,-4(fp)
10000968:	10800017 	ldw	r2,0(r2)
1000096c:	1000031e 	bne	r2,zero,1000097c <round5+0xdc>
10000970:	e0bffe17 	ldw	r2,-8(fp)
10000974:	10800017 	ldw	r2,0(r2)
10000978:	10000526 	beq	r2,zero,10000990 <round5+0xf0>
}

void round5 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	monster_init(snowman, 1, 2, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 1, 3, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
1000097c:	e0bffc17 	ldw	r2,-16(fp)
10000980:	10800017 	ldw	r2,0(r2)
10000984:	10800060 	cmpeqi	r2,r2,1
10000988:	103fec1e 	bne	r2,zero,1000093c <__alt_data_end+0xf800093c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0 && snowman->exist ==0){
			break;
		}
	}
}
1000098c:	00000106 	br	10000994 <round5+0xf4>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0 && snowman->exist ==0){
			break;
10000990:	0001883a 	nop
		}
	}
}
10000994:	0001883a 	nop
10000998:	e037883a 	mov	sp,fp
1000099c:	dfc00117 	ldw	ra,4(sp)
100009a0:	df000017 	ldw	fp,0(sp)
100009a4:	dec00204 	addi	sp,sp,8
100009a8:	f800283a 	ret

100009ac <key_event>:

/*
 * key_event: get key codes and update saber information
 * input : saber structure
 */
void key_event(int* game_start, saber_t* saber,monster_t* snowman, monster_t* gingerbreadman){
100009ac:	defff104 	addi	sp,sp,-60
100009b0:	dfc00e15 	stw	ra,56(sp)
100009b4:	df000d15 	stw	fp,52(sp)
100009b8:	df000d04 	addi	fp,sp,52
100009bc:	e13ffc15 	stw	r4,-16(fp)
100009c0:	e17ffd15 	stw	r5,-12(fp)
100009c4:	e1bffe15 	stw	r6,-8(fp)
100009c8:	e1ffff15 	stw	r7,-4(fp)
	unsigned long key;
	int key_array[4];
	int cur_key;
	int walk_x, walk_y;
	walk_x = 0;
100009cc:	e03ff315 	stw	zero,-52(fp)
	walk_y = 0;
100009d0:	e03ff415 	stw	zero,-48(fp)
	key = get_keycode();
100009d4:	00041380 	call	10004138 <get_keycode>
100009d8:	e0bff615 	stw	r2,-40(fp)
	key_array[0]= (key>>24) & 0xff;
100009dc:	e0bff617 	ldw	r2,-40(fp)
100009e0:	1004d63a 	srli	r2,r2,24
100009e4:	e0bff815 	stw	r2,-32(fp)
	key_array[1]= (key>>16) & 0xff;
100009e8:	e0bff617 	ldw	r2,-40(fp)
100009ec:	1004d43a 	srli	r2,r2,16
100009f0:	10803fcc 	andi	r2,r2,255
100009f4:	e0bff915 	stw	r2,-28(fp)
	key_array[2]= (key>>8) & 0xff;
100009f8:	e0bff617 	ldw	r2,-40(fp)
100009fc:	1004d23a 	srli	r2,r2,8
10000a00:	10803fcc 	andi	r2,r2,255
10000a04:	e0bffa15 	stw	r2,-24(fp)
	key_array[3]= key & 0xff;
10000a08:	e0bff617 	ldw	r2,-40(fp)
10000a0c:	10803fcc 	andi	r2,r2,255
10000a10:	e0bffb15 	stw	r2,-20(fp)

	for (int i =0; i< MAX_KEY;i++){
10000a14:	e03ff515 	stw	zero,-44(fp)
10000a18:	00005206 	br	10000b64 <key_event+0x1b8>
		cur_key = key_array[i];
10000a1c:	e0bff517 	ldw	r2,-44(fp)
10000a20:	1085883a 	add	r2,r2,r2
10000a24:	1085883a 	add	r2,r2,r2
10000a28:	e0fff304 	addi	r3,fp,-52
10000a2c:	1885883a 	add	r2,r3,r2
10000a30:	10800504 	addi	r2,r2,20
10000a34:	10800017 	ldw	r2,0(r2)
10000a38:	e0bff715 	stw	r2,-36(fp)
		if (cur_key == KEY_W ){
10000a3c:	e0bff717 	ldw	r2,-36(fp)
10000a40:	10800698 	cmpnei	r2,r2,26
10000a44:	1000041e 	bne	r2,zero,10000a58 <key_event+0xac>
			press_w(saber);
10000a48:	e13ffd17 	ldw	r4,-12(fp)
10000a4c:	0001a580 	call	10001a58 <press_w>
			walk_y = 1;
10000a50:	00800044 	movi	r2,1
10000a54:	e0bff415 	stw	r2,-48(fp)
		}
		if (cur_key == KEY_S){
10000a58:	e0bff717 	ldw	r2,-36(fp)
10000a5c:	10800598 	cmpnei	r2,r2,22
10000a60:	1000041e 	bne	r2,zero,10000a74 <key_event+0xc8>
			press_s(saber);
10000a64:	e13ffd17 	ldw	r4,-12(fp)
10000a68:	0001b940 	call	10001b94 <press_s>
			walk_y = 1;
10000a6c:	00800044 	movi	r2,1
10000a70:	e0bff415 	stw	r2,-48(fp)
		}
		if (cur_key == KEY_A){
10000a74:	e0bff717 	ldw	r2,-36(fp)
10000a78:	10800118 	cmpnei	r2,r2,4
10000a7c:	1000041e 	bne	r2,zero,10000a90 <key_event+0xe4>
			press_a(saber);
10000a80:	e13ffd17 	ldw	r4,-12(fp)
10000a84:	0001cd00 	call	10001cd0 <press_a>
			walk_x = 1;
10000a88:	00800044 	movi	r2,1
10000a8c:	e0bff315 	stw	r2,-52(fp)
		}
		if (cur_key == KEY_D){
10000a90:	e0bff717 	ldw	r2,-36(fp)
10000a94:	108001d8 	cmpnei	r2,r2,7
10000a98:	1000041e 	bne	r2,zero,10000aac <key_event+0x100>
			press_d(saber);
10000a9c:	e13ffd17 	ldw	r4,-12(fp)
10000aa0:	0001db80 	call	10001db8 <press_d>
			walk_x = 1;
10000aa4:	00800044 	movi	r2,1
10000aa8:	e0bff315 	stw	r2,-52(fp)
		}
		if (cur_key == KEY_J){
10000aac:	e0bff717 	ldw	r2,-36(fp)
10000ab0:	10800358 	cmpnei	r2,r2,13
10000ab4:	1000021e 	bne	r2,zero,10000ac0 <key_event+0x114>
			press_j(saber);
10000ab8:	e13ffd17 	ldw	r4,-12(fp)
10000abc:	0001ea40 	call	10001ea4 <press_j>
		}
		if (cur_key == KEY_K){
10000ac0:	e0bff717 	ldw	r2,-36(fp)
10000ac4:	10800398 	cmpnei	r2,r2,14
10000ac8:	1000021e 	bne	r2,zero,10000ad4 <key_event+0x128>
			press_k(saber);
10000acc:	e13ffd17 	ldw	r4,-12(fp)
10000ad0:	0001f3c0 	call	10001f3c <press_k>
		}
		if (cur_key == KEY_L){
10000ad4:	e0bff717 	ldw	r2,-36(fp)
10000ad8:	108003d8 	cmpnei	r2,r2,15
10000adc:	1000021e 	bne	r2,zero,10000ae8 <key_event+0x13c>
			press_l(saber);
10000ae0:	e13ffd17 	ldw	r4,-12(fp)
10000ae4:	000200c0 	call	1000200c <press_l>
		}
		if (cur_key == KEY_ENTER){
10000ae8:	e0bff717 	ldw	r2,-36(fp)
10000aec:	10800a18 	cmpnei	r2,r2,40
10000af0:	1000041e 	bne	r2,zero,10000b04 <key_event+0x158>
			*game_start = 1;
10000af4:	e0bffc17 	ldw	r2,-16(fp)
10000af8:	00c00044 	movi	r3,1
10000afc:	10c00015 	stw	r3,0(r2)
			return;
10000b00:	00002306 	br	10000b90 <key_event+0x1e4>
		}
		if (cur_key == KEY_ESC){
10000b04:	e0bff717 	ldw	r2,-36(fp)
10000b08:	10800a58 	cmpnei	r2,r2,41
10000b0c:	1000041e 	bne	r2,zero,10000b20 <key_event+0x174>
			*game_start = 0;
10000b10:	e0bffc17 	ldw	r2,-16(fp)
10000b14:	10000015 	stw	zero,0(r2)
			developer_mode = 0;
10000b18:	d026cd15 	stw	zero,-25804(gp)
			return;
10000b1c:	00001c06 	br	10000b90 <key_event+0x1e4>
		}
		if (cur_key == KEY_ESC){
10000b20:	e0bff717 	ldw	r2,-36(fp)
10000b24:	10800a58 	cmpnei	r2,r2,41
10000b28:	1000031e 	bne	r2,zero,10000b38 <key_event+0x18c>
			*game_start = 0;
10000b2c:	e0bffc17 	ldw	r2,-16(fp)
10000b30:	10000015 	stw	zero,0(r2)
			return;
10000b34:	00001606 	br	10000b90 <key_event+0x1e4>
		}
		if (cur_key == KEY_BACKSPACE){
10000b38:	e0bff717 	ldw	r2,-36(fp)
10000b3c:	10800a98 	cmpnei	r2,r2,42
10000b40:	1000051e 	bne	r2,zero,10000b58 <key_event+0x1ac>
			*game_start = 0;
10000b44:	e0bffc17 	ldw	r2,-16(fp)
10000b48:	10000015 	stw	zero,0(r2)
			developer_mode = 1;
10000b4c:	00800044 	movi	r2,1
10000b50:	d0a6cd15 	stw	r2,-25804(gp)
			return;
10000b54:	00000e06 	br	10000b90 <key_event+0x1e4>
	key_array[0]= (key>>24) & 0xff;
	key_array[1]= (key>>16) & 0xff;
	key_array[2]= (key>>8) & 0xff;
	key_array[3]= key & 0xff;

	for (int i =0; i< MAX_KEY;i++){
10000b58:	e0bff517 	ldw	r2,-44(fp)
10000b5c:	10800044 	addi	r2,r2,1
10000b60:	e0bff515 	stw	r2,-44(fp)
10000b64:	e0bff517 	ldw	r2,-44(fp)
10000b68:	10800110 	cmplti	r2,r2,4
10000b6c:	103fab1e 	bne	r2,zero,10000a1c <__alt_data_end+0xf8000a1c>
			developer_mode = 1;
			return;
		}
	}

	if (walk_x == 0){saber->vx = 0;}
10000b70:	e0bff317 	ldw	r2,-52(fp)
10000b74:	1000021e 	bne	r2,zero,10000b80 <key_event+0x1d4>
10000b78:	e0bffd17 	ldw	r2,-12(fp)
10000b7c:	10000315 	stw	zero,12(r2)
	if (walk_y == 0){saber->vy = 0;}
10000b80:	e0bff417 	ldw	r2,-48(fp)
10000b84:	1000021e 	bne	r2,zero,10000b90 <key_event+0x1e4>
10000b88:	e0bffd17 	ldw	r2,-12(fp)
10000b8c:	10000415 	stw	zero,16(r2)
}
10000b90:	e037883a 	mov	sp,fp
10000b94:	dfc00117 	ldw	ra,4(sp)
10000b98:	df000017 	ldw	fp,0(sp)
10000b9c:	dec00204 	addi	sp,sp,8
10000ba0:	f800283a 	ret

10000ba4 <game_update>:

void game_update(int *game_start,saber_t *saber, monster_t *snowman, monster_t* gingerbreadman){
10000ba4:	defffa04 	addi	sp,sp,-24
10000ba8:	dfc00515 	stw	ra,20(sp)
10000bac:	df000415 	stw	fp,16(sp)
10000bb0:	df000404 	addi	fp,sp,16
10000bb4:	e13ffc15 	stw	r4,-16(fp)
10000bb8:	e17ffd15 	stw	r5,-12(fp)
10000bbc:	e1bffe15 	stw	r6,-8(fp)
10000bc0:	e1ffff15 	stw	r7,-4(fp)
	saber_be_attacked_check(saber,snowman);
10000bc4:	e17ffe17 	ldw	r5,-8(fp)
10000bc8:	e13ffd17 	ldw	r4,-12(fp)
10000bcc:	000155c0 	call	1000155c <saber_be_attacked_check>
	saber_be_attacked_check(saber,gingerbreadman);
10000bd0:	e17fff17 	ldw	r5,-4(fp)
10000bd4:	e13ffd17 	ldw	r4,-12(fp)
10000bd8:	000155c0 	call	1000155c <saber_be_attacked_check>

	// update saber state and x, y
	update(saber);
10000bdc:	e13ffd17 	ldw	r4,-12(fp)
10000be0:	000218c0 	call	1000218c <update>

	// use information for both snowman and saber to update snowman
	monster_update(snowman, saber);
10000be4:	e17ffd17 	ldw	r5,-12(fp)
10000be8:	e13ffe17 	ldw	r4,-8(fp)
10000bec:	00016a00 	call	100016a0 <monster_update>

	// use information for both gingerbreadman and saber to update snowman
	monster_update(gingerbreadman, saber);
10000bf0:	e17ffd17 	ldw	r5,-12(fp)
10000bf4:	e13fff17 	ldw	r4,-4(fp)
10000bf8:	00016a00 	call	100016a0 <monster_update>

	// send the information to the hardware
	gamefile_update(game_start, saber, snowman, gingerbreadman);
10000bfc:	e1ffff17 	ldw	r7,-4(fp)
10000c00:	e1bffe17 	ldw	r6,-8(fp)
10000c04:	e17ffd17 	ldw	r5,-12(fp)
10000c08:	e13ffc17 	ldw	r4,-16(fp)
10000c0c:	0000c280 	call	10000c28 <gamefile_update>
}
10000c10:	0001883a 	nop
10000c14:	e037883a 	mov	sp,fp
10000c18:	dfc00117 	ldw	ra,4(sp)
10000c1c:	df000017 	ldw	fp,0(sp)
10000c20:	dec00204 	addi	sp,sp,8
10000c24:	f800283a 	ret

10000c28 <gamefile_update>:

/*
 * gamefile_update : use characters information to update the game file,
 * 					which will communicate with the hardware
 */
void gamefile_update(int *game_start, saber_t *saber, monster_t *snowman, monster_t* gingerbreadman){
10000c28:	defffb04 	addi	sp,sp,-20
10000c2c:	df000415 	stw	fp,16(sp)
10000c30:	df000404 	addi	fp,sp,16
10000c34:	e13ffc15 	stw	r4,-16(fp)
10000c38:	e17ffd15 	stw	r5,-12(fp)
10000c3c:	e1bffe15 	stw	r6,-8(fp)
10000c40:	e1ffff15 	stw	r7,-4(fp)
	game_file[0] = saber->exist;
10000c44:	d0a00017 	ldw	r2,-32768(gp)
10000c48:	e0fffd17 	ldw	r3,-12(fp)
10000c4c:	18c00017 	ldw	r3,0(r3)
10000c50:	10c00015 	stw	r3,0(r2)
	game_file[1] = saber->x;
10000c54:	d0a00017 	ldw	r2,-32768(gp)
10000c58:	10800104 	addi	r2,r2,4
10000c5c:	e0fffd17 	ldw	r3,-12(fp)
10000c60:	18c00117 	ldw	r3,4(r3)
10000c64:	10c00015 	stw	r3,0(r2)
	game_file[2] = saber->y;
10000c68:	d0a00017 	ldw	r2,-32768(gp)
10000c6c:	10800204 	addi	r2,r2,8
10000c70:	e0fffd17 	ldw	r3,-12(fp)
10000c74:	18c00217 	ldw	r3,8(r3)
10000c78:	10c00015 	stw	r3,0(r2)
	game_file[3] = saber->state;
10000c7c:	d0a00017 	ldw	r2,-32768(gp)
10000c80:	10800304 	addi	r2,r2,12
10000c84:	e0fffd17 	ldw	r3,-12(fp)
10000c88:	18c00817 	ldw	r3,32(r3)
10000c8c:	10c00015 	stw	r3,0(r2)
	game_file[4] = saber->HP > 2;
10000c90:	d0a00017 	ldw	r2,-32768(gp)
10000c94:	10800404 	addi	r2,r2,16
10000c98:	e0fffd17 	ldw	r3,-12(fp)
10000c9c:	18c00517 	ldw	r3,20(r3)
10000ca0:	18c000c8 	cmpgei	r3,r3,3
10000ca4:	18c03fcc 	andi	r3,r3,255
10000ca8:	10c00015 	stw	r3,0(r2)

	game_file[7] = snowman->exist;
10000cac:	d0a00017 	ldw	r2,-32768(gp)
10000cb0:	10800704 	addi	r2,r2,28
10000cb4:	e0fffe17 	ldw	r3,-8(fp)
10000cb8:	18c00017 	ldw	r3,0(r3)
10000cbc:	10c00015 	stw	r3,0(r2)
	game_file[8] = snowman->x;
10000cc0:	d0a00017 	ldw	r2,-32768(gp)
10000cc4:	10800804 	addi	r2,r2,32
10000cc8:	e0fffe17 	ldw	r3,-8(fp)
10000ccc:	18c00117 	ldw	r3,4(r3)
10000cd0:	10c00015 	stw	r3,0(r2)
	game_file[9] = snowman->y;
10000cd4:	d0a00017 	ldw	r2,-32768(gp)
10000cd8:	10800904 	addi	r2,r2,36
10000cdc:	e0fffe17 	ldw	r3,-8(fp)
10000ce0:	18c00217 	ldw	r3,8(r3)
10000ce4:	10c00015 	stw	r3,0(r2)
	game_file[10] = snowman->state;
10000ce8:	d0a00017 	ldw	r2,-32768(gp)
10000cec:	10800a04 	addi	r2,r2,40
10000cf0:	e0fffe17 	ldw	r3,-8(fp)
10000cf4:	18c00d17 	ldw	r3,52(r3)
10000cf8:	10c00015 	stw	r3,0(r2)

	game_file[13] = gingerbreadman->exist;
10000cfc:	d0a00017 	ldw	r2,-32768(gp)
10000d00:	10800d04 	addi	r2,r2,52
10000d04:	e0ffff17 	ldw	r3,-4(fp)
10000d08:	18c00017 	ldw	r3,0(r3)
10000d0c:	10c00015 	stw	r3,0(r2)
	game_file[14] = gingerbreadman->x;
10000d10:	d0a00017 	ldw	r2,-32768(gp)
10000d14:	10800e04 	addi	r2,r2,56
10000d18:	e0ffff17 	ldw	r3,-4(fp)
10000d1c:	18c00117 	ldw	r3,4(r3)
10000d20:	10c00015 	stw	r3,0(r2)
	game_file[15] = gingerbreadman->y;
10000d24:	d0a00017 	ldw	r2,-32768(gp)
10000d28:	10800f04 	addi	r2,r2,60
10000d2c:	e0ffff17 	ldw	r3,-4(fp)
10000d30:	18c00217 	ldw	r3,8(r3)
10000d34:	10c00015 	stw	r3,0(r2)
	game_file[16] = gingerbreadman->state;
10000d38:	d0a00017 	ldw	r2,-32768(gp)
10000d3c:	10801004 	addi	r2,r2,64
10000d40:	e0ffff17 	ldw	r3,-4(fp)
10000d44:	18c00d17 	ldw	r3,52(r3)
10000d48:	10c00015 	stw	r3,0(r2)

	game_file[19] = *game_start;
10000d4c:	d0a00017 	ldw	r2,-32768(gp)
10000d50:	10801304 	addi	r2,r2,76
10000d54:	e0fffc17 	ldw	r3,-16(fp)
10000d58:	18c00017 	ldw	r3,0(r3)
10000d5c:	10c00015 	stw	r3,0(r2)
	game_file[20] = *game_start==0;
10000d60:	d0a00017 	ldw	r2,-32768(gp)
10000d64:	10801404 	addi	r2,r2,80
10000d68:	e0fffc17 	ldw	r3,-16(fp)
10000d6c:	18c00017 	ldw	r3,0(r3)
10000d70:	1807003a 	cmpeq	r3,r3,zero
10000d74:	18c03fcc 	andi	r3,r3,255
10000d78:	10c00015 	stw	r3,0(r2)
	game_file[22] = saber->HP<=0;
10000d7c:	d0a00017 	ldw	r2,-32768(gp)
10000d80:	10801604 	addi	r2,r2,88
10000d84:	e0fffd17 	ldw	r3,-12(fp)
10000d88:	18c00517 	ldw	r3,20(r3)
10000d8c:	00c6403a 	cmpge	r3,zero,r3
10000d90:	18c03fcc 	andi	r3,r3,255
10000d94:	10c00015 	stw	r3,0(r2)

	game_file[24] = saber -> HP;
10000d98:	d0a00017 	ldw	r2,-32768(gp)
10000d9c:	10801804 	addi	r2,r2,96
10000da0:	e0fffd17 	ldw	r3,-12(fp)
10000da4:	18c00517 	ldw	r3,20(r3)
10000da8:	10c00015 	stw	r3,0(r2)
	game_file[25] = *game_start;
10000dac:	d0a00017 	ldw	r2,-32768(gp)
10000db0:	10801904 	addi	r2,r2,100
10000db4:	e0fffc17 	ldw	r3,-16(fp)
10000db8:	18c00017 	ldw	r3,0(r3)
10000dbc:	10c00015 	stw	r3,0(r2)

	game_file[26] = snowman->blood_state<=BLOOD3;
10000dc0:	d0a00017 	ldw	r2,-32768(gp)
10000dc4:	10801a04 	addi	r2,r2,104
10000dc8:	e0fffe17 	ldw	r3,-8(fp)
10000dcc:	18c00e17 	ldw	r3,56(r3)
10000dd0:	18c000d0 	cmplti	r3,r3,3
10000dd4:	18c03fcc 	andi	r3,r3,255
10000dd8:	10c00015 	stw	r3,0(r2)
	game_file[27] = gingerbreadman->blood_state<=BLOOD3;
10000ddc:	d0a00017 	ldw	r2,-32768(gp)
10000de0:	10801b04 	addi	r2,r2,108
10000de4:	e0ffff17 	ldw	r3,-4(fp)
10000de8:	18c00e17 	ldw	r3,56(r3)
10000dec:	18c000d0 	cmplti	r3,r3,3
10000df0:	18c03fcc 	andi	r3,r3,255
10000df4:	10c00015 	stw	r3,0(r2)
	game_file[28] = snowman->blood_state;
10000df8:	d0a00017 	ldw	r2,-32768(gp)
10000dfc:	10801c04 	addi	r2,r2,112
10000e00:	e0fffe17 	ldw	r3,-8(fp)
10000e04:	18c00e17 	ldw	r3,56(r3)
10000e08:	10c00015 	stw	r3,0(r2)
	game_file[29] = gingerbreadman->blood_state;
10000e0c:	d0a00017 	ldw	r2,-32768(gp)
10000e10:	10801d04 	addi	r2,r2,116
10000e14:	e0ffff17 	ldw	r3,-4(fp)
10000e18:	18c00e17 	ldw	r3,56(r3)
10000e1c:	10c00015 	stw	r3,0(r2)
	game_file[30] = snowman->attack_x-20;
10000e20:	d0a00017 	ldw	r2,-32768(gp)
10000e24:	10801e04 	addi	r2,r2,120
10000e28:	e0fffe17 	ldw	r3,-8(fp)
10000e2c:	18c00317 	ldw	r3,12(r3)
10000e30:	18fffb04 	addi	r3,r3,-20
10000e34:	10c00015 	stw	r3,0(r2)
	game_file[31] = snowman->attack_y;
10000e38:	d0a00017 	ldw	r2,-32768(gp)
10000e3c:	10801f04 	addi	r2,r2,124
10000e40:	e0fffe17 	ldw	r3,-8(fp)
10000e44:	18c00417 	ldw	r3,16(r3)
10000e48:	10c00015 	stw	r3,0(r2)
	game_file[32] = gingerbreadman->attack_x;
10000e4c:	d0a00017 	ldw	r2,-32768(gp)
10000e50:	10802004 	addi	r2,r2,128
10000e54:	e0ffff17 	ldw	r3,-4(fp)
10000e58:	18c00317 	ldw	r3,12(r3)
10000e5c:	10c00015 	stw	r3,0(r2)
	game_file[33] = gingerbreadman->attack_y;
10000e60:	d0a00017 	ldw	r2,-32768(gp)
10000e64:	10802104 	addi	r2,r2,132
10000e68:	e0ffff17 	ldw	r3,-4(fp)
10000e6c:	18c00417 	ldw	r3,16(r3)
10000e70:	10c00015 	stw	r3,0(r2)

	game_file[35] = saber -> Excalibur_state < EXCALIBURNULL;
10000e74:	d0a00017 	ldw	r2,-32768(gp)
10000e78:	10802304 	addi	r2,r2,140
10000e7c:	e0fffd17 	ldw	r3,-12(fp)
10000e80:	18c00a17 	ldw	r3,40(r3)
10000e84:	18c00210 	cmplti	r3,r3,8
10000e88:	18c03fcc 	andi	r3,r3,255
10000e8c:	10c00015 	stw	r3,0(r2)
	game_file[36] = (saber->FaceDirection==RIGHT)? saber->x+EXCALIBUR_LENGTH/2+EXCALIBUR_X_BIAS: saber->x-(EXCALIBUR_LENGTH/2+EXCALIBUR_X_BIAS);
10000e90:	d0a00017 	ldw	r2,-32768(gp)
10000e94:	10802404 	addi	r2,r2,144
10000e98:	e0fffd17 	ldw	r3,-12(fp)
10000e9c:	18c00717 	ldw	r3,28(r3)
10000ea0:	1800041e 	bne	r3,zero,10000eb4 <gamefile_update+0x28c>
10000ea4:	e0fffd17 	ldw	r3,-12(fp)
10000ea8:	18c00117 	ldw	r3,4(r3)
10000eac:	18c02084 	addi	r3,r3,130
10000eb0:	00000306 	br	10000ec0 <gamefile_update+0x298>
10000eb4:	e0fffd17 	ldw	r3,-12(fp)
10000eb8:	18c00117 	ldw	r3,4(r3)
10000ebc:	18ffdf84 	addi	r3,r3,-130
10000ec0:	10c00015 	stw	r3,0(r2)
	game_file[37] = saber-> y+EXCALIBUR_Y_BIAS;
10000ec4:	d0a00017 	ldw	r2,-32768(gp)
10000ec8:	10802504 	addi	r2,r2,148
10000ecc:	e0fffd17 	ldw	r3,-12(fp)
10000ed0:	18c00217 	ldw	r3,8(r3)
10000ed4:	18fffc44 	addi	r3,r3,-15
10000ed8:	10c00015 	stw	r3,0(r2)
	game_file[38] = saber->Excalibur_state;
10000edc:	d0a00017 	ldw	r2,-32768(gp)
10000ee0:	10802604 	addi	r2,r2,152
10000ee4:	e0fffd17 	ldw	r3,-12(fp)
10000ee8:	18c00a17 	ldw	r3,40(r3)
10000eec:	10c00015 	stw	r3,0(r2)
	game_file[39] = saber->FaceDirection == LEFT;
10000ef0:	d0a00017 	ldw	r2,-32768(gp)
10000ef4:	10802704 	addi	r2,r2,156
10000ef8:	e0fffd17 	ldw	r3,-12(fp)
10000efc:	18c00717 	ldw	r3,28(r3)
10000f00:	18c00060 	cmpeqi	r3,r3,1
10000f04:	18c03fcc 	andi	r3,r3,255
10000f08:	10c00015 	stw	r3,0(r2)
	game_file[41] = win;
10000f0c:	d0a00017 	ldw	r2,-32768(gp)
10000f10:	10802904 	addi	r2,r2,164
10000f14:	d0e6cf17 	ldw	r3,-25796(gp)
10000f18:	10c00015 	stw	r3,0(r2)

	game_file[43] = saber->Excalibur_remain;
10000f1c:	d0a00017 	ldw	r2,-32768(gp)
10000f20:	10802b04 	addi	r2,r2,172
10000f24:	e0fffd17 	ldw	r3,-12(fp)
10000f28:	18c00c17 	ldw	r3,48(r3)
10000f2c:	10c00015 	stw	r3,0(r2)
	game_file[44] = *game_start;
10000f30:	d0a00017 	ldw	r2,-32768(gp)
10000f34:	10802c04 	addi	r2,r2,176
10000f38:	e0fffc17 	ldw	r3,-16(fp)
10000f3c:	18c00017 	ldw	r3,0(r3)
10000f40:	10c00015 	stw	r3,0(r2)
}
10000f44:	0001883a 	nop
10000f48:	e037883a 	mov	sp,fp
10000f4c:	df000017 	ldw	fp,0(sp)
10000f50:	dec00104 	addi	sp,sp,4
10000f54:	f800283a 	ret

10000f58 <main>:


int main(){
10000f58:	deffbe04 	addi	sp,sp,-264
10000f5c:	dfc04115 	stw	ra,260(sp)
10000f60:	df004015 	stw	fp,256(sp)
10000f64:	df004004 	addi	fp,sp,256
	saber_t saber;
	int game_start = 0;
10000f68:	e03fd115 	stw	zero,-188(fp)
	monster_t snowman;
	monster_t gingerbreadman;
	usb_init();		// initialize usb
10000f6c:	00036380 	call	10003638 <usb_init>
	developer_mode = 0;
10000f70:	d026cd15 	stw	zero,-25804(gp)
	GAME_INITIAL:
	win = 0;
10000f74:	d026cf15 	stw	zero,-25796(gp)
	while(game_start == 0){
10000f78:	00001206 	br	10000fc4 <main+0x6c>
		key_event(&game_start, &saber, &snowman, &gingerbreadman);
10000f7c:	e17fe904 	addi	r5,fp,-92
10000f80:	e13fd204 	addi	r4,fp,-184
10000f84:	e0ffc104 	addi	r3,fp,-252
10000f88:	e0bfd104 	addi	r2,fp,-188
10000f8c:	280f883a 	mov	r7,r5
10000f90:	200d883a 	mov	r6,r4
10000f94:	180b883a 	mov	r5,r3
10000f98:	1009883a 	mov	r4,r2
10000f9c:	00009ac0 	call	100009ac <key_event>
		gamefile_update(&game_start, &saber, &snowman, &gingerbreadman);
10000fa0:	e17fe904 	addi	r5,fp,-92
10000fa4:	e13fd204 	addi	r4,fp,-184
10000fa8:	e0ffc104 	addi	r3,fp,-252
10000fac:	e0bfd104 	addi	r2,fp,-188
10000fb0:	280f883a 	mov	r7,r5
10000fb4:	200d883a 	mov	r6,r4
10000fb8:	180b883a 	mov	r5,r3
10000fbc:	1009883a 	mov	r4,r2
10000fc0:	0000c280 	call	10000c28 <gamefile_update>
	monster_t gingerbreadman;
	usb_init();		// initialize usb
	developer_mode = 0;
	GAME_INITIAL:
	win = 0;
	while(game_start == 0){
10000fc4:	e0bfd117 	ldw	r2,-188(fp)
10000fc8:	103fec26 	beq	r2,zero,10000f7c <__alt_data_end+0xf8000f7c>
		key_event(&game_start, &saber, &snowman, &gingerbreadman);
		gamefile_update(&game_start, &saber, &snowman, &gingerbreadman);
	}

	printf("game start\n");
10000fcc:	01040074 	movhi	r4,4097
10000fd0:	210f8c04 	addi	r4,r4,15920
10000fd4:	00054400 	call	10005440 <puts>
	int frame_time = 0.2;
10000fd8:	e03fc015 	stw	zero,-256(fp)
	while (1){
		// wait until next clock
		frame_clock (frame_time);
10000fdc:	e13fc017 	ldw	r4,-256(fp)
10000fe0:	00050b80 	call	100050b8 <__floatsidf>
10000fe4:	100b883a 	mov	r5,r2
10000fe8:	180d883a 	mov	r6,r3
10000fec:	2809883a 	mov	r4,r5
10000ff0:	300b883a 	mov	r5,r6
10000ff4:	00003cc0 	call	100003cc <frame_clock>
		round1(&game_start, &saber, &snowman, &gingerbreadman);
10000ff8:	e17fe904 	addi	r5,fp,-92
10000ffc:	e13fd204 	addi	r4,fp,-184
10001000:	e0ffc104 	addi	r3,fp,-252
10001004:	e0bfd104 	addi	r2,fp,-188
10001008:	280f883a 	mov	r7,r5
1000100c:	200d883a 	mov	r6,r4
10001010:	180b883a 	mov	r5,r3
10001014:	1009883a 	mov	r4,r2
10001018:	00004840 	call	10000484 <round1>
		if (game_start ==0){goto GAME_INITIAL;}
1000101c:	e0bfd117 	ldw	r2,-188(fp)
10001020:	1000011e 	bne	r2,zero,10001028 <main+0xd0>
10001024:	003fd306 	br	10000f74 <__alt_data_end+0xf8000f74>
		round2(&game_start, &saber, &snowman, &gingerbreadman);
10001028:	e17fe904 	addi	r5,fp,-92
1000102c:	e13fd204 	addi	r4,fp,-184
10001030:	e0ffc104 	addi	r3,fp,-252
10001034:	e0bfd104 	addi	r2,fp,-188
10001038:	280f883a 	mov	r7,r5
1000103c:	200d883a 	mov	r6,r4
10001040:	180b883a 	mov	r5,r3
10001044:	1009883a 	mov	r4,r2
10001048:	00005a00 	call	100005a0 <round2>
		if (game_start ==0){goto GAME_INITIAL;}
1000104c:	e0bfd117 	ldw	r2,-188(fp)
10001050:	1000011e 	bne	r2,zero,10001058 <main+0x100>
10001054:	003fc706 	br	10000f74 <__alt_data_end+0xf8000f74>
		round3(&game_start, &saber, &snowman, &gingerbreadman);
10001058:	e17fe904 	addi	r5,fp,-92
1000105c:	e13fd204 	addi	r4,fp,-184
10001060:	e0ffc104 	addi	r3,fp,-252
10001064:	e0bfd104 	addi	r2,fp,-188
10001068:	280f883a 	mov	r7,r5
1000106c:	200d883a 	mov	r6,r4
10001070:	180b883a 	mov	r5,r3
10001074:	1009883a 	mov	r4,r2
10001078:	00006a00 	call	100006a0 <round3>
		if (game_start ==0){goto GAME_INITIAL;}
1000107c:	e0bfd117 	ldw	r2,-188(fp)
10001080:	1000011e 	bne	r2,zero,10001088 <main+0x130>
10001084:	003fbb06 	br	10000f74 <__alt_data_end+0xf8000f74>
		round4(&game_start, &saber, &snowman, &gingerbreadman);
10001088:	e17fe904 	addi	r5,fp,-92
1000108c:	e13fd204 	addi	r4,fp,-184
10001090:	e0ffc104 	addi	r3,fp,-252
10001094:	e0bfd104 	addi	r2,fp,-188
10001098:	280f883a 	mov	r7,r5
1000109c:	200d883a 	mov	r6,r4
100010a0:	180b883a 	mov	r5,r3
100010a4:	1009883a 	mov	r4,r2
100010a8:	00007a00 	call	100007a0 <round4>
		if (game_start ==0){goto GAME_INITIAL;}
100010ac:	e0bfd117 	ldw	r2,-188(fp)
100010b0:	1000011e 	bne	r2,zero,100010b8 <main+0x160>
100010b4:	003faf06 	br	10000f74 <__alt_data_end+0xf8000f74>
		round5(&game_start, &saber, &snowman, &gingerbreadman);
100010b8:	e17fe904 	addi	r5,fp,-92
100010bc:	e13fd204 	addi	r4,fp,-184
100010c0:	e0ffc104 	addi	r3,fp,-252
100010c4:	e0bfd104 	addi	r2,fp,-188
100010c8:	280f883a 	mov	r7,r5
100010cc:	200d883a 	mov	r6,r4
100010d0:	180b883a 	mov	r5,r3
100010d4:	1009883a 	mov	r4,r2
100010d8:	00008a00 	call	100008a0 <round5>
		if (game_start ==0){goto GAME_INITIAL;}
100010dc:	e0bfd117 	ldw	r2,-188(fp)
100010e0:	1000011e 	bne	r2,zero,100010e8 <main+0x190>
100010e4:	003fa306 	br	10000f74 <__alt_data_end+0xf8000f74>
		//win
		win = 1;
100010e8:	00800044 	movi	r2,1
100010ec:	d0a6cf15 	stw	r2,-25796(gp)
		while(1){
			key_event(&game_start, &saber, &snowman, &gingerbreadman);
100010f0:	e17fe904 	addi	r5,fp,-92
100010f4:	e13fd204 	addi	r4,fp,-184
100010f8:	e0ffc104 	addi	r3,fp,-252
100010fc:	e0bfd104 	addi	r2,fp,-188
10001100:	280f883a 	mov	r7,r5
10001104:	200d883a 	mov	r6,r4
10001108:	180b883a 	mov	r5,r3
1000110c:	1009883a 	mov	r4,r2
10001110:	00009ac0 	call	100009ac <key_event>
			gamefile_update(&game_start, &saber, &snowman, &gingerbreadman);
10001114:	e17fe904 	addi	r5,fp,-92
10001118:	e13fd204 	addi	r4,fp,-184
1000111c:	e0ffc104 	addi	r3,fp,-252
10001120:	e0bfd104 	addi	r2,fp,-188
10001124:	280f883a 	mov	r7,r5
10001128:	200d883a 	mov	r6,r4
1000112c:	180b883a 	mov	r5,r3
10001130:	1009883a 	mov	r4,r2
10001134:	0000c280 	call	10000c28 <gamefile_update>
			if (game_start ==0){goto GAME_INITIAL;}
10001138:	e0bfd117 	ldw	r2,-188(fp)
1000113c:	103fec1e 	bne	r2,zero,100010f0 <__alt_data_end+0xf80010f0>
10001140:	003f8c06 	br	10000f74 <__alt_data_end+0xf8000f74>

10001144 <monster_init>:

/*
 * monster_t *monster: pointer of the monster instance
 * int exist:
 */
void monster_init(monster_t *monster, int exist, int speed, int fat, int HP, int ATK, int ATTACK_BIASX, int ATTACK_BIASY, int ATTACK_RANGE){
10001144:	defffb04 	addi	sp,sp,-20
10001148:	df000415 	stw	fp,16(sp)
1000114c:	df000404 	addi	fp,sp,16
10001150:	e13ffc15 	stw	r4,-16(fp)
10001154:	e17ffd15 	stw	r5,-12(fp)
10001158:	e1bffe15 	stw	r6,-8(fp)
1000115c:	e1ffff15 	stw	r7,-4(fp)
	monster->exist = exist;
10001160:	e0bffc17 	ldw	r2,-16(fp)
10001164:	e0fffd17 	ldw	r3,-12(fp)
10001168:	10c00015 	stw	r3,0(r2)
	monster->x = SNOWMAN_INIT_X;
1000116c:	e0bffc17 	ldw	r2,-16(fp)
10001170:	00c09604 	movi	r3,600
10001174:	10c00115 	stw	r3,4(r2)
	monster->y = SNOWMAN_INIT_Y;
10001178:	e0bffc17 	ldw	r2,-16(fp)
1000117c:	00c03204 	movi	r3,200
10001180:	10c00215 	stw	r3,8(r2)
	monster->attack_x = monster->x + ATTACK_BIASX;
10001184:	e0bffc17 	ldw	r2,-16(fp)
10001188:	10c00117 	ldw	r3,4(r2)
1000118c:	e0800317 	ldw	r2,12(fp)
10001190:	1887883a 	add	r3,r3,r2
10001194:	e0bffc17 	ldw	r2,-16(fp)
10001198:	10c00315 	stw	r3,12(r2)
	monster->attack_y = monster->y + ATTACK_BIASY;
1000119c:	e0bffc17 	ldw	r2,-16(fp)
100011a0:	10c00217 	ldw	r3,8(r2)
100011a4:	e0800417 	ldw	r2,16(fp)
100011a8:	1887883a 	add	r3,r3,r2
100011ac:	e0bffc17 	ldw	r2,-16(fp)
100011b0:	10c00415 	stw	r3,16(r2)
	monster->attack_biasx = ATTACK_BIASX;
100011b4:	e0bffc17 	ldw	r2,-16(fp)
100011b8:	e0c00317 	ldw	r3,12(fp)
100011bc:	10c00715 	stw	r3,28(r2)
	monster->attack_biasy = ATTACK_BIASY;
100011c0:	e0bffc17 	ldw	r2,-16(fp)
100011c4:	e0c00417 	ldw	r3,16(fp)
100011c8:	10c00815 	stw	r3,32(r2)
	monster->attack_arange = ATTACK_RANGE;
100011cc:	e0bffc17 	ldw	r2,-16(fp)
100011d0:	e0c00517 	ldw	r3,20(fp)
100011d4:	10c00915 	stw	r3,36(r2)
	monster->vx = -speed;
100011d8:	e0bffe17 	ldw	r2,-8(fp)
100011dc:	0087c83a 	sub	r3,zero,r2
100011e0:	e0bffc17 	ldw	r2,-16(fp)
100011e4:	10c00515 	stw	r3,20(r2)
	monster->vy = 0;
100011e8:	e0bffc17 	ldw	r2,-16(fp)
100011ec:	10000615 	stw	zero,24(r2)
	monster->FAT = fat;
100011f0:	e0bffc17 	ldw	r2,-16(fp)
100011f4:	e0ffff17 	ldw	r3,-4(fp)
100011f8:	10c00a15 	stw	r3,40(r2)
	monster->HP = HP;
100011fc:	e0bffc17 	ldw	r2,-16(fp)
10001200:	e0c00117 	ldw	r3,4(fp)
10001204:	10c00b15 	stw	r3,44(r2)
	monster->ATK = ATK;
10001208:	e0bffc17 	ldw	r2,-16(fp)
1000120c:	e0c00217 	ldw	r3,8(fp)
10001210:	10c00c15 	stw	r3,48(r2)
	monster->state = WALK1;
10001214:	e0bffc17 	ldw	r2,-16(fp)
10001218:	10000d15 	stw	zero,52(r2)
	monster->blood_state = SAFE;
1000121c:	e0bffc17 	ldw	r2,-16(fp)
10001220:	00c000c4 	movi	r3,3
10001224:	10c00e15 	stw	r3,56(r2)
	monster->blood_count = 0;
10001228:	e0bffc17 	ldw	r2,-16(fp)
1000122c:	10000f15 	stw	zero,60(r2)
	monster->state_count = 0; 	// frame count for each state
10001230:	e0bffc17 	ldw	r2,-16(fp)
10001234:	10001015 	stw	zero,64(r2)
	monster->fight_count = 0;
10001238:	e0bffc17 	ldw	r2,-16(fp)
1000123c:	10001515 	stw	zero,84(r2)
	monster->bleeding = 0;
10001240:	e0bffc17 	ldw	r2,-16(fp)
10001244:	10001415 	stw	zero,80(r2)
	monster->Dying = 0;
10001248:	e0bffc17 	ldw	r2,-16(fp)
1000124c:	10001315 	stw	zero,76(r2)
	monster->dead_count = 0;
10001250:	e0bffc17 	ldw	r2,-16(fp)
10001254:	10001115 	stw	zero,68(r2)
	monster->hit_count = 0;
10001258:	e0bffc17 	ldw	r2,-16(fp)
1000125c:	10001215 	stw	zero,72(r2)
	monster->fight_relax_time =0;
10001260:	e0bffc17 	ldw	r2,-16(fp)
10001264:	10001615 	stw	zero,88(r2)
}
10001268:	0001883a 	nop
1000126c:	e037883a 	mov	sp,fp
10001270:	df000017 	ldw	fp,0(sp)
10001274:	dec00104 	addi	sp,sp,4
10001278:	f800283a 	ret

1000127c <monster_hit_check>:

void monster_hit_check(monster_t *monster, saber_t *saber){
1000127c:	defffc04 	addi	sp,sp,-16
10001280:	df000315 	stw	fp,12(sp)
10001284:	df000304 	addi	fp,sp,12
10001288:	e13ffe15 	stw	r4,-8(fp)
1000128c:	e17fff15 	stw	r5,-4(fp)
	if (saber->HP<=0 || monster-> HP <=0){return;}
10001290:	e0bfff17 	ldw	r2,-4(fp)
10001294:	10800517 	ldw	r2,20(r2)
10001298:	0080ab0e 	bge	zero,r2,10001548 <monster_hit_check+0x2cc>
1000129c:	e0bffe17 	ldw	r2,-8(fp)
100012a0:	10800b17 	ldw	r2,44(r2)
100012a4:	0080a80e 	bge	zero,r2,10001548 <monster_hit_check+0x2cc>
	int position_x_diff;
	position_x_diff = monster->attack_x - saber->x;
100012a8:	e0bffe17 	ldw	r2,-8(fp)
100012ac:	10c00317 	ldw	r3,12(r2)
100012b0:	e0bfff17 	ldw	r2,-4(fp)
100012b4:	10800117 	ldw	r2,4(r2)
100012b8:	1885c83a 	sub	r2,r3,r2
100012bc:	e0bffd15 	stw	r2,-12(fp)
	if (monster -> state <= WALK4){
100012c0:	e0bffe17 	ldw	r2,-8(fp)
100012c4:	10800d17 	ldw	r2,52(r2)
100012c8:	10800108 	cmpgei	r2,r2,4
100012cc:	10009f1e 	bne	r2,zero,1000154c <monster_hit_check+0x2d0>
		if(saber->IsFighting && abs(monster->attack_y - saber-> y) < ATTACK_RANGEY &&
100012d0:	e0bfff17 	ldw	r2,-4(fp)
100012d4:	10800d17 	ldw	r2,52(r2)
100012d8:	10004226 	beq	r2,zero,100013e4 <monster_hit_check+0x168>
100012dc:	e0bffe17 	ldw	r2,-8(fp)
100012e0:	10c00417 	ldw	r3,16(r2)
100012e4:	e0bfff17 	ldw	r2,-4(fp)
100012e8:	10800217 	ldw	r2,8(r2)
100012ec:	1885c83a 	sub	r2,r3,r2
100012f0:	10bffb50 	cmplti	r2,r2,-19
100012f4:	10003b1e 	bne	r2,zero,100013e4 <monster_hit_check+0x168>
100012f8:	e0bffe17 	ldw	r2,-8(fp)
100012fc:	10c00417 	ldw	r3,16(r2)
10001300:	e0bfff17 	ldw	r2,-4(fp)
10001304:	10800217 	ldw	r2,8(r2)
10001308:	1885c83a 	sub	r2,r3,r2
1000130c:	10800508 	cmpgei	r2,r2,20
10001310:	1000341e 	bne	r2,zero,100013e4 <monster_hit_check+0x168>
10001314:	e0bffd17 	ldw	r2,-12(fp)
10001318:	10000916 	blt	r2,zero,10001340 <monster_hit_check+0xc4>
					((position_x_diff >=0 && saber->FaceDirection ==RIGHT && position_x_diff-monster->FAT < ATTACK_RANGEX ) ||
1000131c:	e0bfff17 	ldw	r2,-4(fp)
10001320:	10800717 	ldw	r2,28(r2)
10001324:	1000061e 	bne	r2,zero,10001340 <monster_hit_check+0xc4>
10001328:	e0bffe17 	ldw	r2,-8(fp)
1000132c:	10800a17 	ldw	r2,40(r2)
10001330:	e0fffd17 	ldw	r3,-12(fp)
10001334:	1885c83a 	sub	r2,r3,r2
10001338:	10801050 	cmplti	r2,r2,65
1000133c:	10000d1e 	bne	r2,zero,10001374 <monster_hit_check+0xf8>
10001340:	e0bffd17 	ldw	r2,-12(fp)
10001344:	00802716 	blt	zero,r2,100013e4 <monster_hit_check+0x168>
					(position_x_diff <=0 && saber->FaceDirection ==LEFT && -position_x_diff-monster->FAT < ATTACK_RANGEX))){
10001348:	e0bfff17 	ldw	r2,-4(fp)
1000134c:	10800717 	ldw	r2,28(r2)
10001350:	10800058 	cmpnei	r2,r2,1
10001354:	1000231e 	bne	r2,zero,100013e4 <monster_hit_check+0x168>
10001358:	e0bffd17 	ldw	r2,-12(fp)
1000135c:	0087c83a 	sub	r3,zero,r2
10001360:	e0bffe17 	ldw	r2,-8(fp)
10001364:	10800a17 	ldw	r2,40(r2)
10001368:	1885c83a 	sub	r2,r3,r2
1000136c:	10801048 	cmpgei	r2,r2,65
10001370:	10001c1e 	bne	r2,zero,100013e4 <monster_hit_check+0x168>
			monster->state = HIT;
10001374:	e0bffe17 	ldw	r2,-8(fp)
10001378:	00c00104 	movi	r3,4
1000137c:	10c00d15 	stw	r3,52(r2)
			monster->blood_state = BLOOD1;
10001380:	e0bffe17 	ldw	r2,-8(fp)
10001384:	10000e15 	stw	zero,56(r2)
			monster->HP = monster->HP - saber->ATK;
10001388:	e0bffe17 	ldw	r2,-8(fp)
1000138c:	10c00b17 	ldw	r3,44(r2)
10001390:	e0bfff17 	ldw	r2,-4(fp)
10001394:	10800617 	ldw	r2,24(r2)
10001398:	1887c83a 	sub	r3,r3,r2
1000139c:	e0bffe17 	ldw	r2,-8(fp)
100013a0:	10c00b15 	stw	r3,44(r2)
			monster->x += (saber->FaceDirection == RIGHT)? 20: - 20;
100013a4:	e0bffe17 	ldw	r2,-8(fp)
100013a8:	10c00117 	ldw	r3,4(r2)
100013ac:	e0bfff17 	ldw	r2,-4(fp)
100013b0:	10800717 	ldw	r2,28(r2)
100013b4:	1000021e 	bne	r2,zero,100013c0 <monster_hit_check+0x144>
100013b8:	00800504 	movi	r2,20
100013bc:	00000106 	br	100013c4 <monster_hit_check+0x148>
100013c0:	00bffb04 	movi	r2,-20
100013c4:	1887883a 	add	r3,r3,r2
100013c8:	e0bffe17 	ldw	r2,-8(fp)
100013cc:	10c00115 	stw	r3,4(r2)
			monster->attack_x = monster-> x;
100013d0:	e0bffe17 	ldw	r2,-8(fp)
100013d4:	10c00117 	ldw	r3,4(r2)
100013d8:	e0bffe17 	ldw	r2,-8(fp)
100013dc:	10c00315 	stw	r3,12(r2)
100013e0:	00005a06 	br	1000154c <monster_hit_check+0x2d0>
		}
		else if(saber->Excalibur_state<EXCALIBURNULL&&
100013e4:	e0bfff17 	ldw	r2,-4(fp)
100013e8:	10800a17 	ldw	r2,40(r2)
100013ec:	10800208 	cmpgei	r2,r2,8
100013f0:	1000561e 	bne	r2,zero,1000154c <monster_hit_check+0x2d0>
			 monster->attack_y < saber-> y-EXCALIBUR_Y_BIAS+EXCALIBUR_WIDTH/2 &&
100013f4:	e0bffe17 	ldw	r2,-8(fp)
100013f8:	10c00417 	ldw	r3,16(r2)
100013fc:	e0bfff17 	ldw	r2,-4(fp)
10001400:	10800217 	ldw	r2,8(r2)
10001404:	10801a84 	addi	r2,r2,106
			monster->blood_state = BLOOD1;
			monster->HP = monster->HP - saber->ATK;
			monster->x += (saber->FaceDirection == RIGHT)? 20: - 20;
			monster->attack_x = monster-> x;
		}
		else if(saber->Excalibur_state<EXCALIBURNULL&&
10001408:	1880500e 	bge	r3,r2,1000154c <monster_hit_check+0x2d0>
			 monster->attack_y < saber-> y-EXCALIBUR_Y_BIAS+EXCALIBUR_WIDTH/2 &&
			 monster->attack_y > saber-> y-EXCALIBUR_Y_BIAS-EXCALIBUR_WIDTH/2){
1000140c:	e0bffe17 	ldw	r2,-8(fp)
10001410:	10800417 	ldw	r2,16(r2)
10001414:	e0ffff17 	ldw	r3,-4(fp)
10001418:	18c00217 	ldw	r3,8(r3)
1000141c:	18ffed04 	addi	r3,r3,-76
			monster->HP = monster->HP - saber->ATK;
			monster->x += (saber->FaceDirection == RIGHT)? 20: - 20;
			monster->attack_x = monster-> x;
		}
		else if(saber->Excalibur_state<EXCALIBURNULL&&
			 monster->attack_y < saber-> y-EXCALIBUR_Y_BIAS+EXCALIBUR_WIDTH/2 &&
10001420:	18804a0e 	bge	r3,r2,1000154c <monster_hit_check+0x2d0>
			 monster->attack_y > saber-> y-EXCALIBUR_Y_BIAS-EXCALIBUR_WIDTH/2){
			if(saber->FaceDirection == RIGHT && monster->attack_x > saber->x &&
10001424:	e0bfff17 	ldw	r2,-4(fp)
10001428:	10800717 	ldw	r2,28(r2)
1000142c:	1000211e 	bne	r2,zero,100014b4 <monster_hit_check+0x238>
10001430:	e0bffe17 	ldw	r2,-8(fp)
10001434:	10800317 	ldw	r2,12(r2)
10001438:	e0ffff17 	ldw	r3,-4(fp)
1000143c:	18c00117 	ldw	r3,4(r3)
10001440:	18801c0e 	bge	r3,r2,100014b4 <monster_hit_check+0x238>
			   monster->attack_x < saber->x+EXCALIBUR_LENGTH+ EXCALIBUR_X_BIAS){
10001444:	e0bffe17 	ldw	r2,-8(fp)
10001448:	10c00317 	ldw	r3,12(r2)
1000144c:	e0bfff17 	ldw	r2,-4(fp)
10001450:	10800117 	ldw	r2,4(r2)
10001454:	10805284 	addi	r2,r2,330
			monster->attack_x = monster-> x;
		}
		else if(saber->Excalibur_state<EXCALIBURNULL&&
			 monster->attack_y < saber-> y-EXCALIBUR_Y_BIAS+EXCALIBUR_WIDTH/2 &&
			 monster->attack_y > saber-> y-EXCALIBUR_Y_BIAS-EXCALIBUR_WIDTH/2){
			if(saber->FaceDirection == RIGHT && monster->attack_x > saber->x &&
10001458:	1880160e 	bge	r3,r2,100014b4 <monster_hit_check+0x238>
			   monster->attack_x < saber->x+EXCALIBUR_LENGTH+ EXCALIBUR_X_BIAS){
				monster->state = HIT;
1000145c:	e0bffe17 	ldw	r2,-8(fp)
10001460:	00c00104 	movi	r3,4
10001464:	10c00d15 	stw	r3,52(r2)
				monster->blood_state = BLOOD1;
10001468:	e0bffe17 	ldw	r2,-8(fp)
1000146c:	10000e15 	stw	zero,56(r2)
				monster->HP = monster->HP - saber->Excalibur_damage;
10001470:	e0bffe17 	ldw	r2,-8(fp)
10001474:	10c00b17 	ldw	r3,44(r2)
10001478:	e0bfff17 	ldw	r2,-4(fp)
1000147c:	10800f17 	ldw	r2,60(r2)
10001480:	1887c83a 	sub	r3,r3,r2
10001484:	e0bffe17 	ldw	r2,-8(fp)
10001488:	10c00b15 	stw	r3,44(r2)
				monster->x +=20;
1000148c:	e0bffe17 	ldw	r2,-8(fp)
10001490:	10800117 	ldw	r2,4(r2)
10001494:	10c00504 	addi	r3,r2,20
10001498:	e0bffe17 	ldw	r2,-8(fp)
1000149c:	10c00115 	stw	r3,4(r2)
				monster->attack_x = monster-> x;
100014a0:	e0bffe17 	ldw	r2,-8(fp)
100014a4:	10c00117 	ldw	r3,4(r2)
100014a8:	e0bffe17 	ldw	r2,-8(fp)
100014ac:	10c00315 	stw	r3,12(r2)
100014b0:	00002606 	br	1000154c <monster_hit_check+0x2d0>
			}else if(saber->FaceDirection == LEFT && monster->attack_x < saber->x &&
100014b4:	e0bfff17 	ldw	r2,-4(fp)
100014b8:	10800717 	ldw	r2,28(r2)
100014bc:	10800058 	cmpnei	r2,r2,1
100014c0:	1000221e 	bne	r2,zero,1000154c <monster_hit_check+0x2d0>
100014c4:	e0bffe17 	ldw	r2,-8(fp)
100014c8:	10c00317 	ldw	r3,12(r2)
100014cc:	e0bfff17 	ldw	r2,-4(fp)
100014d0:	10800117 	ldw	r2,4(r2)
100014d4:	18801d0e 	bge	r3,r2,1000154c <monster_hit_check+0x2d0>
				monster->attack_x > saber->x-(EXCALIBUR_LENGTH+EXCALIBUR_X_BIAS)){
100014d8:	e0bffe17 	ldw	r2,-8(fp)
100014dc:	10800317 	ldw	r2,12(r2)
100014e0:	e0ffff17 	ldw	r3,-4(fp)
100014e4:	18c00117 	ldw	r3,4(r3)
100014e8:	18ffad84 	addi	r3,r3,-330
				monster->state = HIT;
				monster->blood_state = BLOOD1;
				monster->HP = monster->HP - saber->Excalibur_damage;
				monster->x +=20;
				monster->attack_x = monster-> x;
			}else if(saber->FaceDirection == LEFT && monster->attack_x < saber->x &&
100014ec:	1880170e 	bge	r3,r2,1000154c <monster_hit_check+0x2d0>
				monster->attack_x > saber->x-(EXCALIBUR_LENGTH+EXCALIBUR_X_BIAS)){
				monster->state = HIT;
100014f0:	e0bffe17 	ldw	r2,-8(fp)
100014f4:	00c00104 	movi	r3,4
100014f8:	10c00d15 	stw	r3,52(r2)
				monster->blood_state = BLOOD1;
100014fc:	e0bffe17 	ldw	r2,-8(fp)
10001500:	10000e15 	stw	zero,56(r2)
				monster->HP = monster->HP - saber->Excalibur_damage;
10001504:	e0bffe17 	ldw	r2,-8(fp)
10001508:	10c00b17 	ldw	r3,44(r2)
1000150c:	e0bfff17 	ldw	r2,-4(fp)
10001510:	10800f17 	ldw	r2,60(r2)
10001514:	1887c83a 	sub	r3,r3,r2
10001518:	e0bffe17 	ldw	r2,-8(fp)
1000151c:	10c00b15 	stw	r3,44(r2)
				monster->x -= 20;
10001520:	e0bffe17 	ldw	r2,-8(fp)
10001524:	10800117 	ldw	r2,4(r2)
10001528:	10fffb04 	addi	r3,r2,-20
1000152c:	e0bffe17 	ldw	r2,-8(fp)
10001530:	10c00115 	stw	r3,4(r2)
				monster->attack_x = monster-> x;
10001534:	e0bffe17 	ldw	r2,-8(fp)
10001538:	10c00117 	ldw	r3,4(r2)
1000153c:	e0bffe17 	ldw	r2,-8(fp)
10001540:	10c00315 	stw	r3,12(r2)
10001544:	00000106 	br	1000154c <monster_hit_check+0x2d0>
	monster->hit_count = 0;
	monster->fight_relax_time =0;
}

void monster_hit_check(monster_t *monster, saber_t *saber){
	if (saber->HP<=0 || monster-> HP <=0){return;}
10001548:	0001883a 	nop
				monster->attack_x = monster-> x;
			}

		}
	}
}
1000154c:	e037883a 	mov	sp,fp
10001550:	df000017 	ldw	fp,0(sp)
10001554:	dec00104 	addi	sp,sp,4
10001558:	f800283a 	ret

1000155c <saber_be_attacked_check>:

void saber_be_attacked_check(saber_t *saber, monster_t *monster){
1000155c:	defffd04 	addi	sp,sp,-12
10001560:	df000215 	stw	fp,8(sp)
10001564:	df000204 	addi	fp,sp,8
10001568:	e13ffe15 	stw	r4,-8(fp)
1000156c:	e17fff15 	stw	r5,-4(fp)
	if (saber->exist ==0||monster->exist ==0 ||monster->HP<=0){return;}
10001570:	e0bffe17 	ldw	r2,-8(fp)
10001574:	10800017 	ldw	r2,0(r2)
10001578:	10004426 	beq	r2,zero,1000168c <saber_be_attacked_check+0x130>
1000157c:	e0bfff17 	ldw	r2,-4(fp)
10001580:	10800017 	ldw	r2,0(r2)
10001584:	10004126 	beq	r2,zero,1000168c <saber_be_attacked_check+0x130>
10001588:	e0bfff17 	ldw	r2,-4(fp)
1000158c:	10800b17 	ldw	r2,44(r2)
10001590:	00803e0e 	bge	zero,r2,1000168c <saber_be_attacked_check+0x130>
	if (abs(saber->x - monster->attack_x)<= (monster->FAT +SABER_FAT)&& abs(saber->y - monster->attack_y)<=monster->FAT){
10001594:	e0bffe17 	ldw	r2,-8(fp)
10001598:	10c00117 	ldw	r3,4(r2)
1000159c:	e0bfff17 	ldw	r2,-4(fp)
100015a0:	10800317 	ldw	r2,12(r2)
100015a4:	1885c83a 	sub	r2,r3,r2
100015a8:	1000010e 	bge	r2,zero,100015b0 <saber_be_attacked_check+0x54>
100015ac:	0085c83a 	sub	r2,zero,r2
100015b0:	1007883a 	mov	r3,r2
100015b4:	e0bfff17 	ldw	r2,-4(fp)
100015b8:	10800a17 	ldw	r2,40(r2)
100015bc:	10800284 	addi	r2,r2,10
100015c0:	10c03316 	blt	r2,r3,10001690 <saber_be_attacked_check+0x134>
100015c4:	e0bffe17 	ldw	r2,-8(fp)
100015c8:	10c00217 	ldw	r3,8(r2)
100015cc:	e0bfff17 	ldw	r2,-4(fp)
100015d0:	10800417 	ldw	r2,16(r2)
100015d4:	1885c83a 	sub	r2,r3,r2
100015d8:	1000010e 	bge	r2,zero,100015e0 <saber_be_attacked_check+0x84>
100015dc:	0085c83a 	sub	r2,zero,r2
100015e0:	1007883a 	mov	r3,r2
100015e4:	e0bfff17 	ldw	r2,-4(fp)
100015e8:	10800a17 	ldw	r2,40(r2)
100015ec:	10c02816 	blt	r2,r3,10001690 <saber_be_attacked_check+0x134>
		if (saber->x < monster->attack_x){
100015f0:	e0bffe17 	ldw	r2,-8(fp)
100015f4:	10c00117 	ldw	r3,4(r2)
100015f8:	e0bfff17 	ldw	r2,-4(fp)
100015fc:	10800317 	ldw	r2,12(r2)
10001600:	1880060e 	bge	r3,r2,1000161c <saber_be_attacked_check+0xc0>
			saber->x = saber->x -40;
10001604:	e0bffe17 	ldw	r2,-8(fp)
10001608:	10800117 	ldw	r2,4(r2)
1000160c:	10fff604 	addi	r3,r2,-40
10001610:	e0bffe17 	ldw	r2,-8(fp)
10001614:	10c00115 	stw	r3,4(r2)
10001618:	00000506 	br	10001630 <saber_be_attacked_check+0xd4>
		}else{
			saber->x = saber->x +40;
1000161c:	e0bffe17 	ldw	r2,-8(fp)
10001620:	10800117 	ldw	r2,4(r2)
10001624:	10c00a04 	addi	r3,r2,40
10001628:	e0bffe17 	ldw	r2,-8(fp)
1000162c:	10c00115 	stw	r3,4(r2)
		}
		// if saber doesn't block the attack, she will be hurt

		if (saber->state < POSE_LEFT1 || (saber->state >POSE_LEFT2 && saber->state <POSE_RIGHT1 )){
10001630:	e0bffe17 	ldw	r2,-8(fp)
10001634:	10800817 	ldw	r2,32(r2)
10001638:	10800510 	cmplti	r2,r2,20
1000163c:	1000081e 	bne	r2,zero,10001660 <saber_be_attacked_check+0x104>
10001640:	e0bffe17 	ldw	r2,-8(fp)
10001644:	10800817 	ldw	r2,32(r2)
10001648:	10800590 	cmplti	r2,r2,22
1000164c:	1000101e 	bne	r2,zero,10001690 <saber_be_attacked_check+0x134>
10001650:	e0bffe17 	ldw	r2,-8(fp)
10001654:	10800817 	ldw	r2,32(r2)
10001658:	10800788 	cmpgei	r2,r2,30
1000165c:	10000c1e 	bne	r2,zero,10001690 <saber_be_attacked_check+0x134>
			saber->injuring = 1;
10001660:	e0bffe17 	ldw	r2,-8(fp)
10001664:	00c00044 	movi	r3,1
10001668:	10c00e15 	stw	r3,56(r2)
			saber-> HP = saber-> HP - monster-> ATK;
1000166c:	e0bffe17 	ldw	r2,-8(fp)
10001670:	10c00517 	ldw	r3,20(r2)
10001674:	e0bfff17 	ldw	r2,-4(fp)
10001678:	10800c17 	ldw	r2,48(r2)
1000167c:	1887c83a 	sub	r3,r3,r2
10001680:	e0bffe17 	ldw	r2,-8(fp)
10001684:	10c00515 	stw	r3,20(r2)
10001688:	00000106 	br	10001690 <saber_be_attacked_check+0x134>
		}
	}
}

void saber_be_attacked_check(saber_t *saber, monster_t *monster){
	if (saber->exist ==0||monster->exist ==0 ||monster->HP<=0){return;}
1000168c:	0001883a 	nop
		}

	}


}
10001690:	e037883a 	mov	sp,fp
10001694:	df000017 	ldw	fp,0(sp)
10001698:	dec00104 	addi	sp,sp,4
1000169c:	f800283a 	ret

100016a0 <monster_update>:

void monster_update(monster_t *monster, saber_t *saber){
100016a0:	defffc04 	addi	sp,sp,-16
100016a4:	dfc00315 	stw	ra,12(sp)
100016a8:	df000215 	stw	fp,8(sp)
100016ac:	df000204 	addi	fp,sp,8
100016b0:	e13ffe15 	stw	r4,-8(fp)
100016b4:	e17fff15 	stw	r5,-4(fp)
	if (monster-> exist ==0){
100016b8:	e0bffe17 	ldw	r2,-8(fp)
100016bc:	10800017 	ldw	r2,0(r2)
100016c0:	1000df26 	beq	r2,zero,10001a40 <monster_update+0x3a0>
//	if (monster-> bleeding >0){
//		monster->
//	}

	// if monster is dead, set the frame for his corpse to remain
	if (monster->state == DEAD2 && monster->dead_count++ == DEAD_COUNT){
100016c4:	e0bffe17 	ldw	r2,-8(fp)
100016c8:	10800d17 	ldw	r2,52(r2)
100016cc:	10800198 	cmpnei	r2,r2,6
100016d0:	10000a1e 	bne	r2,zero,100016fc <monster_update+0x5c>
100016d4:	e0bffe17 	ldw	r2,-8(fp)
100016d8:	10801117 	ldw	r2,68(r2)
100016dc:	11000044 	addi	r4,r2,1
100016e0:	e0fffe17 	ldw	r3,-8(fp)
100016e4:	19001115 	stw	r4,68(r3)
100016e8:	10801918 	cmpnei	r2,r2,100
100016ec:	1000031e 	bne	r2,zero,100016fc <monster_update+0x5c>
		monster->exist = 0;
100016f0:	e0bffe17 	ldw	r2,-8(fp)
100016f4:	10000015 	stw	zero,0(r2)
		return;
100016f8:	0000d206 	br	10001a44 <monster_update+0x3a4>
	}

	// check whether the monster can be dead
	if (monster->HP <= 0 ){
100016fc:	e0bffe17 	ldw	r2,-8(fp)
10001700:	10800b17 	ldw	r2,44(r2)
10001704:	00800316 	blt	zero,r2,10001714 <monster_update+0x74>
		monster->Dying =1;
10001708:	e0bffe17 	ldw	r2,-8(fp)
1000170c:	00c00044 	movi	r3,1
10001710:	10c01315 	stw	r3,76(r2)
	}

	// update the bleeding animation
	if (monster->blood_state <= BLOOD3){
10001714:	e0bffe17 	ldw	r2,-8(fp)
10001718:	10800e17 	ldw	r2,56(r2)
1000171c:	108000c8 	cmpgei	r2,r2,3
10001720:	10000e1e 	bne	r2,zero,1000175c <monster_update+0xbc>
		if (monster->blood_count ++ > BLOOD_COUNT_MAX){
10001724:	e0bffe17 	ldw	r2,-8(fp)
10001728:	10800f17 	ldw	r2,60(r2)
1000172c:	11000044 	addi	r4,r2,1
10001730:	e0fffe17 	ldw	r3,-8(fp)
10001734:	19000f15 	stw	r4,60(r3)
10001738:	10800090 	cmplti	r2,r2,2
1000173c:	1000071e 	bne	r2,zero,1000175c <monster_update+0xbc>
			monster->blood_state += 1;
10001740:	e0bffe17 	ldw	r2,-8(fp)
10001744:	10800e17 	ldw	r2,56(r2)
10001748:	10c00044 	addi	r3,r2,1
1000174c:	e0bffe17 	ldw	r2,-8(fp)
10001750:	10c00e15 	stw	r3,56(r2)
			monster->blood_count = 0;
10001754:	e0bffe17 	ldw	r2,-8(fp)
10001758:	10000f15 	stw	zero,60(r2)
		}
	}

	// monster attack by a random number
	if (monster->fight_relax_time >0){
1000175c:	e0bffe17 	ldw	r2,-8(fp)
10001760:	10801617 	ldw	r2,88(r2)
10001764:	0080060e 	bge	zero,r2,10001780 <monster_update+0xe0>
		monster->fight_relax_time--;
10001768:	e0bffe17 	ldw	r2,-8(fp)
1000176c:	10801617 	ldw	r2,88(r2)
10001770:	10ffffc4 	addi	r3,r2,-1
10001774:	e0bffe17 	ldw	r2,-8(fp)
10001778:	10c01615 	stw	r3,88(r2)
1000177c:	00001106 	br	100017c4 <monster_update+0x124>
	}else if(monster->state <= WALK4 && rand()%100 > (100-FIGHT_PROBABILITY)){
10001780:	e0bffe17 	ldw	r2,-8(fp)
10001784:	10800d17 	ldw	r2,52(r2)
10001788:	10800108 	cmpgei	r2,r2,4
1000178c:	10000d1e 	bne	r2,zero,100017c4 <monster_update+0x124>
10001790:	000546c0 	call	1000546c <rand>
10001794:	01401904 	movi	r5,100
10001798:	1009883a 	mov	r4,r2
1000179c:	00044c40 	call	100044c4 <__modsi3>
100017a0:	10801850 	cmplti	r2,r2,97
100017a4:	1000071e 	bne	r2,zero,100017c4 <monster_update+0x124>
		monster->state = ATTACK1;
100017a8:	e0bffe17 	ldw	r2,-8(fp)
100017ac:	00c001c4 	movi	r3,7
100017b0:	10c00d15 	stw	r3,52(r2)
		monster->fight_relax_time = 5;
100017b4:	e0bffe17 	ldw	r2,-8(fp)
100017b8:	00c00144 	movi	r3,5
100017bc:	10c01615 	stw	r3,88(r2)
		return;
100017c0:	0000a006 	br	10001a44 <monster_update+0x3a4>
	}

	// if monster reaches the left most, the game fails
	if (monster->x == LEFT_MOST){
100017c4:	e0bffe17 	ldw	r2,-8(fp)
100017c8:	10800117 	ldw	r2,4(r2)
100017cc:	10800858 	cmpnei	r2,r2,33
100017d0:	1000031e 	bne	r2,zero,100017e0 <monster_update+0x140>
		saber->HP = 0;
100017d4:	e0bfff17 	ldw	r2,-4(fp)
100017d8:	10000515 	stw	zero,20(r2)
		return;
100017dc:	00009906 	br	10001a44 <monster_update+0x3a4>
	}

	// monster attack detection, if monster state is ATTACK2 and ATTACK3, update
	// monster's attack x position
	if (monster->state >= ATTACK1 && monster->fight_count ++ >FIGHT_COUNT_MAX){
100017e0:	e0bffe17 	ldw	r2,-8(fp)
100017e4:	10800d17 	ldw	r2,52(r2)
100017e8:	108001d0 	cmplti	r2,r2,7
100017ec:	10001f1e 	bne	r2,zero,1000186c <monster_update+0x1cc>
100017f0:	e0bffe17 	ldw	r2,-8(fp)
100017f4:	10801517 	ldw	r2,84(r2)
100017f8:	11000044 	addi	r4,r2,1
100017fc:	e0fffe17 	ldw	r3,-8(fp)
10001800:	19001515 	stw	r4,84(r3)
10001804:	10800190 	cmplti	r2,r2,6
10001808:	1000181e 	bne	r2,zero,1000186c <monster_update+0x1cc>
		if (monster->state == ATTACK2){
1000180c:	e0bffe17 	ldw	r2,-8(fp)
10001810:	10800d17 	ldw	r2,52(r2)
10001814:	10800218 	cmpnei	r2,r2,8
10001818:	1000071e 	bne	r2,zero,10001838 <monster_update+0x198>
			monster->attack_x -= monster->attack_arange;
1000181c:	e0bffe17 	ldw	r2,-8(fp)
10001820:	10c00317 	ldw	r3,12(r2)
10001824:	e0bffe17 	ldw	r2,-8(fp)
10001828:	10800917 	ldw	r2,36(r2)
1000182c:	1887c83a 	sub	r3,r3,r2
10001830:	e0bffe17 	ldw	r2,-8(fp)
10001834:	10c00315 	stw	r3,12(r2)
		}
		monster->state = (monster->state ==ATTACK4)?WALK1:monster->state +1;
10001838:	e0bffe17 	ldw	r2,-8(fp)
1000183c:	10800d17 	ldw	r2,52(r2)
10001840:	108002a0 	cmpeqi	r2,r2,10
10001844:	1000041e 	bne	r2,zero,10001858 <monster_update+0x1b8>
10001848:	e0bffe17 	ldw	r2,-8(fp)
1000184c:	10800d17 	ldw	r2,52(r2)
10001850:	10800044 	addi	r2,r2,1
10001854:	00000106 	br	1000185c <monster_update+0x1bc>
10001858:	0005883a 	mov	r2,zero
1000185c:	e0fffe17 	ldw	r3,-8(fp)
10001860:	18800d15 	stw	r2,52(r3)
		monster->fight_count = 0;
10001864:	e0bffe17 	ldw	r2,-8(fp)
10001868:	10001515 	stw	zero,84(r2)
	}
	// update monster's state
	if (monster->state <= WALK4){
1000186c:	e0bffe17 	ldw	r2,-8(fp)
10001870:	10800d17 	ldw	r2,52(r2)
10001874:	10800108 	cmpgei	r2,r2,4
10001878:	10002d1e 	bne	r2,zero,10001930 <monster_update+0x290>
		monster-> x = (monster->x + monster->vx< LEFT_MOST)?LEFT_MOST:monster->x + monster->vx;
1000187c:	e0bffe17 	ldw	r2,-8(fp)
10001880:	10c00117 	ldw	r3,4(r2)
10001884:	e0bffe17 	ldw	r2,-8(fp)
10001888:	10800517 	ldw	r2,20(r2)
1000188c:	1885883a 	add	r2,r3,r2
10001890:	10c00848 	cmpgei	r3,r2,33
10001894:	1800011e 	bne	r3,zero,1000189c <monster_update+0x1fc>
10001898:	00800844 	movi	r2,33
1000189c:	e0fffe17 	ldw	r3,-8(fp)
100018a0:	18800115 	stw	r2,4(r3)
		if (monster-> y + monster->vy > UP_MOST && monster-> y + monster->vy < DOWN_MOST){
100018a4:	e0bffe17 	ldw	r2,-8(fp)
100018a8:	10c00217 	ldw	r3,8(r2)
100018ac:	e0bffe17 	ldw	r2,-8(fp)
100018b0:	10800617 	ldw	r2,24(r2)
100018b4:	1885883a 	add	r2,r3,r2
100018b8:	10802ad0 	cmplti	r2,r2,171
100018bc:	10000e1e 	bne	r2,zero,100018f8 <monster_update+0x258>
100018c0:	e0bffe17 	ldw	r2,-8(fp)
100018c4:	10c00217 	ldw	r3,8(r2)
100018c8:	e0bffe17 	ldw	r2,-8(fp)
100018cc:	10800617 	ldw	r2,24(r2)
100018d0:	1885883a 	add	r2,r3,r2
100018d4:	10804608 	cmpgei	r2,r2,280
100018d8:	1000071e 	bne	r2,zero,100018f8 <monster_update+0x258>
			monster->y = monster->y + monster->vy;
100018dc:	e0bffe17 	ldw	r2,-8(fp)
100018e0:	10c00217 	ldw	r3,8(r2)
100018e4:	e0bffe17 	ldw	r2,-8(fp)
100018e8:	10800617 	ldw	r2,24(r2)
100018ec:	1887883a 	add	r3,r3,r2
100018f0:	e0bffe17 	ldw	r2,-8(fp)
100018f4:	10c00215 	stw	r3,8(r2)
		}
		monster->attack_x = monster-> x + monster-> attack_biasx;
100018f8:	e0bffe17 	ldw	r2,-8(fp)
100018fc:	10c00117 	ldw	r3,4(r2)
10001900:	e0bffe17 	ldw	r2,-8(fp)
10001904:	10800717 	ldw	r2,28(r2)
10001908:	1887883a 	add	r3,r3,r2
1000190c:	e0bffe17 	ldw	r2,-8(fp)
10001910:	10c00315 	stw	r3,12(r2)
		monster->attack_y = monster-> y + monster-> attack_biasy;
10001914:	e0bffe17 	ldw	r2,-8(fp)
10001918:	10c00217 	ldw	r3,8(r2)
1000191c:	e0bffe17 	ldw	r2,-8(fp)
10001920:	10800817 	ldw	r2,32(r2)
10001924:	1887883a 	add	r3,r3,r2
10001928:	e0bffe17 	ldw	r2,-8(fp)
1000192c:	10c00415 	stw	r3,16(r2)
	}

	if (monster->state_count ++ > STATE_COUNT_MAX){
10001930:	e0bffe17 	ldw	r2,-8(fp)
10001934:	10801017 	ldw	r2,64(r2)
10001938:	11000044 	addi	r4,r2,1
1000193c:	e0fffe17 	ldw	r3,-8(fp)
10001940:	19001015 	stw	r4,64(r3)
10001944:	10800110 	cmplti	r2,r2,4
10001948:	1000391e 	bne	r2,zero,10001a30 <monster_update+0x390>
		// set the frame for monster when he is attacked
		if (monster->state == HIT){
1000194c:	e0bffe17 	ldw	r2,-8(fp)
10001950:	10800d17 	ldw	r2,52(r2)
10001954:	10800118 	cmpnei	r2,r2,4
10001958:	10000e1e 	bne	r2,zero,10001994 <monster_update+0x2f4>
			if (monster->hit_count < 2){
1000195c:	e0bffe17 	ldw	r2,-8(fp)
10001960:	10801217 	ldw	r2,72(r2)
10001964:	10800088 	cmpgei	r2,r2,2
10001968:	1000081e 	bne	r2,zero,1000198c <monster_update+0x2ec>
				monster->hit_count= monster->hit_count+1 ;
1000196c:	e0bffe17 	ldw	r2,-8(fp)
10001970:	10801217 	ldw	r2,72(r2)
10001974:	10c00044 	addi	r3,r2,1
10001978:	e0bffe17 	ldw	r2,-8(fp)
1000197c:	10c01215 	stw	r3,72(r2)
				monster->state_count = 0;
10001980:	e0bffe17 	ldw	r2,-8(fp)
10001984:	10001015 	stw	zero,64(r2)
				return;
10001988:	00002e06 	br	10001a44 <monster_update+0x3a4>
			}else{
				monster->hit_count = 0;
1000198c:	e0bffe17 	ldw	r2,-8(fp)
10001990:	10001215 	stw	zero,72(r2)
			}
		}
		if (monster->state <=HIT && monster->Dying ==0){
10001994:	e0bffe17 	ldw	r2,-8(fp)
10001998:	10800d17 	ldw	r2,52(r2)
1000199c:	10800148 	cmpgei	r2,r2,5
100019a0:	10000f1e 	bne	r2,zero,100019e0 <monster_update+0x340>
100019a4:	e0bffe17 	ldw	r2,-8(fp)
100019a8:	10801317 	ldw	r2,76(r2)
100019ac:	10000c1e 	bne	r2,zero,100019e0 <monster_update+0x340>
			// IF WALK4 OR HIT, RETURN BACK TO WALK1
			monster->state = (monster->state >= WALK4)? WALK1:monster->state+1;
100019b0:	e0bffe17 	ldw	r2,-8(fp)
100019b4:	10800d17 	ldw	r2,52(r2)
100019b8:	108000c8 	cmpgei	r2,r2,3
100019bc:	1000041e 	bne	r2,zero,100019d0 <monster_update+0x330>
100019c0:	e0bffe17 	ldw	r2,-8(fp)
100019c4:	10800d17 	ldw	r2,52(r2)
100019c8:	10800044 	addi	r2,r2,1
100019cc:	00000106 	br	100019d4 <monster_update+0x334>
100019d0:	0005883a 	mov	r2,zero
100019d4:	e0fffe17 	ldw	r3,-8(fp)
100019d8:	18800d15 	stw	r2,52(r3)
100019dc:	00001206 	br	10001a28 <monster_update+0x388>
		}else if (monster->Dying && monster->state <= HIT){
100019e0:	e0bffe17 	ldw	r2,-8(fp)
100019e4:	10801317 	ldw	r2,76(r2)
100019e8:	10000826 	beq	r2,zero,10001a0c <monster_update+0x36c>
100019ec:	e0bffe17 	ldw	r2,-8(fp)
100019f0:	10800d17 	ldw	r2,52(r2)
100019f4:	10800148 	cmpgei	r2,r2,5
100019f8:	1000041e 	bne	r2,zero,10001a0c <monster_update+0x36c>
			monster->state = DEAD1;
100019fc:	e0bffe17 	ldw	r2,-8(fp)
10001a00:	00c00144 	movi	r3,5
10001a04:	10c00d15 	stw	r3,52(r2)
10001a08:	00000706 	br	10001a28 <monster_update+0x388>
		}
		else if (monster->state == DEAD1){
10001a0c:	e0bffe17 	ldw	r2,-8(fp)
10001a10:	10800d17 	ldw	r2,52(r2)
10001a14:	10800158 	cmpnei	r2,r2,5
10001a18:	1000031e 	bne	r2,zero,10001a28 <monster_update+0x388>
			monster->state = DEAD2;
10001a1c:	e0bffe17 	ldw	r2,-8(fp)
10001a20:	00c00184 	movi	r3,6
10001a24:	10c00d15 	stw	r3,52(r2)
		}
		monster->state_count=0;
10001a28:	e0bffe17 	ldw	r2,-8(fp)
10001a2c:	10001015 	stw	zero,64(r2)
	}

	monster_hit_check(monster, saber);
10001a30:	e17fff17 	ldw	r5,-4(fp)
10001a34:	e13ffe17 	ldw	r4,-8(fp)
10001a38:	000127c0 	call	1000127c <monster_hit_check>
10001a3c:	00000106 	br	10001a44 <monster_update+0x3a4>

}

void monster_update(monster_t *monster, saber_t *saber){
	if (monster-> exist ==0){
		return;
10001a40:	0001883a 	nop
		}
		monster->state_count=0;
	}

	monster_hit_check(monster, saber);
}
10001a44:	e037883a 	mov	sp,fp
10001a48:	dfc00117 	ldw	ra,4(sp)
10001a4c:	df000017 	ldw	fp,0(sp)
10001a50:	dec00204 	addi	sp,sp,8
10001a54:	f800283a 	ret

10001a58 <press_w>:
#include "saber_logic.h"
#include <stdio.h>

void press_w(saber_t *saber){
10001a58:	defffd04 	addi	sp,sp,-12
10001a5c:	df000215 	stw	fp,8(sp)
10001a60:	df000204 	addi	fp,sp,8
10001a64:	e13fff15 	stw	r4,-4(fp)
	char can_walk = 0;
10001a68:	e03ffe05 	stb	zero,-8(fp)
	if (saber->state <= WALK_LEFT6 ){
10001a6c:	e0bfff17 	ldw	r2,-4(fp)
10001a70:	10800817 	ldw	r2,32(r2)
10001a74:	10800188 	cmpgei	r2,r2,6
10001a78:	1000171e 	bne	r2,zero,10001ad8 <press_w+0x80>
		// if count reach the state_count_max we set, update the saber state
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001a7c:	e0bfff17 	ldw	r2,-4(fp)
10001a80:	10800917 	ldw	r2,36(r2)
10001a84:	11000044 	addi	r4,r2,1
10001a88:	e0ffff17 	ldw	r3,-4(fp)
10001a8c:	19000915 	stw	r4,36(r3)
10001a90:	10800110 	cmplti	r2,r2,4
10001a94:	10000d1e 	bne	r2,zero,10001acc <press_w+0x74>
			saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
10001a98:	e0bfff17 	ldw	r2,-4(fp)
10001a9c:	10800817 	ldw	r2,32(r2)
10001aa0:	10800160 	cmpeqi	r2,r2,5
10001aa4:	1000041e 	bne	r2,zero,10001ab8 <press_w+0x60>
10001aa8:	e0bfff17 	ldw	r2,-4(fp)
10001aac:	10800817 	ldw	r2,32(r2)
10001ab0:	10800044 	addi	r2,r2,1
10001ab4:	00000106 	br	10001abc <press_w+0x64>
10001ab8:	0005883a 	mov	r2,zero
10001abc:	e0ffff17 	ldw	r3,-4(fp)
10001ac0:	18800815 	stw	r2,32(r3)
			saber->state_count = 0;
10001ac4:	e0bfff17 	ldw	r2,-4(fp)
10001ac8:	10000915 	stw	zero,36(r2)
		}
		can_walk = 1;
10001acc:	00800044 	movi	r2,1
10001ad0:	e0bffe05 	stb	r2,-8(fp)
10001ad4:	00001e06 	br	10001b50 <press_w+0xf8>
	}
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
10001ad8:	e0bfff17 	ldw	r2,-4(fp)
10001adc:	10800817 	ldw	r2,32(r2)
10001ae0:	10800190 	cmplti	r2,r2,6
10001ae4:	10001a1e 	bne	r2,zero,10001b50 <press_w+0xf8>
10001ae8:	e0bfff17 	ldw	r2,-4(fp)
10001aec:	10800817 	ldw	r2,32(r2)
10001af0:	10800308 	cmpgei	r2,r2,12
10001af4:	1000161e 	bne	r2,zero,10001b50 <press_w+0xf8>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001af8:	e0bfff17 	ldw	r2,-4(fp)
10001afc:	10800917 	ldw	r2,36(r2)
10001b00:	11000044 	addi	r4,r2,1
10001b04:	e0ffff17 	ldw	r3,-4(fp)
10001b08:	19000915 	stw	r4,36(r3)
10001b0c:	10800110 	cmplti	r2,r2,4
10001b10:	10000d1e 	bne	r2,zero,10001b48 <press_w+0xf0>
			saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
10001b14:	e0bfff17 	ldw	r2,-4(fp)
10001b18:	10800817 	ldw	r2,32(r2)
10001b1c:	108002e0 	cmpeqi	r2,r2,11
10001b20:	1000041e 	bne	r2,zero,10001b34 <press_w+0xdc>
10001b24:	e0bfff17 	ldw	r2,-4(fp)
10001b28:	10800817 	ldw	r2,32(r2)
10001b2c:	10800044 	addi	r2,r2,1
10001b30:	00000106 	br	10001b38 <press_w+0xe0>
10001b34:	00800184 	movi	r2,6
10001b38:	e0ffff17 	ldw	r3,-4(fp)
10001b3c:	18800815 	stw	r2,32(r3)
			saber->state_count = 0;
10001b40:	e0bfff17 	ldw	r2,-4(fp)
10001b44:	10000915 	stw	zero,36(r2)
		}
		can_walk = 1;
10001b48:	00800044 	movi	r2,1
10001b4c:	e0bffe05 	stb	r2,-8(fp)
	}
    if (can_walk == 1 && saber->vy > -VY_MOST){
10001b50:	e0bffe07 	ldb	r2,-8(fp)
10001b54:	10800058 	cmpnei	r2,r2,1
10001b58:	1000091e 	bne	r2,zero,10001b80 <press_w+0x128>
10001b5c:	e0bfff17 	ldw	r2,-4(fp)
10001b60:	10800417 	ldw	r2,16(r2)
10001b64:	10bfff90 	cmplti	r2,r2,-2
10001b68:	1000051e 	bne	r2,zero,10001b80 <press_w+0x128>
    	saber->vy--;
10001b6c:	e0bfff17 	ldw	r2,-4(fp)
10001b70:	10800417 	ldw	r2,16(r2)
10001b74:	10ffffc4 	addi	r3,r2,-1
10001b78:	e0bfff17 	ldw	r2,-4(fp)
10001b7c:	10c00415 	stw	r3,16(r2)
    }
}
10001b80:	0001883a 	nop
10001b84:	e037883a 	mov	sp,fp
10001b88:	df000017 	ldw	fp,0(sp)
10001b8c:	dec00104 	addi	sp,sp,4
10001b90:	f800283a 	ret

10001b94 <press_s>:

void press_s(saber_t *saber){
10001b94:	defffd04 	addi	sp,sp,-12
10001b98:	df000215 	stw	fp,8(sp)
10001b9c:	df000204 	addi	fp,sp,8
10001ba0:	e13fff15 	stw	r4,-4(fp)
	char can_walk = 0;
10001ba4:	e03ffe05 	stb	zero,-8(fp)
	// if walking leftward
	if (saber->state <= WALK_LEFT6 ){
10001ba8:	e0bfff17 	ldw	r2,-4(fp)
10001bac:	10800817 	ldw	r2,32(r2)
10001bb0:	10800188 	cmpgei	r2,r2,6
10001bb4:	1000171e 	bne	r2,zero,10001c14 <press_s+0x80>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001bb8:	e0bfff17 	ldw	r2,-4(fp)
10001bbc:	10800917 	ldw	r2,36(r2)
10001bc0:	11000044 	addi	r4,r2,1
10001bc4:	e0ffff17 	ldw	r3,-4(fp)
10001bc8:	19000915 	stw	r4,36(r3)
10001bcc:	10800110 	cmplti	r2,r2,4
10001bd0:	10000d1e 	bne	r2,zero,10001c08 <press_s+0x74>
		saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
10001bd4:	e0bfff17 	ldw	r2,-4(fp)
10001bd8:	10800817 	ldw	r2,32(r2)
10001bdc:	10800160 	cmpeqi	r2,r2,5
10001be0:	1000041e 	bne	r2,zero,10001bf4 <press_s+0x60>
10001be4:	e0bfff17 	ldw	r2,-4(fp)
10001be8:	10800817 	ldw	r2,32(r2)
10001bec:	10800044 	addi	r2,r2,1
10001bf0:	00000106 	br	10001bf8 <press_s+0x64>
10001bf4:	0005883a 	mov	r2,zero
10001bf8:	e0ffff17 	ldw	r3,-4(fp)
10001bfc:	18800815 	stw	r2,32(r3)
		saber->state_count = 0;
10001c00:	e0bfff17 	ldw	r2,-4(fp)
10001c04:	10000915 	stw	zero,36(r2)
		}
		can_walk = 1;
10001c08:	00800044 	movi	r2,1
10001c0c:	e0bffe05 	stb	r2,-8(fp)
10001c10:	00001e06 	br	10001c8c <press_s+0xf8>
	}
	// if walking right
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
10001c14:	e0bfff17 	ldw	r2,-4(fp)
10001c18:	10800817 	ldw	r2,32(r2)
10001c1c:	10800190 	cmplti	r2,r2,6
10001c20:	10001a1e 	bne	r2,zero,10001c8c <press_s+0xf8>
10001c24:	e0bfff17 	ldw	r2,-4(fp)
10001c28:	10800817 	ldw	r2,32(r2)
10001c2c:	10800308 	cmpgei	r2,r2,12
10001c30:	1000161e 	bne	r2,zero,10001c8c <press_s+0xf8>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001c34:	e0bfff17 	ldw	r2,-4(fp)
10001c38:	10800917 	ldw	r2,36(r2)
10001c3c:	11000044 	addi	r4,r2,1
10001c40:	e0ffff17 	ldw	r3,-4(fp)
10001c44:	19000915 	stw	r4,36(r3)
10001c48:	10800110 	cmplti	r2,r2,4
10001c4c:	10000d1e 	bne	r2,zero,10001c84 <press_s+0xf0>
		saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
10001c50:	e0bfff17 	ldw	r2,-4(fp)
10001c54:	10800817 	ldw	r2,32(r2)
10001c58:	108002e0 	cmpeqi	r2,r2,11
10001c5c:	1000041e 	bne	r2,zero,10001c70 <press_s+0xdc>
10001c60:	e0bfff17 	ldw	r2,-4(fp)
10001c64:	10800817 	ldw	r2,32(r2)
10001c68:	10800044 	addi	r2,r2,1
10001c6c:	00000106 	br	10001c74 <press_s+0xe0>
10001c70:	00800184 	movi	r2,6
10001c74:	e0ffff17 	ldw	r3,-4(fp)
10001c78:	18800815 	stw	r2,32(r3)
		saber->state_count = 0;
10001c7c:	e0bfff17 	ldw	r2,-4(fp)
10001c80:	10000915 	stw	zero,36(r2)
		}
		can_walk = 1;
10001c84:	00800044 	movi	r2,1
10001c88:	e0bffe05 	stb	r2,-8(fp)
	}
    if (can_walk == 1 && saber->vy < VY_MOST){
10001c8c:	e0bffe07 	ldb	r2,-8(fp)
10001c90:	10800058 	cmpnei	r2,r2,1
10001c94:	1000091e 	bne	r2,zero,10001cbc <press_s+0x128>
10001c98:	e0bfff17 	ldw	r2,-4(fp)
10001c9c:	10800417 	ldw	r2,16(r2)
10001ca0:	108000c8 	cmpgei	r2,r2,3
10001ca4:	1000051e 	bne	r2,zero,10001cbc <press_s+0x128>
    	saber->vy++;
10001ca8:	e0bfff17 	ldw	r2,-4(fp)
10001cac:	10800417 	ldw	r2,16(r2)
10001cb0:	10c00044 	addi	r3,r2,1
10001cb4:	e0bfff17 	ldw	r2,-4(fp)
10001cb8:	10c00415 	stw	r3,16(r2)
    }
}
10001cbc:	0001883a 	nop
10001cc0:	e037883a 	mov	sp,fp
10001cc4:	df000017 	ldw	fp,0(sp)
10001cc8:	dec00104 	addi	sp,sp,4
10001ccc:	f800283a 	ret

10001cd0 <press_a>:

void press_a(saber_t *saber){
10001cd0:	defffe04 	addi	sp,sp,-8
10001cd4:	df000115 	stw	fp,4(sp)
10001cd8:	df000104 	addi	fp,sp,4
10001cdc:	e13fff15 	stw	r4,-4(fp)
	if (saber->state <= WALK_LEFT6 ){
10001ce0:	e0bfff17 	ldw	r2,-4(fp)
10001ce4:	10800817 	ldw	r2,32(r2)
10001ce8:	10800188 	cmpgei	r2,r2,6
10001cec:	10001e1e 	bne	r2,zero,10001d68 <press_a+0x98>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001cf0:	e0bfff17 	ldw	r2,-4(fp)
10001cf4:	10800917 	ldw	r2,36(r2)
10001cf8:	11000044 	addi	r4,r2,1
10001cfc:	e0ffff17 	ldw	r3,-4(fp)
10001d00:	19000915 	stw	r4,36(r3)
10001d04:	10800110 	cmplti	r2,r2,4
10001d08:	10000d1e 	bne	r2,zero,10001d40 <press_a+0x70>
		saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
10001d0c:	e0bfff17 	ldw	r2,-4(fp)
10001d10:	10800817 	ldw	r2,32(r2)
10001d14:	10800160 	cmpeqi	r2,r2,5
10001d18:	1000041e 	bne	r2,zero,10001d2c <press_a+0x5c>
10001d1c:	e0bfff17 	ldw	r2,-4(fp)
10001d20:	10800817 	ldw	r2,32(r2)
10001d24:	10800044 	addi	r2,r2,1
10001d28:	00000106 	br	10001d30 <press_a+0x60>
10001d2c:	0005883a 	mov	r2,zero
10001d30:	e0ffff17 	ldw	r3,-4(fp)
10001d34:	18800815 	stw	r2,32(r3)
		saber->state_count = 0;
10001d38:	e0bfff17 	ldw	r2,-4(fp)
10001d3c:	10000915 	stw	zero,36(r2)
		}
		if (saber->vx > -VX_MOST){
10001d40:	e0bfff17 	ldw	r2,-4(fp)
10001d44:	10800317 	ldw	r2,12(r2)
10001d48:	10bfff50 	cmplti	r2,r2,-3
10001d4c:	1000151e 	bne	r2,zero,10001da4 <press_a+0xd4>
			saber->vx--;
10001d50:	e0bfff17 	ldw	r2,-4(fp)
10001d54:	10800317 	ldw	r2,12(r2)
10001d58:	10ffffc4 	addi	r3,r2,-1
10001d5c:	e0bfff17 	ldw	r2,-4(fp)
10001d60:	10c00315 	stw	r3,12(r2)
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
		saber->state = WALK_LEFT1;
		saber -> vx = 0;
		saber->FaceDirection = LEFT;
	}
}
10001d64:	00000f06 	br	10001da4 <press_a+0xd4>
		}
		if (saber->vx > -VX_MOST){
			saber->vx--;
		}
	}
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
10001d68:	e0bfff17 	ldw	r2,-4(fp)
10001d6c:	10800817 	ldw	r2,32(r2)
10001d70:	10800190 	cmplti	r2,r2,6
10001d74:	10000b1e 	bne	r2,zero,10001da4 <press_a+0xd4>
10001d78:	e0bfff17 	ldw	r2,-4(fp)
10001d7c:	10800817 	ldw	r2,32(r2)
10001d80:	10800308 	cmpgei	r2,r2,12
10001d84:	1000071e 	bne	r2,zero,10001da4 <press_a+0xd4>
		saber->state = WALK_LEFT1;
10001d88:	e0bfff17 	ldw	r2,-4(fp)
10001d8c:	10000815 	stw	zero,32(r2)
		saber -> vx = 0;
10001d90:	e0bfff17 	ldw	r2,-4(fp)
10001d94:	10000315 	stw	zero,12(r2)
		saber->FaceDirection = LEFT;
10001d98:	e0bfff17 	ldw	r2,-4(fp)
10001d9c:	00c00044 	movi	r3,1
10001da0:	10c00715 	stw	r3,28(r2)
	}
}
10001da4:	0001883a 	nop
10001da8:	e037883a 	mov	sp,fp
10001dac:	df000017 	ldw	fp,0(sp)
10001db0:	dec00104 	addi	sp,sp,4
10001db4:	f800283a 	ret

10001db8 <press_d>:

void press_d(saber_t *saber){
10001db8:	defffe04 	addi	sp,sp,-8
10001dbc:	df000115 	stw	fp,4(sp)
10001dc0:	df000104 	addi	fp,sp,4
10001dc4:	e13fff15 	stw	r4,-4(fp)
	if (saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6 ){
10001dc8:	e0bfff17 	ldw	r2,-4(fp)
10001dcc:	10800817 	ldw	r2,32(r2)
10001dd0:	10800190 	cmplti	r2,r2,6
10001dd4:	1000221e 	bne	r2,zero,10001e60 <press_d+0xa8>
10001dd8:	e0bfff17 	ldw	r2,-4(fp)
10001ddc:	10800817 	ldw	r2,32(r2)
10001de0:	10800308 	cmpgei	r2,r2,12
10001de4:	10001e1e 	bne	r2,zero,10001e60 <press_d+0xa8>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001de8:	e0bfff17 	ldw	r2,-4(fp)
10001dec:	10800917 	ldw	r2,36(r2)
10001df0:	11000044 	addi	r4,r2,1
10001df4:	e0ffff17 	ldw	r3,-4(fp)
10001df8:	19000915 	stw	r4,36(r3)
10001dfc:	10800110 	cmplti	r2,r2,4
10001e00:	10000d1e 	bne	r2,zero,10001e38 <press_d+0x80>
		saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
10001e04:	e0bfff17 	ldw	r2,-4(fp)
10001e08:	10800817 	ldw	r2,32(r2)
10001e0c:	108002e0 	cmpeqi	r2,r2,11
10001e10:	1000041e 	bne	r2,zero,10001e24 <press_d+0x6c>
10001e14:	e0bfff17 	ldw	r2,-4(fp)
10001e18:	10800817 	ldw	r2,32(r2)
10001e1c:	10800044 	addi	r2,r2,1
10001e20:	00000106 	br	10001e28 <press_d+0x70>
10001e24:	00800184 	movi	r2,6
10001e28:	e0ffff17 	ldw	r3,-4(fp)
10001e2c:	18800815 	stw	r2,32(r3)
		saber->state_count = 0;
10001e30:	e0bfff17 	ldw	r2,-4(fp)
10001e34:	10000915 	stw	zero,36(r2)
		}
		if (saber->vx < VX_MOST){
10001e38:	e0bfff17 	ldw	r2,-4(fp)
10001e3c:	10800317 	ldw	r2,12(r2)
10001e40:	10800108 	cmpgei	r2,r2,4
10001e44:	1000121e 	bne	r2,zero,10001e90 <press_d+0xd8>
			saber->vx++;
10001e48:	e0bfff17 	ldw	r2,-4(fp)
10001e4c:	10800317 	ldw	r2,12(r2)
10001e50:	10c00044 	addi	r3,r2,1
10001e54:	e0bfff17 	ldw	r2,-4(fp)
10001e58:	10c00315 	stw	r3,12(r2)
	if (saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6 ){
		if (saber->state_count ++ > STATE_COUNT_MAX){
		saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
		saber->state_count = 0;
		}
		if (saber->vx < VX_MOST){
10001e5c:	00000c06 	br	10001e90 <press_d+0xd8>
			saber->vx++;
		}
	}
	else if(saber->state <= WALK_LEFT6){
10001e60:	e0bfff17 	ldw	r2,-4(fp)
10001e64:	10800817 	ldw	r2,32(r2)
10001e68:	10800188 	cmpgei	r2,r2,6
10001e6c:	1000081e 	bne	r2,zero,10001e90 <press_d+0xd8>
		saber->state = WALK_RIGHT1;
10001e70:	e0bfff17 	ldw	r2,-4(fp)
10001e74:	00c00184 	movi	r3,6
10001e78:	10c00815 	stw	r3,32(r2)
		saber-> vx = 0;
10001e7c:	e0bfff17 	ldw	r2,-4(fp)
10001e80:	10000315 	stw	zero,12(r2)
		saber->FaceDirection = RIGHT;
10001e84:	e0bfff17 	ldw	r2,-4(fp)
10001e88:	10000715 	stw	zero,28(r2)
	}
}
10001e8c:	00000006 	br	10001e90 <press_d+0xd8>
10001e90:	0001883a 	nop
10001e94:	e037883a 	mov	sp,fp
10001e98:	df000017 	ldw	fp,0(sp)
10001e9c:	dec00104 	addi	sp,sp,4
10001ea0:	f800283a 	ret

10001ea4 <press_j>:

void press_j(saber_t *saber){
10001ea4:	defffe04 	addi	sp,sp,-8
10001ea8:	df000115 	stw	fp,4(sp)
10001eac:	df000104 	addi	fp,sp,4
10001eb0:	e13fff15 	stw	r4,-4(fp)
	if (saber->state <= WALK_LEFT6){
10001eb4:	e0bfff17 	ldw	r2,-4(fp)
10001eb8:	10800817 	ldw	r2,32(r2)
10001ebc:	10800188 	cmpgei	r2,r2,6
10001ec0:	1000091e 	bne	r2,zero,10001ee8 <press_j+0x44>
		saber-> state = ATTACK_LEFT1;
10001ec4:	e0bfff17 	ldw	r2,-4(fp)
10001ec8:	00c00304 	movi	r3,12
10001ecc:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10001ed0:	e0bfff17 	ldw	r2,-4(fp)
10001ed4:	10000915 	stw	zero,36(r2)
		saber-> IsFighting = 1;
10001ed8:	e0bfff17 	ldw	r2,-4(fp)
10001edc:	00c00044 	movi	r3,1
10001ee0:	10c00d15 	stw	r3,52(r2)
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
		saber-> state = ATTACK_RIGHT1;
		saber-> state_count = 0;
		saber-> IsFighting = 1;
	}
}
10001ee4:	00001006 	br	10001f28 <press_j+0x84>
void press_j(saber_t *saber){
	if (saber->state <= WALK_LEFT6){
		saber-> state = ATTACK_LEFT1;
		saber-> state_count = 0;
		saber-> IsFighting = 1;
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
10001ee8:	e0bfff17 	ldw	r2,-4(fp)
10001eec:	10800817 	ldw	r2,32(r2)
10001ef0:	10800190 	cmplti	r2,r2,6
10001ef4:	10000c1e 	bne	r2,zero,10001f28 <press_j+0x84>
10001ef8:	e0bfff17 	ldw	r2,-4(fp)
10001efc:	10800817 	ldw	r2,32(r2)
10001f00:	10800308 	cmpgei	r2,r2,12
10001f04:	1000081e 	bne	r2,zero,10001f28 <press_j+0x84>
		saber-> state = ATTACK_RIGHT1;
10001f08:	e0bfff17 	ldw	r2,-4(fp)
10001f0c:	00c00584 	movi	r3,22
10001f10:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10001f14:	e0bfff17 	ldw	r2,-4(fp)
10001f18:	10000915 	stw	zero,36(r2)
		saber-> IsFighting = 1;
10001f1c:	e0bfff17 	ldw	r2,-4(fp)
10001f20:	00c00044 	movi	r3,1
10001f24:	10c00d15 	stw	r3,52(r2)
	}
}
10001f28:	0001883a 	nop
10001f2c:	e037883a 	mov	sp,fp
10001f30:	df000017 	ldw	fp,0(sp)
10001f34:	dec00104 	addi	sp,sp,4
10001f38:	f800283a 	ret

10001f3c <press_k>:

void press_k(saber_t *saber){
10001f3c:	defffe04 	addi	sp,sp,-8
10001f40:	df000115 	stw	fp,4(sp)
10001f44:	df000104 	addi	fp,sp,4
10001f48:	e13fff15 	stw	r4,-4(fp)
	if (saber->Excalibur_remain ==0){
10001f4c:	e0bfff17 	ldw	r2,-4(fp)
10001f50:	10800c17 	ldw	r2,48(r2)
10001f54:	10002826 	beq	r2,zero,10001ff8 <press_k+0xbc>
		return;
	}
	if (saber->state <= WALK_LEFT6){
10001f58:	e0bfff17 	ldw	r2,-4(fp)
10001f5c:	10800817 	ldw	r2,32(r2)
10001f60:	10800188 	cmpgei	r2,r2,6
10001f64:	10000f1e 	bne	r2,zero,10001fa4 <press_k+0x68>
		saber-> state = EXCALIBUR_LEFT1;
10001f68:	e0bfff17 	ldw	r2,-4(fp)
10001f6c:	00c00404 	movi	r3,16
10001f70:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10001f74:	e0bfff17 	ldw	r2,-4(fp)
10001f78:	10000915 	stw	zero,36(r2)
		saber-> Excalibur_state = EXCALIBUR1;
10001f7c:	e0bfff17 	ldw	r2,-4(fp)
10001f80:	10000a15 	stw	zero,40(r2)
		saber-> Excalibur_count = 0;
10001f84:	e0bfff17 	ldw	r2,-4(fp)
10001f88:	10000b15 	stw	zero,44(r2)
		saber-> Excalibur_remain --;
10001f8c:	e0bfff17 	ldw	r2,-4(fp)
10001f90:	10800c17 	ldw	r2,48(r2)
10001f94:	10ffffc4 	addi	r3,r2,-1
10001f98:	e0bfff17 	ldw	r2,-4(fp)
10001f9c:	10c00c15 	stw	r3,48(r2)
10001fa0:	00001606 	br	10001ffc <press_k+0xc0>
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
10001fa4:	e0bfff17 	ldw	r2,-4(fp)
10001fa8:	10800817 	ldw	r2,32(r2)
10001fac:	10800190 	cmplti	r2,r2,6
10001fb0:	1000121e 	bne	r2,zero,10001ffc <press_k+0xc0>
10001fb4:	e0bfff17 	ldw	r2,-4(fp)
10001fb8:	10800817 	ldw	r2,32(r2)
10001fbc:	10800308 	cmpgei	r2,r2,12
10001fc0:	10000e1e 	bne	r2,zero,10001ffc <press_k+0xc0>
		saber-> state = EXCALIBUR_RIGHT1;
10001fc4:	e0bfff17 	ldw	r2,-4(fp)
10001fc8:	00c00684 	movi	r3,26
10001fcc:	10c00815 	stw	r3,32(r2)
		saber-> Excalibur_state = EXCALIBUR1;
10001fd0:	e0bfff17 	ldw	r2,-4(fp)
10001fd4:	10000a15 	stw	zero,40(r2)
		saber-> Excalibur_count = 0;
10001fd8:	e0bfff17 	ldw	r2,-4(fp)
10001fdc:	10000b15 	stw	zero,44(r2)
		saber-> Excalibur_remain --;
10001fe0:	e0bfff17 	ldw	r2,-4(fp)
10001fe4:	10800c17 	ldw	r2,48(r2)
10001fe8:	10ffffc4 	addi	r3,r2,-1
10001fec:	e0bfff17 	ldw	r2,-4(fp)
10001ff0:	10c00c15 	stw	r3,48(r2)
10001ff4:	00000106 	br	10001ffc <press_k+0xc0>
	}
}

void press_k(saber_t *saber){
	if (saber->Excalibur_remain ==0){
		return;
10001ff8:	0001883a 	nop
		saber-> state = EXCALIBUR_RIGHT1;
		saber-> Excalibur_state = EXCALIBUR1;
		saber-> Excalibur_count = 0;
		saber-> Excalibur_remain --;
	}
}
10001ffc:	e037883a 	mov	sp,fp
10002000:	df000017 	ldw	fp,0(sp)
10002004:	dec00104 	addi	sp,sp,4
10002008:	f800283a 	ret

1000200c <press_l>:

void press_l(saber_t *saber){
1000200c:	defffe04 	addi	sp,sp,-8
10002010:	df000115 	stw	fp,4(sp)
10002014:	df000104 	addi	fp,sp,4
10002018:	e13fff15 	stw	r4,-4(fp)
	if (saber->state <= WALK_LEFT6 ||(saber->state >= ATTACK_LEFT1 && saber->state <= ATTACK_LEFT4 )){
1000201c:	e0bfff17 	ldw	r2,-4(fp)
10002020:	10800817 	ldw	r2,32(r2)
10002024:	10800190 	cmplti	r2,r2,6
10002028:	1000081e 	bne	r2,zero,1000204c <press_l+0x40>
1000202c:	e0bfff17 	ldw	r2,-4(fp)
10002030:	10800817 	ldw	r2,32(r2)
10002034:	10800310 	cmplti	r2,r2,12
10002038:	10000a1e 	bne	r2,zero,10002064 <press_l+0x58>
1000203c:	e0bfff17 	ldw	r2,-4(fp)
10002040:	10800817 	ldw	r2,32(r2)
10002044:	10800408 	cmpgei	r2,r2,16
10002048:	1000061e 	bne	r2,zero,10002064 <press_l+0x58>
		saber-> state = POSE_LEFT1;
1000204c:	e0bfff17 	ldw	r2,-4(fp)
10002050:	00c00504 	movi	r3,20
10002054:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10002058:	e0bfff17 	ldw	r2,-4(fp)
1000205c:	10000915 	stw	zero,36(r2)
	}else if ((saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6) ||
			(saber->state >= ATTACK_RIGHT1 && saber->state <= ATTACK_RIGHT4)){
		saber-> state = POSE_RIGHT1;
		saber-> state_count = 0;
	}
}
10002060:	00001506 	br	100020b8 <press_l+0xac>

void press_l(saber_t *saber){
	if (saber->state <= WALK_LEFT6 ||(saber->state >= ATTACK_LEFT1 && saber->state <= ATTACK_LEFT4 )){
		saber-> state = POSE_LEFT1;
		saber-> state_count = 0;
	}else if ((saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6) ||
10002064:	e0bfff17 	ldw	r2,-4(fp)
10002068:	10800817 	ldw	r2,32(r2)
1000206c:	10800190 	cmplti	r2,r2,6
10002070:	1000041e 	bne	r2,zero,10002084 <press_l+0x78>
10002074:	e0bfff17 	ldw	r2,-4(fp)
10002078:	10800817 	ldw	r2,32(r2)
1000207c:	10800310 	cmplti	r2,r2,12
10002080:	1000081e 	bne	r2,zero,100020a4 <press_l+0x98>
			(saber->state >= ATTACK_RIGHT1 && saber->state <= ATTACK_RIGHT4)){
10002084:	e0bfff17 	ldw	r2,-4(fp)
10002088:	10800817 	ldw	r2,32(r2)

void press_l(saber_t *saber){
	if (saber->state <= WALK_LEFT6 ||(saber->state >= ATTACK_LEFT1 && saber->state <= ATTACK_LEFT4 )){
		saber-> state = POSE_LEFT1;
		saber-> state_count = 0;
	}else if ((saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6) ||
1000208c:	10800590 	cmplti	r2,r2,22
10002090:	1000091e 	bne	r2,zero,100020b8 <press_l+0xac>
			(saber->state >= ATTACK_RIGHT1 && saber->state <= ATTACK_RIGHT4)){
10002094:	e0bfff17 	ldw	r2,-4(fp)
10002098:	10800817 	ldw	r2,32(r2)
1000209c:	10800688 	cmpgei	r2,r2,26
100020a0:	1000051e 	bne	r2,zero,100020b8 <press_l+0xac>
		saber-> state = POSE_RIGHT1;
100020a4:	e0bfff17 	ldw	r2,-4(fp)
100020a8:	00c00784 	movi	r3,30
100020ac:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
100020b0:	e0bfff17 	ldw	r2,-4(fp)
100020b4:	10000915 	stw	zero,36(r2)
	}
}
100020b8:	0001883a 	nop
100020bc:	e037883a 	mov	sp,fp
100020c0:	df000017 	ldw	fp,0(sp)
100020c4:	dec00104 	addi	sp,sp,4
100020c8:	f800283a 	ret

100020cc <saber_init>:


void saber_init(saber_t *saber){
100020cc:	defffe04 	addi	sp,sp,-8
100020d0:	df000115 	stw	fp,4(sp)
100020d4:	df000104 	addi	fp,sp,4
100020d8:	e13fff15 	stw	r4,-4(fp)
	saber -> exist = 1;
100020dc:	e0bfff17 	ldw	r2,-4(fp)
100020e0:	00c00044 	movi	r3,1
100020e4:	10c00015 	stw	r3,0(r2)
	saber -> vx = 0;
100020e8:	e0bfff17 	ldw	r2,-4(fp)
100020ec:	10000315 	stw	zero,12(r2)
	saber -> vy = 0;
100020f0:	e0bfff17 	ldw	r2,-4(fp)
100020f4:	10000415 	stw	zero,16(r2)
	saber -> x = INIT_X;
100020f8:	e0bfff17 	ldw	r2,-4(fp)
100020fc:	00c00c84 	movi	r3,50
10002100:	10c00115 	stw	r3,4(r2)
	saber -> y = INIT_Y;
10002104:	e0bfff17 	ldw	r2,-4(fp)
10002108:	00c03c04 	movi	r3,240
1000210c:	10c00215 	stw	r3,8(r2)
	saber -> HP = 3;
10002110:	e0bfff17 	ldw	r2,-4(fp)
10002114:	00c000c4 	movi	r3,3
10002118:	10c00515 	stw	r3,20(r2)
	saber -> ATK = 3;
1000211c:	e0bfff17 	ldw	r2,-4(fp)
10002120:	00c000c4 	movi	r3,3
10002124:	10c00615 	stw	r3,24(r2)
	saber -> state = WALK_RIGHT1;
10002128:	e0bfff17 	ldw	r2,-4(fp)
1000212c:	00c00184 	movi	r3,6
10002130:	10c00815 	stw	r3,32(r2)
	saber -> state_count = 0;
10002134:	e0bfff17 	ldw	r2,-4(fp)
10002138:	10000915 	stw	zero,36(r2)
	saber -> Excalibur_state = EXCALIBURNULL;
1000213c:	e0bfff17 	ldw	r2,-4(fp)
10002140:	00c00204 	movi	r3,8
10002144:	10c00a15 	stw	r3,40(r2)
	saber -> Excalibur_damage = 5;
10002148:	e0bfff17 	ldw	r2,-4(fp)
1000214c:	00c00144 	movi	r3,5
10002150:	10c00f15 	stw	r3,60(r2)
	saber -> Excalibur_remain = 3;
10002154:	e0bfff17 	ldw	r2,-4(fp)
10002158:	00c000c4 	movi	r3,3
1000215c:	10c00c15 	stw	r3,48(r2)
	saber -> IsFighting = 0;
10002160:	e0bfff17 	ldw	r2,-4(fp)
10002164:	10000d15 	stw	zero,52(r2)
	saber -> FaceDirection = RIGHT;
10002168:	e0bfff17 	ldw	r2,-4(fp)
1000216c:	10000715 	stw	zero,28(r2)
	saber -> injuring =0;
10002170:	e0bfff17 	ldw	r2,-4(fp)
10002174:	10000e15 	stw	zero,56(r2)
}
10002178:	0001883a 	nop
1000217c:	e037883a 	mov	sp,fp
10002180:	df000017 	ldw	fp,0(sp)
10002184:	dec00104 	addi	sp,sp,4
10002188:	f800283a 	ret

1000218c <update>:


void update(saber_t *saber){
1000218c:	defffd04 	addi	sp,sp,-12
10002190:	dfc00215 	stw	ra,8(sp)
10002194:	df000115 	stw	fp,4(sp)
10002198:	df000104 	addi	fp,sp,4
1000219c:	e13fff15 	stw	r4,-4(fp)
	saber -> x = saber ->x + saber->vx;
100021a0:	e0bfff17 	ldw	r2,-4(fp)
100021a4:	10c00117 	ldw	r3,4(r2)
100021a8:	e0bfff17 	ldw	r2,-4(fp)
100021ac:	10800317 	ldw	r2,12(r2)
100021b0:	1887883a 	add	r3,r3,r2
100021b4:	e0bfff17 	ldw	r2,-4(fp)
100021b8:	10c00115 	stw	r3,4(r2)
	saber -> y = saber ->y + saber->vy;
100021bc:	e0bfff17 	ldw	r2,-4(fp)
100021c0:	10c00217 	ldw	r3,8(r2)
100021c4:	e0bfff17 	ldw	r2,-4(fp)
100021c8:	10800417 	ldw	r2,16(r2)
100021cc:	1887883a 	add	r3,r3,r2
100021d0:	e0bfff17 	ldw	r2,-4(fp)
100021d4:	10c00215 	stw	r3,8(r2)

	if (saber->injuring){
100021d8:	e0bfff17 	ldw	r2,-4(fp)
100021dc:	10800e17 	ldw	r2,56(r2)
100021e0:	10001d26 	beq	r2,zero,10002258 <update+0xcc>
		saber->exist = (saber->injuring-1)/2 % 2;
100021e4:	e0bfff17 	ldw	r2,-4(fp)
100021e8:	10800e17 	ldw	r2,56(r2)
100021ec:	10bfffc4 	addi	r2,r2,-1
100021f0:	1006d7fa 	srli	r3,r2,31
100021f4:	1885883a 	add	r2,r3,r2
100021f8:	1005d07a 	srai	r2,r2,1
100021fc:	1007883a 	mov	r3,r2
10002200:	00a00034 	movhi	r2,32768
10002204:	10800044 	addi	r2,r2,1
10002208:	1884703a 	and	r2,r3,r2
1000220c:	1000040e 	bge	r2,zero,10002220 <update+0x94>
10002210:	10bfffc4 	addi	r2,r2,-1
10002214:	00ffff84 	movi	r3,-2
10002218:	10c4b03a 	or	r2,r2,r3
1000221c:	10800044 	addi	r2,r2,1
10002220:	1007883a 	mov	r3,r2
10002224:	e0bfff17 	ldw	r2,-4(fp)
10002228:	10c00015 	stw	r3,0(r2)
		saber->injuring = (saber->injuring>=8)?0:saber->injuring+1;
1000222c:	e0bfff17 	ldw	r2,-4(fp)
10002230:	10800e17 	ldw	r2,56(r2)
10002234:	10800208 	cmpgei	r2,r2,8
10002238:	1000041e 	bne	r2,zero,1000224c <update+0xc0>
1000223c:	e0bfff17 	ldw	r2,-4(fp)
10002240:	10800e17 	ldw	r2,56(r2)
10002244:	10800044 	addi	r2,r2,1
10002248:	00000106 	br	10002250 <update+0xc4>
1000224c:	0005883a 	mov	r2,zero
10002250:	e0ffff17 	ldw	r3,-4(fp)
10002254:	18800e15 	stw	r2,56(r3)
	}

	if (saber->Excalibur_state< EXCALIBURNULL ){
10002258:	e0bfff17 	ldw	r2,-4(fp)
1000225c:	10800a17 	ldw	r2,40(r2)
10002260:	10800208 	cmpgei	r2,r2,8
10002264:	10000e1e 	bne	r2,zero,100022a0 <update+0x114>
		if (saber->Excalibur_count ++ >EXCALIBUR_COUNT_MAX){
10002268:	e0bfff17 	ldw	r2,-4(fp)
1000226c:	10800b17 	ldw	r2,44(r2)
10002270:	11000044 	addi	r4,r2,1
10002274:	e0ffff17 	ldw	r3,-4(fp)
10002278:	19000b15 	stw	r4,44(r3)
1000227c:	10800090 	cmplti	r2,r2,2
10002280:	1000071e 	bne	r2,zero,100022a0 <update+0x114>
			saber->Excalibur_state++;
10002284:	e0bfff17 	ldw	r2,-4(fp)
10002288:	10800a17 	ldw	r2,40(r2)
1000228c:	10c00044 	addi	r3,r2,1
10002290:	e0bfff17 	ldw	r2,-4(fp)
10002294:	10c00a15 	stw	r3,40(r2)
			saber->Excalibur_count = 0;
10002298:	e0bfff17 	ldw	r2,-4(fp)
1000229c:	10000b15 	stw	zero,44(r2)
		}
	}
	// boundary check
	if (saber-> x < LEFT_MOST){saber-> x = LEFT_MOST;}
100022a0:	e0bfff17 	ldw	r2,-4(fp)
100022a4:	10800117 	ldw	r2,4(r2)
100022a8:	10800848 	cmpgei	r2,r2,33
100022ac:	1000031e 	bne	r2,zero,100022bc <update+0x130>
100022b0:	e0bfff17 	ldw	r2,-4(fp)
100022b4:	00c00844 	movi	r3,33
100022b8:	10c00115 	stw	r3,4(r2)
	if (saber-> x > RIGHT_MOST){saber-> x = RIGHT_MOST;}
100022bc:	e0bfff17 	ldw	r2,-4(fp)
100022c0:	10800117 	ldw	r2,4(r2)
100022c4:	10809810 	cmplti	r2,r2,608
100022c8:	1000031e 	bne	r2,zero,100022d8 <update+0x14c>
100022cc:	e0bfff17 	ldw	r2,-4(fp)
100022d0:	00c097c4 	movi	r3,607
100022d4:	10c00115 	stw	r3,4(r2)
	if (saber-> y < UP_MOST){saber-> y = UP_MOST;}
100022d8:	e0bfff17 	ldw	r2,-4(fp)
100022dc:	10800217 	ldw	r2,8(r2)
100022e0:	10802a88 	cmpgei	r2,r2,170
100022e4:	1000031e 	bne	r2,zero,100022f4 <update+0x168>
100022e8:	e0bfff17 	ldw	r2,-4(fp)
100022ec:	00c02a84 	movi	r3,170
100022f0:	10c00215 	stw	r3,8(r2)
	if (saber-> y > DOWN_MOST){saber-> y = DOWN_MOST;}
100022f4:	e0bfff17 	ldw	r2,-4(fp)
100022f8:	10800217 	ldw	r2,8(r2)
100022fc:	10804650 	cmplti	r2,r2,281
10002300:	1000031e 	bne	r2,zero,10002310 <update+0x184>
10002304:	e0bfff17 	ldw	r2,-4(fp)
10002308:	00c04604 	movi	r3,280
1000230c:	10c00215 	stw	r3,8(r2)

	update_helper(saber, ATTACK_LEFT1, ATTACK_LEFT4);
10002310:	018003c4 	movi	r6,15
10002314:	01400304 	movi	r5,12
10002318:	e13fff17 	ldw	r4,-4(fp)
1000231c:	00023e00 	call	100023e0 <update_helper>
	update_helper(saber, ATTACK_RIGHT1, ATTACK_RIGHT4);
10002320:	01800644 	movi	r6,25
10002324:	01400584 	movi	r5,22
10002328:	e13fff17 	ldw	r4,-4(fp)
1000232c:	00023e00 	call	100023e0 <update_helper>
	update_helper(saber, EXCALIBUR_LEFT1, EXCALIBUR_LEFT4);
10002330:	018004c4 	movi	r6,19
10002334:	01400404 	movi	r5,16
10002338:	e13fff17 	ldw	r4,-4(fp)
1000233c:	00023e00 	call	100023e0 <update_helper>
	update_helper(saber, EXCALIBUR_RIGHT1, EXCALIBUR_RIGHT4);
10002340:	01800744 	movi	r6,29
10002344:	01400684 	movi	r5,26
10002348:	e13fff17 	ldw	r4,-4(fp)
1000234c:	00023e00 	call	100023e0 <update_helper>
	update_helper(saber, POSE_LEFT1, POSE_LEFT2);
10002350:	01800544 	movi	r6,21
10002354:	01400504 	movi	r5,20
10002358:	e13fff17 	ldw	r4,-4(fp)
1000235c:	00023e00 	call	100023e0 <update_helper>
	update_helper(saber, POSE_RIGHT1, POSE_RIGHT2);
10002360:	018007c4 	movi	r6,31
10002364:	01400784 	movi	r5,30
10002368:	e13fff17 	ldw	r4,-4(fp)
1000236c:	00023e00 	call	100023e0 <update_helper>
}
10002370:	0001883a 	nop
10002374:	e037883a 	mov	sp,fp
10002378:	dfc00117 	ldw	ra,4(sp)
1000237c:	df000017 	ldw	fp,0(sp)
10002380:	dec00204 	addi	sp,sp,8
10002384:	f800283a 	ret

10002388 <stop>:

void stop(saber_t *saber){
10002388:	defffe04 	addi	sp,sp,-8
1000238c:	df000115 	stw	fp,4(sp)
10002390:	df000104 	addi	fp,sp,4
10002394:	e13fff15 	stw	r4,-4(fp)
	saber-> vx =0;
10002398:	e0bfff17 	ldw	r2,-4(fp)
1000239c:	10000315 	stw	zero,12(r2)
	saber-> vy =0;
100023a0:	e0bfff17 	ldw	r2,-4(fp)
100023a4:	10000415 	stw	zero,16(r2)
	if (saber -> FaceDirection == RIGHT){
100023a8:	e0bfff17 	ldw	r2,-4(fp)
100023ac:	10800717 	ldw	r2,28(r2)
100023b0:	1000041e 	bne	r2,zero,100023c4 <stop+0x3c>
		saber -> state = WALK_RIGHT1;
100023b4:	e0bfff17 	ldw	r2,-4(fp)
100023b8:	00c00184 	movi	r3,6
100023bc:	10c00815 	stw	r3,32(r2)
	}else{
		saber -> state = WALK_LEFT1;
	}
}
100023c0:	00000206 	br	100023cc <stop+0x44>
	saber-> vx =0;
	saber-> vy =0;
	if (saber -> FaceDirection == RIGHT){
		saber -> state = WALK_RIGHT1;
	}else{
		saber -> state = WALK_LEFT1;
100023c4:	e0bfff17 	ldw	r2,-4(fp)
100023c8:	10000815 	stw	zero,32(r2)
	}
}
100023cc:	0001883a 	nop
100023d0:	e037883a 	mov	sp,fp
100023d4:	df000017 	ldw	fp,0(sp)
100023d8:	dec00104 	addi	sp,sp,4
100023dc:	f800283a 	ret

100023e0 <update_helper>:

void update_helper(saber_t*saber, int state_start, int state_end){
100023e0:	defffb04 	addi	sp,sp,-20
100023e4:	df000415 	stw	fp,16(sp)
100023e8:	df000404 	addi	fp,sp,16
100023ec:	e13ffd15 	stw	r4,-12(fp)
100023f0:	e17ffe15 	stw	r5,-8(fp)
100023f4:	e1bfff15 	stw	r6,-4(fp)
	int final_frame;
	final_frame = saber->FaceDirection == RIGHT? WALK_RIGHT1:WALK_LEFT1;
100023f8:	e0bffd17 	ldw	r2,-12(fp)
100023fc:	10800717 	ldw	r2,28(r2)
10002400:	1000021e 	bne	r2,zero,1000240c <update_helper+0x2c>
10002404:	00800184 	movi	r2,6
10002408:	00000106 	br	10002410 <update_helper+0x30>
1000240c:	0005883a 	mov	r2,zero
10002410:	e0bffc15 	stw	r2,-16(fp)
	if (saber->HP == 0){
10002414:	e0bffd17 	ldw	r2,-12(fp)
10002418:	10800517 	ldw	r2,20(r2)
1000241c:	1000021e 	bne	r2,zero,10002428 <update_helper+0x48>
		saber->exist = 0;
10002420:	e0bffd17 	ldw	r2,-12(fp)
10002424:	10000015 	stw	zero,0(r2)
	}
	if (saber->state >= state_start && saber->state<= state_end){
10002428:	e0bffd17 	ldw	r2,-12(fp)
1000242c:	10c00817 	ldw	r3,32(r2)
10002430:	e0bffe17 	ldw	r2,-8(fp)
10002434:	18801e16 	blt	r3,r2,100024b0 <update_helper+0xd0>
10002438:	e0bffd17 	ldw	r2,-12(fp)
1000243c:	10800817 	ldw	r2,32(r2)
10002440:	e0ffff17 	ldw	r3,-4(fp)
10002444:	18801a16 	blt	r3,r2,100024b0 <update_helper+0xd0>
		saber->vx = 0;
10002448:	e0bffd17 	ldw	r2,-12(fp)
1000244c:	10000315 	stw	zero,12(r2)
		saber->vy = 0;
10002450:	e0bffd17 	ldw	r2,-12(fp)
10002454:	10000415 	stw	zero,16(r2)
		if (saber->state_count ++ > STATE_COUNT_MAX){
10002458:	e0bffd17 	ldw	r2,-12(fp)
1000245c:	10800917 	ldw	r2,36(r2)
10002460:	11000044 	addi	r4,r2,1
10002464:	e0fffd17 	ldw	r3,-12(fp)
10002468:	19000915 	stw	r4,36(r3)
1000246c:	10800110 	cmplti	r2,r2,4
10002470:	10000f1e 	bne	r2,zero,100024b0 <update_helper+0xd0>
			saber->state = (saber->state == state_end)? final_frame:saber->state+1;
10002474:	e0bffd17 	ldw	r2,-12(fp)
10002478:	10c00817 	ldw	r3,32(r2)
1000247c:	e0bfff17 	ldw	r2,-4(fp)
10002480:	18800426 	beq	r3,r2,10002494 <update_helper+0xb4>
10002484:	e0bffd17 	ldw	r2,-12(fp)
10002488:	10800817 	ldw	r2,32(r2)
1000248c:	10800044 	addi	r2,r2,1
10002490:	00000106 	br	10002498 <update_helper+0xb8>
10002494:	e0bffc17 	ldw	r2,-16(fp)
10002498:	e0fffd17 	ldw	r3,-12(fp)
1000249c:	18800815 	stw	r2,32(r3)
			saber->state_count = 0;
100024a0:	e0bffd17 	ldw	r2,-12(fp)
100024a4:	10000915 	stw	zero,36(r2)
			saber->IsFighting = 0;
100024a8:	e0bffd17 	ldw	r2,-12(fp)
100024ac:	10000d15 	stw	zero,52(r2)
		}
	}
}
100024b0:	0001883a 	nop
100024b4:	e037883a 	mov	sp,fp
100024b8:	df000017 	ldw	fp,0(sp)
100024bc:	dec00104 	addi	sp,sp,4
100024c0:	f800283a 	ret

100024c4 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100024c4:	defffc04 	addi	sp,sp,-16
100024c8:	dfc00315 	stw	ra,12(sp)
100024cc:	df000215 	stw	fp,8(sp)
100024d0:	df000204 	addi	fp,sp,8
100024d4:	2007883a 	mov	r3,r4
100024d8:	2805883a 	mov	r2,r5
100024dc:	e0fffe0d 	sth	r3,-8(fp)
100024e0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
100024e4:	e0bffe0b 	ldhu	r2,-8(fp)
100024e8:	100b883a 	mov	r5,r2
100024ec:	01000084 	movi	r4,2
100024f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,Data);
100024f4:	e0bfff0b 	ldhu	r2,-4(fp)
100024f8:	100b883a 	mov	r5,r2
100024fc:	0009883a 	mov	r4,zero
10002500:	00002f40 	call	100002f4 <IO_write>
}
10002504:	0001883a 	nop
10002508:	e037883a 	mov	sp,fp
1000250c:	dfc00117 	ldw	ra,4(sp)
10002510:	df000017 	ldw	fp,0(sp)
10002514:	dec00204 	addi	sp,sp,8
10002518:	f800283a 	ret

1000251c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
1000251c:	defffd04 	addi	sp,sp,-12
10002520:	dfc00215 	stw	ra,8(sp)
10002524:	df000115 	stw	fp,4(sp)
10002528:	df000104 	addi	fp,sp,4
1000252c:	2005883a 	mov	r2,r4
10002530:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
10002534:	e0bfff0b 	ldhu	r2,-4(fp)
10002538:	100b883a 	mov	r5,r2
1000253c:	01000084 	movi	r4,2
10002540:	00002f40 	call	100002f4 <IO_write>
	return IO_read(HPI_DATA);
10002544:	0009883a 	mov	r4,zero
10002548:	00003640 	call	10000364 <IO_read>
}
1000254c:	e037883a 	mov	sp,fp
10002550:	dfc00117 	ldw	ra,4(sp)
10002554:	df000017 	ldw	fp,0(sp)
10002558:	dec00204 	addi	sp,sp,8
1000255c:	f800283a 	ret

10002560 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10002560:	defffe04 	addi	sp,sp,-8
10002564:	dfc00115 	stw	ra,4(sp)
10002568:	df000015 	stw	fp,0(sp)
1000256c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10002570:	017e9414 	movui	r5,64080
10002574:	01000044 	movi	r4,1
10002578:	00002f40 	call	100002f4 <IO_write>
	usleep(100000);
1000257c:	010000b4 	movhi	r4,2
10002580:	2121a804 	addi	r4,r4,-31072
10002584:	0011e680 	call	10011e68 <usleep>
	printf("[USB INIT]:reset finished!\n");
10002588:	01040074 	movhi	r4,4097
1000258c:	210f8f04 	addi	r4,r4,15932
10002590:	00054400 	call	10005440 <puts>

	usleep(500000);
10002594:	01000234 	movhi	r4,8
10002598:	21284804 	addi	r4,r4,-24288
1000259c:	0011e680 	call	10011e68 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100025a0:	01040074 	movhi	r4,4097
100025a4:	210f9604 	addi	r4,r4,15960
100025a8:	00054400 	call	10005440 <puts>
	IO_read(HPI_MAILBOX);
100025ac:	01000044 	movi	r4,1
100025b0:	00003640 	call	10000364 <IO_read>
	IO_read(HPI_STATUS);
100025b4:	010000c4 	movi	r4,3
100025b8:	00003640 	call	10000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
100025bc:	01005104 	movi	r4,324
100025c0:	000251c0 	call	1000251c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100025c4:	000b883a 	mov	r5,zero
100025c8:	01005104 	movi	r4,324
100025cc:	00024c40 	call	100024c4 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
100025d0:	01005204 	movi	r4,328
100025d4:	000251c0 	call	1000251c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
100025d8:	000b883a 	mov	r5,zero
100025dc:	01005204 	movi	r4,328
100025e0:	00024c40 	call	100024c4 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100025e4:	017fffd4 	movui	r5,65535
100025e8:	01302414 	movui	r4,49296
100025ec:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100025f0:	017fffd4 	movui	r5,65535
100025f4:	01302c14 	movui	r4,49328
100025f8:	00024c40 	call	100024c4 <UsbWrite>
}
100025fc:	0001883a 	nop
10002600:	e037883a 	mov	sp,fp
10002604:	dfc00117 	ldw	ra,4(sp)
10002608:	df000017 	ldw	fp,0(sp)
1000260c:	dec00204 	addi	sp,sp,8
10002610:	f800283a 	ret

10002614 <UsbSetAddress>:


void UsbSetAddress()
{
10002614:	defffe04 	addi	sp,sp,-8
10002618:	dfc00115 	stw	ra,4(sp)
1000261c:	df000015 	stw	fp,0(sp)
10002620:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002624:	01414004 	movi	r5,1280
10002628:	01000084 	movi	r4,2
1000262c:	00002f40 	call	100002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10002630:	01414304 	movi	r5,1292
10002634:	0009883a 	mov	r4,zero
10002638:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000263c:	01400204 	movi	r5,8
10002640:	0009883a 	mov	r4,zero
10002644:	00002f40 	call	100002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10002648:	01403404 	movi	r5,208
1000264c:	0009883a 	mov	r4,zero
10002650:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002654:	01400044 	movi	r5,1
10002658:	0009883a 	mov	r4,zero
1000265c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002660:	014004c4 	movi	r5,19
10002664:	0009883a 	mov	r4,zero
10002668:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000266c:	01414504 	movi	r5,1300
10002670:	0009883a 	mov	r4,zero
10002674:	00002f40 	call	100002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002678:	01414004 	movi	r5,1280
1000267c:	0009883a 	mov	r4,zero
10002680:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002684:	01400084 	movi	r5,2
10002688:	0009883a 	mov	r4,zero
1000268c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002690:	000b883a 	mov	r5,zero
10002694:	0009883a 	mov	r4,zero
10002698:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000269c:	000b883a 	mov	r5,zero
100026a0:	0009883a 	mov	r4,zero
100026a4:	00002f40 	call	100002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100026a8:	000b883a 	mov	r5,zero
100026ac:	0009883a 	mov	r4,zero
100026b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
100026b4:	000b883a 	mov	r5,zero
100026b8:	0009883a 	mov	r4,zero
100026bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
100026c0:	01402404 	movi	r5,144
100026c4:	0009883a 	mov	r4,zero
100026c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100026cc:	01401044 	movi	r5,65
100026d0:	0009883a 	mov	r4,zero
100026d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100026d8:	014004c4 	movi	r5,19
100026dc:	0009883a 	mov	r4,zero
100026e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100026e4:	000b883a 	mov	r5,zero
100026e8:	0009883a 	mov	r4,zero
100026ec:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100026f0:	01414004 	movi	r5,1280
100026f4:	01006c04 	movi	r4,432
100026f8:	00024c40 	call	100024c4 <UsbWrite>
}
100026fc:	0001883a 	nop
10002700:	e037883a 	mov	sp,fp
10002704:	dfc00117 	ldw	ra,4(sp)
10002708:	df000017 	ldw	fp,0(sp)
1000270c:	dec00204 	addi	sp,sp,8
10002710:	f800283a 	ret

10002714 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10002714:	defffe04 	addi	sp,sp,-8
10002718:	dfc00115 	stw	ra,4(sp)
1000271c:	df000015 	stw	fp,0(sp)
10002720:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002724:	01414004 	movi	r5,1280
10002728:	01000084 	movi	r4,2
1000272c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002730:	01414304 	movi	r5,1292
10002734:	0009883a 	mov	r4,zero
10002738:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000273c:	01400204 	movi	r5,8
10002740:	0009883a 	mov	r4,zero
10002744:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002748:	0140b404 	movi	r5,720
1000274c:	0009883a 	mov	r4,zero
10002750:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002754:	01400044 	movi	r5,1
10002758:	0009883a 	mov	r4,zero
1000275c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002760:	014004c4 	movi	r5,19
10002764:	0009883a 	mov	r4,zero
10002768:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000276c:	01414504 	movi	r5,1300
10002770:	0009883a 	mov	r4,zero
10002774:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002778:	0141a004 	movi	r5,1664
1000277c:	0009883a 	mov	r4,zero
10002780:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002784:	01404004 	movi	r5,256
10002788:	0009883a 	mov	r4,zero
1000278c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002790:	000b883a 	mov	r5,zero
10002794:	0009883a 	mov	r4,zero
10002798:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
1000279c:	01400204 	movi	r5,8
100027a0:	0009883a 	mov	r4,zero
100027a4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100027a8:	01414b04 	movi	r5,1324
100027ac:	0009883a 	mov	r4,zero
100027b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
100027b4:	01400204 	movi	r5,8
100027b8:	0009883a 	mov	r4,zero
100027bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
100027c0:	0140a404 	movi	r5,656
100027c4:	0009883a 	mov	r4,zero
100027c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100027cc:	01401044 	movi	r5,65
100027d0:	0009883a 	mov	r4,zero
100027d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100027d8:	014004c4 	movi	r5,19
100027dc:	0009883a 	mov	r4,zero
100027e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
100027e4:	01414804 	movi	r5,1312
100027e8:	0009883a 	mov	r4,zero
100027ec:	00002f40 	call	100002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100027f0:	000b883a 	mov	r5,zero
100027f4:	0009883a 	mov	r4,zero
100027f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100027fc:	000b883a 	mov	r5,zero
10002800:	0009883a 	mov	r4,zero
10002804:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10002808:	01408404 	movi	r5,528
1000280c:	0009883a 	mov	r4,zero
10002810:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002814:	01401044 	movi	r5,65
10002818:	0009883a 	mov	r4,zero
1000281c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002820:	014004c4 	movi	r5,19
10002824:	0009883a 	mov	r4,zero
10002828:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000282c:	000b883a 	mov	r5,zero
10002830:	0009883a 	mov	r4,zero
10002834:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002838:	01414004 	movi	r5,1280
1000283c:	01006c04 	movi	r4,432
10002840:	00024c40 	call	100024c4 <UsbWrite>
}
10002844:	0001883a 	nop
10002848:	e037883a 	mov	sp,fp
1000284c:	dfc00117 	ldw	ra,4(sp)
10002850:	df000017 	ldw	fp,0(sp)
10002854:	dec00204 	addi	sp,sp,8
10002858:	f800283a 	ret

1000285c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
1000285c:	defffe04 	addi	sp,sp,-8
10002860:	dfc00115 	stw	ra,4(sp)
10002864:	df000015 	stw	fp,0(sp)
10002868:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000286c:	01414004 	movi	r5,1280
10002870:	01000084 	movi	r4,2
10002874:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002878:	01414304 	movi	r5,1292
1000287c:	0009883a 	mov	r4,zero
10002880:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002884:	01400204 	movi	r5,8
10002888:	0009883a 	mov	r4,zero
1000288c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002890:	0140b404 	movi	r5,720
10002894:	0009883a 	mov	r4,zero
10002898:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000289c:	01400044 	movi	r5,1
100028a0:	0009883a 	mov	r4,zero
100028a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100028a8:	014004c4 	movi	r5,19
100028ac:	0009883a 	mov	r4,zero
100028b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100028b4:	01414504 	movi	r5,1300
100028b8:	0009883a 	mov	r4,zero
100028bc:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100028c0:	0141a004 	movi	r5,1664
100028c4:	0009883a 	mov	r4,zero
100028c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
100028cc:	01404004 	movi	r5,256
100028d0:	0009883a 	mov	r4,zero
100028d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100028d8:	000b883a 	mov	r5,zero
100028dc:	0009883a 	mov	r4,zero
100028e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
100028e4:	01400484 	movi	r5,18
100028e8:	0009883a 	mov	r4,zero
100028ec:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100028f0:	01415104 	movi	r5,1348
100028f4:	0009883a 	mov	r4,zero
100028f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100028fc:	01400204 	movi	r5,8
10002900:	0009883a 	mov	r4,zero
10002904:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002908:	0140a404 	movi	r5,656
1000290c:	0009883a 	mov	r4,zero
10002910:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002914:	01401044 	movi	r5,65
10002918:	0009883a 	mov	r4,zero
1000291c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002920:	014004c4 	movi	r5,19
10002924:	0009883a 	mov	r4,zero
10002928:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000292c:	01414804 	movi	r5,1312
10002930:	0009883a 	mov	r4,zero
10002934:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002938:	01415304 	movi	r5,1356
1000293c:	0009883a 	mov	r4,zero
10002940:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002944:	01400204 	movi	r5,8
10002948:	0009883a 	mov	r4,zero
1000294c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002950:	0140a404 	movi	r5,656
10002954:	0009883a 	mov	r4,zero
10002958:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
1000295c:	01400044 	movi	r5,1
10002960:	0009883a 	mov	r4,zero
10002964:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002968:	014004c4 	movi	r5,19
1000296c:	0009883a 	mov	r4,zero
10002970:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002974:	01414b04 	movi	r5,1324
10002978:	0009883a 	mov	r4,zero
1000297c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10002980:	01415504 	movi	r5,1364
10002984:	0009883a 	mov	r4,zero
10002988:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
1000298c:	01400084 	movi	r5,2
10002990:	0009883a 	mov	r4,zero
10002994:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002998:	0140a404 	movi	r5,656
1000299c:	0009883a 	mov	r4,zero
100029a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100029a4:	01401044 	movi	r5,65
100029a8:	0009883a 	mov	r4,zero
100029ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100029b0:	014004c4 	movi	r5,19
100029b4:	0009883a 	mov	r4,zero
100029b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100029bc:	01414e04 	movi	r5,1336
100029c0:	0009883a 	mov	r4,zero
100029c4:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
100029c8:	000b883a 	mov	r5,zero
100029cc:	0009883a 	mov	r4,zero
100029d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100029d4:	000b883a 	mov	r5,zero
100029d8:	0009883a 	mov	r4,zero
100029dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
100029e0:	01408404 	movi	r5,528
100029e4:	0009883a 	mov	r4,zero
100029e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
100029ec:	01401044 	movi	r5,65
100029f0:	0009883a 	mov	r4,zero
100029f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100029f8:	014004c4 	movi	r5,19
100029fc:	0009883a 	mov	r4,zero
10002a00:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002a04:	000b883a 	mov	r5,zero
10002a08:	0009883a 	mov	r4,zero
10002a0c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002a10:	01414004 	movi	r5,1280
10002a14:	01006c04 	movi	r4,432
10002a18:	00024c40 	call	100024c4 <UsbWrite>
}
10002a1c:	0001883a 	nop
10002a20:	e037883a 	mov	sp,fp
10002a24:	dfc00117 	ldw	ra,4(sp)
10002a28:	df000017 	ldw	fp,0(sp)
10002a2c:	dec00204 	addi	sp,sp,8
10002a30:	f800283a 	ret

10002a34 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10002a34:	defffe04 	addi	sp,sp,-8
10002a38:	dfc00115 	stw	ra,4(sp)
10002a3c:	df000015 	stw	fp,0(sp)
10002a40:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002a44:	01414004 	movi	r5,1280
10002a48:	01000084 	movi	r4,2
10002a4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002a50:	01414304 	movi	r5,1292
10002a54:	0009883a 	mov	r4,zero
10002a58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002a5c:	01400204 	movi	r5,8
10002a60:	0009883a 	mov	r4,zero
10002a64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002a68:	0140b404 	movi	r5,720
10002a6c:	0009883a 	mov	r4,zero
10002a70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002a74:	01400044 	movi	r5,1
10002a78:	0009883a 	mov	r4,zero
10002a7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002a80:	014004c4 	movi	r5,19
10002a84:	0009883a 	mov	r4,zero
10002a88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002a8c:	01414504 	movi	r5,1300
10002a90:	0009883a 	mov	r4,zero
10002a94:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002a98:	0141a004 	movi	r5,1664
10002a9c:	0009883a 	mov	r4,zero
10002aa0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002aa4:	01408004 	movi	r5,512
10002aa8:	0009883a 	mov	r4,zero
10002aac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002ab0:	000b883a 	mov	r5,zero
10002ab4:	0009883a 	mov	r4,zero
10002ab8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10002abc:	01400244 	movi	r5,9
10002ac0:	0009883a 	mov	r4,zero
10002ac4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002ac8:	01415104 	movi	r5,1348
10002acc:	0009883a 	mov	r4,zero
10002ad0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002ad4:	01400204 	movi	r5,8
10002ad8:	0009883a 	mov	r4,zero
10002adc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002ae0:	0140a404 	movi	r5,656
10002ae4:	0009883a 	mov	r4,zero
10002ae8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002aec:	01401044 	movi	r5,65
10002af0:	0009883a 	mov	r4,zero
10002af4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002af8:	014004c4 	movi	r5,19
10002afc:	0009883a 	mov	r4,zero
10002b00:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002b04:	01414804 	movi	r5,1312
10002b08:	0009883a 	mov	r4,zero
10002b0c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002b10:	01415304 	movi	r5,1356
10002b14:	0009883a 	mov	r4,zero
10002b18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10002b1c:	01400044 	movi	r5,1
10002b20:	0009883a 	mov	r4,zero
10002b24:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002b28:	0140a404 	movi	r5,656
10002b2c:	0009883a 	mov	r4,zero
10002b30:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002b34:	01400044 	movi	r5,1
10002b38:	0009883a 	mov	r4,zero
10002b3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002b40:	014004c4 	movi	r5,19
10002b44:	0009883a 	mov	r4,zero
10002b48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002b4c:	01414b04 	movi	r5,1324
10002b50:	0009883a 	mov	r4,zero
10002b54:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002b58:	000b883a 	mov	r5,zero
10002b5c:	0009883a 	mov	r4,zero
10002b60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002b64:	000b883a 	mov	r5,zero
10002b68:	0009883a 	mov	r4,zero
10002b6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002b70:	01408404 	movi	r5,528
10002b74:	0009883a 	mov	r4,zero
10002b78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002b7c:	01401044 	movi	r5,65
10002b80:	0009883a 	mov	r4,zero
10002b84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002b88:	014004c4 	movi	r5,19
10002b8c:	0009883a 	mov	r4,zero
10002b90:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002b94:	000b883a 	mov	r5,zero
10002b98:	0009883a 	mov	r4,zero
10002b9c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002ba0:	01414004 	movi	r5,1280
10002ba4:	01006c04 	movi	r4,432
10002ba8:	00024c40 	call	100024c4 <UsbWrite>
}
10002bac:	0001883a 	nop
10002bb0:	e037883a 	mov	sp,fp
10002bb4:	dfc00117 	ldw	ra,4(sp)
10002bb8:	df000017 	ldw	fp,0(sp)
10002bbc:	dec00204 	addi	sp,sp,8
10002bc0:	f800283a 	ret

10002bc4 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10002bc4:	defffe04 	addi	sp,sp,-8
10002bc8:	dfc00115 	stw	ra,4(sp)
10002bcc:	df000015 	stw	fp,0(sp)
10002bd0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002bd4:	01414004 	movi	r5,1280
10002bd8:	01000084 	movi	r4,2
10002bdc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002be0:	01414304 	movi	r5,1292
10002be4:	0009883a 	mov	r4,zero
10002be8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002bec:	01400204 	movi	r5,8
10002bf0:	0009883a 	mov	r4,zero
10002bf4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002bf8:	0140b404 	movi	r5,720
10002bfc:	0009883a 	mov	r4,zero
10002c00:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002c04:	01400044 	movi	r5,1
10002c08:	0009883a 	mov	r4,zero
10002c0c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002c10:	014004c4 	movi	r5,19
10002c14:	0009883a 	mov	r4,zero
10002c18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002c1c:	01414504 	movi	r5,1300
10002c20:	0009883a 	mov	r4,zero
10002c24:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002c28:	0141a004 	movi	r5,1664
10002c2c:	0009883a 	mov	r4,zero
10002c30:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002c34:	01408004 	movi	r5,512
10002c38:	0009883a 	mov	r4,zero
10002c3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002c40:	000b883a 	mov	r5,zero
10002c44:	0009883a 	mov	r4,zero
10002c48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10002c4c:	01403fc4 	movi	r5,255
10002c50:	0009883a 	mov	r4,zero
10002c54:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10002c58:	01415704 	movi	r5,1372
10002c5c:	0009883a 	mov	r4,zero
10002c60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002c64:	01400204 	movi	r5,8
10002c68:	0009883a 	mov	r4,zero
10002c6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002c70:	0140a404 	movi	r5,656
10002c74:	0009883a 	mov	r4,zero
10002c78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002c7c:	01401044 	movi	r5,65
10002c80:	0009883a 	mov	r4,zero
10002c84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002c88:	014004c4 	movi	r5,19
10002c8c:	0009883a 	mov	r4,zero
10002c90:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002c94:	01414804 	movi	r5,1312
10002c98:	0009883a 	mov	r4,zero
10002c9c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10002ca0:	01415904 	movi	r5,1380
10002ca4:	0009883a 	mov	r4,zero
10002ca8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002cac:	01400204 	movi	r5,8
10002cb0:	0009883a 	mov	r4,zero
10002cb4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002cb8:	0140a404 	movi	r5,656
10002cbc:	0009883a 	mov	r4,zero
10002cc0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002cc4:	01400044 	movi	r5,1
10002cc8:	0009883a 	mov	r4,zero
10002ccc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002cd0:	014004c4 	movi	r5,19
10002cd4:	0009883a 	mov	r4,zero
10002cd8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002cdc:	01414b04 	movi	r5,1324
10002ce0:	0009883a 	mov	r4,zero
10002ce4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10002ce8:	01415b04 	movi	r5,1388
10002cec:	0009883a 	mov	r4,zero
10002cf0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002cf4:	01400204 	movi	r5,8
10002cf8:	0009883a 	mov	r4,zero
10002cfc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002d00:	0140a404 	movi	r5,656
10002d04:	0009883a 	mov	r4,zero
10002d08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002d0c:	01401044 	movi	r5,65
10002d10:	0009883a 	mov	r4,zero
10002d14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002d18:	014004c4 	movi	r5,19
10002d1c:	0009883a 	mov	r4,zero
10002d20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002d24:	01414e04 	movi	r5,1336
10002d28:	0009883a 	mov	r4,zero
10002d2c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10002d30:	01415d04 	movi	r5,1396
10002d34:	0009883a 	mov	r4,zero
10002d38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002d3c:	01400204 	movi	r5,8
10002d40:	0009883a 	mov	r4,zero
10002d44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002d48:	0140a404 	movi	r5,656
10002d4c:	0009883a 	mov	r4,zero
10002d50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002d54:	01400044 	movi	r5,1
10002d58:	0009883a 	mov	r4,zero
10002d5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002d60:	014004c4 	movi	r5,19
10002d64:	0009883a 	mov	r4,zero
10002d68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002d6c:	01415104 	movi	r5,1348
10002d70:	0009883a 	mov	r4,zero
10002d74:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10002d78:	01415f04 	movi	r5,1404
10002d7c:	0009883a 	mov	r4,zero
10002d80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10002d84:	01400084 	movi	r5,2
10002d88:	0009883a 	mov	r4,zero
10002d8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002d90:	0140a404 	movi	r5,656
10002d94:	0009883a 	mov	r4,zero
10002d98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002d9c:	01401044 	movi	r5,65
10002da0:	0009883a 	mov	r4,zero
10002da4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002da8:	014004c4 	movi	r5,19
10002dac:	0009883a 	mov	r4,zero
10002db0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002db4:	01415404 	movi	r5,1360
10002db8:	0009883a 	mov	r4,zero
10002dbc:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10002dc0:	000b883a 	mov	r5,zero
10002dc4:	0009883a 	mov	r4,zero
10002dc8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002dcc:	000b883a 	mov	r5,zero
10002dd0:	0009883a 	mov	r4,zero
10002dd4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10002dd8:	01408404 	movi	r5,528
10002ddc:	0009883a 	mov	r4,zero
10002de0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002de4:	01401044 	movi	r5,65
10002de8:	0009883a 	mov	r4,zero
10002dec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002df0:	014004c4 	movi	r5,19
10002df4:	0009883a 	mov	r4,zero
10002df8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002dfc:	000b883a 	mov	r5,zero
10002e00:	0009883a 	mov	r4,zero
10002e04:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e08:	01414004 	movi	r5,1280
10002e0c:	01006c04 	movi	r4,432
10002e10:	00024c40 	call	100024c4 <UsbWrite>
}
10002e14:	0001883a 	nop
10002e18:	e037883a 	mov	sp,fp
10002e1c:	dfc00117 	ldw	ra,4(sp)
10002e20:	df000017 	ldw	fp,0(sp)
10002e24:	dec00204 	addi	sp,sp,8
10002e28:	f800283a 	ret

10002e2c <UsbSetConfig>:

void UsbSetConfig()
{
10002e2c:	defffe04 	addi	sp,sp,-8
10002e30:	dfc00115 	stw	ra,4(sp)
10002e34:	df000015 	stw	fp,0(sp)
10002e38:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002e3c:	01414004 	movi	r5,1280
10002e40:	01000084 	movi	r4,2
10002e44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002e48:	01414304 	movi	r5,1292
10002e4c:	0009883a 	mov	r4,zero
10002e50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002e54:	01400204 	movi	r5,8
10002e58:	0009883a 	mov	r4,zero
10002e5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002e60:	0140b404 	movi	r5,720
10002e64:	0009883a 	mov	r4,zero
10002e68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002e6c:	01400044 	movi	r5,1
10002e70:	0009883a 	mov	r4,zero
10002e74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002e78:	014004c4 	movi	r5,19
10002e7c:	0009883a 	mov	r4,zero
10002e80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002e84:	01414504 	movi	r5,1300
10002e88:	0009883a 	mov	r4,zero
10002e8c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10002e90:	01424004 	movi	r5,2304
10002e94:	0009883a 	mov	r4,zero
10002e98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10002e9c:	01400044 	movi	r5,1
10002ea0:	0009883a 	mov	r4,zero
10002ea4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002ea8:	000b883a 	mov	r5,zero
10002eac:	0009883a 	mov	r4,zero
10002eb0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002eb4:	000b883a 	mov	r5,zero
10002eb8:	0009883a 	mov	r4,zero
10002ebc:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002ec0:	000b883a 	mov	r5,zero
10002ec4:	0009883a 	mov	r4,zero
10002ec8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002ecc:	000b883a 	mov	r5,zero
10002ed0:	0009883a 	mov	r4,zero
10002ed4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002ed8:	0140a404 	movi	r5,656
10002edc:	0009883a 	mov	r4,zero
10002ee0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002ee4:	01401044 	movi	r5,65
10002ee8:	0009883a 	mov	r4,zero
10002eec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002ef0:	014004c4 	movi	r5,19
10002ef4:	0009883a 	mov	r4,zero
10002ef8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002efc:	000b883a 	mov	r5,zero
10002f00:	0009883a 	mov	r4,zero
10002f04:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002f08:	01414004 	movi	r5,1280
10002f0c:	01006c04 	movi	r4,432
10002f10:	00024c40 	call	100024c4 <UsbWrite>

}
10002f14:	0001883a 	nop
10002f18:	e037883a 	mov	sp,fp
10002f1c:	dfc00117 	ldw	ra,4(sp)
10002f20:	df000017 	ldw	fp,0(sp)
10002f24:	dec00204 	addi	sp,sp,8
10002f28:	f800283a 	ret

10002f2c <UsbClassRequest>:

void UsbClassRequest()
{
10002f2c:	defffe04 	addi	sp,sp,-8
10002f30:	dfc00115 	stw	ra,4(sp)
10002f34:	df000015 	stw	fp,0(sp)
10002f38:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002f3c:	01414004 	movi	r5,1280
10002f40:	01000084 	movi	r4,2
10002f44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002f48:	01414304 	movi	r5,1292
10002f4c:	0009883a 	mov	r4,zero
10002f50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002f54:	01400204 	movi	r5,8
10002f58:	0009883a 	mov	r4,zero
10002f5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002f60:	0140b404 	movi	r5,720
10002f64:	0009883a 	mov	r4,zero
10002f68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002f6c:	01400044 	movi	r5,1
10002f70:	0009883a 	mov	r4,zero
10002f74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002f78:	014004c4 	movi	r5,19
10002f7c:	0009883a 	mov	r4,zero
10002f80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002f84:	01414504 	movi	r5,1300
10002f88:	0009883a 	mov	r4,zero
10002f8c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10002f90:	01428844 	movi	r5,2593
10002f94:	0009883a 	mov	r4,zero
10002f98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10002f9c:	000b883a 	mov	r5,zero
10002fa0:	0009883a 	mov	r4,zero
10002fa4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002fa8:	000b883a 	mov	r5,zero
10002fac:	0009883a 	mov	r4,zero
10002fb0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002fb4:	000b883a 	mov	r5,zero
10002fb8:	0009883a 	mov	r4,zero
10002fbc:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002fc0:	000b883a 	mov	r5,zero
10002fc4:	0009883a 	mov	r4,zero
10002fc8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10002fcc:	000b883a 	mov	r5,zero
10002fd0:	0009883a 	mov	r4,zero
10002fd4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002fd8:	0140a404 	movi	r5,656
10002fdc:	0009883a 	mov	r4,zero
10002fe0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002fe4:	01401044 	movi	r5,65
10002fe8:	0009883a 	mov	r4,zero
10002fec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002ff0:	014004c4 	movi	r5,19
10002ff4:	0009883a 	mov	r4,zero
10002ff8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002ffc:	000b883a 	mov	r5,zero
10003000:	0009883a 	mov	r4,zero
10003004:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003008:	01414004 	movi	r5,1280
1000300c:	01006c04 	movi	r4,432
10003010:	00024c40 	call	100024c4 <UsbWrite>
}
10003014:	0001883a 	nop
10003018:	e037883a 	mov	sp,fp
1000301c:	dfc00117 	ldw	ra,4(sp)
10003020:	df000017 	ldw	fp,0(sp)
10003024:	dec00204 	addi	sp,sp,8
10003028:	f800283a 	ret

1000302c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
1000302c:	defffe04 	addi	sp,sp,-8
10003030:	dfc00115 	stw	ra,4(sp)
10003034:	df000015 	stw	fp,0(sp)
10003038:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000303c:	01414004 	movi	r5,1280
10003040:	01000084 	movi	r4,2
10003044:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003048:	01414304 	movi	r5,1292
1000304c:	0009883a 	mov	r4,zero
10003050:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003054:	01400204 	movi	r5,8
10003058:	0009883a 	mov	r4,zero
1000305c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003060:	0140b404 	movi	r5,720
10003064:	0009883a 	mov	r4,zero
10003068:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000306c:	01400044 	movi	r5,1
10003070:	0009883a 	mov	r4,zero
10003074:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003078:	014004c4 	movi	r5,19
1000307c:	0009883a 	mov	r4,zero
10003080:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003084:	01414504 	movi	r5,1300
10003088:	0009883a 	mov	r4,zero
1000308c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003090:	0141a044 	movi	r5,1665
10003094:	0009883a 	mov	r4,zero
10003098:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
1000309c:	01484004 	movi	r5,8448
100030a0:	0009883a 	mov	r4,zero
100030a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100030a8:	000b883a 	mov	r5,zero
100030ac:	0009883a 	mov	r4,zero
100030b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100030b4:	01401ec4 	movi	r5,123
100030b8:	0009883a 	mov	r4,zero
100030bc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100030c0:	01415104 	movi	r5,1348
100030c4:	0009883a 	mov	r4,zero
100030c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100030cc:	01400204 	movi	r5,8
100030d0:	0009883a 	mov	r4,zero
100030d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100030d8:	0140a404 	movi	r5,656
100030dc:	0009883a 	mov	r4,zero
100030e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100030e4:	01401044 	movi	r5,65
100030e8:	0009883a 	mov	r4,zero
100030ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100030f0:	014004c4 	movi	r5,19
100030f4:	0009883a 	mov	r4,zero
100030f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100030fc:	01414804 	movi	r5,1312
10003100:	0009883a 	mov	r4,zero
10003104:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10003108:	000b883a 	mov	r5,zero
1000310c:	0009883a 	mov	r4,zero
10003110:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003114:	000b883a 	mov	r5,zero
10003118:	0009883a 	mov	r4,zero
1000311c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10003120:	01408404 	movi	r5,528
10003124:	0009883a 	mov	r4,zero
10003128:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000312c:	01401044 	movi	r5,65
10003130:	0009883a 	mov	r4,zero
10003134:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003138:	014004c4 	movi	r5,19
1000313c:	0009883a 	mov	r4,zero
10003140:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003144:	000b883a 	mov	r5,zero
10003148:	0009883a 	mov	r4,zero
1000314c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003150:	01414004 	movi	r5,1280
10003154:	01006c04 	movi	r4,432
10003158:	00024c40 	call	100024c4 <UsbWrite>

}
1000315c:	0001883a 	nop
10003160:	e037883a 	mov	sp,fp
10003164:	dfc00117 	ldw	ra,4(sp)
10003168:	df000017 	ldw	fp,0(sp)
1000316c:	dec00204 	addi	sp,sp,8
10003170:	f800283a 	ret

10003174 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10003174:	defffe04 	addi	sp,sp,-8
10003178:	dfc00115 	stw	ra,4(sp)
1000317c:	df000015 	stw	fp,0(sp)
10003180:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003184:	01414004 	movi	r5,1280
10003188:	01000084 	movi	r4,2
1000318c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003190:	01414304 	movi	r5,1292
10003194:	0009883a 	mov	r4,zero
10003198:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000319c:	01400204 	movi	r5,8
100031a0:	0009883a 	mov	r4,zero
100031a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100031a8:	0140b404 	movi	r5,720
100031ac:	0009883a 	mov	r4,zero
100031b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100031b4:	01400044 	movi	r5,1
100031b8:	0009883a 	mov	r4,zero
100031bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100031c0:	014004c4 	movi	r5,19
100031c4:	0009883a 	mov	r4,zero
100031c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100031cc:	01414504 	movi	r5,1300
100031d0:	0009883a 	mov	r4,zero
100031d4:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100031d8:	0141a044 	movi	r5,1665
100031dc:	0009883a 	mov	r4,zero
100031e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
100031e4:	01488004 	movi	r5,8704
100031e8:	0009883a 	mov	r4,zero
100031ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100031f0:	000b883a 	mov	r5,zero
100031f4:	0009883a 	mov	r4,zero
100031f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100031fc:	01401ec4 	movi	r5,123
10003200:	0009883a 	mov	r4,zero
10003204:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10003208:	01416004 	movi	r5,1408
1000320c:	0009883a 	mov	r4,zero
10003210:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003214:	01400204 	movi	r5,8
10003218:	0009883a 	mov	r4,zero
1000321c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003220:	0140a404 	movi	r5,656
10003224:	0009883a 	mov	r4,zero
10003228:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000322c:	01401044 	movi	r5,65
10003230:	0009883a 	mov	r4,zero
10003234:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003238:	014004c4 	movi	r5,19
1000323c:	0009883a 	mov	r4,zero
10003240:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003244:	01414804 	movi	r5,1312
10003248:	0009883a 	mov	r4,zero
1000324c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10003250:	01416204 	movi	r5,1416
10003254:	0009883a 	mov	r4,zero
10003258:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000325c:	01400204 	movi	r5,8
10003260:	0009883a 	mov	r4,zero
10003264:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003268:	0140a404 	movi	r5,656
1000326c:	0009883a 	mov	r4,zero
10003270:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003274:	01400044 	movi	r5,1
10003278:	0009883a 	mov	r4,zero
1000327c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003280:	014004c4 	movi	r5,19
10003284:	0009883a 	mov	r4,zero
10003288:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000328c:	01414b04 	movi	r5,1324
10003290:	0009883a 	mov	r4,zero
10003294:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10003298:	01416404 	movi	r5,1424
1000329c:	0009883a 	mov	r4,zero
100032a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100032a4:	01400204 	movi	r5,8
100032a8:	0009883a 	mov	r4,zero
100032ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100032b0:	0140a404 	movi	r5,656
100032b4:	0009883a 	mov	r4,zero
100032b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100032bc:	01401044 	movi	r5,65
100032c0:	0009883a 	mov	r4,zero
100032c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100032c8:	014004c4 	movi	r5,19
100032cc:	0009883a 	mov	r4,zero
100032d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100032d4:	01414e04 	movi	r5,1336
100032d8:	0009883a 	mov	r4,zero
100032dc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
100032e0:	01416604 	movi	r5,1432
100032e4:	0009883a 	mov	r4,zero
100032e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100032ec:	01400204 	movi	r5,8
100032f0:	0009883a 	mov	r4,zero
100032f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100032f8:	0140a404 	movi	r5,656
100032fc:	0009883a 	mov	r4,zero
10003300:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003304:	01400044 	movi	r5,1
10003308:	0009883a 	mov	r4,zero
1000330c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003310:	014004c4 	movi	r5,19
10003314:	0009883a 	mov	r4,zero
10003318:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000331c:	01415104 	movi	r5,1348
10003320:	0009883a 	mov	r4,zero
10003324:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10003328:	01416804 	movi	r5,1440
1000332c:	0009883a 	mov	r4,zero
10003330:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003334:	01400204 	movi	r5,8
10003338:	0009883a 	mov	r4,zero
1000333c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003340:	0140a404 	movi	r5,656
10003344:	0009883a 	mov	r4,zero
10003348:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000334c:	01401044 	movi	r5,65
10003350:	0009883a 	mov	r4,zero
10003354:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003358:	014004c4 	movi	r5,19
1000335c:	0009883a 	mov	r4,zero
10003360:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10003364:	01415404 	movi	r5,1360
10003368:	0009883a 	mov	r4,zero
1000336c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10003370:	01416a04 	movi	r5,1448
10003374:	0009883a 	mov	r4,zero
10003378:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000337c:	01400204 	movi	r5,8
10003380:	0009883a 	mov	r4,zero
10003384:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003388:	0140a404 	movi	r5,656
1000338c:	0009883a 	mov	r4,zero
10003390:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003394:	01400044 	movi	r5,1
10003398:	0009883a 	mov	r4,zero
1000339c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100033a0:	014004c4 	movi	r5,19
100033a4:	0009883a 	mov	r4,zero
100033a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100033ac:	01415704 	movi	r5,1372
100033b0:	0009883a 	mov	r4,zero
100033b4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100033b8:	01416c04 	movi	r5,1456
100033bc:	0009883a 	mov	r4,zero
100033c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100033c4:	01400204 	movi	r5,8
100033c8:	0009883a 	mov	r4,zero
100033cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100033d0:	0140a404 	movi	r5,656
100033d4:	0009883a 	mov	r4,zero
100033d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100033dc:	01401044 	movi	r5,65
100033e0:	0009883a 	mov	r4,zero
100033e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100033e8:	014004c4 	movi	r5,19
100033ec:	0009883a 	mov	r4,zero
100033f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
100033f4:	01415a04 	movi	r5,1384
100033f8:	0009883a 	mov	r4,zero
100033fc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10003400:	01416e04 	movi	r5,1464
10003404:	0009883a 	mov	r4,zero
10003408:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
1000340c:	014000c4 	movi	r5,3
10003410:	0009883a 	mov	r4,zero
10003414:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003418:	0140a404 	movi	r5,656
1000341c:	0009883a 	mov	r4,zero
10003420:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003424:	01400044 	movi	r5,1
10003428:	0009883a 	mov	r4,zero
1000342c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10003430:	014004c4 	movi	r5,19
10003434:	0009883a 	mov	r4,zero
10003438:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
1000343c:	01415d04 	movi	r5,1396
10003440:	0009883a 	mov	r4,zero
10003444:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10003448:	000b883a 	mov	r5,zero
1000344c:	0009883a 	mov	r4,zero
10003450:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003454:	000b883a 	mov	r5,zero
10003458:	0009883a 	mov	r4,zero
1000345c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10003460:	01408404 	movi	r5,528
10003464:	0009883a 	mov	r4,zero
10003468:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000346c:	01401044 	movi	r5,65
10003470:	0009883a 	mov	r4,zero
10003474:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003478:	014004c4 	movi	r5,19
1000347c:	0009883a 	mov	r4,zero
10003480:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003484:	000b883a 	mov	r5,zero
10003488:	0009883a 	mov	r4,zero
1000348c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003490:	01414004 	movi	r5,1280
10003494:	01006c04 	movi	r4,432
10003498:	00024c40 	call	100024c4 <UsbWrite>

}
1000349c:	0001883a 	nop
100034a0:	e037883a 	mov	sp,fp
100034a4:	dfc00117 	ldw	ra,4(sp)
100034a8:	df000017 	ldw	fp,0(sp)
100034ac:	dec00204 	addi	sp,sp,8
100034b0:	f800283a 	ret

100034b4 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100034b4:	defffd04 	addi	sp,sp,-12
100034b8:	dfc00215 	stw	ra,8(sp)
100034bc:	df000115 	stw	fp,4(sp)
100034c0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100034c4:	01005104 	movi	r4,324
100034c8:	000251c0 	call	1000251c <UsbRead>
100034cc:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100034d0:	000b883a 	mov	r5,zero
100034d4:	01005104 	movi	r4,324
100034d8:	00024c40 	call	100024c4 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100034dc:	00000d06 	br	10003514 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100034e0:	e0bfff0b 	ldhu	r2,-4(fp)
100034e4:	10000526 	beq	r2,zero,100034fc <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100034e8:	e0bfff0b 	ldhu	r2,-4(fp)
100034ec:	100b883a 	mov	r5,r2
100034f0:	01040074 	movhi	r4,4097
100034f4:	210f9f04 	addi	r4,r4,15996
100034f8:	00053440 	call	10005344 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100034fc:	01005104 	movi	r4,324
10003500:	000251c0 	call	1000251c <UsbRead>
10003504:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003508:	000b883a 	mov	r5,zero
1000350c:	01005104 	movi	r4,324
10003510:	00024c40 	call	100024c4 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003514:	e0bfff0b 	ldhu	r2,-4(fp)
10003518:	10840018 	cmpnei	r2,r2,4096
1000351c:	103ff01e 	bne	r2,zero,100034e0 <__alt_data_end+0xf80034e0>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10003520:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003524:	e037883a 	mov	sp,fp
10003528:	dfc00117 	ldw	ra,4(sp)
1000352c:	df000017 	ldw	fp,0(sp)
10003530:	dec00204 	addi	sp,sp,8
10003534:	f800283a 	ret

10003538 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10003538:	defffd04 	addi	sp,sp,-12
1000353c:	dfc00215 	stw	ra,8(sp)
10003540:	df000115 	stw	fp,4(sp)
10003544:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10003548:	010000c4 	movi	r4,3
1000354c:	00003640 	call	10000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10003550:	01005104 	movi	r4,324
10003554:	000251c0 	call	1000251c <UsbRead>
10003558:	10bfffcc 	andi	r2,r2,65535
1000355c:	10840018 	cmpnei	r2,r2,4096
10003560:	1000091e 	bne	r2,zero,10003588 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003564:	000b883a 	mov	r5,zero
10003568:	01005104 	movi	r4,324
1000356c:	00024c40 	call	100024c4 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003570:	0001883a 	nop
10003574:	010000c4 	movi	r4,3
10003578:	00003640 	call	10000364 <IO_read>
1000357c:	10bfffcc 	andi	r2,r2,65535
10003580:	1080040c 	andi	r2,r2,16
10003584:	103ffb26 	beq	r2,zero,10003574 <__alt_data_end+0xf8003574>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10003588:	01414204 	movi	r5,1288
1000358c:	01000084 	movi	r4,2
10003590:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003594:	0009883a 	mov	r4,zero
10003598:	00003640 	call	10000364 <IO_read>
1000359c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100035a0:	e0bfff0b 	ldhu	r2,-4(fp)
}
100035a4:	e037883a 	mov	sp,fp
100035a8:	dfc00117 	ldw	ra,4(sp)
100035ac:	df000017 	ldw	fp,0(sp)
100035b0:	dec00204 	addi	sp,sp,8
100035b4:	f800283a 	ret

100035b8 <UsbPrintMem>:


void UsbPrintMem()
{
100035b8:	defffc04 	addi	sp,sp,-16
100035bc:	dfc00315 	stw	ra,12(sp)
100035c0:	df000215 	stw	fp,8(sp)
100035c4:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100035c8:	01414004 	movi	r5,1280
100035cc:	01000084 	movi	r4,2
100035d0:	00002f40 	call	100002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
100035d4:	e03ffe15 	stw	zero,-8(fp)
100035d8:	00000e06 	br	10003614 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100035dc:	0009883a 	mov	r4,zero
100035e0:	00003640 	call	10000364 <IO_read>
100035e4:	10bfffcc 	andi	r2,r2,65535
100035e8:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100035ec:	e0bffe17 	ldw	r2,-8(fp)
100035f0:	10814004 	addi	r2,r2,1280
100035f4:	e1bfff17 	ldw	r6,-4(fp)
100035f8:	100b883a 	mov	r5,r2
100035fc:	01040074 	movhi	r4,4097
10003600:	210fa704 	addi	r4,r4,16028
10003604:	00053440 	call	10005344 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10003608:	e0bffe17 	ldw	r2,-8(fp)
1000360c:	10800084 	addi	r2,r2,2
10003610:	e0bffe15 	stw	r2,-8(fp)
10003614:	e0bffe17 	ldw	r2,-8(fp)
10003618:	10803250 	cmplti	r2,r2,201
1000361c:	103fef1e 	bne	r2,zero,100035dc <__alt_data_end+0xf80035dc>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10003620:	0001883a 	nop
10003624:	e037883a 	mov	sp,fp
10003628:	dfc00117 	ldw	ra,4(sp)
1000362c:	df000017 	ldw	fp,0(sp)
10003630:	dec00204 	addi	sp,sp,8
10003634:	f800283a 	ret

10003638 <usb_init>:
alt_u8 toggle = 0;
alt_u8 data_size;
alt_u8 hot_plug_count;
alt_u16 code;
int usb_init(void)
{
10003638:	defffe04 	addi	sp,sp,-8
1000363c:	dfc00115 	stw	ra,4(sp)
10003640:	df000015 	stw	fp,0(sp)
10003644:	d839883a 	mov	fp,sp
	IO_init();
10003648:	000026c0 	call	1000026c <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
1000364c:	01040074 	movhi	r4,4097
10003650:	210fac04 	addi	r4,r4,16048
10003654:	00054400 	call	10005440 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10003658:	00025600 	call	10002560 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000365c:	000b883a 	mov	r5,zero
10003660:	01005104 	movi	r4,324
10003664:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10003668:	017fffd4 	movui	r5,65535
1000366c:	01302414 	movui	r4,49296
10003670:	00024c40 	call	100024c4 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10003674:	01409604 	movi	r5,600
10003678:	01006d04 	movi	r4,436
1000367c:	00024c40 	call	100024c4 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10003680:	00811004 	movi	r2,1088
10003684:	d0a6d78d 	sth	r2,-25762(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10003688:	d0a6d78b 	ldhu	r2,-25762(gp)
1000368c:	10bfffcc 	andi	r2,r2,65535
10003690:	100b883a 	mov	r5,r2
10003694:	01005084 	movi	r4,322
10003698:	00024c40 	call	100024c4 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
1000369c:	00808404 	movi	r2,528
100036a0:	d0a6d88d 	sth	r2,-25758(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100036a4:	d0a6d88b 	ldhu	r2,-25758(gp)
100036a8:	10bfffcc 	andi	r2,r2,65535
100036ac:	100b883a 	mov	r5,r2
100036b0:	01302314 	movui	r4,49292
100036b4:	00024c40 	call	100024c4 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100036b8:	000b883a 	mov	r5,zero
100036bc:	01007104 	movi	r4,452
100036c0:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100036c4:	000b883a 	mov	r5,zero
100036c8:	01007184 	movi	r4,454
100036cc:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100036d0:	000b883a 	mov	r5,zero
100036d4:	01007204 	movi	r4,456
100036d8:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100036dc:	000b883a 	mov	r5,zero
100036e0:	01007284 	movi	r4,458
100036e4:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100036e8:	000b883a 	mov	r5,zero
100036ec:	01007304 	movi	r4,460
100036f0:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100036f4:	000b883a 	mov	r5,zero
100036f8:	01007384 	movi	r4,462
100036fc:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10003700:	000b883a 	mov	r5,zero
10003704:	01007404 	movi	r4,464
10003708:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000370c:	000b883a 	mov	r5,zero
10003710:	01007484 	movi	r4,466
10003714:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10003718:	000b883a 	mov	r5,zero
1000371c:	01007504 	movi	r4,468
10003720:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10003724:	000b883a 	mov	r5,zero
10003728:	01007584 	movi	r4,470
1000372c:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10003730:	000b883a 	mov	r5,zero
10003734:	01007604 	movi	r4,472
10003738:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000373c:	000b883a 	mov	r5,zero
10003740:	01007684 	movi	r4,474
10003744:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10003748:	000b883a 	mov	r5,zero
1000374c:	01007704 	movi	r4,476
10003750:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10003754:	000b883a 	mov	r5,zero
10003758:	01007784 	movi	r4,478
1000375c:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10003760:	01401c84 	movi	r5,114
10003764:	01007084 	movi	r4,450
10003768:	00024c40 	call	100024c4 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000376c:	01738054 	movui	r5,52737
10003770:	01000044 	movi	r4,1
10003774:	00002f40 	call	100002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10003778:	0001883a 	nop
1000377c:	010000c4 	movi	r4,3
10003780:	00003640 	call	10000364 <IO_read>
10003784:	10bfffcc 	andi	r2,r2,65535
10003788:	103ffc26 	beq	r2,zero,1000377c <__alt_data_end+0xf800377c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000378c:	00000806 	br	100037b0 <usb_init+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10003790:	01000044 	movi	r4,1
10003794:	00003640 	call	10000364 <IO_read>
10003798:	10bfffcc 	andi	r2,r2,65535
1000379c:	100b883a 	mov	r5,r2
100037a0:	01040074 	movhi	r4,4097
100037a4:	210fb204 	addi	r4,r4,16072
100037a8:	00053440 	call	10005344 <printf>
		goto USB_HOT_PLUG;
100037ac:	003faa06 	br	10003658 <__alt_data_end+0xf8003658>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100037b0:	01000044 	movi	r4,1
100037b4:	00003640 	call	10000364 <IO_read>
100037b8:	10bfffcc 	andi	r2,r2,65535
100037bc:	1083fb58 	cmpnei	r2,r2,4077
100037c0:	103ff31e 	bne	r2,zero,10003790 <__alt_data_end+0xf8003790>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100037c4:	01040074 	movhi	r4,4097
100037c8:	210fbb04 	addi	r4,r4,16108
100037cc:	00053440 	call	10005344 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100037d0:	01401d04 	movi	r5,116
100037d4:	01007084 	movi	r4,450
100037d8:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100037dc:	01400f04 	movi	r5,60
100037e0:	01007104 	movi	r4,452
100037e4:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100037e8:	000b883a 	mov	r5,zero
100037ec:	01007184 	movi	r4,454
100037f0:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100037f4:	000b883a 	mov	r5,zero
100037f8:	01007204 	movi	r4,456
100037fc:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10003800:	000b883a 	mov	r5,zero
10003804:	01007284 	movi	r4,458
10003808:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000380c:	000b883a 	mov	r5,zero
10003810:	01007304 	movi	r4,460
10003814:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10003818:	000b883a 	mov	r5,zero
1000381c:	01007384 	movi	r4,462
10003820:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10003824:	000b883a 	mov	r5,zero
10003828:	01007404 	movi	r4,464
1000382c:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10003830:	000b883a 	mov	r5,zero
10003834:	01007484 	movi	r4,466
10003838:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
1000383c:	000b883a 	mov	r5,zero
10003840:	01007504 	movi	r4,468
10003844:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10003848:	000b883a 	mov	r5,zero
1000384c:	01007584 	movi	r4,470
10003850:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10003854:	000b883a 	mov	r5,zero
10003858:	01007604 	movi	r4,472
1000385c:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10003860:	000b883a 	mov	r5,zero
10003864:	01007684 	movi	r4,474
10003868:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
1000386c:	000b883a 	mov	r5,zero
10003870:	01007704 	movi	r4,476
10003874:	00024c40 	call	100024c4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10003878:	000b883a 	mov	r5,zero
1000387c:	01007784 	movi	r4,478
10003880:	00024c40 	call	100024c4 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10003884:	01738054 	movui	r5,52737
10003888:	01000044 	movi	r4,1
1000388c:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10003890:	0001883a 	nop
10003894:	01000044 	movi	r4,1
10003898:	00003640 	call	10000364 <IO_read>
1000389c:	10bfffcc 	andi	r2,r2,65535
100038a0:	1083fb58 	cmpnei	r2,r2,4077
100038a4:	10000826 	beq	r2,zero,100038c8 <usb_init+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100038a8:	01000044 	movi	r4,1
100038ac:	00003640 	call	10000364 <IO_read>
100038b0:	10bfffcc 	andi	r2,r2,65535
100038b4:	100b883a 	mov	r5,r2
100038b8:	01040074 	movhi	r4,4097
100038bc:	210fb204 	addi	r4,r4,16072
100038c0:	00053440 	call	10005344 <printf>
		goto USB_HOT_PLUG;
100038c4:	003f6406 	br	10003658 <__alt_data_end+0xf8003658>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100038c8:	00b02284 	movi	r2,-16246
100038cc:	d0a6d40d 	sth	r2,-25776(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100038d0:	008c0004 	movi	r2,12288
100038d4:	d0a6d48d 	sth	r2,-25774(gp)
	fs_device = A_DP_STAT;
100038d8:	00880004 	movi	r2,8192
100038dc:	d0a6d50d 	sth	r2,-25772(gp)
	usb_ctl_val = UsbRead(ctl_reg);
100038e0:	d0a6d40b 	ldhu	r2,-25776(gp)
100038e4:	10bfffcc 	andi	r2,r2,65535
100038e8:	1009883a 	mov	r4,r2
100038ec:	000251c0 	call	1000251c <UsbRead>
100038f0:	d0a6d78d 	sth	r2,-25762(gp)

	if (!(usb_ctl_val & no_device))
100038f4:	d0e6d78b 	ldhu	r3,-25762(gp)
100038f8:	d0a6d48b 	ldhu	r2,-25774(gp)
100038fc:	1884703a 	and	r2,r3,r2
10003900:	10bfffcc 	andi	r2,r2,65535
10003904:	1000361e 	bne	r2,zero,100039e0 <usb_init+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10003908:	d026d905 	stb	zero,-25756(gp)
1000390c:	00000f06 	br	1000394c <usb_init+0x314>
		{
			usleep(5*1000);
10003910:	0104e204 	movi	r4,5000
10003914:	0011e680 	call	10011e68 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10003918:	d0a6d40b 	ldhu	r2,-25776(gp)
1000391c:	10bfffcc 	andi	r2,r2,65535
10003920:	1009883a 	mov	r4,r2
10003924:	000251c0 	call	1000251c <UsbRead>
10003928:	d0a6d78d 	sth	r2,-25762(gp)
			if(usb_ctl_val & no_device) break;
1000392c:	d0e6d78b 	ldhu	r3,-25762(gp)
10003930:	d0a6d48b 	ldhu	r2,-25774(gp)
10003934:	1884703a 	and	r2,r3,r2
10003938:	10bfffcc 	andi	r2,r2,65535
1000393c:	1000081e 	bne	r2,zero,10003960 <usb_init+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10003940:	d0a6d903 	ldbu	r2,-25756(gp)
10003944:	10800044 	addi	r2,r2,1
10003948:	d0a6d905 	stb	r2,-25756(gp)
1000394c:	d0a6d903 	ldbu	r2,-25756(gp)
10003950:	10803fcc 	andi	r2,r2,255
10003954:	10800170 	cmpltui	r2,r2,5
10003958:	103fed1e 	bne	r2,zero,10003910 <__alt_data_end+0xf8003910>
1000395c:	00000106 	br	10003964 <usb_init+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10003960:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10003964:	d0e6d78b 	ldhu	r3,-25762(gp)
10003968:	d0a6d48b 	ldhu	r2,-25774(gp)
1000396c:	1884703a 	and	r2,r3,r2
10003970:	10bfffcc 	andi	r2,r2,65535
10003974:	1000261e 	bne	r2,zero,10003a10 <usb_init+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10003978:	01040074 	movhi	r4,4097
1000397c:	210fbf04 	addi	r4,r4,16124
10003980:	00054400 	call	10005440 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10003984:	01040074 	movhi	r4,4097
10003988:	210fc904 	addi	r4,r4,16164
1000398c:	00054400 	call	10005440 <puts>
			while (!(usb_ctl_val & no_device))
10003990:	00000d06 	br	100039c8 <usb_init+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10003994:	d0a6d40b 	ldhu	r2,-25776(gp)
10003998:	10bfffcc 	andi	r2,r2,65535
1000399c:	1009883a 	mov	r4,r2
100039a0:	000251c0 	call	1000251c <UsbRead>
100039a4:	d0a6d78d 	sth	r2,-25762(gp)
				if(usb_ctl_val & no_device)
100039a8:	d0e6d78b 	ldhu	r3,-25762(gp)
100039ac:	d0a6d48b 	ldhu	r2,-25774(gp)
100039b0:	1884703a 	and	r2,r3,r2
100039b4:	10bfffcc 	andi	r2,r2,65535
100039b8:	10000126 	beq	r2,zero,100039c0 <usb_init+0x388>
					goto USB_HOT_PLUG;
100039bc:	003f2606 	br	10003658 <__alt_data_end+0xf8003658>

				usleep(2000);
100039c0:	0101f404 	movi	r4,2000
100039c4:	0011e680 	call	10011e68 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100039c8:	d0e6d78b 	ldhu	r3,-25762(gp)
100039cc:	d0a6d48b 	ldhu	r2,-25774(gp)
100039d0:	1884703a 	and	r2,r3,r2
100039d4:	10bfffcc 	andi	r2,r2,65535
100039d8:	103fee26 	beq	r2,zero,10003994 <__alt_data_end+0xf8003994>
100039dc:	00000c06 	br	10003a10 <usb_init+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100039e0:	d0e6d78b 	ldhu	r3,-25762(gp)
100039e4:	d0a6d50b 	ldhu	r2,-25772(gp)
100039e8:	1884703a 	and	r2,r3,r2
100039ec:	10bfffcc 	andi	r2,r2,65535
100039f0:	10000426 	beq	r2,zero,10003a04 <usb_init+0x3cc>
		{
			printf("[INFO]: full speed device\n");
100039f4:	01040074 	movhi	r4,4097
100039f8:	210fd504 	addi	r4,r4,16212
100039fc:	00054400 	call	10005440 <puts>
10003a00:	00000306 	br	10003a10 <usb_init+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10003a04:	01040074 	movhi	r4,4097
10003a08:	210fdc04 	addi	r4,r4,16240
10003a0c:	00054400 	call	10005440 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10003a10:	00026140 	call	10002614 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003a14:	00000306 	br	10003a24 <usb_init+0x3ec>
	{
		UsbSetAddress();
10003a18:	00026140 	call	10002614 <UsbSetAddress>
		usleep(10*1000);
10003a1c:	0109c404 	movi	r4,10000
10003a20:	0011e680 	call	10011e68 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003a24:	010000c4 	movi	r4,3
10003a28:	00003640 	call	10000364 <IO_read>
10003a2c:	10bfffcc 	andi	r2,r2,65535
10003a30:	1080040c 	andi	r2,r2,16
10003a34:	103ff826 	beq	r2,zero,10003a18 <__alt_data_end+0xf8003a18>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003a38:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10003a3c:	01414184 	movi	r5,1286
10003a40:	01000084 	movi	r4,2
10003a44:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003a48:	0009883a 	mov	r4,zero
10003a4c:	00003640 	call	10000364 <IO_read>
10003a50:	10bfffcc 	andi	r2,r2,65535
10003a54:	100b883a 	mov	r5,r2
10003a58:	01040074 	movhi	r4,4097
10003a5c:	210fe304 	addi	r4,r4,16268
10003a60:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10003a64:	01414204 	movi	r5,1288
10003a68:	01000084 	movi	r4,2
10003a6c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003a70:	0009883a 	mov	r4,zero
10003a74:	00003640 	call	10000364 <IO_read>
10003a78:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10003a7c:	d0a6d78b 	ldhu	r2,-25762(gp)
10003a80:	10bfffcc 	andi	r2,r2,65535
10003a84:	100b883a 	mov	r5,r2
10003a88:	01040074 	movhi	r4,4097
10003a8c:	210fee04 	addi	r4,r4,16312
10003a90:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10003a94:	0001883a 	nop
10003a98:	d0a6d78b 	ldhu	r2,-25762(gp)
10003a9c:	10bfffcc 	andi	r2,r2,65535
10003aa0:	108000d8 	cmpnei	r2,r2,3
10003aa4:	10000326 	beq	r2,zero,10003ab4 <usb_init+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003aa8:	00035380 	call	10003538 <UsbGetRetryCnt>
10003aac:	d0a6d78d 	sth	r2,-25762(gp)

		goto USB_HOT_PLUG;
10003ab0:	003ee906 	br	10003658 <__alt_data_end+0xf8003658>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10003ab4:	01040074 	movhi	r4,4097
10003ab8:	210ffa04 	addi	r4,r4,16360
10003abc:	00054400 	call	10005440 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10003ac0:	00027140 	call	10002714 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003ac4:	00000306 	br	10003ad4 <usb_init+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10003ac8:	00027140 	call	10002714 <UsbGetDeviceDesc1>
		usleep(10*1000);
10003acc:	0109c404 	movi	r4,10000
10003ad0:	0011e680 	call	10011e68 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003ad4:	010000c4 	movi	r4,3
10003ad8:	00003640 	call	10000364 <IO_read>
10003adc:	10bfffcc 	andi	r2,r2,65535
10003ae0:	1080040c 	andi	r2,r2,16
10003ae4:	103ff826 	beq	r2,zero,10003ac8 <__alt_data_end+0xf8003ac8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003ae8:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003aec:	01414184 	movi	r5,1286
10003af0:	01000084 	movi	r4,2
10003af4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003af8:	0009883a 	mov	r4,zero
10003afc:	00003640 	call	10000364 <IO_read>
10003b00:	10bfffcc 	andi	r2,r2,65535
10003b04:	100b883a 	mov	r5,r2
10003b08:	01040074 	movhi	r4,4097
10003b0c:	21100904 	addi	r4,r4,16420
10003b10:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508);
10003b14:	01414204 	movi	r5,1288
10003b18:	01000084 	movi	r4,2
10003b1c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003b20:	0009883a 	mov	r4,zero
10003b24:	00003640 	call	10000364 <IO_read>
10003b28:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10003b2c:	d0a6d78b 	ldhu	r2,-25762(gp)
10003b30:	10bfffcc 	andi	r2,r2,65535
10003b34:	100b883a 	mov	r5,r2
10003b38:	01040074 	movhi	r4,4097
10003b3c:	21101404 	addi	r4,r4,16464
10003b40:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03)
10003b44:	00000206 	br	10003b50 <usb_init+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003b48:	00035380 	call	10003538 <UsbGetRetryCnt>
10003b4c:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003b50:	d0a6d78b 	ldhu	r2,-25762(gp)
10003b54:	10bfffcc 	andi	r2,r2,65535
10003b58:	108000d8 	cmpnei	r2,r2,3
10003b5c:	103ffa1e 	bne	r2,zero,10003b48 <__alt_data_end+0xf8003b48>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10003b60:	01040074 	movhi	r4,4097
10003b64:	21102004 	addi	r4,r4,16512
10003b68:	00054400 	call	10005440 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10003b6c:	000285c0 	call	1000285c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003b70:	00000306 	br	10003b80 <usb_init+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10003b74:	000285c0 	call	1000285c <UsbGetDeviceDesc2>
		usleep(10*1000);
10003b78:	0109c404 	movi	r4,10000
10003b7c:	0011e680 	call	10011e68 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003b80:	010000c4 	movi	r4,3
10003b84:	00003640 	call	10000364 <IO_read>
10003b88:	10bfffcc 	andi	r2,r2,65535
10003b8c:	1080040c 	andi	r2,r2,16
10003b90:	103ff826 	beq	r2,zero,10003b74 <__alt_data_end+0xf8003b74>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003b94:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003b98:	01414184 	movi	r5,1286
10003b9c:	01000084 	movi	r4,2
10003ba0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003ba4:	0009883a 	mov	r4,zero
10003ba8:	00003640 	call	10000364 <IO_read>
10003bac:	10bfffcc 	andi	r2,r2,65535
10003bb0:	100b883a 	mov	r5,r2
10003bb4:	01040074 	movhi	r4,4097
10003bb8:	21100904 	addi	r4,r4,16420
10003bbc:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508);
10003bc0:	01414204 	movi	r5,1288
10003bc4:	01000084 	movi	r4,2
10003bc8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003bcc:	0009883a 	mov	r4,zero
10003bd0:	00003640 	call	10000364 <IO_read>
10003bd4:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10003bd8:	d0a6d78b 	ldhu	r2,-25762(gp)
10003bdc:	10bfffcc 	andi	r2,r2,65535
10003be0:	100b883a 	mov	r5,r2
10003be4:	01040074 	movhi	r4,4097
10003be8:	21101404 	addi	r4,r4,16464
10003bec:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03)
10003bf0:	00000206 	br	10003bfc <usb_init+0x5c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003bf4:	00035380 	call	10003538 <UsbGetRetryCnt>
10003bf8:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003bfc:	d0a6d78b 	ldhu	r2,-25762(gp)
10003c00:	10bfffcc 	andi	r2,r2,65535
10003c04:	108000d8 	cmpnei	r2,r2,3
10003c08:	103ffa1e 	bne	r2,zero,10003bf4 <__alt_data_end+0xf8003bf4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10003c0c:	01040074 	movhi	r4,4097
10003c10:	21103404 	addi	r4,r4,16592
10003c14:	00054400 	call	10005440 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10003c18:	0002a340 	call	10002a34 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003c1c:	00000306 	br	10003c2c <usb_init+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10003c20:	0002a340 	call	10002a34 <UsbGetConfigDesc1>
		usleep(10*1000);
10003c24:	0109c404 	movi	r4,10000
10003c28:	0011e680 	call	10011e68 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003c2c:	010000c4 	movi	r4,3
10003c30:	00003640 	call	10000364 <IO_read>
10003c34:	10bfffcc 	andi	r2,r2,65535
10003c38:	1080040c 	andi	r2,r2,16
10003c3c:	103ff826 	beq	r2,zero,10003c20 <__alt_data_end+0xf8003c20>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003c40:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003c44:	01414184 	movi	r5,1286
10003c48:	01000084 	movi	r4,2
10003c4c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003c50:	0009883a 	mov	r4,zero
10003c54:	00003640 	call	10000364 <IO_read>
10003c58:	10bfffcc 	andi	r2,r2,65535
10003c5c:	100b883a 	mov	r5,r2
10003c60:	01040074 	movhi	r4,4097
10003c64:	21104604 	addi	r4,r4,16664
10003c68:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508);
10003c6c:	01414204 	movi	r5,1288
10003c70:	01000084 	movi	r4,2
10003c74:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003c78:	0009883a 	mov	r4,zero
10003c7c:	00003640 	call	10000364 <IO_read>
10003c80:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10003c84:	d0a6d78b 	ldhu	r2,-25762(gp)
10003c88:	10bfffcc 	andi	r2,r2,65535
10003c8c:	100b883a 	mov	r5,r2
10003c90:	01040074 	movhi	r4,4097
10003c94:	21105104 	addi	r4,r4,16708
10003c98:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03)
10003c9c:	00000206 	br	10003ca8 <usb_init+0x670>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003ca0:	00035380 	call	10003538 <UsbGetRetryCnt>
10003ca4:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003ca8:	d0a6d78b 	ldhu	r2,-25762(gp)
10003cac:	10bfffcc 	andi	r2,r2,65535
10003cb0:	108000d8 	cmpnei	r2,r2,3
10003cb4:	103ffa1e 	bne	r2,zero,10003ca0 <__alt_data_end+0xf8003ca0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10003cb8:	01040074 	movhi	r4,4097
10003cbc:	21105d04 	addi	r4,r4,16756
10003cc0:	00054400 	call	10005440 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10003cc4:	0002bc40 	call	10002bc4 <UsbGetConfigDesc2>

	usleep(100*1000);
10003cc8:	010000b4 	movhi	r4,2
10003ccc:	2121a804 	addi	r4,r4,-31072
10003cd0:	0011e680 	call	10011e68 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003cd4:	00000306 	br	10003ce4 <usb_init+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10003cd8:	0002bc40 	call	10002bc4 <UsbGetConfigDesc2>
		usleep(10*1000);
10003cdc:	0109c404 	movi	r4,10000
10003ce0:	0011e680 	call	10011e68 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003ce4:	010000c4 	movi	r4,3
10003ce8:	00003640 	call	10000364 <IO_read>
10003cec:	10bfffcc 	andi	r2,r2,65535
10003cf0:	1080040c 	andi	r2,r2,16
10003cf4:	103ff826 	beq	r2,zero,10003cd8 <__alt_data_end+0xf8003cd8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003cf8:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003cfc:	01414184 	movi	r5,1286
10003d00:	01000084 	movi	r4,2
10003d04:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003d08:	0009883a 	mov	r4,zero
10003d0c:	00003640 	call	10000364 <IO_read>
10003d10:	10bfffcc 	andi	r2,r2,65535
10003d14:	100b883a 	mov	r5,r2
10003d18:	01040074 	movhi	r4,4097
10003d1c:	21107004 	addi	r4,r4,16832
10003d20:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508);
10003d24:	01414204 	movi	r5,1288
10003d28:	01000084 	movi	r4,2
10003d2c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003d30:	0009883a 	mov	r4,zero
10003d34:	00003640 	call	10000364 <IO_read>
10003d38:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10003d3c:	d0a6d78b 	ldhu	r2,-25762(gp)
10003d40:	10bfffcc 	andi	r2,r2,65535
10003d44:	100b883a 	mov	r5,r2
10003d48:	01040074 	movhi	r4,4097
10003d4c:	21107b04 	addi	r4,r4,16876
10003d50:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03)
10003d54:	00000206 	br	10003d60 <usb_init+0x728>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003d58:	00035380 	call	10003538 <UsbGetRetryCnt>
10003d5c:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003d60:	d0a6d78b 	ldhu	r2,-25762(gp)
10003d64:	10bfffcc 	andi	r2,r2,65535
10003d68:	108000d8 	cmpnei	r2,r2,3
10003d6c:	103ffa1e 	bne	r2,zero,10003d58 <__alt_data_end+0xf8003d58>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10003d70:	01040074 	movhi	r4,4097
10003d74:	21108704 	addi	r4,r4,16924
10003d78:	00054400 	call	10005440 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10003d7c:	01415b04 	movi	r5,1388
10003d80:	01000084 	movi	r4,2
10003d84:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
10003d88:	0009883a 	mov	r4,zero
10003d8c:	00003640 	call	10000364 <IO_read>
10003d90:	d0a6d98d 	sth	r2,-25754(gp)
	code = code & 0x003;
10003d94:	d0a6d98b 	ldhu	r2,-25754(gp)
10003d98:	108000cc 	andi	r2,r2,3
10003d9c:	d0a6d98d 	sth	r2,-25754(gp)
	printf("\ncode = %x\n", code);
10003da0:	d0a6d98b 	ldhu	r2,-25754(gp)
10003da4:	10bfffcc 	andi	r2,r2,65535
10003da8:	100b883a 	mov	r5,r2
10003dac:	01040074 	movhi	r4,4097
10003db0:	21109a04 	addi	r4,r4,17000
10003db4:	00053440 	call	10005344 <printf>

	if (code == 0x01)
10003db8:	d0a6d98b 	ldhu	r2,-25754(gp)
10003dbc:	10bfffcc 	andi	r2,r2,65535
10003dc0:	10800058 	cmpnei	r2,r2,1
10003dc4:	1000041e 	bne	r2,zero,10003dd8 <usb_init+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10003dc8:	01040074 	movhi	r4,4097
10003dcc:	21109d04 	addi	r4,r4,17012
10003dd0:	00054400 	call	10005440 <puts>
10003dd4:	00000306 	br	10003de4 <usb_init+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10003dd8:	01040074 	movhi	r4,4097
10003ddc:	2110ac04 	addi	r4,r4,17072
10003de0:	00054400 	call	10005440 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10003de4:	01415d84 	movi	r5,1398
10003de8:	01000084 	movi	r4,2
10003dec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
10003df0:	0141cfc4 	movi	r5,1855
10003df4:	0009883a 	mov	r4,zero
10003df8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10003dfc:	01604154 	movui	r5,33029
10003e00:	0009883a 	mov	r4,zero
10003e04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10003e08:	014000c4 	movi	r5,3
10003e0c:	0009883a 	mov	r4,zero
10003e10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10003e14:	01400204 	movi	r5,8
10003e18:	0009883a 	mov	r4,zero
10003e1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10003e20:	016b0294 	movui	r5,44042
10003e24:	0009883a 	mov	r4,zero
10003e28:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10003e2c:	01415d84 	movi	r5,1398
10003e30:	01006c04 	movi	r4,432
10003e34:	00024c40 	call	100024c4 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10003e38:	01415f04 	movi	r5,1404
10003e3c:	01000084 	movi	r4,2
10003e40:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10003e44:	0009883a 	mov	r4,zero
10003e48:	00003640 	call	10000364 <IO_read>
10003e4c:	d0a6d805 	stb	r2,-25760(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10003e50:	d0a6d803 	ldbu	r2,-25760(gp)
10003e54:	10803fcc 	andi	r2,r2,255
10003e58:	100b883a 	mov	r5,r2
10003e5c:	01040074 	movhi	r4,4097
10003e60:	2110b504 	addi	r4,r4,17108
10003e64:	00053440 	call	10005344 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10003e68:	0002e2c0 	call	10002e2c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003e6c:	00000306 	br	10003e7c <usb_init+0x844>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10003e70:	0002e2c0 	call	10002e2c <UsbSetConfig>
		usleep(10*1000);
10003e74:	0109c404 	movi	r4,10000
10003e78:	0011e680 	call	10011e68 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003e7c:	010000c4 	movi	r4,3
10003e80:	00003640 	call	10000364 <IO_read>
10003e84:	10bfffcc 	andi	r2,r2,65535
10003e88:	1080040c 	andi	r2,r2,16
10003e8c:	103ff826 	beq	r2,zero,10003e70 <__alt_data_end+0xf8003e70>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003e90:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003e94:	01414184 	movi	r5,1286
10003e98:	01000084 	movi	r4,2
10003e9c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003ea0:	0009883a 	mov	r4,zero
10003ea4:	00003640 	call	10000364 <IO_read>
10003ea8:	10bfffcc 	andi	r2,r2,65535
10003eac:	100b883a 	mov	r5,r2
10003eb0:	01040074 	movhi	r4,4097
10003eb4:	2110bf04 	addi	r4,r4,17148
10003eb8:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508);
10003ebc:	01414204 	movi	r5,1288
10003ec0:	01000084 	movi	r4,2
10003ec4:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003ec8:	0009883a 	mov	r4,zero
10003ecc:	00003640 	call	10000364 <IO_read>
10003ed0:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10003ed4:	d0a6d78b 	ldhu	r2,-25762(gp)
10003ed8:	10bfffcc 	andi	r2,r2,65535
10003edc:	100b883a 	mov	r5,r2
10003ee0:	01040074 	movhi	r4,4097
10003ee4:	2110ca04 	addi	r4,r4,17192
10003ee8:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03)
10003eec:	00000206 	br	10003ef8 <usb_init+0x8c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003ef0:	00035380 	call	10003538 <UsbGetRetryCnt>
10003ef4:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003ef8:	d0a6d78b 	ldhu	r2,-25762(gp)
10003efc:	10bfffcc 	andi	r2,r2,65535
10003f00:	108000d8 	cmpnei	r2,r2,3
10003f04:	103ffa1e 	bne	r2,zero,10003ef0 <__alt_data_end+0xf8003ef0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10003f08:	01040074 	movhi	r4,4097
10003f0c:	2110d604 	addi	r4,r4,17240
10003f10:	00054400 	call	10005440 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10003f14:	0002f2c0 	call	10002f2c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003f18:	00000306 	br	10003f28 <usb_init+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10003f1c:	0002f2c0 	call	10002f2c <UsbClassRequest>
		usleep(10*1000);
10003f20:	0109c404 	movi	r4,10000
10003f24:	0011e680 	call	10011e68 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003f28:	010000c4 	movi	r4,3
10003f2c:	00003640 	call	10000364 <IO_read>
10003f30:	10bfffcc 	andi	r2,r2,65535
10003f34:	1080040c 	andi	r2,r2,16
10003f38:	103ff826 	beq	r2,zero,10003f1c <__alt_data_end+0xf8003f1c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003f3c:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003f40:	01414184 	movi	r5,1286
10003f44:	01000084 	movi	r4,2
10003f48:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003f4c:	0009883a 	mov	r4,zero
10003f50:	00003640 	call	10000364 <IO_read>
10003f54:	10bfffcc 	andi	r2,r2,65535
10003f58:	100b883a 	mov	r5,r2
10003f5c:	01040074 	movhi	r4,4097
10003f60:	2110e804 	addi	r4,r4,17312
10003f64:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508);
10003f68:	01414204 	movi	r5,1288
10003f6c:	01000084 	movi	r4,2
10003f70:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003f74:	0009883a 	mov	r4,zero
10003f78:	00003640 	call	10000364 <IO_read>
10003f7c:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10003f80:	d0a6d78b 	ldhu	r2,-25762(gp)
10003f84:	10bfffcc 	andi	r2,r2,65535
10003f88:	100b883a 	mov	r5,r2
10003f8c:	01040074 	movhi	r4,4097
10003f90:	2110f304 	addi	r4,r4,17356
10003f94:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03)
10003f98:	00000206 	br	10003fa4 <usb_init+0x96c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003f9c:	00035380 	call	10003538 <UsbGetRetryCnt>
10003fa0:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003fa4:	d0a6d78b 	ldhu	r2,-25762(gp)
10003fa8:	10bfffcc 	andi	r2,r2,65535
10003fac:	108000d8 	cmpnei	r2,r2,3
10003fb0:	103ffa1e 	bne	r2,zero,10003f9c <__alt_data_end+0xf8003f9c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10003fb4:	01040074 	movhi	r4,4097
10003fb8:	2110ff04 	addi	r4,r4,17404
10003fbc:	00054400 	call	10005440 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10003fc0:	000302c0 	call	1000302c <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003fc4:	00000306 	br	10003fd4 <usb_init+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10003fc8:	000302c0 	call	1000302c <UsbGetHidDesc>
		usleep(10*1000);
10003fcc:	0109c404 	movi	r4,10000
10003fd0:	0011e680 	call	10011e68 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003fd4:	010000c4 	movi	r4,3
10003fd8:	00003640 	call	10000364 <IO_read>
10003fdc:	10bfffcc 	andi	r2,r2,65535
10003fe0:	1080040c 	andi	r2,r2,16
10003fe4:	103ff826 	beq	r2,zero,10003fc8 <__alt_data_end+0xf8003fc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003fe8:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003fec:	01414184 	movi	r5,1286
10003ff0:	01000084 	movi	r4,2
10003ff4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003ff8:	0009883a 	mov	r4,zero
10003ffc:	00003640 	call	10000364 <IO_read>
10004000:	10bfffcc 	andi	r2,r2,65535
10004004:	100b883a 	mov	r5,r2
10004008:	01040074 	movhi	r4,4097
1000400c:	2110e804 	addi	r4,r4,17312
10004010:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508);
10004014:	01414204 	movi	r5,1288
10004018:	01000084 	movi	r4,2
1000401c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10004020:	0009883a 	mov	r4,zero
10004024:	00003640 	call	10000364 <IO_read>
10004028:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
1000402c:	d0a6d78b 	ldhu	r2,-25762(gp)
10004030:	10bfffcc 	andi	r2,r2,65535
10004034:	100b883a 	mov	r5,r2
10004038:	01040074 	movhi	r4,4097
1000403c:	2110f304 	addi	r4,r4,17356
10004040:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03)
10004044:	00000206 	br	10004050 <usb_init+0xa18>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004048:	00035380 	call	10003538 <UsbGetRetryCnt>
1000404c:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10004050:	d0a6d78b 	ldhu	r2,-25762(gp)
10004054:	10bfffcc 	andi	r2,r2,65535
10004058:	108000d8 	cmpnei	r2,r2,3
1000405c:	103ffa1e 	bne	r2,zero,10004048 <__alt_data_end+0xf8004048>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10004060:	01040074 	movhi	r4,4097
10004064:	21111104 	addi	r4,r4,17476
10004068:	00054400 	call	10005440 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
1000406c:	00031740 	call	10003174 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004070:	00000306 	br	10004080 <usb_init+0xa48>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10004074:	00031740 	call	10003174 <UsbGetReportDesc>
		usleep(10*1000);
10004078:	0109c404 	movi	r4,10000
1000407c:	0011e680 	call	10011e68 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004080:	010000c4 	movi	r4,3
10004084:	00003640 	call	10000364 <IO_read>
10004088:	10bfffcc 	andi	r2,r2,65535
1000408c:	1080040c 	andi	r2,r2,16
10004090:	103ff826 	beq	r2,zero,10004074 <__alt_data_end+0xf8004074>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004094:	00034b40 	call	100034b4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004098:	01414184 	movi	r5,1286
1000409c:	01000084 	movi	r4,2
100040a0:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
100040a4:	0009883a 	mov	r4,zero
100040a8:	00003640 	call	10000364 <IO_read>
100040ac:	10bfffcc 	andi	r2,r2,65535
100040b0:	100b883a 	mov	r5,r2
100040b4:	01040074 	movhi	r4,4097
100040b8:	21112504 	addi	r4,r4,17556
100040bc:	00053440 	call	10005344 <printf>

	IO_write(HPI_ADDR,0x0508);
100040c0:	01414204 	movi	r5,1288
100040c4:	01000084 	movi	r4,2
100040c8:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100040cc:	0009883a 	mov	r4,zero
100040d0:	00003640 	call	10000364 <IO_read>
100040d4:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
100040d8:	d0a6d78b 	ldhu	r2,-25762(gp)
100040dc:	10bfffcc 	andi	r2,r2,65535
100040e0:	100b883a 	mov	r5,r2
100040e4:	01040074 	movhi	r4,4097
100040e8:	21113104 	addi	r4,r4,17604
100040ec:	00053440 	call	10005344 <printf>
	while (usb_ctl_val != 0x03)
100040f0:	00000206 	br	100040fc <usb_init+0xac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
100040f4:	00035380 	call	10003538 <UsbGetRetryCnt>
100040f8:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100040fc:	d0a6d78b 	ldhu	r2,-25762(gp)
10004100:	10bfffcc 	andi	r2,r2,65535
10004104:	108000d8 	cmpnei	r2,r2,3
10004108:	103ffa1e 	bne	r2,zero,100040f4 <__alt_data_end+0xf80040f4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
1000410c:	01040074 	movhi	r4,4097
10004110:	21113d04 	addi	r4,r4,17652
10004114:	00054400 	call	10005440 <puts>
	usleep(10000);
10004118:	0109c404 	movi	r4,10000
1000411c:	0011e680 	call	10011e68 <usleep>
	return 0;
10004120:	0005883a 	mov	r2,zero
}
10004124:	e037883a 	mov	sp,fp
10004128:	dfc00117 	ldw	ra,4(sp)
1000412c:	df000017 	ldw	fp,0(sp)
10004130:	dec00204 	addi	sp,sp,8
10004134:	f800283a 	ret

10004138 <get_keycode>:

	//-----------------------------------get keycode value------------------------------------------------//
unsigned long get_keycode(void){
10004138:	defffb04 	addi	sp,sp,-20
1000413c:	dfc00415 	stw	ra,16(sp)
10004140:	df000315 	stw	fp,12(sp)
10004144:	df000304 	addi	fp,sp,12
	unsigned long keycode = 0; // return value: 4 key codes
10004148:	e03ffd15 	stw	zero,-12(fp)
	int keycode1 = 0; // first two key codes
1000414c:	e03ffe15 	stw	zero,-8(fp)
	int keycode2 = 0; // second two key codes
10004150:	e03fff15 	stw	zero,-4(fp)
	toggle++;
10004154:	d0a6d703 	ldbu	r2,-25764(gp)
10004158:	10800044 	addi	r2,r2,1
1000415c:	d0a6d705 	stb	r2,-25764(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
10004160:	01414004 	movi	r5,1280
10004164:	01000084 	movi	r4,2
10004168:	00002f40 	call	100002f4 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
1000416c:	01414704 	movi	r5,1308
10004170:	0009883a 	mov	r4,zero
10004174:	00002f40 	call	100002f4 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004178:	d0a6d803 	ldbu	r2,-25760(gp)
1000417c:	10803fcc 	andi	r2,r2,255
10004180:	108003cc 	andi	r2,r2,15
10004184:	100b883a 	mov	r5,r2
10004188:	0009883a 	mov	r4,zero
1000418c:	00002f40 	call	100002f4 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004190:	0140a444 	movi	r5,657
10004194:	0009883a 	mov	r4,zero
10004198:	00002f40 	call	100002f4 <IO_write>
	if(toggle%2)
1000419c:	d0a6d703 	ldbu	r2,-25764(gp)
100041a0:	1080004c 	andi	r2,r2,1
100041a4:	10803fcc 	andi	r2,r2,255
100041a8:	10000426 	beq	r2,zero,100041bc <get_keycode+0x84>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
100041ac:	01400044 	movi	r5,1
100041b0:	0009883a 	mov	r4,zero
100041b4:	00002f40 	call	100002f4 <IO_write>
100041b8:	00000306 	br	100041c8 <get_keycode+0x90>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
100041bc:	01401044 	movi	r5,65
100041c0:	0009883a 	mov	r4,zero
100041c4:	00002f40 	call	100002f4 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
100041c8:	014004c4 	movi	r5,19
100041cc:	0009883a 	mov	r4,zero
100041d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100041d4:	000b883a 	mov	r5,zero
100041d8:	0009883a 	mov	r4,zero
100041dc:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100041e0:	01414004 	movi	r5,1280
100041e4:	01006c04 	movi	r4,432
100041e8:	00024c40 	call	100024c4 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100041ec:	00002506 	br	10004284 <get_keycode+0x14c>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
100041f0:	01414004 	movi	r5,1280
100041f4:	01000084 	movi	r4,2
100041f8:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
100041fc:	01414704 	movi	r5,1308
10004200:	0009883a 	mov	r4,zero
10004204:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004208:	d0a6d803 	ldbu	r2,-25760(gp)
1000420c:	10803fcc 	andi	r2,r2,255
10004210:	108003cc 	andi	r2,r2,15
10004214:	100b883a 	mov	r5,r2
10004218:	0009883a 	mov	r4,zero
1000421c:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004220:	0140a444 	movi	r5,657
10004224:	0009883a 	mov	r4,zero
10004228:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
1000422c:	d0a6d703 	ldbu	r2,-25764(gp)
10004230:	1080004c 	andi	r2,r2,1
10004234:	10803fcc 	andi	r2,r2,255
10004238:	10000426 	beq	r2,zero,1000424c <get_keycode+0x114>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
1000423c:	01400044 	movi	r5,1
10004240:	0009883a 	mov	r4,zero
10004244:	00002f40 	call	100002f4 <IO_write>
10004248:	00000306 	br	10004258 <get_keycode+0x120>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
1000424c:	01401044 	movi	r5,65
10004250:	0009883a 	mov	r4,zero
10004254:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10004258:	014004c4 	movi	r5,19
1000425c:	0009883a 	mov	r4,zero
10004260:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//
10004264:	000b883a 	mov	r5,zero
10004268:	0009883a 	mov	r4,zero
1000426c:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004270:	01414004 	movi	r5,1280
10004274:	01006c04 	movi	r4,432
10004278:	00024c40 	call	100024c4 <UsbWrite>
		usleep(10*1000);
1000427c:	0109c404 	movi	r4,10000
10004280:	0011e680 	call	10011e68 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004284:	010000c4 	movi	r4,3
10004288:	00003640 	call	10000364 <IO_read>
1000428c:	10bfffcc 	andi	r2,r2,65535
10004290:	1080040c 	andi	r2,r2,16
10004294:	103fd626 	beq	r2,zero,100041f0 <__alt_data_end+0xf80041f0>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10004298:	00034b40 	call	100034b4 <UsbWaitTDListDone>
1000429c:	d0a6d78d 	sth	r2,-25762(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode1 = UsbRead(0x051e);
100042a0:	01014784 	movi	r4,1310
100042a4:	000251c0 	call	1000251c <UsbRead>
100042a8:	10bfffcc 	andi	r2,r2,65535
100042ac:	e0bffe15 	stw	r2,-8(fp)
	keycode2 = UsbRead(0x0520);
100042b0:	01014804 	movi	r4,1312
100042b4:	000251c0 	call	1000251c <UsbRead>
100042b8:	10bfffcc 	andi	r2,r2,65535
100042bc:	e0bfff15 	stw	r2,-4(fp)
//	printf("\nfirst two keycode values are %04x\n",keycode1);
//	printf("second two keycode values are %04x\n",keycode2);
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode1 & 0xff;
100042c0:	00802004 	movi	r2,128
100042c4:	e0fffe17 	ldw	r3,-8(fp)
100042c8:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
100042cc:	01003204 	movi	r4,200
100042d0:	0011e680 	call	10011e68 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
100042d4:	d0a6d40b 	ldhu	r2,-25776(gp)
100042d8:	10bfffcc 	andi	r2,r2,65535
100042dc:	1009883a 	mov	r4,r2
100042e0:	000251c0 	call	1000251c <UsbRead>
100042e4:	d0a6d78d 	sth	r2,-25762(gp)

	if(!(usb_ctl_val & no_device))
100042e8:	d0e6d78b 	ldhu	r3,-25762(gp)
100042ec:	d0a6d48b 	ldhu	r2,-25774(gp)
100042f0:	1884703a 	and	r2,r3,r2
100042f4:	10bfffcc 	andi	r2,r2,65535
100042f8:	1000401e 	bne	r2,zero,100043fc <get_keycode+0x2c4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100042fc:	d026d905 	stb	zero,-25756(gp)
10004300:	00000f06 	br	10004340 <get_keycode+0x208>
		{
			usleep(5*1000);
10004304:	0104e204 	movi	r4,5000
10004308:	0011e680 	call	10011e68 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000430c:	d0a6d40b 	ldhu	r2,-25776(gp)
10004310:	10bfffcc 	andi	r2,r2,65535
10004314:	1009883a 	mov	r4,r2
10004318:	000251c0 	call	1000251c <UsbRead>
1000431c:	d0a6d78d 	sth	r2,-25762(gp)
			if(usb_ctl_val & no_device) break;
10004320:	d0e6d78b 	ldhu	r3,-25762(gp)
10004324:	d0a6d48b 	ldhu	r2,-25774(gp)
10004328:	1884703a 	and	r2,r3,r2
1000432c:	10bfffcc 	andi	r2,r2,65535
10004330:	1000081e 	bne	r2,zero,10004354 <get_keycode+0x21c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10004334:	d0a6d903 	ldbu	r2,-25756(gp)
10004338:	10800044 	addi	r2,r2,1
1000433c:	d0a6d905 	stb	r2,-25756(gp)
10004340:	d0a6d903 	ldbu	r2,-25756(gp)
10004344:	10803fcc 	andi	r2,r2,255
10004348:	108001f0 	cmpltui	r2,r2,7
1000434c:	103fed1e 	bne	r2,zero,10004304 <__alt_data_end+0xf8004304>
10004350:	00000106 	br	10004358 <get_keycode+0x220>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
10004354:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
10004358:	d0e6d78b 	ldhu	r3,-25762(gp)
1000435c:	d0a6d48b 	ldhu	r2,-25774(gp)
10004360:	1884703a 	and	r2,r3,r2
10004364:	10bfffcc 	andi	r2,r2,65535
10004368:	1000241e 	bne	r2,zero,100043fc <get_keycode+0x2c4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
1000436c:	01040074 	movhi	r4,4097
10004370:	21115104 	addi	r4,r4,17732
10004374:	00054400 	call	10005440 <puts>
			printf("[INFO]: please insert again!!! \n");
10004378:	01040074 	movhi	r4,4097
1000437c:	21115c04 	addi	r4,r4,17776
10004380:	00054400 	call	10005440 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
10004384:	00001d06 	br	100043fc <get_keycode+0x2c4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10004388:	d0a6d40b 	ldhu	r2,-25776(gp)
1000438c:	10bfffcc 	andi	r2,r2,65535
10004390:	1009883a 	mov	r4,r2
10004394:	000251c0 	call	1000251c <UsbRead>
10004398:	d0a6d78d 	sth	r2,-25762(gp)
		usleep(5*1000);
1000439c:	0104e204 	movi	r4,5000
100043a0:	0011e680 	call	10011e68 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100043a4:	d0a6d40b 	ldhu	r2,-25776(gp)
100043a8:	10bfffcc 	andi	r2,r2,65535
100043ac:	1009883a 	mov	r4,r2
100043b0:	000251c0 	call	1000251c <UsbRead>
100043b4:	d0a6d78d 	sth	r2,-25762(gp)
		usleep(5*1000);
100043b8:	0104e204 	movi	r4,5000
100043bc:	0011e680 	call	10011e68 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100043c0:	d0a6d40b 	ldhu	r2,-25776(gp)
100043c4:	10bfffcc 	andi	r2,r2,65535
100043c8:	1009883a 	mov	r4,r2
100043cc:	000251c0 	call	1000251c <UsbRead>
100043d0:	d0a6d78d 	sth	r2,-25762(gp)
		usleep(5*1000);
100043d4:	0104e204 	movi	r4,5000
100043d8:	0011e680 	call	10011e68 <usleep>

		if(usb_ctl_val & no_device)
100043dc:	d0e6d78b 	ldhu	r3,-25762(gp)
100043e0:	d0a6d48b 	ldhu	r2,-25774(gp)
100043e4:	1884703a 	and	r2,r3,r2
100043e8:	10bfffcc 	andi	r2,r2,65535
100043ec:	10000126 	beq	r2,zero,100043f4 <get_keycode+0x2bc>
			usb_init();
100043f0:	00036380 	call	10003638 <usb_init>
//			goto USB_HOT_PLUG;

		usleep(200);
100043f4:	01003204 	movi	r4,200
100043f8:	0011e680 	call	10011e68 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
100043fc:	d0e6d78b 	ldhu	r3,-25762(gp)
10004400:	d0a6d48b 	ldhu	r2,-25774(gp)
10004404:	1884703a 	and	r2,r3,r2
10004408:	10bfffcc 	andi	r2,r2,65535
1000440c:	103fde26 	beq	r2,zero,10004388 <__alt_data_end+0xf8004388>
//			goto USB_HOT_PLUG;

		usleep(200);
	}

	keycode = (unsigned long)(keycode1<<16) + (unsigned long)keycode2;
10004410:	e0bffe17 	ldw	r2,-8(fp)
10004414:	1004943a 	slli	r2,r2,16
10004418:	1007883a 	mov	r3,r2
1000441c:	e0bfff17 	ldw	r2,-4(fp)
10004420:	1885883a 	add	r2,r3,r2
10004424:	e0bffd15 	stw	r2,-12(fp)
	return keycode;
10004428:	e0bffd17 	ldw	r2,-12(fp)
}
1000442c:	e037883a 	mov	sp,fp
10004430:	dfc00117 	ldw	ra,4(sp)
10004434:	df000017 	ldw	fp,0(sp)
10004438:	dec00204 	addi	sp,sp,8
1000443c:	f800283a 	ret

10004440 <__divsi3>:
10004440:	20001b16 	blt	r4,zero,100044b0 <__divsi3+0x70>
10004444:	000f883a 	mov	r7,zero
10004448:	28001616 	blt	r5,zero,100044a4 <__divsi3+0x64>
1000444c:	200d883a 	mov	r6,r4
10004450:	29001a2e 	bgeu	r5,r4,100044bc <__divsi3+0x7c>
10004454:	00800804 	movi	r2,32
10004458:	00c00044 	movi	r3,1
1000445c:	00000106 	br	10004464 <__divsi3+0x24>
10004460:	10000d26 	beq	r2,zero,10004498 <__divsi3+0x58>
10004464:	294b883a 	add	r5,r5,r5
10004468:	10bfffc4 	addi	r2,r2,-1
1000446c:	18c7883a 	add	r3,r3,r3
10004470:	293ffb36 	bltu	r5,r4,10004460 <__alt_data_end+0xf8004460>
10004474:	0005883a 	mov	r2,zero
10004478:	18000726 	beq	r3,zero,10004498 <__divsi3+0x58>
1000447c:	0005883a 	mov	r2,zero
10004480:	31400236 	bltu	r6,r5,1000448c <__divsi3+0x4c>
10004484:	314dc83a 	sub	r6,r6,r5
10004488:	10c4b03a 	or	r2,r2,r3
1000448c:	1806d07a 	srli	r3,r3,1
10004490:	280ad07a 	srli	r5,r5,1
10004494:	183ffa1e 	bne	r3,zero,10004480 <__alt_data_end+0xf8004480>
10004498:	38000126 	beq	r7,zero,100044a0 <__divsi3+0x60>
1000449c:	0085c83a 	sub	r2,zero,r2
100044a0:	f800283a 	ret
100044a4:	014bc83a 	sub	r5,zero,r5
100044a8:	39c0005c 	xori	r7,r7,1
100044ac:	003fe706 	br	1000444c <__alt_data_end+0xf800444c>
100044b0:	0109c83a 	sub	r4,zero,r4
100044b4:	01c00044 	movi	r7,1
100044b8:	003fe306 	br	10004448 <__alt_data_end+0xf8004448>
100044bc:	00c00044 	movi	r3,1
100044c0:	003fee06 	br	1000447c <__alt_data_end+0xf800447c>

100044c4 <__modsi3>:
100044c4:	20001716 	blt	r4,zero,10004524 <__modsi3+0x60>
100044c8:	000f883a 	mov	r7,zero
100044cc:	2005883a 	mov	r2,r4
100044d0:	28001216 	blt	r5,zero,1000451c <__modsi3+0x58>
100044d4:	2900162e 	bgeu	r5,r4,10004530 <__modsi3+0x6c>
100044d8:	01800804 	movi	r6,32
100044dc:	00c00044 	movi	r3,1
100044e0:	00000106 	br	100044e8 <__modsi3+0x24>
100044e4:	30000a26 	beq	r6,zero,10004510 <__modsi3+0x4c>
100044e8:	294b883a 	add	r5,r5,r5
100044ec:	31bfffc4 	addi	r6,r6,-1
100044f0:	18c7883a 	add	r3,r3,r3
100044f4:	293ffb36 	bltu	r5,r4,100044e4 <__alt_data_end+0xf80044e4>
100044f8:	18000526 	beq	r3,zero,10004510 <__modsi3+0x4c>
100044fc:	1806d07a 	srli	r3,r3,1
10004500:	11400136 	bltu	r2,r5,10004508 <__modsi3+0x44>
10004504:	1145c83a 	sub	r2,r2,r5
10004508:	280ad07a 	srli	r5,r5,1
1000450c:	183ffb1e 	bne	r3,zero,100044fc <__alt_data_end+0xf80044fc>
10004510:	38000126 	beq	r7,zero,10004518 <__modsi3+0x54>
10004514:	0085c83a 	sub	r2,zero,r2
10004518:	f800283a 	ret
1000451c:	014bc83a 	sub	r5,zero,r5
10004520:	003fec06 	br	100044d4 <__alt_data_end+0xf80044d4>
10004524:	0109c83a 	sub	r4,zero,r4
10004528:	01c00044 	movi	r7,1
1000452c:	003fe706 	br	100044cc <__alt_data_end+0xf80044cc>
10004530:	00c00044 	movi	r3,1
10004534:	003ff106 	br	100044fc <__alt_data_end+0xf80044fc>

10004538 <__udivsi3>:
10004538:	200d883a 	mov	r6,r4
1000453c:	2900152e 	bgeu	r5,r4,10004594 <__udivsi3+0x5c>
10004540:	28001416 	blt	r5,zero,10004594 <__udivsi3+0x5c>
10004544:	00800804 	movi	r2,32
10004548:	00c00044 	movi	r3,1
1000454c:	00000206 	br	10004558 <__udivsi3+0x20>
10004550:	10000e26 	beq	r2,zero,1000458c <__udivsi3+0x54>
10004554:	28000516 	blt	r5,zero,1000456c <__udivsi3+0x34>
10004558:	294b883a 	add	r5,r5,r5
1000455c:	10bfffc4 	addi	r2,r2,-1
10004560:	18c7883a 	add	r3,r3,r3
10004564:	293ffa36 	bltu	r5,r4,10004550 <__alt_data_end+0xf8004550>
10004568:	18000826 	beq	r3,zero,1000458c <__udivsi3+0x54>
1000456c:	0005883a 	mov	r2,zero
10004570:	31400236 	bltu	r6,r5,1000457c <__udivsi3+0x44>
10004574:	314dc83a 	sub	r6,r6,r5
10004578:	10c4b03a 	or	r2,r2,r3
1000457c:	1806d07a 	srli	r3,r3,1
10004580:	280ad07a 	srli	r5,r5,1
10004584:	183ffa1e 	bne	r3,zero,10004570 <__alt_data_end+0xf8004570>
10004588:	f800283a 	ret
1000458c:	0005883a 	mov	r2,zero
10004590:	f800283a 	ret
10004594:	00c00044 	movi	r3,1
10004598:	003ff406 	br	1000456c <__alt_data_end+0xf800456c>

1000459c <__umodsi3>:
1000459c:	2005883a 	mov	r2,r4
100045a0:	2900122e 	bgeu	r5,r4,100045ec <__umodsi3+0x50>
100045a4:	28001116 	blt	r5,zero,100045ec <__umodsi3+0x50>
100045a8:	01800804 	movi	r6,32
100045ac:	00c00044 	movi	r3,1
100045b0:	00000206 	br	100045bc <__umodsi3+0x20>
100045b4:	30000c26 	beq	r6,zero,100045e8 <__umodsi3+0x4c>
100045b8:	28000516 	blt	r5,zero,100045d0 <__umodsi3+0x34>
100045bc:	294b883a 	add	r5,r5,r5
100045c0:	31bfffc4 	addi	r6,r6,-1
100045c4:	18c7883a 	add	r3,r3,r3
100045c8:	293ffa36 	bltu	r5,r4,100045b4 <__alt_data_end+0xf80045b4>
100045cc:	18000626 	beq	r3,zero,100045e8 <__umodsi3+0x4c>
100045d0:	1806d07a 	srli	r3,r3,1
100045d4:	11400136 	bltu	r2,r5,100045dc <__umodsi3+0x40>
100045d8:	1145c83a 	sub	r2,r2,r5
100045dc:	280ad07a 	srli	r5,r5,1
100045e0:	183ffb1e 	bne	r3,zero,100045d0 <__alt_data_end+0xf80045d0>
100045e4:	f800283a 	ret
100045e8:	f800283a 	ret
100045ec:	00c00044 	movi	r3,1
100045f0:	003ff706 	br	100045d0 <__alt_data_end+0xf80045d0>

100045f4 <__divdf3>:
100045f4:	defff004 	addi	sp,sp,-64
100045f8:	dc800815 	stw	r18,32(sp)
100045fc:	2824d53a 	srli	r18,r5,20
10004600:	dd800c15 	stw	r22,48(sp)
10004604:	282cd7fa 	srli	r22,r5,31
10004608:	dc000615 	stw	r16,24(sp)
1000460c:	04000434 	movhi	r16,16
10004610:	843fffc4 	addi	r16,r16,-1
10004614:	dfc00f15 	stw	ra,60(sp)
10004618:	df000e15 	stw	fp,56(sp)
1000461c:	ddc00d15 	stw	r23,52(sp)
10004620:	dd400b15 	stw	r21,44(sp)
10004624:	dd000a15 	stw	r20,40(sp)
10004628:	dcc00915 	stw	r19,36(sp)
1000462c:	dc400715 	stw	r17,28(sp)
10004630:	9481ffcc 	andi	r18,r18,2047
10004634:	2c20703a 	and	r16,r5,r16
10004638:	b2003fcc 	andi	r8,r22,255
1000463c:	90006126 	beq	r18,zero,100047c4 <__divdf3+0x1d0>
10004640:	0081ffc4 	movi	r2,2047
10004644:	202b883a 	mov	r21,r4
10004648:	90803726 	beq	r18,r2,10004728 <__divdf3+0x134>
1000464c:	80800434 	orhi	r2,r16,16
10004650:	100490fa 	slli	r2,r2,3
10004654:	2020d77a 	srli	r16,r4,29
10004658:	202a90fa 	slli	r21,r4,3
1000465c:	94bf0044 	addi	r18,r18,-1023
10004660:	80a0b03a 	or	r16,r16,r2
10004664:	0013883a 	mov	r9,zero
10004668:	000b883a 	mov	r5,zero
1000466c:	3806d53a 	srli	r3,r7,20
10004670:	382ed7fa 	srli	r23,r7,31
10004674:	04400434 	movhi	r17,16
10004678:	8c7fffc4 	addi	r17,r17,-1
1000467c:	18c1ffcc 	andi	r3,r3,2047
10004680:	3029883a 	mov	r20,r6
10004684:	3c62703a 	and	r17,r7,r17
10004688:	bf003fcc 	andi	fp,r23,255
1000468c:	18006e26 	beq	r3,zero,10004848 <__divdf3+0x254>
10004690:	0081ffc4 	movi	r2,2047
10004694:	18806626 	beq	r3,r2,10004830 <__divdf3+0x23c>
10004698:	88800434 	orhi	r2,r17,16
1000469c:	100490fa 	slli	r2,r2,3
100046a0:	3022d77a 	srli	r17,r6,29
100046a4:	302890fa 	slli	r20,r6,3
100046a8:	18ff0044 	addi	r3,r3,-1023
100046ac:	88a2b03a 	or	r17,r17,r2
100046b0:	000f883a 	mov	r7,zero
100046b4:	b5e6f03a 	xor	r19,r22,r23
100046b8:	3a4cb03a 	or	r6,r7,r9
100046bc:	008003c4 	movi	r2,15
100046c0:	9809883a 	mov	r4,r19
100046c4:	90c7c83a 	sub	r3,r18,r3
100046c8:	9cc03fcc 	andi	r19,r19,255
100046cc:	11809636 	bltu	r2,r6,10004928 <__divdf3+0x334>
100046d0:	300c90ba 	slli	r6,r6,2
100046d4:	00840034 	movhi	r2,4096
100046d8:	1091ba04 	addi	r2,r2,18152
100046dc:	308d883a 	add	r6,r6,r2
100046e0:	30800017 	ldw	r2,0(r6)
100046e4:	1000683a 	jmp	r2
100046e8:	10004928 	cmpgeui	zero,r2,292
100046ec:	10004760 	cmpeqi	zero,r2,285
100046f0:	10004918 	cmpnei	zero,r2,292
100046f4:	10004754 	ori	zero,r2,285
100046f8:	10004918 	cmpnei	zero,r2,292
100046fc:	100048ec 	andhi	zero,r2,291
10004700:	10004918 	cmpnei	zero,r2,292
10004704:	10004754 	ori	zero,r2,285
10004708:	10004760 	cmpeqi	zero,r2,285
1000470c:	10004760 	cmpeqi	zero,r2,285
10004710:	100048ec 	andhi	zero,r2,291
10004714:	10004754 	ori	zero,r2,285
10004718:	10004744 	addi	zero,r2,285
1000471c:	10004744 	addi	zero,r2,285
10004720:	10004744 	addi	zero,r2,285
10004724:	10004cb0 	cmpltui	zero,r2,306
10004728:	2404b03a 	or	r2,r4,r16
1000472c:	10006c1e 	bne	r2,zero,100048e0 <__divdf3+0x2ec>
10004730:	02400204 	movi	r9,8
10004734:	0021883a 	mov	r16,zero
10004738:	002b883a 	mov	r21,zero
1000473c:	01400084 	movi	r5,2
10004740:	003fca06 	br	1000466c <__alt_data_end+0xf800466c>
10004744:	8023883a 	mov	r17,r16
10004748:	a829883a 	mov	r20,r21
1000474c:	4039883a 	mov	fp,r8
10004750:	280f883a 	mov	r7,r5
10004754:	00800084 	movi	r2,2
10004758:	3881601e 	bne	r7,r2,10004cdc <__divdf3+0x6e8>
1000475c:	e027883a 	mov	r19,fp
10004760:	9900004c 	andi	r4,r19,1
10004764:	0081ffc4 	movi	r2,2047
10004768:	0021883a 	mov	r16,zero
1000476c:	002b883a 	mov	r21,zero
10004770:	1004953a 	slli	r2,r2,20
10004774:	20c03fcc 	andi	r3,r4,255
10004778:	01400434 	movhi	r5,16
1000477c:	297fffc4 	addi	r5,r5,-1
10004780:	180697fa 	slli	r3,r3,31
10004784:	8160703a 	and	r16,r16,r5
10004788:	80a0b03a 	or	r16,r16,r2
1000478c:	80c6b03a 	or	r3,r16,r3
10004790:	a805883a 	mov	r2,r21
10004794:	dfc00f17 	ldw	ra,60(sp)
10004798:	df000e17 	ldw	fp,56(sp)
1000479c:	ddc00d17 	ldw	r23,52(sp)
100047a0:	dd800c17 	ldw	r22,48(sp)
100047a4:	dd400b17 	ldw	r21,44(sp)
100047a8:	dd000a17 	ldw	r20,40(sp)
100047ac:	dcc00917 	ldw	r19,36(sp)
100047b0:	dc800817 	ldw	r18,32(sp)
100047b4:	dc400717 	ldw	r17,28(sp)
100047b8:	dc000617 	ldw	r16,24(sp)
100047bc:	dec01004 	addi	sp,sp,64
100047c0:	f800283a 	ret
100047c4:	2404b03a 	or	r2,r4,r16
100047c8:	2023883a 	mov	r17,r4
100047cc:	10003f26 	beq	r2,zero,100048cc <__divdf3+0x2d8>
100047d0:	80015e26 	beq	r16,zero,10004d4c <__divdf3+0x758>
100047d4:	8009883a 	mov	r4,r16
100047d8:	d9800215 	stw	r6,8(sp)
100047dc:	d9c00515 	stw	r7,20(sp)
100047e0:	da000415 	stw	r8,16(sp)
100047e4:	000523c0 	call	1000523c <__clzsi2>
100047e8:	d9800217 	ldw	r6,8(sp)
100047ec:	d9c00517 	ldw	r7,20(sp)
100047f0:	da000417 	ldw	r8,16(sp)
100047f4:	113ffd44 	addi	r4,r2,-11
100047f8:	00c00704 	movi	r3,28
100047fc:	19014f16 	blt	r3,r4,10004d3c <__divdf3+0x748>
10004800:	00c00744 	movi	r3,29
10004804:	157ffe04 	addi	r21,r2,-8
10004808:	1907c83a 	sub	r3,r3,r4
1000480c:	8560983a 	sll	r16,r16,r21
10004810:	88c6d83a 	srl	r3,r17,r3
10004814:	8d6a983a 	sll	r21,r17,r21
10004818:	1c20b03a 	or	r16,r3,r16
1000481c:	1080fcc4 	addi	r2,r2,1011
10004820:	00a5c83a 	sub	r18,zero,r2
10004824:	0013883a 	mov	r9,zero
10004828:	000b883a 	mov	r5,zero
1000482c:	003f8f06 	br	1000466c <__alt_data_end+0xf800466c>
10004830:	3444b03a 	or	r2,r6,r17
10004834:	1000231e 	bne	r2,zero,100048c4 <__divdf3+0x2d0>
10004838:	0023883a 	mov	r17,zero
1000483c:	0029883a 	mov	r20,zero
10004840:	01c00084 	movi	r7,2
10004844:	003f9b06 	br	100046b4 <__alt_data_end+0xf80046b4>
10004848:	3444b03a 	or	r2,r6,r17
1000484c:	10001926 	beq	r2,zero,100048b4 <__divdf3+0x2c0>
10004850:	88014b26 	beq	r17,zero,10004d80 <__divdf3+0x78c>
10004854:	8809883a 	mov	r4,r17
10004858:	d9400115 	stw	r5,4(sp)
1000485c:	d9800215 	stw	r6,8(sp)
10004860:	da000415 	stw	r8,16(sp)
10004864:	da400315 	stw	r9,12(sp)
10004868:	000523c0 	call	1000523c <__clzsi2>
1000486c:	d9400117 	ldw	r5,4(sp)
10004870:	d9800217 	ldw	r6,8(sp)
10004874:	da000417 	ldw	r8,16(sp)
10004878:	da400317 	ldw	r9,12(sp)
1000487c:	113ffd44 	addi	r4,r2,-11
10004880:	00c00704 	movi	r3,28
10004884:	19013a16 	blt	r3,r4,10004d70 <__divdf3+0x77c>
10004888:	00c00744 	movi	r3,29
1000488c:	153ffe04 	addi	r20,r2,-8
10004890:	1907c83a 	sub	r3,r3,r4
10004894:	8d22983a 	sll	r17,r17,r20
10004898:	30c6d83a 	srl	r3,r6,r3
1000489c:	3528983a 	sll	r20,r6,r20
100048a0:	1c62b03a 	or	r17,r3,r17
100048a4:	1080fcc4 	addi	r2,r2,1011
100048a8:	0087c83a 	sub	r3,zero,r2
100048ac:	000f883a 	mov	r7,zero
100048b0:	003f8006 	br	100046b4 <__alt_data_end+0xf80046b4>
100048b4:	0023883a 	mov	r17,zero
100048b8:	0029883a 	mov	r20,zero
100048bc:	01c00044 	movi	r7,1
100048c0:	003f7c06 	br	100046b4 <__alt_data_end+0xf80046b4>
100048c4:	01c000c4 	movi	r7,3
100048c8:	003f7a06 	br	100046b4 <__alt_data_end+0xf80046b4>
100048cc:	02400104 	movi	r9,4
100048d0:	0021883a 	mov	r16,zero
100048d4:	002b883a 	mov	r21,zero
100048d8:	01400044 	movi	r5,1
100048dc:	003f6306 	br	1000466c <__alt_data_end+0xf800466c>
100048e0:	02400304 	movi	r9,12
100048e4:	014000c4 	movi	r5,3
100048e8:	003f6006 	br	1000466c <__alt_data_end+0xf800466c>
100048ec:	04000434 	movhi	r16,16
100048f0:	0009883a 	mov	r4,zero
100048f4:	843fffc4 	addi	r16,r16,-1
100048f8:	057fffc4 	movi	r21,-1
100048fc:	0081ffc4 	movi	r2,2047
10004900:	003f9b06 	br	10004770 <__alt_data_end+0xf8004770>
10004904:	00c00044 	movi	r3,1
10004908:	1887c83a 	sub	r3,r3,r2
1000490c:	01000e04 	movi	r4,56
10004910:	20c1530e 	bge	r4,r3,10004e60 <__divdf3+0x86c>
10004914:	9900004c 	andi	r4,r19,1
10004918:	0005883a 	mov	r2,zero
1000491c:	0021883a 	mov	r16,zero
10004920:	002b883a 	mov	r21,zero
10004924:	003f9206 	br	10004770 <__alt_data_end+0xf8004770>
10004928:	8c012e36 	bltu	r17,r16,10004de4 <__divdf3+0x7f0>
1000492c:	84412c26 	beq	r16,r17,10004de0 <__divdf3+0x7ec>
10004930:	a82f883a 	mov	r23,r21
10004934:	18ffffc4 	addi	r3,r3,-1
10004938:	002b883a 	mov	r21,zero
1000493c:	a004d63a 	srli	r2,r20,24
10004940:	8822923a 	slli	r17,r17,8
10004944:	a028923a 	slli	r20,r20,8
10004948:	8009883a 	mov	r4,r16
1000494c:	88acb03a 	or	r22,r17,r2
10004950:	dd000015 	stw	r20,0(sp)
10004954:	b028d43a 	srli	r20,r22,16
10004958:	d8c00215 	stw	r3,8(sp)
1000495c:	b4bfffcc 	andi	r18,r22,65535
10004960:	a00b883a 	mov	r5,r20
10004964:	00045380 	call	10004538 <__udivsi3>
10004968:	100b883a 	mov	r5,r2
1000496c:	9009883a 	mov	r4,r18
10004970:	1023883a 	mov	r17,r2
10004974:	00052a00 	call	100052a0 <__mulsi3>
10004978:	8009883a 	mov	r4,r16
1000497c:	a00b883a 	mov	r5,r20
10004980:	1039883a 	mov	fp,r2
10004984:	000459c0 	call	1000459c <__umodsi3>
10004988:	1004943a 	slli	r2,r2,16
1000498c:	b808d43a 	srli	r4,r23,16
10004990:	d8c00217 	ldw	r3,8(sp)
10004994:	2084b03a 	or	r2,r4,r2
10004998:	1700062e 	bgeu	r2,fp,100049b4 <__divdf3+0x3c0>
1000499c:	1585883a 	add	r2,r2,r22
100049a0:	893fffc4 	addi	r4,r17,-1
100049a4:	15811d36 	bltu	r2,r22,10004e1c <__divdf3+0x828>
100049a8:	17011c2e 	bgeu	r2,fp,10004e1c <__divdf3+0x828>
100049ac:	8c7fff84 	addi	r17,r17,-2
100049b0:	1585883a 	add	r2,r2,r22
100049b4:	1739c83a 	sub	fp,r2,fp
100049b8:	a00b883a 	mov	r5,r20
100049bc:	e009883a 	mov	r4,fp
100049c0:	d8c00215 	stw	r3,8(sp)
100049c4:	00045380 	call	10004538 <__udivsi3>
100049c8:	100b883a 	mov	r5,r2
100049cc:	9009883a 	mov	r4,r18
100049d0:	1021883a 	mov	r16,r2
100049d4:	00052a00 	call	100052a0 <__mulsi3>
100049d8:	a00b883a 	mov	r5,r20
100049dc:	e009883a 	mov	r4,fp
100049e0:	d8800415 	stw	r2,16(sp)
100049e4:	000459c0 	call	1000459c <__umodsi3>
100049e8:	1004943a 	slli	r2,r2,16
100049ec:	da000417 	ldw	r8,16(sp)
100049f0:	bdffffcc 	andi	r23,r23,65535
100049f4:	b884b03a 	or	r2,r23,r2
100049f8:	d8c00217 	ldw	r3,8(sp)
100049fc:	1200062e 	bgeu	r2,r8,10004a18 <__divdf3+0x424>
10004a00:	1585883a 	add	r2,r2,r22
10004a04:	813fffc4 	addi	r4,r16,-1
10004a08:	15810236 	bltu	r2,r22,10004e14 <__divdf3+0x820>
10004a0c:	1201012e 	bgeu	r2,r8,10004e14 <__divdf3+0x820>
10004a10:	843fff84 	addi	r16,r16,-2
10004a14:	1585883a 	add	r2,r2,r22
10004a18:	8822943a 	slli	r17,r17,16
10004a1c:	d9800017 	ldw	r6,0(sp)
10004a20:	1211c83a 	sub	r8,r2,r8
10004a24:	8c22b03a 	or	r17,r17,r16
10004a28:	373fffcc 	andi	fp,r6,65535
10004a2c:	8abfffcc 	andi	r10,r17,65535
10004a30:	8820d43a 	srli	r16,r17,16
10004a34:	5009883a 	mov	r4,r10
10004a38:	e00b883a 	mov	r5,fp
10004a3c:	302ed43a 	srli	r23,r6,16
10004a40:	d8c00215 	stw	r3,8(sp)
10004a44:	da000415 	stw	r8,16(sp)
10004a48:	da800115 	stw	r10,4(sp)
10004a4c:	00052a00 	call	100052a0 <__mulsi3>
10004a50:	800b883a 	mov	r5,r16
10004a54:	e009883a 	mov	r4,fp
10004a58:	d8800515 	stw	r2,20(sp)
10004a5c:	00052a00 	call	100052a0 <__mulsi3>
10004a60:	8009883a 	mov	r4,r16
10004a64:	b80b883a 	mov	r5,r23
10004a68:	d8800315 	stw	r2,12(sp)
10004a6c:	00052a00 	call	100052a0 <__mulsi3>
10004a70:	da800117 	ldw	r10,4(sp)
10004a74:	b80b883a 	mov	r5,r23
10004a78:	1021883a 	mov	r16,r2
10004a7c:	5009883a 	mov	r4,r10
10004a80:	00052a00 	call	100052a0 <__mulsi3>
10004a84:	d9c00517 	ldw	r7,20(sp)
10004a88:	da400317 	ldw	r9,12(sp)
10004a8c:	d8c00217 	ldw	r3,8(sp)
10004a90:	3808d43a 	srli	r4,r7,16
10004a94:	1245883a 	add	r2,r2,r9
10004a98:	da000417 	ldw	r8,16(sp)
10004a9c:	2085883a 	add	r2,r4,r2
10004aa0:	1240022e 	bgeu	r2,r9,10004aac <__divdf3+0x4b8>
10004aa4:	01000074 	movhi	r4,1
10004aa8:	8121883a 	add	r16,r16,r4
10004aac:	1008d43a 	srli	r4,r2,16
10004ab0:	1004943a 	slli	r2,r2,16
10004ab4:	39ffffcc 	andi	r7,r7,65535
10004ab8:	2409883a 	add	r4,r4,r16
10004abc:	11c5883a 	add	r2,r2,r7
10004ac0:	4100bb36 	bltu	r8,r4,10004db0 <__divdf3+0x7bc>
10004ac4:	4100d726 	beq	r8,r4,10004e24 <__divdf3+0x830>
10004ac8:	4109c83a 	sub	r4,r8,r4
10004acc:	a8a1c83a 	sub	r16,r21,r2
10004ad0:	ac2b803a 	cmpltu	r21,r21,r16
10004ad4:	256bc83a 	sub	r21,r4,r21
10004ad8:	b540d926 	beq	r22,r21,10004e40 <__divdf3+0x84c>
10004adc:	a00b883a 	mov	r5,r20
10004ae0:	a809883a 	mov	r4,r21
10004ae4:	d8c00215 	stw	r3,8(sp)
10004ae8:	00045380 	call	10004538 <__udivsi3>
10004aec:	100b883a 	mov	r5,r2
10004af0:	9009883a 	mov	r4,r18
10004af4:	d8800515 	stw	r2,20(sp)
10004af8:	00052a00 	call	100052a0 <__mulsi3>
10004afc:	a809883a 	mov	r4,r21
10004b00:	a00b883a 	mov	r5,r20
10004b04:	d8800415 	stw	r2,16(sp)
10004b08:	000459c0 	call	1000459c <__umodsi3>
10004b0c:	1004943a 	slli	r2,r2,16
10004b10:	8008d43a 	srli	r4,r16,16
10004b14:	da000417 	ldw	r8,16(sp)
10004b18:	d8c00217 	ldw	r3,8(sp)
10004b1c:	2084b03a 	or	r2,r4,r2
10004b20:	d9c00517 	ldw	r7,20(sp)
10004b24:	1200062e 	bgeu	r2,r8,10004b40 <__divdf3+0x54c>
10004b28:	1585883a 	add	r2,r2,r22
10004b2c:	393fffc4 	addi	r4,r7,-1
10004b30:	1580c536 	bltu	r2,r22,10004e48 <__divdf3+0x854>
10004b34:	1200c42e 	bgeu	r2,r8,10004e48 <__divdf3+0x854>
10004b38:	39ffff84 	addi	r7,r7,-2
10004b3c:	1585883a 	add	r2,r2,r22
10004b40:	122bc83a 	sub	r21,r2,r8
10004b44:	a00b883a 	mov	r5,r20
10004b48:	a809883a 	mov	r4,r21
10004b4c:	d8c00215 	stw	r3,8(sp)
10004b50:	d9c00515 	stw	r7,20(sp)
10004b54:	00045380 	call	10004538 <__udivsi3>
10004b58:	9009883a 	mov	r4,r18
10004b5c:	100b883a 	mov	r5,r2
10004b60:	d8800415 	stw	r2,16(sp)
10004b64:	00052a00 	call	100052a0 <__mulsi3>
10004b68:	a809883a 	mov	r4,r21
10004b6c:	a00b883a 	mov	r5,r20
10004b70:	1025883a 	mov	r18,r2
10004b74:	000459c0 	call	1000459c <__umodsi3>
10004b78:	1004943a 	slli	r2,r2,16
10004b7c:	813fffcc 	andi	r4,r16,65535
10004b80:	d8c00217 	ldw	r3,8(sp)
10004b84:	20a0b03a 	or	r16,r4,r2
10004b88:	d9c00517 	ldw	r7,20(sp)
10004b8c:	da000417 	ldw	r8,16(sp)
10004b90:	8480062e 	bgeu	r16,r18,10004bac <__divdf3+0x5b8>
10004b94:	85a1883a 	add	r16,r16,r22
10004b98:	40bfffc4 	addi	r2,r8,-1
10004b9c:	8580ac36 	bltu	r16,r22,10004e50 <__divdf3+0x85c>
10004ba0:	8480ab2e 	bgeu	r16,r18,10004e50 <__divdf3+0x85c>
10004ba4:	423fff84 	addi	r8,r8,-2
10004ba8:	85a1883a 	add	r16,r16,r22
10004bac:	3804943a 	slli	r2,r7,16
10004bb0:	84a1c83a 	sub	r16,r16,r18
10004bb4:	e009883a 	mov	r4,fp
10004bb8:	1228b03a 	or	r20,r2,r8
10004bbc:	a1ffffcc 	andi	r7,r20,65535
10004bc0:	a024d43a 	srli	r18,r20,16
10004bc4:	380b883a 	mov	r5,r7
10004bc8:	d8c00215 	stw	r3,8(sp)
10004bcc:	d9c00515 	stw	r7,20(sp)
10004bd0:	00052a00 	call	100052a0 <__mulsi3>
10004bd4:	900b883a 	mov	r5,r18
10004bd8:	e009883a 	mov	r4,fp
10004bdc:	102b883a 	mov	r21,r2
10004be0:	00052a00 	call	100052a0 <__mulsi3>
10004be4:	900b883a 	mov	r5,r18
10004be8:	b809883a 	mov	r4,r23
10004bec:	1039883a 	mov	fp,r2
10004bf0:	00052a00 	call	100052a0 <__mulsi3>
10004bf4:	d9c00517 	ldw	r7,20(sp)
10004bf8:	b80b883a 	mov	r5,r23
10004bfc:	1025883a 	mov	r18,r2
10004c00:	3809883a 	mov	r4,r7
10004c04:	00052a00 	call	100052a0 <__mulsi3>
10004c08:	a808d43a 	srli	r4,r21,16
10004c0c:	1705883a 	add	r2,r2,fp
10004c10:	d8c00217 	ldw	r3,8(sp)
10004c14:	2085883a 	add	r2,r4,r2
10004c18:	1700022e 	bgeu	r2,fp,10004c24 <__divdf3+0x630>
10004c1c:	01000074 	movhi	r4,1
10004c20:	9125883a 	add	r18,r18,r4
10004c24:	1008d43a 	srli	r4,r2,16
10004c28:	1004943a 	slli	r2,r2,16
10004c2c:	ad7fffcc 	andi	r21,r21,65535
10004c30:	2489883a 	add	r4,r4,r18
10004c34:	1545883a 	add	r2,r2,r21
10004c38:	81003836 	bltu	r16,r4,10004d1c <__divdf3+0x728>
10004c3c:	81003626 	beq	r16,r4,10004d18 <__divdf3+0x724>
10004c40:	a5000054 	ori	r20,r20,1
10004c44:	1880ffc4 	addi	r2,r3,1023
10004c48:	00bf2e0e 	bge	zero,r2,10004904 <__alt_data_end+0xf8004904>
10004c4c:	a10001cc 	andi	r4,r20,7
10004c50:	20000726 	beq	r4,zero,10004c70 <__divdf3+0x67c>
10004c54:	a10003cc 	andi	r4,r20,15
10004c58:	01400104 	movi	r5,4
10004c5c:	21400426 	beq	r4,r5,10004c70 <__divdf3+0x67c>
10004c60:	a149883a 	add	r4,r20,r5
10004c64:	2529803a 	cmpltu	r20,r4,r20
10004c68:	8d23883a 	add	r17,r17,r20
10004c6c:	2029883a 	mov	r20,r4
10004c70:	8900402c 	andhi	r4,r17,256
10004c74:	20000426 	beq	r4,zero,10004c88 <__divdf3+0x694>
10004c78:	18810004 	addi	r2,r3,1024
10004c7c:	00ffc034 	movhi	r3,65280
10004c80:	18ffffc4 	addi	r3,r3,-1
10004c84:	88e2703a 	and	r17,r17,r3
10004c88:	00c1ff84 	movi	r3,2046
10004c8c:	18beb416 	blt	r3,r2,10004760 <__alt_data_end+0xf8004760>
10004c90:	a028d0fa 	srli	r20,r20,3
10004c94:	882a977a 	slli	r21,r17,29
10004c98:	8820927a 	slli	r16,r17,9
10004c9c:	1081ffcc 	andi	r2,r2,2047
10004ca0:	ad2ab03a 	or	r21,r21,r20
10004ca4:	8020d33a 	srli	r16,r16,12
10004ca8:	9900004c 	andi	r4,r19,1
10004cac:	003eb006 	br	10004770 <__alt_data_end+0xf8004770>
10004cb0:	8080022c 	andhi	r2,r16,8
10004cb4:	10001226 	beq	r2,zero,10004d00 <__divdf3+0x70c>
10004cb8:	8880022c 	andhi	r2,r17,8
10004cbc:	1000101e 	bne	r2,zero,10004d00 <__divdf3+0x70c>
10004cc0:	00800434 	movhi	r2,16
10004cc4:	8c000234 	orhi	r16,r17,8
10004cc8:	10bfffc4 	addi	r2,r2,-1
10004ccc:	b809883a 	mov	r4,r23
10004cd0:	80a0703a 	and	r16,r16,r2
10004cd4:	a02b883a 	mov	r21,r20
10004cd8:	003f0806 	br	100048fc <__alt_data_end+0xf80048fc>
10004cdc:	008000c4 	movi	r2,3
10004ce0:	3880b126 	beq	r7,r2,10004fa8 <__divdf3+0x9b4>
10004ce4:	00800044 	movi	r2,1
10004ce8:	38805b1e 	bne	r7,r2,10004e58 <__divdf3+0x864>
10004cec:	e009883a 	mov	r4,fp
10004cf0:	0005883a 	mov	r2,zero
10004cf4:	0021883a 	mov	r16,zero
10004cf8:	002b883a 	mov	r21,zero
10004cfc:	003e9c06 	br	10004770 <__alt_data_end+0xf8004770>
10004d00:	00800434 	movhi	r2,16
10004d04:	84000234 	orhi	r16,r16,8
10004d08:	10bfffc4 	addi	r2,r2,-1
10004d0c:	b009883a 	mov	r4,r22
10004d10:	80a0703a 	and	r16,r16,r2
10004d14:	003ef906 	br	100048fc <__alt_data_end+0xf80048fc>
10004d18:	103fca26 	beq	r2,zero,10004c44 <__alt_data_end+0xf8004c44>
10004d1c:	b421883a 	add	r16,r22,r16
10004d20:	a17fffc4 	addi	r5,r20,-1
10004d24:	8580422e 	bgeu	r16,r22,10004e30 <__divdf3+0x83c>
10004d28:	2829883a 	mov	r20,r5
10004d2c:	813fc41e 	bne	r16,r4,10004c40 <__alt_data_end+0xf8004c40>
10004d30:	d9800017 	ldw	r6,0(sp)
10004d34:	30bfc21e 	bne	r6,r2,10004c40 <__alt_data_end+0xf8004c40>
10004d38:	003fc206 	br	10004c44 <__alt_data_end+0xf8004c44>
10004d3c:	143ff604 	addi	r16,r2,-40
10004d40:	8c20983a 	sll	r16,r17,r16
10004d44:	002b883a 	mov	r21,zero
10004d48:	003eb406 	br	1000481c <__alt_data_end+0xf800481c>
10004d4c:	d9800215 	stw	r6,8(sp)
10004d50:	d9c00515 	stw	r7,20(sp)
10004d54:	da000415 	stw	r8,16(sp)
10004d58:	000523c0 	call	1000523c <__clzsi2>
10004d5c:	10800804 	addi	r2,r2,32
10004d60:	da000417 	ldw	r8,16(sp)
10004d64:	d9c00517 	ldw	r7,20(sp)
10004d68:	d9800217 	ldw	r6,8(sp)
10004d6c:	003ea106 	br	100047f4 <__alt_data_end+0xf80047f4>
10004d70:	147ff604 	addi	r17,r2,-40
10004d74:	3462983a 	sll	r17,r6,r17
10004d78:	0029883a 	mov	r20,zero
10004d7c:	003ec906 	br	100048a4 <__alt_data_end+0xf80048a4>
10004d80:	3009883a 	mov	r4,r6
10004d84:	d9400115 	stw	r5,4(sp)
10004d88:	d9800215 	stw	r6,8(sp)
10004d8c:	da000415 	stw	r8,16(sp)
10004d90:	da400315 	stw	r9,12(sp)
10004d94:	000523c0 	call	1000523c <__clzsi2>
10004d98:	10800804 	addi	r2,r2,32
10004d9c:	da400317 	ldw	r9,12(sp)
10004da0:	da000417 	ldw	r8,16(sp)
10004da4:	d9800217 	ldw	r6,8(sp)
10004da8:	d9400117 	ldw	r5,4(sp)
10004dac:	003eb306 	br	1000487c <__alt_data_end+0xf800487c>
10004db0:	d9800017 	ldw	r6,0(sp)
10004db4:	a9ab883a 	add	r21,r21,r6
10004db8:	a98b803a 	cmpltu	r5,r21,r6
10004dbc:	2d8b883a 	add	r5,r5,r22
10004dc0:	2a11883a 	add	r8,r5,r8
10004dc4:	897fffc4 	addi	r5,r17,-1
10004dc8:	b2000c2e 	bgeu	r22,r8,10004dfc <__divdf3+0x808>
10004dcc:	41003f36 	bltu	r8,r4,10004ecc <__divdf3+0x8d8>
10004dd0:	22006c26 	beq	r4,r8,10004f84 <__divdf3+0x990>
10004dd4:	4109c83a 	sub	r4,r8,r4
10004dd8:	2823883a 	mov	r17,r5
10004ddc:	003f3b06 	br	10004acc <__alt_data_end+0xf8004acc>
10004de0:	ad3ed336 	bltu	r21,r20,10004930 <__alt_data_end+0xf8004930>
10004de4:	a804d07a 	srli	r2,r21,1
10004de8:	802e97fa 	slli	r23,r16,31
10004dec:	a82a97fa 	slli	r21,r21,31
10004df0:	8020d07a 	srli	r16,r16,1
10004df4:	b8aeb03a 	or	r23,r23,r2
10004df8:	003ed006 	br	1000493c <__alt_data_end+0xf800493c>
10004dfc:	b23ff51e 	bne	r22,r8,10004dd4 <__alt_data_end+0xf8004dd4>
10004e00:	d9800017 	ldw	r6,0(sp)
10004e04:	a9bff12e 	bgeu	r21,r6,10004dcc <__alt_data_end+0xf8004dcc>
10004e08:	b109c83a 	sub	r4,r22,r4
10004e0c:	2823883a 	mov	r17,r5
10004e10:	003f2e06 	br	10004acc <__alt_data_end+0xf8004acc>
10004e14:	2021883a 	mov	r16,r4
10004e18:	003eff06 	br	10004a18 <__alt_data_end+0xf8004a18>
10004e1c:	2023883a 	mov	r17,r4
10004e20:	003ee406 	br	100049b4 <__alt_data_end+0xf80049b4>
10004e24:	a8bfe236 	bltu	r21,r2,10004db0 <__alt_data_end+0xf8004db0>
10004e28:	0009883a 	mov	r4,zero
10004e2c:	003f2706 	br	10004acc <__alt_data_end+0xf8004acc>
10004e30:	81002d36 	bltu	r16,r4,10004ee8 <__divdf3+0x8f4>
10004e34:	24005626 	beq	r4,r16,10004f90 <__divdf3+0x99c>
10004e38:	2829883a 	mov	r20,r5
10004e3c:	003f8006 	br	10004c40 <__alt_data_end+0xf8004c40>
10004e40:	053fffc4 	movi	r20,-1
10004e44:	003f7f06 	br	10004c44 <__alt_data_end+0xf8004c44>
10004e48:	200f883a 	mov	r7,r4
10004e4c:	003f3c06 	br	10004b40 <__alt_data_end+0xf8004b40>
10004e50:	1011883a 	mov	r8,r2
10004e54:	003f5506 	br	10004bac <__alt_data_end+0xf8004bac>
10004e58:	e027883a 	mov	r19,fp
10004e5c:	003f7906 	br	10004c44 <__alt_data_end+0xf8004c44>
10004e60:	010007c4 	movi	r4,31
10004e64:	20c02816 	blt	r4,r3,10004f08 <__divdf3+0x914>
10004e68:	00800804 	movi	r2,32
10004e6c:	10c5c83a 	sub	r2,r2,r3
10004e70:	888a983a 	sll	r5,r17,r2
10004e74:	a0c8d83a 	srl	r4,r20,r3
10004e78:	a084983a 	sll	r2,r20,r2
10004e7c:	88e2d83a 	srl	r17,r17,r3
10004e80:	2906b03a 	or	r3,r5,r4
10004e84:	1004c03a 	cmpne	r2,r2,zero
10004e88:	1886b03a 	or	r3,r3,r2
10004e8c:	188001cc 	andi	r2,r3,7
10004e90:	10000726 	beq	r2,zero,10004eb0 <__divdf3+0x8bc>
10004e94:	188003cc 	andi	r2,r3,15
10004e98:	01000104 	movi	r4,4
10004e9c:	11000426 	beq	r2,r4,10004eb0 <__divdf3+0x8bc>
10004ea0:	1805883a 	mov	r2,r3
10004ea4:	10c00104 	addi	r3,r2,4
10004ea8:	1885803a 	cmpltu	r2,r3,r2
10004eac:	88a3883a 	add	r17,r17,r2
10004eb0:	8880202c 	andhi	r2,r17,128
10004eb4:	10002926 	beq	r2,zero,10004f5c <__divdf3+0x968>
10004eb8:	9900004c 	andi	r4,r19,1
10004ebc:	00800044 	movi	r2,1
10004ec0:	0021883a 	mov	r16,zero
10004ec4:	002b883a 	mov	r21,zero
10004ec8:	003e2906 	br	10004770 <__alt_data_end+0xf8004770>
10004ecc:	d9800017 	ldw	r6,0(sp)
10004ed0:	8c7fff84 	addi	r17,r17,-2
10004ed4:	a9ab883a 	add	r21,r21,r6
10004ed8:	a98b803a 	cmpltu	r5,r21,r6
10004edc:	2d8b883a 	add	r5,r5,r22
10004ee0:	2a11883a 	add	r8,r5,r8
10004ee4:	003ef806 	br	10004ac8 <__alt_data_end+0xf8004ac8>
10004ee8:	d9800017 	ldw	r6,0(sp)
10004eec:	318f883a 	add	r7,r6,r6
10004ef0:	398b803a 	cmpltu	r5,r7,r6
10004ef4:	2d8d883a 	add	r6,r5,r22
10004ef8:	81a1883a 	add	r16,r16,r6
10004efc:	a17fff84 	addi	r5,r20,-2
10004f00:	d9c00015 	stw	r7,0(sp)
10004f04:	003f8806 	br	10004d28 <__alt_data_end+0xf8004d28>
10004f08:	013ff844 	movi	r4,-31
10004f0c:	2085c83a 	sub	r2,r4,r2
10004f10:	8888d83a 	srl	r4,r17,r2
10004f14:	00800804 	movi	r2,32
10004f18:	18802126 	beq	r3,r2,10004fa0 <__divdf3+0x9ac>
10004f1c:	04001004 	movi	r16,64
10004f20:	80c7c83a 	sub	r3,r16,r3
10004f24:	88e0983a 	sll	r16,r17,r3
10004f28:	8504b03a 	or	r2,r16,r20
10004f2c:	1004c03a 	cmpne	r2,r2,zero
10004f30:	2084b03a 	or	r2,r4,r2
10004f34:	144001cc 	andi	r17,r2,7
10004f38:	88000d1e 	bne	r17,zero,10004f70 <__divdf3+0x97c>
10004f3c:	0021883a 	mov	r16,zero
10004f40:	102ad0fa 	srli	r21,r2,3
10004f44:	9900004c 	andi	r4,r19,1
10004f48:	0005883a 	mov	r2,zero
10004f4c:	ac6ab03a 	or	r21,r21,r17
10004f50:	003e0706 	br	10004770 <__alt_data_end+0xf8004770>
10004f54:	1007883a 	mov	r3,r2
10004f58:	0023883a 	mov	r17,zero
10004f5c:	8820927a 	slli	r16,r17,9
10004f60:	1805883a 	mov	r2,r3
10004f64:	8822977a 	slli	r17,r17,29
10004f68:	8020d33a 	srli	r16,r16,12
10004f6c:	003ff406 	br	10004f40 <__alt_data_end+0xf8004f40>
10004f70:	10c003cc 	andi	r3,r2,15
10004f74:	01000104 	movi	r4,4
10004f78:	193ff626 	beq	r3,r4,10004f54 <__alt_data_end+0xf8004f54>
10004f7c:	0023883a 	mov	r17,zero
10004f80:	003fc806 	br	10004ea4 <__alt_data_end+0xf8004ea4>
10004f84:	a8bfd136 	bltu	r21,r2,10004ecc <__alt_data_end+0xf8004ecc>
10004f88:	2823883a 	mov	r17,r5
10004f8c:	003fa606 	br	10004e28 <__alt_data_end+0xf8004e28>
10004f90:	d9800017 	ldw	r6,0(sp)
10004f94:	30bfd436 	bltu	r6,r2,10004ee8 <__alt_data_end+0xf8004ee8>
10004f98:	2829883a 	mov	r20,r5
10004f9c:	003f6406 	br	10004d30 <__alt_data_end+0xf8004d30>
10004fa0:	0021883a 	mov	r16,zero
10004fa4:	003fe006 	br	10004f28 <__alt_data_end+0xf8004f28>
10004fa8:	00800434 	movhi	r2,16
10004fac:	8c000234 	orhi	r16,r17,8
10004fb0:	10bfffc4 	addi	r2,r2,-1
10004fb4:	e009883a 	mov	r4,fp
10004fb8:	80a0703a 	and	r16,r16,r2
10004fbc:	a02b883a 	mov	r21,r20
10004fc0:	003e4e06 	br	100048fc <__alt_data_end+0xf80048fc>

10004fc4 <__ledf2>:
10004fc4:	2804d53a 	srli	r2,r5,20
10004fc8:	3810d53a 	srli	r8,r7,20
10004fcc:	00c00434 	movhi	r3,16
10004fd0:	18ffffc4 	addi	r3,r3,-1
10004fd4:	1081ffcc 	andi	r2,r2,2047
10004fd8:	0241ffc4 	movi	r9,2047
10004fdc:	28d4703a 	and	r10,r5,r3
10004fe0:	4201ffcc 	andi	r8,r8,2047
10004fe4:	38c6703a 	and	r3,r7,r3
10004fe8:	280ad7fa 	srli	r5,r5,31
10004fec:	380ed7fa 	srli	r7,r7,31
10004ff0:	12401f26 	beq	r2,r9,10005070 <__ledf2+0xac>
10004ff4:	0241ffc4 	movi	r9,2047
10004ff8:	42401426 	beq	r8,r9,1000504c <__ledf2+0x88>
10004ffc:	1000091e 	bne	r2,zero,10005024 <__ledf2+0x60>
10005000:	2296b03a 	or	r11,r4,r10
10005004:	5813003a 	cmpeq	r9,r11,zero
10005008:	29403fcc 	andi	r5,r5,255
1000500c:	40000a1e 	bne	r8,zero,10005038 <__ledf2+0x74>
10005010:	30d8b03a 	or	r12,r6,r3
10005014:	6000081e 	bne	r12,zero,10005038 <__ledf2+0x74>
10005018:	0005883a 	mov	r2,zero
1000501c:	5800111e 	bne	r11,zero,10005064 <__ledf2+0xa0>
10005020:	f800283a 	ret
10005024:	29403fcc 	andi	r5,r5,255
10005028:	40000c1e 	bne	r8,zero,1000505c <__ledf2+0x98>
1000502c:	30d2b03a 	or	r9,r6,r3
10005030:	48000c26 	beq	r9,zero,10005064 <__ledf2+0xa0>
10005034:	0013883a 	mov	r9,zero
10005038:	39c03fcc 	andi	r7,r7,255
1000503c:	48000826 	beq	r9,zero,10005060 <__ledf2+0x9c>
10005040:	38001126 	beq	r7,zero,10005088 <__ledf2+0xc4>
10005044:	00800044 	movi	r2,1
10005048:	f800283a 	ret
1000504c:	30d2b03a 	or	r9,r6,r3
10005050:	483fea26 	beq	r9,zero,10004ffc <__alt_data_end+0xf8004ffc>
10005054:	00800084 	movi	r2,2
10005058:	f800283a 	ret
1000505c:	39c03fcc 	andi	r7,r7,255
10005060:	39400726 	beq	r7,r5,10005080 <__ledf2+0xbc>
10005064:	2800081e 	bne	r5,zero,10005088 <__ledf2+0xc4>
10005068:	00800044 	movi	r2,1
1000506c:	f800283a 	ret
10005070:	2292b03a 	or	r9,r4,r10
10005074:	483fdf26 	beq	r9,zero,10004ff4 <__alt_data_end+0xf8004ff4>
10005078:	00800084 	movi	r2,2
1000507c:	f800283a 	ret
10005080:	4080030e 	bge	r8,r2,10005090 <__ledf2+0xcc>
10005084:	383fef26 	beq	r7,zero,10005044 <__alt_data_end+0xf8005044>
10005088:	00bfffc4 	movi	r2,-1
1000508c:	f800283a 	ret
10005090:	123feb16 	blt	r2,r8,10005040 <__alt_data_end+0xf8005040>
10005094:	1abff336 	bltu	r3,r10,10005064 <__alt_data_end+0xf8005064>
10005098:	50c00326 	beq	r10,r3,100050a8 <__ledf2+0xe4>
1000509c:	50c0042e 	bgeu	r10,r3,100050b0 <__ledf2+0xec>
100050a0:	283fe81e 	bne	r5,zero,10005044 <__alt_data_end+0xf8005044>
100050a4:	003ff806 	br	10005088 <__alt_data_end+0xf8005088>
100050a8:	313fee36 	bltu	r6,r4,10005064 <__alt_data_end+0xf8005064>
100050ac:	21bffc36 	bltu	r4,r6,100050a0 <__alt_data_end+0xf80050a0>
100050b0:	0005883a 	mov	r2,zero
100050b4:	f800283a 	ret

100050b8 <__floatsidf>:
100050b8:	defffd04 	addi	sp,sp,-12
100050bc:	dfc00215 	stw	ra,8(sp)
100050c0:	dc400115 	stw	r17,4(sp)
100050c4:	dc000015 	stw	r16,0(sp)
100050c8:	20002b26 	beq	r4,zero,10005178 <__floatsidf+0xc0>
100050cc:	2023883a 	mov	r17,r4
100050d0:	2020d7fa 	srli	r16,r4,31
100050d4:	20002d16 	blt	r4,zero,1000518c <__floatsidf+0xd4>
100050d8:	8809883a 	mov	r4,r17
100050dc:	000523c0 	call	1000523c <__clzsi2>
100050e0:	01410784 	movi	r5,1054
100050e4:	288bc83a 	sub	r5,r5,r2
100050e8:	01010cc4 	movi	r4,1075
100050ec:	2149c83a 	sub	r4,r4,r5
100050f0:	00c007c4 	movi	r3,31
100050f4:	1900160e 	bge	r3,r4,10005150 <__floatsidf+0x98>
100050f8:	00c104c4 	movi	r3,1043
100050fc:	1947c83a 	sub	r3,r3,r5
10005100:	88c6983a 	sll	r3,r17,r3
10005104:	00800434 	movhi	r2,16
10005108:	10bfffc4 	addi	r2,r2,-1
1000510c:	1886703a 	and	r3,r3,r2
10005110:	2941ffcc 	andi	r5,r5,2047
10005114:	800d883a 	mov	r6,r16
10005118:	0005883a 	mov	r2,zero
1000511c:	280a953a 	slli	r5,r5,20
10005120:	31803fcc 	andi	r6,r6,255
10005124:	01000434 	movhi	r4,16
10005128:	300c97fa 	slli	r6,r6,31
1000512c:	213fffc4 	addi	r4,r4,-1
10005130:	1906703a 	and	r3,r3,r4
10005134:	1946b03a 	or	r3,r3,r5
10005138:	1986b03a 	or	r3,r3,r6
1000513c:	dfc00217 	ldw	ra,8(sp)
10005140:	dc400117 	ldw	r17,4(sp)
10005144:	dc000017 	ldw	r16,0(sp)
10005148:	dec00304 	addi	sp,sp,12
1000514c:	f800283a 	ret
10005150:	00c002c4 	movi	r3,11
10005154:	1887c83a 	sub	r3,r3,r2
10005158:	88c6d83a 	srl	r3,r17,r3
1000515c:	8904983a 	sll	r2,r17,r4
10005160:	01000434 	movhi	r4,16
10005164:	213fffc4 	addi	r4,r4,-1
10005168:	2941ffcc 	andi	r5,r5,2047
1000516c:	1906703a 	and	r3,r3,r4
10005170:	800d883a 	mov	r6,r16
10005174:	003fe906 	br	1000511c <__alt_data_end+0xf800511c>
10005178:	000d883a 	mov	r6,zero
1000517c:	000b883a 	mov	r5,zero
10005180:	0007883a 	mov	r3,zero
10005184:	0005883a 	mov	r2,zero
10005188:	003fe406 	br	1000511c <__alt_data_end+0xf800511c>
1000518c:	0123c83a 	sub	r17,zero,r4
10005190:	003fd106 	br	100050d8 <__alt_data_end+0xf80050d8>

10005194 <__floatunsidf>:
10005194:	defffe04 	addi	sp,sp,-8
10005198:	dc000015 	stw	r16,0(sp)
1000519c:	dfc00115 	stw	ra,4(sp)
100051a0:	2021883a 	mov	r16,r4
100051a4:	20002226 	beq	r4,zero,10005230 <__floatunsidf+0x9c>
100051a8:	000523c0 	call	1000523c <__clzsi2>
100051ac:	01010784 	movi	r4,1054
100051b0:	2089c83a 	sub	r4,r4,r2
100051b4:	01810cc4 	movi	r6,1075
100051b8:	310dc83a 	sub	r6,r6,r4
100051bc:	00c007c4 	movi	r3,31
100051c0:	1980120e 	bge	r3,r6,1000520c <__floatunsidf+0x78>
100051c4:	00c104c4 	movi	r3,1043
100051c8:	1907c83a 	sub	r3,r3,r4
100051cc:	80ca983a 	sll	r5,r16,r3
100051d0:	00800434 	movhi	r2,16
100051d4:	10bfffc4 	addi	r2,r2,-1
100051d8:	2101ffcc 	andi	r4,r4,2047
100051dc:	0021883a 	mov	r16,zero
100051e0:	288a703a 	and	r5,r5,r2
100051e4:	2008953a 	slli	r4,r4,20
100051e8:	00c00434 	movhi	r3,16
100051ec:	18ffffc4 	addi	r3,r3,-1
100051f0:	28c6703a 	and	r3,r5,r3
100051f4:	8005883a 	mov	r2,r16
100051f8:	1906b03a 	or	r3,r3,r4
100051fc:	dfc00117 	ldw	ra,4(sp)
10005200:	dc000017 	ldw	r16,0(sp)
10005204:	dec00204 	addi	sp,sp,8
10005208:	f800283a 	ret
1000520c:	00c002c4 	movi	r3,11
10005210:	188bc83a 	sub	r5,r3,r2
10005214:	814ad83a 	srl	r5,r16,r5
10005218:	00c00434 	movhi	r3,16
1000521c:	18ffffc4 	addi	r3,r3,-1
10005220:	81a0983a 	sll	r16,r16,r6
10005224:	2101ffcc 	andi	r4,r4,2047
10005228:	28ca703a 	and	r5,r5,r3
1000522c:	003fed06 	br	100051e4 <__alt_data_end+0xf80051e4>
10005230:	0009883a 	mov	r4,zero
10005234:	000b883a 	mov	r5,zero
10005238:	003fea06 	br	100051e4 <__alt_data_end+0xf80051e4>

1000523c <__clzsi2>:
1000523c:	00bfffd4 	movui	r2,65535
10005240:	11000536 	bltu	r2,r4,10005258 <__clzsi2+0x1c>
10005244:	00803fc4 	movi	r2,255
10005248:	11000f36 	bltu	r2,r4,10005288 <__clzsi2+0x4c>
1000524c:	00800804 	movi	r2,32
10005250:	0007883a 	mov	r3,zero
10005254:	00000506 	br	1000526c <__clzsi2+0x30>
10005258:	00804034 	movhi	r2,256
1000525c:	10bfffc4 	addi	r2,r2,-1
10005260:	11000c2e 	bgeu	r2,r4,10005294 <__clzsi2+0x58>
10005264:	00800204 	movi	r2,8
10005268:	00c00604 	movi	r3,24
1000526c:	20c8d83a 	srl	r4,r4,r3
10005270:	00c40074 	movhi	r3,4097
10005274:	18d16404 	addi	r3,r3,17808
10005278:	1909883a 	add	r4,r3,r4
1000527c:	20c00003 	ldbu	r3,0(r4)
10005280:	10c5c83a 	sub	r2,r2,r3
10005284:	f800283a 	ret
10005288:	00800604 	movi	r2,24
1000528c:	00c00204 	movi	r3,8
10005290:	003ff606 	br	1000526c <__alt_data_end+0xf800526c>
10005294:	00800404 	movi	r2,16
10005298:	1007883a 	mov	r3,r2
1000529c:	003ff306 	br	1000526c <__alt_data_end+0xf800526c>

100052a0 <__mulsi3>:
100052a0:	0005883a 	mov	r2,zero
100052a4:	20000726 	beq	r4,zero,100052c4 <__mulsi3+0x24>
100052a8:	20c0004c 	andi	r3,r4,1
100052ac:	2008d07a 	srli	r4,r4,1
100052b0:	18000126 	beq	r3,zero,100052b8 <__mulsi3+0x18>
100052b4:	1145883a 	add	r2,r2,r5
100052b8:	294b883a 	add	r5,r5,r5
100052bc:	203ffa1e 	bne	r4,zero,100052a8 <__alt_data_end+0xf80052a8>
100052c0:	f800283a 	ret
100052c4:	f800283a 	ret

100052c8 <clock>:
100052c8:	00840074 	movhi	r2,4097
100052cc:	1098d104 	addi	r2,r2,25412
100052d0:	11000017 	ldw	r4,0(r2)
100052d4:	defffb04 	addi	sp,sp,-20
100052d8:	d80b883a 	mov	r5,sp
100052dc:	dfc00415 	stw	ra,16(sp)
100052e0:	00055680 	call	10005568 <_times_r>
100052e4:	00ffffc4 	movi	r3,-1
100052e8:	10c00726 	beq	r2,r3,10005308 <clock+0x40>
100052ec:	d8c00017 	ldw	r3,0(sp)
100052f0:	d8800117 	ldw	r2,4(sp)
100052f4:	1885883a 	add	r2,r3,r2
100052f8:	d8c00217 	ldw	r3,8(sp)
100052fc:	10c7883a 	add	r3,r2,r3
10005300:	d8800317 	ldw	r2,12(sp)
10005304:	1885883a 	add	r2,r3,r2
10005308:	dfc00417 	ldw	ra,16(sp)
1000530c:	dec00504 	addi	sp,sp,20
10005310:	f800283a 	ret

10005314 <_printf_r>:
10005314:	defffd04 	addi	sp,sp,-12
10005318:	2805883a 	mov	r2,r5
1000531c:	dfc00015 	stw	ra,0(sp)
10005320:	d9800115 	stw	r6,4(sp)
10005324:	d9c00215 	stw	r7,8(sp)
10005328:	21400217 	ldw	r5,8(r4)
1000532c:	d9c00104 	addi	r7,sp,4
10005330:	100d883a 	mov	r6,r2
10005334:	00055700 	call	10005570 <___vfprintf_internal_r>
10005338:	dfc00017 	ldw	ra,0(sp)
1000533c:	dec00304 	addi	sp,sp,12
10005340:	f800283a 	ret

10005344 <printf>:
10005344:	defffc04 	addi	sp,sp,-16
10005348:	dfc00015 	stw	ra,0(sp)
1000534c:	d9400115 	stw	r5,4(sp)
10005350:	d9800215 	stw	r6,8(sp)
10005354:	d9c00315 	stw	r7,12(sp)
10005358:	00840074 	movhi	r2,4097
1000535c:	1098d104 	addi	r2,r2,25412
10005360:	10800017 	ldw	r2,0(r2)
10005364:	200b883a 	mov	r5,r4
10005368:	d9800104 	addi	r6,sp,4
1000536c:	11000217 	ldw	r4,8(r2)
10005370:	000784c0 	call	1000784c <__vfprintf_internal>
10005374:	dfc00017 	ldw	ra,0(sp)
10005378:	dec00404 	addi	sp,sp,16
1000537c:	f800283a 	ret

10005380 <_puts_r>:
10005380:	defff604 	addi	sp,sp,-40
10005384:	dc000715 	stw	r16,28(sp)
10005388:	2021883a 	mov	r16,r4
1000538c:	2809883a 	mov	r4,r5
10005390:	dc400815 	stw	r17,32(sp)
10005394:	dfc00915 	stw	ra,36(sp)
10005398:	2823883a 	mov	r17,r5
1000539c:	00054d00 	call	100054d0 <strlen>
100053a0:	10c00044 	addi	r3,r2,1
100053a4:	d8800115 	stw	r2,4(sp)
100053a8:	00840074 	movhi	r2,4097
100053ac:	1091a504 	addi	r2,r2,18068
100053b0:	d8800215 	stw	r2,8(sp)
100053b4:	00800044 	movi	r2,1
100053b8:	d8800315 	stw	r2,12(sp)
100053bc:	00800084 	movi	r2,2
100053c0:	dc400015 	stw	r17,0(sp)
100053c4:	d8c00615 	stw	r3,24(sp)
100053c8:	dec00415 	stw	sp,16(sp)
100053cc:	d8800515 	stw	r2,20(sp)
100053d0:	80000226 	beq	r16,zero,100053dc <_puts_r+0x5c>
100053d4:	80800e17 	ldw	r2,56(r16)
100053d8:	10001426 	beq	r2,zero,1000542c <_puts_r+0xac>
100053dc:	81400217 	ldw	r5,8(r16)
100053e0:	2880030b 	ldhu	r2,12(r5)
100053e4:	10c8000c 	andi	r3,r2,8192
100053e8:	1800061e 	bne	r3,zero,10005404 <_puts_r+0x84>
100053ec:	29001917 	ldw	r4,100(r5)
100053f0:	00f7ffc4 	movi	r3,-8193
100053f4:	10880014 	ori	r2,r2,8192
100053f8:	20c6703a 	and	r3,r4,r3
100053fc:	2880030d 	sth	r2,12(r5)
10005400:	28c01915 	stw	r3,100(r5)
10005404:	d9800404 	addi	r6,sp,16
10005408:	8009883a 	mov	r4,r16
1000540c:	0009db40 	call	10009db4 <__sfvwrite_r>
10005410:	1000091e 	bne	r2,zero,10005438 <_puts_r+0xb8>
10005414:	00800284 	movi	r2,10
10005418:	dfc00917 	ldw	ra,36(sp)
1000541c:	dc400817 	ldw	r17,32(sp)
10005420:	dc000717 	ldw	r16,28(sp)
10005424:	dec00a04 	addi	sp,sp,40
10005428:	f800283a 	ret
1000542c:	8009883a 	mov	r4,r16
10005430:	00099300 	call	10009930 <__sinit>
10005434:	003fe906 	br	100053dc <__alt_data_end+0xf80053dc>
10005438:	00bfffc4 	movi	r2,-1
1000543c:	003ff606 	br	10005418 <__alt_data_end+0xf8005418>

10005440 <puts>:
10005440:	00840074 	movhi	r2,4097
10005444:	1098d104 	addi	r2,r2,25412
10005448:	200b883a 	mov	r5,r4
1000544c:	11000017 	ldw	r4,0(r2)
10005450:	00053801 	jmpi	10005380 <_puts_r>

10005454 <srand>:
10005454:	00840074 	movhi	r2,4097
10005458:	1098d104 	addi	r2,r2,25412
1000545c:	10800017 	ldw	r2,0(r2)
10005460:	11002915 	stw	r4,164(r2)
10005464:	10002a15 	stw	zero,168(r2)
10005468:	f800283a 	ret

1000546c <rand>:
1000546c:	00840074 	movhi	r2,4097
10005470:	defffe04 	addi	sp,sp,-8
10005474:	1098d104 	addi	r2,r2,25412
10005478:	dc000015 	stw	r16,0(sp)
1000547c:	14000017 	ldw	r16,0(r2)
10005480:	dfc00115 	stw	ra,4(sp)
10005484:	01932574 	movhi	r6,19605
10005488:	81002917 	ldw	r4,164(r16)
1000548c:	81402a17 	ldw	r5,168(r16)
10005490:	01d614b4 	movhi	r7,22610
10005494:	319fcb44 	addi	r6,r6,32557
10005498:	39fd0b44 	addi	r7,r7,-3027
1000549c:	000ec980 	call	1000ec98 <__muldi3>
100054a0:	11000044 	addi	r4,r2,1
100054a4:	2085803a 	cmpltu	r2,r4,r2
100054a8:	10c7883a 	add	r3,r2,r3
100054ac:	00a00034 	movhi	r2,32768
100054b0:	10bfffc4 	addi	r2,r2,-1
100054b4:	1884703a 	and	r2,r3,r2
100054b8:	81002915 	stw	r4,164(r16)
100054bc:	80c02a15 	stw	r3,168(r16)
100054c0:	dfc00117 	ldw	ra,4(sp)
100054c4:	dc000017 	ldw	r16,0(sp)
100054c8:	dec00204 	addi	sp,sp,8
100054cc:	f800283a 	ret

100054d0 <strlen>:
100054d0:	208000cc 	andi	r2,r4,3
100054d4:	10002026 	beq	r2,zero,10005558 <strlen+0x88>
100054d8:	20800007 	ldb	r2,0(r4)
100054dc:	10002026 	beq	r2,zero,10005560 <strlen+0x90>
100054e0:	2005883a 	mov	r2,r4
100054e4:	00000206 	br	100054f0 <strlen+0x20>
100054e8:	10c00007 	ldb	r3,0(r2)
100054ec:	18001826 	beq	r3,zero,10005550 <strlen+0x80>
100054f0:	10800044 	addi	r2,r2,1
100054f4:	10c000cc 	andi	r3,r2,3
100054f8:	183ffb1e 	bne	r3,zero,100054e8 <__alt_data_end+0xf80054e8>
100054fc:	10c00017 	ldw	r3,0(r2)
10005500:	01ffbff4 	movhi	r7,65279
10005504:	39ffbfc4 	addi	r7,r7,-257
10005508:	00ca303a 	nor	r5,zero,r3
1000550c:	01a02074 	movhi	r6,32897
10005510:	19c7883a 	add	r3,r3,r7
10005514:	31a02004 	addi	r6,r6,-32640
10005518:	1946703a 	and	r3,r3,r5
1000551c:	1986703a 	and	r3,r3,r6
10005520:	1800091e 	bne	r3,zero,10005548 <strlen+0x78>
10005524:	10800104 	addi	r2,r2,4
10005528:	10c00017 	ldw	r3,0(r2)
1000552c:	19cb883a 	add	r5,r3,r7
10005530:	00c6303a 	nor	r3,zero,r3
10005534:	28c6703a 	and	r3,r5,r3
10005538:	1986703a 	and	r3,r3,r6
1000553c:	183ff926 	beq	r3,zero,10005524 <__alt_data_end+0xf8005524>
10005540:	00000106 	br	10005548 <strlen+0x78>
10005544:	10800044 	addi	r2,r2,1
10005548:	10c00007 	ldb	r3,0(r2)
1000554c:	183ffd1e 	bne	r3,zero,10005544 <__alt_data_end+0xf8005544>
10005550:	1105c83a 	sub	r2,r2,r4
10005554:	f800283a 	ret
10005558:	2005883a 	mov	r2,r4
1000555c:	003fe706 	br	100054fc <__alt_data_end+0xf80054fc>
10005560:	0005883a 	mov	r2,zero
10005564:	f800283a 	ret

10005568 <_times_r>:
10005568:	2809883a 	mov	r4,r5
1000556c:	0011df01 	jmpi	10011df0 <times>

10005570 <___vfprintf_internal_r>:
10005570:	deffb804 	addi	sp,sp,-288
10005574:	dfc04715 	stw	ra,284(sp)
10005578:	ddc04515 	stw	r23,276(sp)
1000557c:	dd404315 	stw	r21,268(sp)
10005580:	d9002d15 	stw	r4,180(sp)
10005584:	282f883a 	mov	r23,r5
10005588:	302b883a 	mov	r21,r6
1000558c:	d9c02e15 	stw	r7,184(sp)
10005590:	df004615 	stw	fp,280(sp)
10005594:	dd804415 	stw	r22,272(sp)
10005598:	dd004215 	stw	r20,264(sp)
1000559c:	dcc04115 	stw	r19,260(sp)
100055a0:	dc804015 	stw	r18,256(sp)
100055a4:	dc403f15 	stw	r17,252(sp)
100055a8:	dc003e15 	stw	r16,248(sp)
100055ac:	000a4b00 	call	1000a4b0 <_localeconv_r>
100055b0:	10800017 	ldw	r2,0(r2)
100055b4:	1009883a 	mov	r4,r2
100055b8:	d8803415 	stw	r2,208(sp)
100055bc:	00054d00 	call	100054d0 <strlen>
100055c0:	d8803715 	stw	r2,220(sp)
100055c4:	d8802d17 	ldw	r2,180(sp)
100055c8:	10000226 	beq	r2,zero,100055d4 <___vfprintf_internal_r+0x64>
100055cc:	10800e17 	ldw	r2,56(r2)
100055d0:	1000fb26 	beq	r2,zero,100059c0 <___vfprintf_internal_r+0x450>
100055d4:	b880030b 	ldhu	r2,12(r23)
100055d8:	10c8000c 	andi	r3,r2,8192
100055dc:	1800061e 	bne	r3,zero,100055f8 <___vfprintf_internal_r+0x88>
100055e0:	b9001917 	ldw	r4,100(r23)
100055e4:	00f7ffc4 	movi	r3,-8193
100055e8:	10880014 	ori	r2,r2,8192
100055ec:	20c6703a 	and	r3,r4,r3
100055f0:	b880030d 	sth	r2,12(r23)
100055f4:	b8c01915 	stw	r3,100(r23)
100055f8:	10c0020c 	andi	r3,r2,8
100055fc:	1800c326 	beq	r3,zero,1000590c <___vfprintf_internal_r+0x39c>
10005600:	b8c00417 	ldw	r3,16(r23)
10005604:	1800c126 	beq	r3,zero,1000590c <___vfprintf_internal_r+0x39c>
10005608:	1080068c 	andi	r2,r2,26
1000560c:	00c00284 	movi	r3,10
10005610:	10c0c626 	beq	r2,r3,1000592c <___vfprintf_internal_r+0x3bc>
10005614:	d8c00404 	addi	r3,sp,16
10005618:	05040074 	movhi	r20,4097
1000561c:	d9001e04 	addi	r4,sp,120
10005620:	a511b684 	addi	r20,r20,18138
10005624:	d8c01e15 	stw	r3,120(sp)
10005628:	d8002015 	stw	zero,128(sp)
1000562c:	d8001f15 	stw	zero,124(sp)
10005630:	d8003315 	stw	zero,204(sp)
10005634:	d8003615 	stw	zero,216(sp)
10005638:	d8003815 	stw	zero,224(sp)
1000563c:	1811883a 	mov	r8,r3
10005640:	d8003915 	stw	zero,228(sp)
10005644:	d8003a15 	stw	zero,232(sp)
10005648:	d8002f15 	stw	zero,188(sp)
1000564c:	d9002815 	stw	r4,160(sp)
10005650:	a8800007 	ldb	r2,0(r21)
10005654:	10028b26 	beq	r2,zero,10006084 <___vfprintf_internal_r+0xb14>
10005658:	00c00944 	movi	r3,37
1000565c:	a823883a 	mov	r17,r21
10005660:	10c0021e 	bne	r2,r3,1000566c <___vfprintf_internal_r+0xfc>
10005664:	00001406 	br	100056b8 <___vfprintf_internal_r+0x148>
10005668:	10c00326 	beq	r2,r3,10005678 <___vfprintf_internal_r+0x108>
1000566c:	8c400044 	addi	r17,r17,1
10005670:	88800007 	ldb	r2,0(r17)
10005674:	103ffc1e 	bne	r2,zero,10005668 <__alt_data_end+0xf8005668>
10005678:	8d61c83a 	sub	r16,r17,r21
1000567c:	80000e26 	beq	r16,zero,100056b8 <___vfprintf_internal_r+0x148>
10005680:	d8c02017 	ldw	r3,128(sp)
10005684:	d8801f17 	ldw	r2,124(sp)
10005688:	45400015 	stw	r21,0(r8)
1000568c:	1c07883a 	add	r3,r3,r16
10005690:	10800044 	addi	r2,r2,1
10005694:	d8c02015 	stw	r3,128(sp)
10005698:	44000115 	stw	r16,4(r8)
1000569c:	d8801f15 	stw	r2,124(sp)
100056a0:	00c001c4 	movi	r3,7
100056a4:	1880a916 	blt	r3,r2,1000594c <___vfprintf_internal_r+0x3dc>
100056a8:	42000204 	addi	r8,r8,8
100056ac:	d9402f17 	ldw	r5,188(sp)
100056b0:	2c0b883a 	add	r5,r5,r16
100056b4:	d9402f15 	stw	r5,188(sp)
100056b8:	88800007 	ldb	r2,0(r17)
100056bc:	1000aa26 	beq	r2,zero,10005968 <___vfprintf_internal_r+0x3f8>
100056c0:	8d400044 	addi	r21,r17,1
100056c4:	8c400047 	ldb	r17,1(r17)
100056c8:	0021883a 	mov	r16,zero
100056cc:	00bfffc4 	movi	r2,-1
100056d0:	0025883a 	mov	r18,zero
100056d4:	dc002905 	stb	r16,164(sp)
100056d8:	d8002785 	stb	zero,158(sp)
100056dc:	d8002b05 	stb	zero,172(sp)
100056e0:	d8802a15 	stw	r2,168(sp)
100056e4:	d8003115 	stw	zero,196(sp)
100056e8:	04c01604 	movi	r19,88
100056ec:	05800244 	movi	r22,9
100056f0:	9021883a 	mov	r16,r18
100056f4:	4039883a 	mov	fp,r8
100056f8:	ad400044 	addi	r21,r21,1
100056fc:	88bff804 	addi	r2,r17,-32
10005700:	98833236 	bltu	r19,r2,100063cc <___vfprintf_internal_r+0xe5c>
10005704:	100490ba 	slli	r2,r2,2
10005708:	00c40034 	movhi	r3,4096
1000570c:	18d5c704 	addi	r3,r3,22300
10005710:	10c5883a 	add	r2,r2,r3
10005714:	10800017 	ldw	r2,0(r2)
10005718:	1000683a 	jmp	r2
1000571c:	100062c4 	addi	zero,r2,395
10005720:	100063cc 	andi	zero,r2,399
10005724:	100063cc 	andi	zero,r2,399
10005728:	100062e4 	muli	zero,r2,395
1000572c:	100063cc 	andi	zero,r2,399
10005730:	100063cc 	andi	zero,r2,399
10005734:	100063cc 	andi	zero,r2,399
10005738:	100063cc 	andi	zero,r2,399
1000573c:	100063cc 	andi	zero,r2,399
10005740:	100063cc 	andi	zero,r2,399
10005744:	100059cc 	andi	zero,r2,359
10005748:	100061d4 	ori	zero,r2,391
1000574c:	100063cc 	andi	zero,r2,399
10005750:	10005890 	cmplti	zero,r2,354
10005754:	100059f0 	cmpltui	zero,r2,359
10005758:	100063cc 	andi	zero,r2,399
1000575c:	10005a40 	call	110005a4 <_gp+0xfe2268>
10005760:	10005a4c 	andi	zero,r2,361
10005764:	10005a4c 	andi	zero,r2,361
10005768:	10005a4c 	andi	zero,r2,361
1000576c:	10005a4c 	andi	zero,r2,361
10005770:	10005a4c 	andi	zero,r2,361
10005774:	10005a4c 	andi	zero,r2,361
10005778:	10005a4c 	andi	zero,r2,361
1000577c:	10005a4c 	andi	zero,r2,361
10005780:	10005a4c 	andi	zero,r2,361
10005784:	100063cc 	andi	zero,r2,399
10005788:	100063cc 	andi	zero,r2,399
1000578c:	100063cc 	andi	zero,r2,399
10005790:	100063cc 	andi	zero,r2,399
10005794:	100063cc 	andi	zero,r2,399
10005798:	100063cc 	andi	zero,r2,399
1000579c:	100063cc 	andi	zero,r2,399
100057a0:	100063cc 	andi	zero,r2,399
100057a4:	100063cc 	andi	zero,r2,399
100057a8:	100063cc 	andi	zero,r2,399
100057ac:	10005a88 	cmpgei	zero,r2,362
100057b0:	10005b50 	cmplti	zero,r2,365
100057b4:	100063cc 	andi	zero,r2,399
100057b8:	10005b50 	cmplti	zero,r2,365
100057bc:	100063cc 	andi	zero,r2,399
100057c0:	100063cc 	andi	zero,r2,399
100057c4:	100063cc 	andi	zero,r2,399
100057c8:	100063cc 	andi	zero,r2,399
100057cc:	10005bfc 	xorhi	zero,r2,367
100057d0:	100063cc 	andi	zero,r2,399
100057d4:	100063cc 	andi	zero,r2,399
100057d8:	10005c08 	cmpgei	zero,r2,368
100057dc:	100063cc 	andi	zero,r2,399
100057e0:	100063cc 	andi	zero,r2,399
100057e4:	100063cc 	andi	zero,r2,399
100057e8:	100063cc 	andi	zero,r2,399
100057ec:	100063cc 	andi	zero,r2,399
100057f0:	1000608c 	andi	zero,r2,386
100057f4:	100063cc 	andi	zero,r2,399
100057f8:	100063cc 	andi	zero,r2,399
100057fc:	100060f8 	rdprs	zero,r2,387
10005800:	100063cc 	andi	zero,r2,399
10005804:	100063cc 	andi	zero,r2,399
10005808:	100063cc 	andi	zero,r2,399
1000580c:	100063cc 	andi	zero,r2,399
10005810:	100063cc 	andi	zero,r2,399
10005814:	100063cc 	andi	zero,r2,399
10005818:	100063cc 	andi	zero,r2,399
1000581c:	100063cc 	andi	zero,r2,399
10005820:	100063cc 	andi	zero,r2,399
10005824:	100063cc 	andi	zero,r2,399
10005828:	10006370 	cmpltui	zero,r2,397
1000582c:	100062f0 	cmpltui	zero,r2,395
10005830:	10005b50 	cmplti	zero,r2,365
10005834:	10005b50 	cmplti	zero,r2,365
10005838:	10005b50 	cmplti	zero,r2,365
1000583c:	10006310 	cmplti	zero,r2,396
10005840:	100062f0 	cmpltui	zero,r2,395
10005844:	100063cc 	andi	zero,r2,399
10005848:	100063cc 	andi	zero,r2,399
1000584c:	1000631c 	xori	zero,r2,396
10005850:	100063cc 	andi	zero,r2,399
10005854:	10006330 	cmpltui	zero,r2,396
10005858:	100061b4 	orhi	zero,r2,390
1000585c:	1000589c 	xori	zero,r2,354
10005860:	100061ec 	andhi	zero,r2,391
10005864:	100063cc 	andi	zero,r2,399
10005868:	100061f8 	rdprs	zero,r2,391
1000586c:	100063cc 	andi	zero,r2,399
10005870:	1000625c 	xori	zero,r2,393
10005874:	100063cc 	andi	zero,r2,399
10005878:	100063cc 	andi	zero,r2,399
1000587c:	1000627c 	xorhi	zero,r2,393
10005880:	d8c03117 	ldw	r3,196(sp)
10005884:	d8802e15 	stw	r2,184(sp)
10005888:	00c7c83a 	sub	r3,zero,r3
1000588c:	d8c03115 	stw	r3,196(sp)
10005890:	84000114 	ori	r16,r16,4
10005894:	ac400007 	ldb	r17,0(r21)
10005898:	003f9706 	br	100056f8 <__alt_data_end+0xf80056f8>
1000589c:	00800c04 	movi	r2,48
100058a0:	d8802705 	stb	r2,156(sp)
100058a4:	00801e04 	movi	r2,120
100058a8:	d8802745 	stb	r2,157(sp)
100058ac:	d9002a17 	ldw	r4,168(sp)
100058b0:	d8802e17 	ldw	r2,184(sp)
100058b4:	d8002785 	stb	zero,158(sp)
100058b8:	e011883a 	mov	r8,fp
100058bc:	10c00104 	addi	r3,r2,4
100058c0:	14c00017 	ldw	r19,0(r2)
100058c4:	002d883a 	mov	r22,zero
100058c8:	80800094 	ori	r2,r16,2
100058cc:	2002ca16 	blt	r4,zero,100063f8 <___vfprintf_internal_r+0xe88>
100058d0:	00bfdfc4 	movi	r2,-129
100058d4:	80a4703a 	and	r18,r16,r2
100058d8:	d8c02e15 	stw	r3,184(sp)
100058dc:	94800094 	ori	r18,r18,2
100058e0:	9802b41e 	bne	r19,zero,100063b4 <___vfprintf_internal_r+0xe44>
100058e4:	01440074 	movhi	r5,4097
100058e8:	2951af04 	addi	r5,r5,18108
100058ec:	d9403915 	stw	r5,228(sp)
100058f0:	04401e04 	movi	r17,120
100058f4:	d8802a17 	ldw	r2,168(sp)
100058f8:	0039883a 	mov	fp,zero
100058fc:	1001fa26 	beq	r2,zero,100060e8 <___vfprintf_internal_r+0xb78>
10005900:	0027883a 	mov	r19,zero
10005904:	002d883a 	mov	r22,zero
10005908:	00021906 	br	10006170 <___vfprintf_internal_r+0xc00>
1000590c:	d9002d17 	ldw	r4,180(sp)
10005910:	b80b883a 	mov	r5,r23
10005914:	00079240 	call	10007924 <__swsetup_r>
10005918:	1005dc1e 	bne	r2,zero,1000708c <___vfprintf_internal_r+0x1b1c>
1000591c:	b880030b 	ldhu	r2,12(r23)
10005920:	00c00284 	movi	r3,10
10005924:	1080068c 	andi	r2,r2,26
10005928:	10ff3a1e 	bne	r2,r3,10005614 <__alt_data_end+0xf8005614>
1000592c:	b880038f 	ldh	r2,14(r23)
10005930:	103f3816 	blt	r2,zero,10005614 <__alt_data_end+0xf8005614>
10005934:	d9c02e17 	ldw	r7,184(sp)
10005938:	d9002d17 	ldw	r4,180(sp)
1000593c:	a80d883a 	mov	r6,r21
10005940:	b80b883a 	mov	r5,r23
10005944:	00078680 	call	10007868 <__sbprintf>
10005948:	00001106 	br	10005990 <___vfprintf_internal_r+0x420>
1000594c:	d9002d17 	ldw	r4,180(sp)
10005950:	d9801e04 	addi	r6,sp,120
10005954:	b80b883a 	mov	r5,r23
10005958:	000cd500 	call	1000cd50 <__sprint_r>
1000595c:	1000081e 	bne	r2,zero,10005980 <___vfprintf_internal_r+0x410>
10005960:	da000404 	addi	r8,sp,16
10005964:	003f5106 	br	100056ac <__alt_data_end+0xf80056ac>
10005968:	d8802017 	ldw	r2,128(sp)
1000596c:	10000426 	beq	r2,zero,10005980 <___vfprintf_internal_r+0x410>
10005970:	d9002d17 	ldw	r4,180(sp)
10005974:	d9801e04 	addi	r6,sp,120
10005978:	b80b883a 	mov	r5,r23
1000597c:	000cd500 	call	1000cd50 <__sprint_r>
10005980:	b880030b 	ldhu	r2,12(r23)
10005984:	1080100c 	andi	r2,r2,64
10005988:	1005c01e 	bne	r2,zero,1000708c <___vfprintf_internal_r+0x1b1c>
1000598c:	d8802f17 	ldw	r2,188(sp)
10005990:	dfc04717 	ldw	ra,284(sp)
10005994:	df004617 	ldw	fp,280(sp)
10005998:	ddc04517 	ldw	r23,276(sp)
1000599c:	dd804417 	ldw	r22,272(sp)
100059a0:	dd404317 	ldw	r21,268(sp)
100059a4:	dd004217 	ldw	r20,264(sp)
100059a8:	dcc04117 	ldw	r19,260(sp)
100059ac:	dc804017 	ldw	r18,256(sp)
100059b0:	dc403f17 	ldw	r17,252(sp)
100059b4:	dc003e17 	ldw	r16,248(sp)
100059b8:	dec04804 	addi	sp,sp,288
100059bc:	f800283a 	ret
100059c0:	d9002d17 	ldw	r4,180(sp)
100059c4:	00099300 	call	10009930 <__sinit>
100059c8:	003f0206 	br	100055d4 <__alt_data_end+0xf80055d4>
100059cc:	d9002e17 	ldw	r4,184(sp)
100059d0:	d9402e17 	ldw	r5,184(sp)
100059d4:	21000017 	ldw	r4,0(r4)
100059d8:	28800104 	addi	r2,r5,4
100059dc:	d9003115 	stw	r4,196(sp)
100059e0:	203fa716 	blt	r4,zero,10005880 <__alt_data_end+0xf8005880>
100059e4:	d8802e15 	stw	r2,184(sp)
100059e8:	ac400007 	ldb	r17,0(r21)
100059ec:	003f4206 	br	100056f8 <__alt_data_end+0xf80056f8>
100059f0:	ac400007 	ldb	r17,0(r21)
100059f4:	01000a84 	movi	r4,42
100059f8:	a8c00044 	addi	r3,r21,1
100059fc:	89075826 	beq	r17,r4,10007760 <___vfprintf_internal_r+0x21f0>
10005a00:	8cbff404 	addi	r18,r17,-48
10005a04:	b486ae36 	bltu	r22,r18,100074c0 <___vfprintf_internal_r+0x1f50>
10005a08:	0009883a 	mov	r4,zero
10005a0c:	1823883a 	mov	r17,r3
10005a10:	01400284 	movi	r5,10
10005a14:	00052a00 	call	100052a0 <__mulsi3>
10005a18:	88c00007 	ldb	r3,0(r17)
10005a1c:	1489883a 	add	r4,r2,r18
10005a20:	8d400044 	addi	r21,r17,1
10005a24:	1cbff404 	addi	r18,r3,-48
10005a28:	a823883a 	mov	r17,r21
10005a2c:	b4bff82e 	bgeu	r22,r18,10005a10 <__alt_data_end+0xf8005a10>
10005a30:	1823883a 	mov	r17,r3
10005a34:	2005f616 	blt	r4,zero,10007210 <___vfprintf_internal_r+0x1ca0>
10005a38:	d9002a15 	stw	r4,168(sp)
10005a3c:	003f2f06 	br	100056fc <__alt_data_end+0xf80056fc>
10005a40:	84002014 	ori	r16,r16,128
10005a44:	ac400007 	ldb	r17,0(r21)
10005a48:	003f2b06 	br	100056f8 <__alt_data_end+0xf80056f8>
10005a4c:	8cbff404 	addi	r18,r17,-48
10005a50:	d8003115 	stw	zero,196(sp)
10005a54:	0009883a 	mov	r4,zero
10005a58:	a823883a 	mov	r17,r21
10005a5c:	01400284 	movi	r5,10
10005a60:	00052a00 	call	100052a0 <__mulsi3>
10005a64:	88c00007 	ldb	r3,0(r17)
10005a68:	9089883a 	add	r4,r18,r2
10005a6c:	ad400044 	addi	r21,r21,1
10005a70:	1cbff404 	addi	r18,r3,-48
10005a74:	a823883a 	mov	r17,r21
10005a78:	b4bff82e 	bgeu	r22,r18,10005a5c <__alt_data_end+0xf8005a5c>
10005a7c:	1823883a 	mov	r17,r3
10005a80:	d9003115 	stw	r4,196(sp)
10005a84:	003f1d06 	br	100056fc <__alt_data_end+0xf80056fc>
10005a88:	8025883a 	mov	r18,r16
10005a8c:	dc002903 	ldbu	r16,164(sp)
10005a90:	e011883a 	mov	r8,fp
10005a94:	84003fcc 	andi	r16,r16,255
10005a98:	8007531e 	bne	r16,zero,100077e8 <___vfprintf_internal_r+0x2278>
10005a9c:	94800414 	ori	r18,r18,16
10005aa0:	9080080c 	andi	r2,r18,32
10005aa4:	1003a326 	beq	r2,zero,10006934 <___vfprintf_internal_r+0x13c4>
10005aa8:	d9002e17 	ldw	r4,184(sp)
10005aac:	20800117 	ldw	r2,4(r4)
10005ab0:	24c00017 	ldw	r19,0(r4)
10005ab4:	21000204 	addi	r4,r4,8
10005ab8:	d9002e15 	stw	r4,184(sp)
10005abc:	102d883a 	mov	r22,r2
10005ac0:	10047316 	blt	r2,zero,10006c90 <___vfprintf_internal_r+0x1720>
10005ac4:	d9002a17 	ldw	r4,168(sp)
10005ac8:	df002783 	ldbu	fp,158(sp)
10005acc:	2003e416 	blt	r4,zero,10006a60 <___vfprintf_internal_r+0x14f0>
10005ad0:	00ffdfc4 	movi	r3,-129
10005ad4:	9d84b03a 	or	r2,r19,r22
10005ad8:	90e4703a 	and	r18,r18,r3
10005adc:	10018026 	beq	r2,zero,100060e0 <___vfprintf_internal_r+0xb70>
10005ae0:	b003ab26 	beq	r22,zero,10006990 <___vfprintf_internal_r+0x1420>
10005ae4:	dc402915 	stw	r17,164(sp)
10005ae8:	dc001e04 	addi	r16,sp,120
10005aec:	b023883a 	mov	r17,r22
10005af0:	402d883a 	mov	r22,r8
10005af4:	9809883a 	mov	r4,r19
10005af8:	880b883a 	mov	r5,r17
10005afc:	01800284 	movi	r6,10
10005b00:	000f883a 	mov	r7,zero
10005b04:	000f3a00 	call	1000f3a0 <__umoddi3>
10005b08:	10800c04 	addi	r2,r2,48
10005b0c:	843fffc4 	addi	r16,r16,-1
10005b10:	9809883a 	mov	r4,r19
10005b14:	880b883a 	mov	r5,r17
10005b18:	80800005 	stb	r2,0(r16)
10005b1c:	01800284 	movi	r6,10
10005b20:	000f883a 	mov	r7,zero
10005b24:	000eda40 	call	1000eda4 <__udivdi3>
10005b28:	1027883a 	mov	r19,r2
10005b2c:	10c4b03a 	or	r2,r2,r3
10005b30:	1823883a 	mov	r17,r3
10005b34:	103fef1e 	bne	r2,zero,10005af4 <__alt_data_end+0xf8005af4>
10005b38:	d8c02817 	ldw	r3,160(sp)
10005b3c:	dc402917 	ldw	r17,164(sp)
10005b40:	b011883a 	mov	r8,r22
10005b44:	1c07c83a 	sub	r3,r3,r16
10005b48:	d8c02b15 	stw	r3,172(sp)
10005b4c:	00005f06 	br	10005ccc <___vfprintf_internal_r+0x75c>
10005b50:	8025883a 	mov	r18,r16
10005b54:	dc002903 	ldbu	r16,164(sp)
10005b58:	e011883a 	mov	r8,fp
10005b5c:	84003fcc 	andi	r16,r16,255
10005b60:	80071e1e 	bne	r16,zero,100077dc <___vfprintf_internal_r+0x226c>
10005b64:	9080020c 	andi	r2,r18,8
10005b68:	1004af26 	beq	r2,zero,10006e28 <___vfprintf_internal_r+0x18b8>
10005b6c:	d9002e17 	ldw	r4,184(sp)
10005b70:	d9402e17 	ldw	r5,184(sp)
10005b74:	d8802e17 	ldw	r2,184(sp)
10005b78:	21000017 	ldw	r4,0(r4)
10005b7c:	29400117 	ldw	r5,4(r5)
10005b80:	10800204 	addi	r2,r2,8
10005b84:	d9003615 	stw	r4,216(sp)
10005b88:	d9403815 	stw	r5,224(sp)
10005b8c:	d8802e15 	stw	r2,184(sp)
10005b90:	d9003617 	ldw	r4,216(sp)
10005b94:	d9403817 	ldw	r5,224(sp)
10005b98:	da003d15 	stw	r8,244(sp)
10005b9c:	04000044 	movi	r16,1
10005ba0:	000c9740 	call	1000c974 <__fpclassifyd>
10005ba4:	da003d17 	ldw	r8,244(sp)
10005ba8:	1404441e 	bne	r2,r16,10006cbc <___vfprintf_internal_r+0x174c>
10005bac:	d9003617 	ldw	r4,216(sp)
10005bb0:	d9403817 	ldw	r5,224(sp)
10005bb4:	000d883a 	mov	r6,zero
10005bb8:	000f883a 	mov	r7,zero
10005bbc:	0004fc40 	call	10004fc4 <__ledf2>
10005bc0:	da003d17 	ldw	r8,244(sp)
10005bc4:	1005e316 	blt	r2,zero,10007354 <___vfprintf_internal_r+0x1de4>
10005bc8:	df002783 	ldbu	fp,158(sp)
10005bcc:	008011c4 	movi	r2,71
10005bd0:	1445580e 	bge	r2,r17,10007134 <___vfprintf_internal_r+0x1bc4>
10005bd4:	04040074 	movhi	r16,4097
10005bd8:	8411a704 	addi	r16,r16,18076
10005bdc:	00c000c4 	movi	r3,3
10005be0:	00bfdfc4 	movi	r2,-129
10005be4:	d8c02915 	stw	r3,164(sp)
10005be8:	90a4703a 	and	r18,r18,r2
10005bec:	d8c02b15 	stw	r3,172(sp)
10005bf0:	d8002a15 	stw	zero,168(sp)
10005bf4:	d8003215 	stw	zero,200(sp)
10005bf8:	00003a06 	br	10005ce4 <___vfprintf_internal_r+0x774>
10005bfc:	84000214 	ori	r16,r16,8
10005c00:	ac400007 	ldb	r17,0(r21)
10005c04:	003ebc06 	br	100056f8 <__alt_data_end+0xf80056f8>
10005c08:	8025883a 	mov	r18,r16
10005c0c:	dc002903 	ldbu	r16,164(sp)
10005c10:	e011883a 	mov	r8,fp
10005c14:	84003fcc 	andi	r16,r16,255
10005c18:	8007001e 	bne	r16,zero,1000781c <___vfprintf_internal_r+0x22ac>
10005c1c:	94800414 	ori	r18,r18,16
10005c20:	9080080c 	andi	r2,r18,32
10005c24:	1002fa26 	beq	r2,zero,10006810 <___vfprintf_internal_r+0x12a0>
10005c28:	d9002e17 	ldw	r4,184(sp)
10005c2c:	d9402a17 	ldw	r5,168(sp)
10005c30:	d8002785 	stb	zero,158(sp)
10005c34:	20800204 	addi	r2,r4,8
10005c38:	24c00017 	ldw	r19,0(r4)
10005c3c:	25800117 	ldw	r22,4(r4)
10005c40:	2804b116 	blt	r5,zero,10006f08 <___vfprintf_internal_r+0x1998>
10005c44:	013fdfc4 	movi	r4,-129
10005c48:	9d86b03a 	or	r3,r19,r22
10005c4c:	d8802e15 	stw	r2,184(sp)
10005c50:	9124703a 	and	r18,r18,r4
10005c54:	1802fb1e 	bne	r3,zero,10006844 <___vfprintf_internal_r+0x12d4>
10005c58:	d8c02a17 	ldw	r3,168(sp)
10005c5c:	0039883a 	mov	fp,zero
10005c60:	1805e526 	beq	r3,zero,100073f8 <___vfprintf_internal_r+0x1e88>
10005c64:	0027883a 	mov	r19,zero
10005c68:	002d883a 	mov	r22,zero
10005c6c:	dc001e04 	addi	r16,sp,120
10005c70:	9806d0fa 	srli	r3,r19,3
10005c74:	b008977a 	slli	r4,r22,29
10005c78:	b02cd0fa 	srli	r22,r22,3
10005c7c:	9cc001cc 	andi	r19,r19,7
10005c80:	98800c04 	addi	r2,r19,48
10005c84:	843fffc4 	addi	r16,r16,-1
10005c88:	20e6b03a 	or	r19,r4,r3
10005c8c:	80800005 	stb	r2,0(r16)
10005c90:	9d86b03a 	or	r3,r19,r22
10005c94:	183ff61e 	bne	r3,zero,10005c70 <__alt_data_end+0xf8005c70>
10005c98:	90c0004c 	andi	r3,r18,1
10005c9c:	18014126 	beq	r3,zero,100061a4 <___vfprintf_internal_r+0xc34>
10005ca0:	10803fcc 	andi	r2,r2,255
10005ca4:	1080201c 	xori	r2,r2,128
10005ca8:	10bfe004 	addi	r2,r2,-128
10005cac:	00c00c04 	movi	r3,48
10005cb0:	10c13c26 	beq	r2,r3,100061a4 <___vfprintf_internal_r+0xc34>
10005cb4:	80ffffc5 	stb	r3,-1(r16)
10005cb8:	d8c02817 	ldw	r3,160(sp)
10005cbc:	80bfffc4 	addi	r2,r16,-1
10005cc0:	1021883a 	mov	r16,r2
10005cc4:	1887c83a 	sub	r3,r3,r2
10005cc8:	d8c02b15 	stw	r3,172(sp)
10005ccc:	d8802b17 	ldw	r2,172(sp)
10005cd0:	d9002a17 	ldw	r4,168(sp)
10005cd4:	1100010e 	bge	r2,r4,10005cdc <___vfprintf_internal_r+0x76c>
10005cd8:	2005883a 	mov	r2,r4
10005cdc:	d8802915 	stw	r2,164(sp)
10005ce0:	d8003215 	stw	zero,200(sp)
10005ce4:	e7003fcc 	andi	fp,fp,255
10005ce8:	e700201c 	xori	fp,fp,128
10005cec:	e73fe004 	addi	fp,fp,-128
10005cf0:	e0000326 	beq	fp,zero,10005d00 <___vfprintf_internal_r+0x790>
10005cf4:	d8c02917 	ldw	r3,164(sp)
10005cf8:	18c00044 	addi	r3,r3,1
10005cfc:	d8c02915 	stw	r3,164(sp)
10005d00:	90c0008c 	andi	r3,r18,2
10005d04:	d8c02c15 	stw	r3,176(sp)
10005d08:	18000326 	beq	r3,zero,10005d18 <___vfprintf_internal_r+0x7a8>
10005d0c:	d8c02917 	ldw	r3,164(sp)
10005d10:	18c00084 	addi	r3,r3,2
10005d14:	d8c02915 	stw	r3,164(sp)
10005d18:	90c0210c 	andi	r3,r18,132
10005d1c:	d8c03015 	stw	r3,192(sp)
10005d20:	1801c51e 	bne	r3,zero,10006438 <___vfprintf_internal_r+0xec8>
10005d24:	d9003117 	ldw	r4,196(sp)
10005d28:	d8c02917 	ldw	r3,164(sp)
10005d2c:	20e7c83a 	sub	r19,r4,r3
10005d30:	04c1c10e 	bge	zero,r19,10006438 <___vfprintf_internal_r+0xec8>
10005d34:	02400404 	movi	r9,16
10005d38:	d8c02017 	ldw	r3,128(sp)
10005d3c:	d8801f17 	ldw	r2,124(sp)
10005d40:	4cc52f0e 	bge	r9,r19,10007200 <___vfprintf_internal_r+0x1c90>
10005d44:	01440074 	movhi	r5,4097
10005d48:	2951ba84 	addi	r5,r5,18154
10005d4c:	dc403b15 	stw	r17,236(sp)
10005d50:	d9403515 	stw	r5,212(sp)
10005d54:	9823883a 	mov	r17,r19
10005d58:	482d883a 	mov	r22,r9
10005d5c:	9027883a 	mov	r19,r18
10005d60:	070001c4 	movi	fp,7
10005d64:	8025883a 	mov	r18,r16
10005d68:	dc002d17 	ldw	r16,180(sp)
10005d6c:	00000306 	br	10005d7c <___vfprintf_internal_r+0x80c>
10005d70:	8c7ffc04 	addi	r17,r17,-16
10005d74:	42000204 	addi	r8,r8,8
10005d78:	b440130e 	bge	r22,r17,10005dc8 <___vfprintf_internal_r+0x858>
10005d7c:	01040074 	movhi	r4,4097
10005d80:	18c00404 	addi	r3,r3,16
10005d84:	10800044 	addi	r2,r2,1
10005d88:	2111ba84 	addi	r4,r4,18154
10005d8c:	41000015 	stw	r4,0(r8)
10005d90:	45800115 	stw	r22,4(r8)
10005d94:	d8c02015 	stw	r3,128(sp)
10005d98:	d8801f15 	stw	r2,124(sp)
10005d9c:	e0bff40e 	bge	fp,r2,10005d70 <__alt_data_end+0xf8005d70>
10005da0:	d9801e04 	addi	r6,sp,120
10005da4:	b80b883a 	mov	r5,r23
10005da8:	8009883a 	mov	r4,r16
10005dac:	000cd500 	call	1000cd50 <__sprint_r>
10005db0:	103ef31e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10005db4:	8c7ffc04 	addi	r17,r17,-16
10005db8:	d8c02017 	ldw	r3,128(sp)
10005dbc:	d8801f17 	ldw	r2,124(sp)
10005dc0:	da000404 	addi	r8,sp,16
10005dc4:	b47fed16 	blt	r22,r17,10005d7c <__alt_data_end+0xf8005d7c>
10005dc8:	9021883a 	mov	r16,r18
10005dcc:	9825883a 	mov	r18,r19
10005dd0:	8827883a 	mov	r19,r17
10005dd4:	dc403b17 	ldw	r17,236(sp)
10005dd8:	d9403517 	ldw	r5,212(sp)
10005ddc:	98c7883a 	add	r3,r19,r3
10005de0:	10800044 	addi	r2,r2,1
10005de4:	41400015 	stw	r5,0(r8)
10005de8:	44c00115 	stw	r19,4(r8)
10005dec:	d8c02015 	stw	r3,128(sp)
10005df0:	d8801f15 	stw	r2,124(sp)
10005df4:	010001c4 	movi	r4,7
10005df8:	2082c516 	blt	r4,r2,10006910 <___vfprintf_internal_r+0x13a0>
10005dfc:	df002787 	ldb	fp,158(sp)
10005e00:	42000204 	addi	r8,r8,8
10005e04:	e0000c26 	beq	fp,zero,10005e38 <___vfprintf_internal_r+0x8c8>
10005e08:	d8801f17 	ldw	r2,124(sp)
10005e0c:	d9002784 	addi	r4,sp,158
10005e10:	18c00044 	addi	r3,r3,1
10005e14:	10800044 	addi	r2,r2,1
10005e18:	41000015 	stw	r4,0(r8)
10005e1c:	01000044 	movi	r4,1
10005e20:	41000115 	stw	r4,4(r8)
10005e24:	d8c02015 	stw	r3,128(sp)
10005e28:	d8801f15 	stw	r2,124(sp)
10005e2c:	010001c4 	movi	r4,7
10005e30:	20825e16 	blt	r4,r2,100067ac <___vfprintf_internal_r+0x123c>
10005e34:	42000204 	addi	r8,r8,8
10005e38:	d8802c17 	ldw	r2,176(sp)
10005e3c:	10000c26 	beq	r2,zero,10005e70 <___vfprintf_internal_r+0x900>
10005e40:	d8801f17 	ldw	r2,124(sp)
10005e44:	d9002704 	addi	r4,sp,156
10005e48:	18c00084 	addi	r3,r3,2
10005e4c:	10800044 	addi	r2,r2,1
10005e50:	41000015 	stw	r4,0(r8)
10005e54:	01000084 	movi	r4,2
10005e58:	41000115 	stw	r4,4(r8)
10005e5c:	d8c02015 	stw	r3,128(sp)
10005e60:	d8801f15 	stw	r2,124(sp)
10005e64:	010001c4 	movi	r4,7
10005e68:	20825816 	blt	r4,r2,100067cc <___vfprintf_internal_r+0x125c>
10005e6c:	42000204 	addi	r8,r8,8
10005e70:	d9003017 	ldw	r4,192(sp)
10005e74:	00802004 	movi	r2,128
10005e78:	2081bb26 	beq	r4,r2,10006568 <___vfprintf_internal_r+0xff8>
10005e7c:	d9402a17 	ldw	r5,168(sp)
10005e80:	d8802b17 	ldw	r2,172(sp)
10005e84:	28adc83a 	sub	r22,r5,r2
10005e88:	0580310e 	bge	zero,r22,10005f50 <___vfprintf_internal_r+0x9e0>
10005e8c:	07000404 	movi	fp,16
10005e90:	d8801f17 	ldw	r2,124(sp)
10005e94:	e584360e 	bge	fp,r22,10006f70 <___vfprintf_internal_r+0x1a00>
10005e98:	01440074 	movhi	r5,4097
10005e9c:	2951b684 	addi	r5,r5,18138
10005ea0:	dc402a15 	stw	r17,168(sp)
10005ea4:	d9402c15 	stw	r5,176(sp)
10005ea8:	b023883a 	mov	r17,r22
10005eac:	04c001c4 	movi	r19,7
10005eb0:	a82d883a 	mov	r22,r21
10005eb4:	902b883a 	mov	r21,r18
10005eb8:	8025883a 	mov	r18,r16
10005ebc:	dc002d17 	ldw	r16,180(sp)
10005ec0:	00000306 	br	10005ed0 <___vfprintf_internal_r+0x960>
10005ec4:	8c7ffc04 	addi	r17,r17,-16
10005ec8:	42000204 	addi	r8,r8,8
10005ecc:	e440110e 	bge	fp,r17,10005f14 <___vfprintf_internal_r+0x9a4>
10005ed0:	18c00404 	addi	r3,r3,16
10005ed4:	10800044 	addi	r2,r2,1
10005ed8:	45000015 	stw	r20,0(r8)
10005edc:	47000115 	stw	fp,4(r8)
10005ee0:	d8c02015 	stw	r3,128(sp)
10005ee4:	d8801f15 	stw	r2,124(sp)
10005ee8:	98bff60e 	bge	r19,r2,10005ec4 <__alt_data_end+0xf8005ec4>
10005eec:	d9801e04 	addi	r6,sp,120
10005ef0:	b80b883a 	mov	r5,r23
10005ef4:	8009883a 	mov	r4,r16
10005ef8:	000cd500 	call	1000cd50 <__sprint_r>
10005efc:	103ea01e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10005f00:	8c7ffc04 	addi	r17,r17,-16
10005f04:	d8c02017 	ldw	r3,128(sp)
10005f08:	d8801f17 	ldw	r2,124(sp)
10005f0c:	da000404 	addi	r8,sp,16
10005f10:	e47fef16 	blt	fp,r17,10005ed0 <__alt_data_end+0xf8005ed0>
10005f14:	9021883a 	mov	r16,r18
10005f18:	a825883a 	mov	r18,r21
10005f1c:	b02b883a 	mov	r21,r22
10005f20:	882d883a 	mov	r22,r17
10005f24:	dc402a17 	ldw	r17,168(sp)
10005f28:	d9002c17 	ldw	r4,176(sp)
10005f2c:	1d87883a 	add	r3,r3,r22
10005f30:	10800044 	addi	r2,r2,1
10005f34:	41000015 	stw	r4,0(r8)
10005f38:	45800115 	stw	r22,4(r8)
10005f3c:	d8c02015 	stw	r3,128(sp)
10005f40:	d8801f15 	stw	r2,124(sp)
10005f44:	010001c4 	movi	r4,7
10005f48:	20821016 	blt	r4,r2,1000678c <___vfprintf_internal_r+0x121c>
10005f4c:	42000204 	addi	r8,r8,8
10005f50:	9080400c 	andi	r2,r18,256
10005f54:	10013a1e 	bne	r2,zero,10006440 <___vfprintf_internal_r+0xed0>
10005f58:	d9402b17 	ldw	r5,172(sp)
10005f5c:	d8801f17 	ldw	r2,124(sp)
10005f60:	44000015 	stw	r16,0(r8)
10005f64:	1947883a 	add	r3,r3,r5
10005f68:	10800044 	addi	r2,r2,1
10005f6c:	41400115 	stw	r5,4(r8)
10005f70:	d8c02015 	stw	r3,128(sp)
10005f74:	d8801f15 	stw	r2,124(sp)
10005f78:	010001c4 	movi	r4,7
10005f7c:	2081f516 	blt	r4,r2,10006754 <___vfprintf_internal_r+0x11e4>
10005f80:	42000204 	addi	r8,r8,8
10005f84:	9480010c 	andi	r18,r18,4
10005f88:	90003226 	beq	r18,zero,10006054 <___vfprintf_internal_r+0xae4>
10005f8c:	d9403117 	ldw	r5,196(sp)
10005f90:	d8802917 	ldw	r2,164(sp)
10005f94:	28a1c83a 	sub	r16,r5,r2
10005f98:	04002e0e 	bge	zero,r16,10006054 <___vfprintf_internal_r+0xae4>
10005f9c:	04400404 	movi	r17,16
10005fa0:	d8801f17 	ldw	r2,124(sp)
10005fa4:	8c04c40e 	bge	r17,r16,100072b8 <___vfprintf_internal_r+0x1d48>
10005fa8:	01440074 	movhi	r5,4097
10005fac:	2951ba84 	addi	r5,r5,18154
10005fb0:	d9403515 	stw	r5,212(sp)
10005fb4:	048001c4 	movi	r18,7
10005fb8:	dcc02d17 	ldw	r19,180(sp)
10005fbc:	00000306 	br	10005fcc <___vfprintf_internal_r+0xa5c>
10005fc0:	843ffc04 	addi	r16,r16,-16
10005fc4:	42000204 	addi	r8,r8,8
10005fc8:	8c00130e 	bge	r17,r16,10006018 <___vfprintf_internal_r+0xaa8>
10005fcc:	01040074 	movhi	r4,4097
10005fd0:	18c00404 	addi	r3,r3,16
10005fd4:	10800044 	addi	r2,r2,1
10005fd8:	2111ba84 	addi	r4,r4,18154
10005fdc:	41000015 	stw	r4,0(r8)
10005fe0:	44400115 	stw	r17,4(r8)
10005fe4:	d8c02015 	stw	r3,128(sp)
10005fe8:	d8801f15 	stw	r2,124(sp)
10005fec:	90bff40e 	bge	r18,r2,10005fc0 <__alt_data_end+0xf8005fc0>
10005ff0:	d9801e04 	addi	r6,sp,120
10005ff4:	b80b883a 	mov	r5,r23
10005ff8:	9809883a 	mov	r4,r19
10005ffc:	000cd500 	call	1000cd50 <__sprint_r>
10006000:	103e5f1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006004:	843ffc04 	addi	r16,r16,-16
10006008:	d8c02017 	ldw	r3,128(sp)
1000600c:	d8801f17 	ldw	r2,124(sp)
10006010:	da000404 	addi	r8,sp,16
10006014:	8c3fed16 	blt	r17,r16,10005fcc <__alt_data_end+0xf8005fcc>
10006018:	d9403517 	ldw	r5,212(sp)
1000601c:	1c07883a 	add	r3,r3,r16
10006020:	10800044 	addi	r2,r2,1
10006024:	41400015 	stw	r5,0(r8)
10006028:	44000115 	stw	r16,4(r8)
1000602c:	d8c02015 	stw	r3,128(sp)
10006030:	d8801f15 	stw	r2,124(sp)
10006034:	010001c4 	movi	r4,7
10006038:	2080060e 	bge	r4,r2,10006054 <___vfprintf_internal_r+0xae4>
1000603c:	d9002d17 	ldw	r4,180(sp)
10006040:	d9801e04 	addi	r6,sp,120
10006044:	b80b883a 	mov	r5,r23
10006048:	000cd500 	call	1000cd50 <__sprint_r>
1000604c:	103e4c1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006050:	d8c02017 	ldw	r3,128(sp)
10006054:	d8803117 	ldw	r2,196(sp)
10006058:	d9002917 	ldw	r4,164(sp)
1000605c:	1100010e 	bge	r2,r4,10006064 <___vfprintf_internal_r+0xaf4>
10006060:	2005883a 	mov	r2,r4
10006064:	d9402f17 	ldw	r5,188(sp)
10006068:	288b883a 	add	r5,r5,r2
1000606c:	d9402f15 	stw	r5,188(sp)
10006070:	1801c01e 	bne	r3,zero,10006774 <___vfprintf_internal_r+0x1204>
10006074:	a8800007 	ldb	r2,0(r21)
10006078:	d8001f15 	stw	zero,124(sp)
1000607c:	da000404 	addi	r8,sp,16
10006080:	103d751e 	bne	r2,zero,10005658 <__alt_data_end+0xf8005658>
10006084:	a823883a 	mov	r17,r21
10006088:	003d8b06 	br	100056b8 <__alt_data_end+0xf80056b8>
1000608c:	8025883a 	mov	r18,r16
10006090:	dc002903 	ldbu	r16,164(sp)
10006094:	e011883a 	mov	r8,fp
10006098:	84003fcc 	andi	r16,r16,255
1000609c:	8005e51e 	bne	r16,zero,10007834 <___vfprintf_internal_r+0x22c4>
100060a0:	94800414 	ori	r18,r18,16
100060a4:	9080080c 	andi	r2,r18,32
100060a8:	10022b26 	beq	r2,zero,10006958 <___vfprintf_internal_r+0x13e8>
100060ac:	d9002e17 	ldw	r4,184(sp)
100060b0:	d9402a17 	ldw	r5,168(sp)
100060b4:	d8002785 	stb	zero,158(sp)
100060b8:	20c00204 	addi	r3,r4,8
100060bc:	24c00017 	ldw	r19,0(r4)
100060c0:	25800117 	ldw	r22,4(r4)
100060c4:	28042e16 	blt	r5,zero,10007180 <___vfprintf_internal_r+0x1c10>
100060c8:	013fdfc4 	movi	r4,-129
100060cc:	9d84b03a 	or	r2,r19,r22
100060d0:	d8c02e15 	stw	r3,184(sp)
100060d4:	9124703a 	and	r18,r18,r4
100060d8:	0039883a 	mov	fp,zero
100060dc:	103e801e 	bne	r2,zero,10005ae0 <__alt_data_end+0xf8005ae0>
100060e0:	d9002a17 	ldw	r4,168(sp)
100060e4:	2002e01e 	bne	r4,zero,10006c68 <___vfprintf_internal_r+0x16f8>
100060e8:	d8002a15 	stw	zero,168(sp)
100060ec:	d8002b15 	stw	zero,172(sp)
100060f0:	dc001e04 	addi	r16,sp,120
100060f4:	003ef506 	br	10005ccc <__alt_data_end+0xf8005ccc>
100060f8:	8025883a 	mov	r18,r16
100060fc:	dc002903 	ldbu	r16,164(sp)
10006100:	e011883a 	mov	r8,fp
10006104:	84003fcc 	andi	r16,r16,255
10006108:	8005ba1e 	bne	r16,zero,100077f4 <___vfprintf_internal_r+0x2284>
1000610c:	01040074 	movhi	r4,4097
10006110:	2111aa04 	addi	r4,r4,18088
10006114:	d9003915 	stw	r4,228(sp)
10006118:	9080080c 	andi	r2,r18,32
1000611c:	10006126 	beq	r2,zero,100062a4 <___vfprintf_internal_r+0xd34>
10006120:	d9402e17 	ldw	r5,184(sp)
10006124:	2cc00017 	ldw	r19,0(r5)
10006128:	2d800117 	ldw	r22,4(r5)
1000612c:	29400204 	addi	r5,r5,8
10006130:	d9402e15 	stw	r5,184(sp)
10006134:	9080004c 	andi	r2,r18,1
10006138:	1001ac26 	beq	r2,zero,100067ec <___vfprintf_internal_r+0x127c>
1000613c:	9d84b03a 	or	r2,r19,r22
10006140:	10038526 	beq	r2,zero,10006f58 <___vfprintf_internal_r+0x19e8>
10006144:	d8c02a17 	ldw	r3,168(sp)
10006148:	00800c04 	movi	r2,48
1000614c:	d8802705 	stb	r2,156(sp)
10006150:	dc402745 	stb	r17,157(sp)
10006154:	d8002785 	stb	zero,158(sp)
10006158:	90800094 	ori	r2,r18,2
1000615c:	18047916 	blt	r3,zero,10007344 <___vfprintf_internal_r+0x1dd4>
10006160:	00bfdfc4 	movi	r2,-129
10006164:	90a4703a 	and	r18,r18,r2
10006168:	94800094 	ori	r18,r18,2
1000616c:	0039883a 	mov	fp,zero
10006170:	d9003917 	ldw	r4,228(sp)
10006174:	dc001e04 	addi	r16,sp,120
10006178:	988003cc 	andi	r2,r19,15
1000617c:	b006973a 	slli	r3,r22,28
10006180:	2085883a 	add	r2,r4,r2
10006184:	9826d13a 	srli	r19,r19,4
10006188:	10800003 	ldbu	r2,0(r2)
1000618c:	b02cd13a 	srli	r22,r22,4
10006190:	843fffc4 	addi	r16,r16,-1
10006194:	1ce6b03a 	or	r19,r3,r19
10006198:	80800005 	stb	r2,0(r16)
1000619c:	9d84b03a 	or	r2,r19,r22
100061a0:	103ff51e 	bne	r2,zero,10006178 <__alt_data_end+0xf8006178>
100061a4:	d8c02817 	ldw	r3,160(sp)
100061a8:	1c07c83a 	sub	r3,r3,r16
100061ac:	d8c02b15 	stw	r3,172(sp)
100061b0:	003ec606 	br	10005ccc <__alt_data_end+0xf8005ccc>
100061b4:	8025883a 	mov	r18,r16
100061b8:	dc002903 	ldbu	r16,164(sp)
100061bc:	e011883a 	mov	r8,fp
100061c0:	84003fcc 	andi	r16,r16,255
100061c4:	803e9626 	beq	r16,zero,10005c20 <__alt_data_end+0xf8005c20>
100061c8:	d8c02b03 	ldbu	r3,172(sp)
100061cc:	d8c02785 	stb	r3,158(sp)
100061d0:	003e9306 	br	10005c20 <__alt_data_end+0xf8005c20>
100061d4:	00c00044 	movi	r3,1
100061d8:	d8c02905 	stb	r3,164(sp)
100061dc:	00c00ac4 	movi	r3,43
100061e0:	d8c02b05 	stb	r3,172(sp)
100061e4:	ac400007 	ldb	r17,0(r21)
100061e8:	003d4306 	br	100056f8 <__alt_data_end+0xf80056f8>
100061ec:	84000814 	ori	r16,r16,32
100061f0:	ac400007 	ldb	r17,0(r21)
100061f4:	003d4006 	br	100056f8 <__alt_data_end+0xf80056f8>
100061f8:	d8802e17 	ldw	r2,184(sp)
100061fc:	8025883a 	mov	r18,r16
10006200:	d8002785 	stb	zero,158(sp)
10006204:	14000017 	ldw	r16,0(r2)
10006208:	e011883a 	mov	r8,fp
1000620c:	14c00104 	addi	r19,r2,4
10006210:	80042d26 	beq	r16,zero,100072c8 <___vfprintf_internal_r+0x1d58>
10006214:	d8c02a17 	ldw	r3,168(sp)
10006218:	1803e416 	blt	r3,zero,100071ac <___vfprintf_internal_r+0x1c3c>
1000621c:	180d883a 	mov	r6,r3
10006220:	000b883a 	mov	r5,zero
10006224:	8009883a 	mov	r4,r16
10006228:	df003d15 	stw	fp,244(sp)
1000622c:	000aea80 	call	1000aea8 <memchr>
10006230:	da003d17 	ldw	r8,244(sp)
10006234:	10046826 	beq	r2,zero,100073d8 <___vfprintf_internal_r+0x1e68>
10006238:	1405c83a 	sub	r2,r2,r16
1000623c:	d8802b15 	stw	r2,172(sp)
10006240:	1003e016 	blt	r2,zero,100071c4 <___vfprintf_internal_r+0x1c54>
10006244:	df002783 	ldbu	fp,158(sp)
10006248:	d8802915 	stw	r2,164(sp)
1000624c:	dcc02e15 	stw	r19,184(sp)
10006250:	d8002a15 	stw	zero,168(sp)
10006254:	d8003215 	stw	zero,200(sp)
10006258:	003ea206 	br	10005ce4 <__alt_data_end+0xf8005ce4>
1000625c:	8025883a 	mov	r18,r16
10006260:	dc002903 	ldbu	r16,164(sp)
10006264:	e011883a 	mov	r8,fp
10006268:	84003fcc 	andi	r16,r16,255
1000626c:	803f8d26 	beq	r16,zero,100060a4 <__alt_data_end+0xf80060a4>
10006270:	d8c02b03 	ldbu	r3,172(sp)
10006274:	d8c02785 	stb	r3,158(sp)
10006278:	003f8a06 	br	100060a4 <__alt_data_end+0xf80060a4>
1000627c:	8025883a 	mov	r18,r16
10006280:	dc002903 	ldbu	r16,164(sp)
10006284:	e011883a 	mov	r8,fp
10006288:	84003fcc 	andi	r16,r16,255
1000628c:	8005661e 	bne	r16,zero,10007828 <___vfprintf_internal_r+0x22b8>
10006290:	01040074 	movhi	r4,4097
10006294:	2111af04 	addi	r4,r4,18108
10006298:	d9003915 	stw	r4,228(sp)
1000629c:	9080080c 	andi	r2,r18,32
100062a0:	103f9f1e 	bne	r2,zero,10006120 <__alt_data_end+0xf8006120>
100062a4:	9080040c 	andi	r2,r18,16
100062a8:	1002eb26 	beq	r2,zero,10006e58 <___vfprintf_internal_r+0x18e8>
100062ac:	d8802e17 	ldw	r2,184(sp)
100062b0:	002d883a 	mov	r22,zero
100062b4:	14c00017 	ldw	r19,0(r2)
100062b8:	10800104 	addi	r2,r2,4
100062bc:	d8802e15 	stw	r2,184(sp)
100062c0:	003f9c06 	br	10006134 <__alt_data_end+0xf8006134>
100062c4:	d8802b07 	ldb	r2,172(sp)
100062c8:	1002e11e 	bne	r2,zero,10006e50 <___vfprintf_internal_r+0x18e0>
100062cc:	00c00044 	movi	r3,1
100062d0:	d8c02905 	stb	r3,164(sp)
100062d4:	00c00804 	movi	r3,32
100062d8:	d8c02b05 	stb	r3,172(sp)
100062dc:	ac400007 	ldb	r17,0(r21)
100062e0:	003d0506 	br	100056f8 <__alt_data_end+0xf80056f8>
100062e4:	84000054 	ori	r16,r16,1
100062e8:	ac400007 	ldb	r17,0(r21)
100062ec:	003d0206 	br	100056f8 <__alt_data_end+0xf80056f8>
100062f0:	8025883a 	mov	r18,r16
100062f4:	dc002903 	ldbu	r16,164(sp)
100062f8:	e011883a 	mov	r8,fp
100062fc:	84003fcc 	andi	r16,r16,255
10006300:	803de726 	beq	r16,zero,10005aa0 <__alt_data_end+0xf8005aa0>
10006304:	d8c02b03 	ldbu	r3,172(sp)
10006308:	d8c02785 	stb	r3,158(sp)
1000630c:	003de406 	br	10005aa0 <__alt_data_end+0xf8005aa0>
10006310:	84001014 	ori	r16,r16,64
10006314:	ac400007 	ldb	r17,0(r21)
10006318:	003cf706 	br	100056f8 <__alt_data_end+0xf80056f8>
1000631c:	ac400007 	ldb	r17,0(r21)
10006320:	00801b04 	movi	r2,108
10006324:	88838f26 	beq	r17,r2,10007164 <___vfprintf_internal_r+0x1bf4>
10006328:	84000414 	ori	r16,r16,16
1000632c:	003cf206 	br	100056f8 <__alt_data_end+0xf80056f8>
10006330:	8025883a 	mov	r18,r16
10006334:	dc002903 	ldbu	r16,164(sp)
10006338:	e011883a 	mov	r8,fp
1000633c:	84003fcc 	andi	r16,r16,255
10006340:	80053f1e 	bne	r16,zero,10007840 <___vfprintf_internal_r+0x22d0>
10006344:	9080080c 	andi	r2,r18,32
10006348:	1002d226 	beq	r2,zero,10006e94 <___vfprintf_internal_r+0x1924>
1000634c:	d9002e17 	ldw	r4,184(sp)
10006350:	d9402f17 	ldw	r5,188(sp)
10006354:	20800017 	ldw	r2,0(r4)
10006358:	2807d7fa 	srai	r3,r5,31
1000635c:	21000104 	addi	r4,r4,4
10006360:	d9002e15 	stw	r4,184(sp)
10006364:	11400015 	stw	r5,0(r2)
10006368:	10c00115 	stw	r3,4(r2)
1000636c:	003cb806 	br	10005650 <__alt_data_end+0xf8005650>
10006370:	d8c02e17 	ldw	r3,184(sp)
10006374:	d9002e17 	ldw	r4,184(sp)
10006378:	8025883a 	mov	r18,r16
1000637c:	18800017 	ldw	r2,0(r3)
10006380:	21000104 	addi	r4,r4,4
10006384:	00c00044 	movi	r3,1
10006388:	e011883a 	mov	r8,fp
1000638c:	d8c02915 	stw	r3,164(sp)
10006390:	d8002785 	stb	zero,158(sp)
10006394:	d8801405 	stb	r2,80(sp)
10006398:	d9002e15 	stw	r4,184(sp)
1000639c:	d8c02b15 	stw	r3,172(sp)
100063a0:	d8002a15 	stw	zero,168(sp)
100063a4:	d8003215 	stw	zero,200(sp)
100063a8:	dc001404 	addi	r16,sp,80
100063ac:	0039883a 	mov	fp,zero
100063b0:	003e5306 	br	10005d00 <__alt_data_end+0xf8005d00>
100063b4:	01040074 	movhi	r4,4097
100063b8:	2111af04 	addi	r4,r4,18108
100063bc:	0039883a 	mov	fp,zero
100063c0:	d9003915 	stw	r4,228(sp)
100063c4:	04401e04 	movi	r17,120
100063c8:	003f6906 	br	10006170 <__alt_data_end+0xf8006170>
100063cc:	8025883a 	mov	r18,r16
100063d0:	dc002903 	ldbu	r16,164(sp)
100063d4:	e011883a 	mov	r8,fp
100063d8:	84003fcc 	andi	r16,r16,255
100063dc:	8005081e 	bne	r16,zero,10007800 <___vfprintf_internal_r+0x2290>
100063e0:	883d6126 	beq	r17,zero,10005968 <__alt_data_end+0xf8005968>
100063e4:	00c00044 	movi	r3,1
100063e8:	d8c02915 	stw	r3,164(sp)
100063ec:	dc401405 	stb	r17,80(sp)
100063f0:	d8002785 	stb	zero,158(sp)
100063f4:	003fe906 	br	1000639c <__alt_data_end+0xf800639c>
100063f8:	01440074 	movhi	r5,4097
100063fc:	2951af04 	addi	r5,r5,18108
10006400:	d9403915 	stw	r5,228(sp)
10006404:	d8c02e15 	stw	r3,184(sp)
10006408:	1025883a 	mov	r18,r2
1000640c:	04401e04 	movi	r17,120
10006410:	9d84b03a 	or	r2,r19,r22
10006414:	1000fc1e 	bne	r2,zero,10006808 <___vfprintf_internal_r+0x1298>
10006418:	0039883a 	mov	fp,zero
1000641c:	00800084 	movi	r2,2
10006420:	10803fcc 	andi	r2,r2,255
10006424:	00c00044 	movi	r3,1
10006428:	10c20f26 	beq	r2,r3,10006c68 <___vfprintf_internal_r+0x16f8>
1000642c:	00c00084 	movi	r3,2
10006430:	10fd3326 	beq	r2,r3,10005900 <__alt_data_end+0xf8005900>
10006434:	003e0b06 	br	10005c64 <__alt_data_end+0xf8005c64>
10006438:	d8c02017 	ldw	r3,128(sp)
1000643c:	003e7106 	br	10005e04 <__alt_data_end+0xf8005e04>
10006440:	00801944 	movi	r2,101
10006444:	14407e0e 	bge	r2,r17,10006640 <___vfprintf_internal_r+0x10d0>
10006448:	d9003617 	ldw	r4,216(sp)
1000644c:	d9403817 	ldw	r5,224(sp)
10006450:	000d883a 	mov	r6,zero
10006454:	000f883a 	mov	r7,zero
10006458:	d8c03c15 	stw	r3,240(sp)
1000645c:	da003d15 	stw	r8,244(sp)
10006460:	00102100 	call	10010210 <__eqdf2>
10006464:	d8c03c17 	ldw	r3,240(sp)
10006468:	da003d17 	ldw	r8,244(sp)
1000646c:	1000f71e 	bne	r2,zero,1000684c <___vfprintf_internal_r+0x12dc>
10006470:	d8801f17 	ldw	r2,124(sp)
10006474:	01040074 	movhi	r4,4097
10006478:	2111b604 	addi	r4,r4,18136
1000647c:	18c00044 	addi	r3,r3,1
10006480:	10800044 	addi	r2,r2,1
10006484:	41000015 	stw	r4,0(r8)
10006488:	01000044 	movi	r4,1
1000648c:	41000115 	stw	r4,4(r8)
10006490:	d8c02015 	stw	r3,128(sp)
10006494:	d8801f15 	stw	r2,124(sp)
10006498:	010001c4 	movi	r4,7
1000649c:	2082b816 	blt	r4,r2,10006f80 <___vfprintf_internal_r+0x1a10>
100064a0:	42000204 	addi	r8,r8,8
100064a4:	d8802617 	ldw	r2,152(sp)
100064a8:	d9403317 	ldw	r5,204(sp)
100064ac:	11400216 	blt	r2,r5,100064b8 <___vfprintf_internal_r+0xf48>
100064b0:	9080004c 	andi	r2,r18,1
100064b4:	103eb326 	beq	r2,zero,10005f84 <__alt_data_end+0xf8005f84>
100064b8:	d8803717 	ldw	r2,220(sp)
100064bc:	d9003417 	ldw	r4,208(sp)
100064c0:	d9403717 	ldw	r5,220(sp)
100064c4:	1887883a 	add	r3,r3,r2
100064c8:	d8801f17 	ldw	r2,124(sp)
100064cc:	41000015 	stw	r4,0(r8)
100064d0:	41400115 	stw	r5,4(r8)
100064d4:	10800044 	addi	r2,r2,1
100064d8:	d8c02015 	stw	r3,128(sp)
100064dc:	d8801f15 	stw	r2,124(sp)
100064e0:	010001c4 	movi	r4,7
100064e4:	20832916 	blt	r4,r2,1000718c <___vfprintf_internal_r+0x1c1c>
100064e8:	42000204 	addi	r8,r8,8
100064ec:	d8803317 	ldw	r2,204(sp)
100064f0:	143fffc4 	addi	r16,r2,-1
100064f4:	043ea30e 	bge	zero,r16,10005f84 <__alt_data_end+0xf8005f84>
100064f8:	04400404 	movi	r17,16
100064fc:	d8801f17 	ldw	r2,124(sp)
10006500:	8c00880e 	bge	r17,r16,10006724 <___vfprintf_internal_r+0x11b4>
10006504:	01440074 	movhi	r5,4097
10006508:	2951b684 	addi	r5,r5,18138
1000650c:	d9402c15 	stw	r5,176(sp)
10006510:	058001c4 	movi	r22,7
10006514:	dcc02d17 	ldw	r19,180(sp)
10006518:	00000306 	br	10006528 <___vfprintf_internal_r+0xfb8>
1000651c:	42000204 	addi	r8,r8,8
10006520:	843ffc04 	addi	r16,r16,-16
10006524:	8c00820e 	bge	r17,r16,10006730 <___vfprintf_internal_r+0x11c0>
10006528:	18c00404 	addi	r3,r3,16
1000652c:	10800044 	addi	r2,r2,1
10006530:	45000015 	stw	r20,0(r8)
10006534:	44400115 	stw	r17,4(r8)
10006538:	d8c02015 	stw	r3,128(sp)
1000653c:	d8801f15 	stw	r2,124(sp)
10006540:	b0bff60e 	bge	r22,r2,1000651c <__alt_data_end+0xf800651c>
10006544:	d9801e04 	addi	r6,sp,120
10006548:	b80b883a 	mov	r5,r23
1000654c:	9809883a 	mov	r4,r19
10006550:	000cd500 	call	1000cd50 <__sprint_r>
10006554:	103d0a1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006558:	d8c02017 	ldw	r3,128(sp)
1000655c:	d8801f17 	ldw	r2,124(sp)
10006560:	da000404 	addi	r8,sp,16
10006564:	003fee06 	br	10006520 <__alt_data_end+0xf8006520>
10006568:	d9403117 	ldw	r5,196(sp)
1000656c:	d8802917 	ldw	r2,164(sp)
10006570:	28adc83a 	sub	r22,r5,r2
10006574:	05be410e 	bge	zero,r22,10005e7c <__alt_data_end+0xf8005e7c>
10006578:	07000404 	movi	fp,16
1000657c:	d8801f17 	ldw	r2,124(sp)
10006580:	e5838f0e 	bge	fp,r22,100073c0 <___vfprintf_internal_r+0x1e50>
10006584:	01440074 	movhi	r5,4097
10006588:	2951b684 	addi	r5,r5,18138
1000658c:	dc403015 	stw	r17,192(sp)
10006590:	d9402c15 	stw	r5,176(sp)
10006594:	b023883a 	mov	r17,r22
10006598:	04c001c4 	movi	r19,7
1000659c:	a82d883a 	mov	r22,r21
100065a0:	902b883a 	mov	r21,r18
100065a4:	8025883a 	mov	r18,r16
100065a8:	dc002d17 	ldw	r16,180(sp)
100065ac:	00000306 	br	100065bc <___vfprintf_internal_r+0x104c>
100065b0:	8c7ffc04 	addi	r17,r17,-16
100065b4:	42000204 	addi	r8,r8,8
100065b8:	e440110e 	bge	fp,r17,10006600 <___vfprintf_internal_r+0x1090>
100065bc:	18c00404 	addi	r3,r3,16
100065c0:	10800044 	addi	r2,r2,1
100065c4:	45000015 	stw	r20,0(r8)
100065c8:	47000115 	stw	fp,4(r8)
100065cc:	d8c02015 	stw	r3,128(sp)
100065d0:	d8801f15 	stw	r2,124(sp)
100065d4:	98bff60e 	bge	r19,r2,100065b0 <__alt_data_end+0xf80065b0>
100065d8:	d9801e04 	addi	r6,sp,120
100065dc:	b80b883a 	mov	r5,r23
100065e0:	8009883a 	mov	r4,r16
100065e4:	000cd500 	call	1000cd50 <__sprint_r>
100065e8:	103ce51e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
100065ec:	8c7ffc04 	addi	r17,r17,-16
100065f0:	d8c02017 	ldw	r3,128(sp)
100065f4:	d8801f17 	ldw	r2,124(sp)
100065f8:	da000404 	addi	r8,sp,16
100065fc:	e47fef16 	blt	fp,r17,100065bc <__alt_data_end+0xf80065bc>
10006600:	9021883a 	mov	r16,r18
10006604:	a825883a 	mov	r18,r21
10006608:	b02b883a 	mov	r21,r22
1000660c:	882d883a 	mov	r22,r17
10006610:	dc403017 	ldw	r17,192(sp)
10006614:	d9002c17 	ldw	r4,176(sp)
10006618:	1d87883a 	add	r3,r3,r22
1000661c:	10800044 	addi	r2,r2,1
10006620:	41000015 	stw	r4,0(r8)
10006624:	45800115 	stw	r22,4(r8)
10006628:	d8c02015 	stw	r3,128(sp)
1000662c:	d8801f15 	stw	r2,124(sp)
10006630:	010001c4 	movi	r4,7
10006634:	20818e16 	blt	r4,r2,10006c70 <___vfprintf_internal_r+0x1700>
10006638:	42000204 	addi	r8,r8,8
1000663c:	003e0f06 	br	10005e7c <__alt_data_end+0xf8005e7c>
10006640:	d9403317 	ldw	r5,204(sp)
10006644:	00800044 	movi	r2,1
10006648:	18c00044 	addi	r3,r3,1
1000664c:	1141530e 	bge	r2,r5,10006b9c <___vfprintf_internal_r+0x162c>
10006650:	dc401f17 	ldw	r17,124(sp)
10006654:	00800044 	movi	r2,1
10006658:	40800115 	stw	r2,4(r8)
1000665c:	8c400044 	addi	r17,r17,1
10006660:	44000015 	stw	r16,0(r8)
10006664:	d8c02015 	stw	r3,128(sp)
10006668:	dc401f15 	stw	r17,124(sp)
1000666c:	008001c4 	movi	r2,7
10006670:	14416b16 	blt	r2,r17,10006c20 <___vfprintf_internal_r+0x16b0>
10006674:	42000204 	addi	r8,r8,8
10006678:	d8803717 	ldw	r2,220(sp)
1000667c:	d9003417 	ldw	r4,208(sp)
10006680:	8c400044 	addi	r17,r17,1
10006684:	10c7883a 	add	r3,r2,r3
10006688:	40800115 	stw	r2,4(r8)
1000668c:	41000015 	stw	r4,0(r8)
10006690:	d8c02015 	stw	r3,128(sp)
10006694:	dc401f15 	stw	r17,124(sp)
10006698:	008001c4 	movi	r2,7
1000669c:	14416916 	blt	r2,r17,10006c44 <___vfprintf_internal_r+0x16d4>
100066a0:	45800204 	addi	r22,r8,8
100066a4:	d9003617 	ldw	r4,216(sp)
100066a8:	d9403817 	ldw	r5,224(sp)
100066ac:	000d883a 	mov	r6,zero
100066b0:	000f883a 	mov	r7,zero
100066b4:	d8c03c15 	stw	r3,240(sp)
100066b8:	00102100 	call	10010210 <__eqdf2>
100066bc:	d8c03c17 	ldw	r3,240(sp)
100066c0:	1000bc26 	beq	r2,zero,100069b4 <___vfprintf_internal_r+0x1444>
100066c4:	d9403317 	ldw	r5,204(sp)
100066c8:	84000044 	addi	r16,r16,1
100066cc:	8c400044 	addi	r17,r17,1
100066d0:	28bfffc4 	addi	r2,r5,-1
100066d4:	1887883a 	add	r3,r3,r2
100066d8:	b0800115 	stw	r2,4(r22)
100066dc:	b4000015 	stw	r16,0(r22)
100066e0:	d8c02015 	stw	r3,128(sp)
100066e4:	dc401f15 	stw	r17,124(sp)
100066e8:	008001c4 	movi	r2,7
100066ec:	14414316 	blt	r2,r17,10006bfc <___vfprintf_internal_r+0x168c>
100066f0:	b5800204 	addi	r22,r22,8
100066f4:	d9003a17 	ldw	r4,232(sp)
100066f8:	df0022c4 	addi	fp,sp,139
100066fc:	8c400044 	addi	r17,r17,1
10006700:	20c7883a 	add	r3,r4,r3
10006704:	b7000015 	stw	fp,0(r22)
10006708:	b1000115 	stw	r4,4(r22)
1000670c:	d8c02015 	stw	r3,128(sp)
10006710:	dc401f15 	stw	r17,124(sp)
10006714:	008001c4 	movi	r2,7
10006718:	14400e16 	blt	r2,r17,10006754 <___vfprintf_internal_r+0x11e4>
1000671c:	b2000204 	addi	r8,r22,8
10006720:	003e1806 	br	10005f84 <__alt_data_end+0xf8005f84>
10006724:	01040074 	movhi	r4,4097
10006728:	2111b684 	addi	r4,r4,18138
1000672c:	d9002c15 	stw	r4,176(sp)
10006730:	d9002c17 	ldw	r4,176(sp)
10006734:	1c07883a 	add	r3,r3,r16
10006738:	44000115 	stw	r16,4(r8)
1000673c:	41000015 	stw	r4,0(r8)
10006740:	10800044 	addi	r2,r2,1
10006744:	d8c02015 	stw	r3,128(sp)
10006748:	d8801f15 	stw	r2,124(sp)
1000674c:	010001c4 	movi	r4,7
10006750:	20be0b0e 	bge	r4,r2,10005f80 <__alt_data_end+0xf8005f80>
10006754:	d9002d17 	ldw	r4,180(sp)
10006758:	d9801e04 	addi	r6,sp,120
1000675c:	b80b883a 	mov	r5,r23
10006760:	000cd500 	call	1000cd50 <__sprint_r>
10006764:	103c861e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006768:	d8c02017 	ldw	r3,128(sp)
1000676c:	da000404 	addi	r8,sp,16
10006770:	003e0406 	br	10005f84 <__alt_data_end+0xf8005f84>
10006774:	d9002d17 	ldw	r4,180(sp)
10006778:	d9801e04 	addi	r6,sp,120
1000677c:	b80b883a 	mov	r5,r23
10006780:	000cd500 	call	1000cd50 <__sprint_r>
10006784:	103e3b26 	beq	r2,zero,10006074 <__alt_data_end+0xf8006074>
10006788:	003c7d06 	br	10005980 <__alt_data_end+0xf8005980>
1000678c:	d9002d17 	ldw	r4,180(sp)
10006790:	d9801e04 	addi	r6,sp,120
10006794:	b80b883a 	mov	r5,r23
10006798:	000cd500 	call	1000cd50 <__sprint_r>
1000679c:	103c781e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
100067a0:	d8c02017 	ldw	r3,128(sp)
100067a4:	da000404 	addi	r8,sp,16
100067a8:	003de906 	br	10005f50 <__alt_data_end+0xf8005f50>
100067ac:	d9002d17 	ldw	r4,180(sp)
100067b0:	d9801e04 	addi	r6,sp,120
100067b4:	b80b883a 	mov	r5,r23
100067b8:	000cd500 	call	1000cd50 <__sprint_r>
100067bc:	103c701e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
100067c0:	d8c02017 	ldw	r3,128(sp)
100067c4:	da000404 	addi	r8,sp,16
100067c8:	003d9b06 	br	10005e38 <__alt_data_end+0xf8005e38>
100067cc:	d9002d17 	ldw	r4,180(sp)
100067d0:	d9801e04 	addi	r6,sp,120
100067d4:	b80b883a 	mov	r5,r23
100067d8:	000cd500 	call	1000cd50 <__sprint_r>
100067dc:	103c681e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
100067e0:	d8c02017 	ldw	r3,128(sp)
100067e4:	da000404 	addi	r8,sp,16
100067e8:	003da106 	br	10005e70 <__alt_data_end+0xf8005e70>
100067ec:	d9402a17 	ldw	r5,168(sp)
100067f0:	d8002785 	stb	zero,158(sp)
100067f4:	283f0616 	blt	r5,zero,10006410 <__alt_data_end+0xf8006410>
100067f8:	00ffdfc4 	movi	r3,-129
100067fc:	9d84b03a 	or	r2,r19,r22
10006800:	90e4703a 	and	r18,r18,r3
10006804:	103c3b26 	beq	r2,zero,100058f4 <__alt_data_end+0xf80058f4>
10006808:	0039883a 	mov	fp,zero
1000680c:	003e5806 	br	10006170 <__alt_data_end+0xf8006170>
10006810:	9080040c 	andi	r2,r18,16
10006814:	1001b326 	beq	r2,zero,10006ee4 <___vfprintf_internal_r+0x1974>
10006818:	d8c02e17 	ldw	r3,184(sp)
1000681c:	d9002a17 	ldw	r4,168(sp)
10006820:	d8002785 	stb	zero,158(sp)
10006824:	18800104 	addi	r2,r3,4
10006828:	1cc00017 	ldw	r19,0(r3)
1000682c:	002d883a 	mov	r22,zero
10006830:	2001b516 	blt	r4,zero,10006f08 <___vfprintf_internal_r+0x1998>
10006834:	00ffdfc4 	movi	r3,-129
10006838:	d8802e15 	stw	r2,184(sp)
1000683c:	90e4703a 	and	r18,r18,r3
10006840:	983d0526 	beq	r19,zero,10005c58 <__alt_data_end+0xf8005c58>
10006844:	0039883a 	mov	fp,zero
10006848:	003d0806 	br	10005c6c <__alt_data_end+0xf8005c6c>
1000684c:	dc402617 	ldw	r17,152(sp)
10006850:	0441d30e 	bge	zero,r17,10006fa0 <___vfprintf_internal_r+0x1a30>
10006854:	dc403217 	ldw	r17,200(sp)
10006858:	d8803317 	ldw	r2,204(sp)
1000685c:	1440010e 	bge	r2,r17,10006864 <___vfprintf_internal_r+0x12f4>
10006860:	1023883a 	mov	r17,r2
10006864:	04400a0e 	bge	zero,r17,10006890 <___vfprintf_internal_r+0x1320>
10006868:	d8801f17 	ldw	r2,124(sp)
1000686c:	1c47883a 	add	r3,r3,r17
10006870:	44000015 	stw	r16,0(r8)
10006874:	10800044 	addi	r2,r2,1
10006878:	44400115 	stw	r17,4(r8)
1000687c:	d8c02015 	stw	r3,128(sp)
10006880:	d8801f15 	stw	r2,124(sp)
10006884:	010001c4 	movi	r4,7
10006888:	20826516 	blt	r4,r2,10007220 <___vfprintf_internal_r+0x1cb0>
1000688c:	42000204 	addi	r8,r8,8
10006890:	88026116 	blt	r17,zero,10007218 <___vfprintf_internal_r+0x1ca8>
10006894:	d9003217 	ldw	r4,200(sp)
10006898:	2463c83a 	sub	r17,r4,r17
1000689c:	04407b0e 	bge	zero,r17,10006a8c <___vfprintf_internal_r+0x151c>
100068a0:	05800404 	movi	r22,16
100068a4:	d8801f17 	ldw	r2,124(sp)
100068a8:	b4419d0e 	bge	r22,r17,10006f20 <___vfprintf_internal_r+0x19b0>
100068ac:	01040074 	movhi	r4,4097
100068b0:	2111b684 	addi	r4,r4,18138
100068b4:	d9002c15 	stw	r4,176(sp)
100068b8:	070001c4 	movi	fp,7
100068bc:	dcc02d17 	ldw	r19,180(sp)
100068c0:	00000306 	br	100068d0 <___vfprintf_internal_r+0x1360>
100068c4:	42000204 	addi	r8,r8,8
100068c8:	8c7ffc04 	addi	r17,r17,-16
100068cc:	b441970e 	bge	r22,r17,10006f2c <___vfprintf_internal_r+0x19bc>
100068d0:	18c00404 	addi	r3,r3,16
100068d4:	10800044 	addi	r2,r2,1
100068d8:	45000015 	stw	r20,0(r8)
100068dc:	45800115 	stw	r22,4(r8)
100068e0:	d8c02015 	stw	r3,128(sp)
100068e4:	d8801f15 	stw	r2,124(sp)
100068e8:	e0bff60e 	bge	fp,r2,100068c4 <__alt_data_end+0xf80068c4>
100068ec:	d9801e04 	addi	r6,sp,120
100068f0:	b80b883a 	mov	r5,r23
100068f4:	9809883a 	mov	r4,r19
100068f8:	000cd500 	call	1000cd50 <__sprint_r>
100068fc:	103c201e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006900:	d8c02017 	ldw	r3,128(sp)
10006904:	d8801f17 	ldw	r2,124(sp)
10006908:	da000404 	addi	r8,sp,16
1000690c:	003fee06 	br	100068c8 <__alt_data_end+0xf80068c8>
10006910:	d9002d17 	ldw	r4,180(sp)
10006914:	d9801e04 	addi	r6,sp,120
10006918:	b80b883a 	mov	r5,r23
1000691c:	000cd500 	call	1000cd50 <__sprint_r>
10006920:	103c171e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006924:	d8c02017 	ldw	r3,128(sp)
10006928:	df002787 	ldb	fp,158(sp)
1000692c:	da000404 	addi	r8,sp,16
10006930:	003d3406 	br	10005e04 <__alt_data_end+0xf8005e04>
10006934:	9080040c 	andi	r2,r18,16
10006938:	10016126 	beq	r2,zero,10006ec0 <___vfprintf_internal_r+0x1950>
1000693c:	d9402e17 	ldw	r5,184(sp)
10006940:	2cc00017 	ldw	r19,0(r5)
10006944:	29400104 	addi	r5,r5,4
10006948:	d9402e15 	stw	r5,184(sp)
1000694c:	982dd7fa 	srai	r22,r19,31
10006950:	b005883a 	mov	r2,r22
10006954:	003c5a06 	br	10005ac0 <__alt_data_end+0xf8005ac0>
10006958:	9080040c 	andi	r2,r18,16
1000695c:	10003526 	beq	r2,zero,10006a34 <___vfprintf_internal_r+0x14c4>
10006960:	d8c02e17 	ldw	r3,184(sp)
10006964:	d9002a17 	ldw	r4,168(sp)
10006968:	d8002785 	stb	zero,158(sp)
1000696c:	18800104 	addi	r2,r3,4
10006970:	1cc00017 	ldw	r19,0(r3)
10006974:	002d883a 	mov	r22,zero
10006978:	20003716 	blt	r4,zero,10006a58 <___vfprintf_internal_r+0x14e8>
1000697c:	00ffdfc4 	movi	r3,-129
10006980:	d8802e15 	stw	r2,184(sp)
10006984:	90e4703a 	and	r18,r18,r3
10006988:	0039883a 	mov	fp,zero
1000698c:	983dd426 	beq	r19,zero,100060e0 <__alt_data_end+0xf80060e0>
10006990:	00800244 	movi	r2,9
10006994:	14fc5336 	bltu	r2,r19,10005ae4 <__alt_data_end+0xf8005ae4>
10006998:	d8c02817 	ldw	r3,160(sp)
1000699c:	dc001dc4 	addi	r16,sp,119
100069a0:	9cc00c04 	addi	r19,r19,48
100069a4:	1c07c83a 	sub	r3,r3,r16
100069a8:	dcc01dc5 	stb	r19,119(sp)
100069ac:	d8c02b15 	stw	r3,172(sp)
100069b0:	003cc606 	br	10005ccc <__alt_data_end+0xf8005ccc>
100069b4:	d8803317 	ldw	r2,204(sp)
100069b8:	143fffc4 	addi	r16,r2,-1
100069bc:	043f4d0e 	bge	zero,r16,100066f4 <__alt_data_end+0xf80066f4>
100069c0:	07000404 	movi	fp,16
100069c4:	e400810e 	bge	fp,r16,10006bcc <___vfprintf_internal_r+0x165c>
100069c8:	01440074 	movhi	r5,4097
100069cc:	2951b684 	addi	r5,r5,18138
100069d0:	d9402c15 	stw	r5,176(sp)
100069d4:	01c001c4 	movi	r7,7
100069d8:	dcc02d17 	ldw	r19,180(sp)
100069dc:	00000306 	br	100069ec <___vfprintf_internal_r+0x147c>
100069e0:	b5800204 	addi	r22,r22,8
100069e4:	843ffc04 	addi	r16,r16,-16
100069e8:	e4007b0e 	bge	fp,r16,10006bd8 <___vfprintf_internal_r+0x1668>
100069ec:	18c00404 	addi	r3,r3,16
100069f0:	8c400044 	addi	r17,r17,1
100069f4:	b5000015 	stw	r20,0(r22)
100069f8:	b7000115 	stw	fp,4(r22)
100069fc:	d8c02015 	stw	r3,128(sp)
10006a00:	dc401f15 	stw	r17,124(sp)
10006a04:	3c7ff60e 	bge	r7,r17,100069e0 <__alt_data_end+0xf80069e0>
10006a08:	d9801e04 	addi	r6,sp,120
10006a0c:	b80b883a 	mov	r5,r23
10006a10:	9809883a 	mov	r4,r19
10006a14:	d9c03c15 	stw	r7,240(sp)
10006a18:	000cd500 	call	1000cd50 <__sprint_r>
10006a1c:	d9c03c17 	ldw	r7,240(sp)
10006a20:	103bd71e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006a24:	d8c02017 	ldw	r3,128(sp)
10006a28:	dc401f17 	ldw	r17,124(sp)
10006a2c:	dd800404 	addi	r22,sp,16
10006a30:	003fec06 	br	100069e4 <__alt_data_end+0xf80069e4>
10006a34:	9080100c 	andi	r2,r18,64
10006a38:	d8002785 	stb	zero,158(sp)
10006a3c:	10010e26 	beq	r2,zero,10006e78 <___vfprintf_internal_r+0x1908>
10006a40:	d9402e17 	ldw	r5,184(sp)
10006a44:	d8c02a17 	ldw	r3,168(sp)
10006a48:	002d883a 	mov	r22,zero
10006a4c:	28800104 	addi	r2,r5,4
10006a50:	2cc0000b 	ldhu	r19,0(r5)
10006a54:	183fc90e 	bge	r3,zero,1000697c <__alt_data_end+0xf800697c>
10006a58:	d8802e15 	stw	r2,184(sp)
10006a5c:	0039883a 	mov	fp,zero
10006a60:	9d84b03a 	or	r2,r19,r22
10006a64:	103c1e1e 	bne	r2,zero,10005ae0 <__alt_data_end+0xf8005ae0>
10006a68:	00800044 	movi	r2,1
10006a6c:	003e6c06 	br	10006420 <__alt_data_end+0xf8006420>
10006a70:	d9002d17 	ldw	r4,180(sp)
10006a74:	d9801e04 	addi	r6,sp,120
10006a78:	b80b883a 	mov	r5,r23
10006a7c:	000cd500 	call	1000cd50 <__sprint_r>
10006a80:	103bbf1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006a84:	d8c02017 	ldw	r3,128(sp)
10006a88:	da000404 	addi	r8,sp,16
10006a8c:	d9003217 	ldw	r4,200(sp)
10006a90:	d8802617 	ldw	r2,152(sp)
10006a94:	d9403317 	ldw	r5,204(sp)
10006a98:	8123883a 	add	r17,r16,r4
10006a9c:	11400216 	blt	r2,r5,10006aa8 <___vfprintf_internal_r+0x1538>
10006aa0:	9100004c 	andi	r4,r18,1
10006aa4:	20000d26 	beq	r4,zero,10006adc <___vfprintf_internal_r+0x156c>
10006aa8:	d9003717 	ldw	r4,220(sp)
10006aac:	d9403417 	ldw	r5,208(sp)
10006ab0:	1907883a 	add	r3,r3,r4
10006ab4:	d9001f17 	ldw	r4,124(sp)
10006ab8:	41400015 	stw	r5,0(r8)
10006abc:	d9403717 	ldw	r5,220(sp)
10006ac0:	21000044 	addi	r4,r4,1
10006ac4:	d8c02015 	stw	r3,128(sp)
10006ac8:	41400115 	stw	r5,4(r8)
10006acc:	d9001f15 	stw	r4,124(sp)
10006ad0:	014001c4 	movi	r5,7
10006ad4:	2901e816 	blt	r5,r4,10007278 <___vfprintf_internal_r+0x1d08>
10006ad8:	42000204 	addi	r8,r8,8
10006adc:	d9003317 	ldw	r4,204(sp)
10006ae0:	8121883a 	add	r16,r16,r4
10006ae4:	2085c83a 	sub	r2,r4,r2
10006ae8:	8461c83a 	sub	r16,r16,r17
10006aec:	1400010e 	bge	r2,r16,10006af4 <___vfprintf_internal_r+0x1584>
10006af0:	1021883a 	mov	r16,r2
10006af4:	04000a0e 	bge	zero,r16,10006b20 <___vfprintf_internal_r+0x15b0>
10006af8:	d9001f17 	ldw	r4,124(sp)
10006afc:	1c07883a 	add	r3,r3,r16
10006b00:	44400015 	stw	r17,0(r8)
10006b04:	21000044 	addi	r4,r4,1
10006b08:	44000115 	stw	r16,4(r8)
10006b0c:	d8c02015 	stw	r3,128(sp)
10006b10:	d9001f15 	stw	r4,124(sp)
10006b14:	014001c4 	movi	r5,7
10006b18:	2901fb16 	blt	r5,r4,10007308 <___vfprintf_internal_r+0x1d98>
10006b1c:	42000204 	addi	r8,r8,8
10006b20:	8001f716 	blt	r16,zero,10007300 <___vfprintf_internal_r+0x1d90>
10006b24:	1421c83a 	sub	r16,r2,r16
10006b28:	043d160e 	bge	zero,r16,10005f84 <__alt_data_end+0xf8005f84>
10006b2c:	04400404 	movi	r17,16
10006b30:	d8801f17 	ldw	r2,124(sp)
10006b34:	8c3efb0e 	bge	r17,r16,10006724 <__alt_data_end+0xf8006724>
10006b38:	01440074 	movhi	r5,4097
10006b3c:	2951b684 	addi	r5,r5,18138
10006b40:	d9402c15 	stw	r5,176(sp)
10006b44:	058001c4 	movi	r22,7
10006b48:	dcc02d17 	ldw	r19,180(sp)
10006b4c:	00000306 	br	10006b5c <___vfprintf_internal_r+0x15ec>
10006b50:	42000204 	addi	r8,r8,8
10006b54:	843ffc04 	addi	r16,r16,-16
10006b58:	8c3ef50e 	bge	r17,r16,10006730 <__alt_data_end+0xf8006730>
10006b5c:	18c00404 	addi	r3,r3,16
10006b60:	10800044 	addi	r2,r2,1
10006b64:	45000015 	stw	r20,0(r8)
10006b68:	44400115 	stw	r17,4(r8)
10006b6c:	d8c02015 	stw	r3,128(sp)
10006b70:	d8801f15 	stw	r2,124(sp)
10006b74:	b0bff60e 	bge	r22,r2,10006b50 <__alt_data_end+0xf8006b50>
10006b78:	d9801e04 	addi	r6,sp,120
10006b7c:	b80b883a 	mov	r5,r23
10006b80:	9809883a 	mov	r4,r19
10006b84:	000cd500 	call	1000cd50 <__sprint_r>
10006b88:	103b7d1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006b8c:	d8c02017 	ldw	r3,128(sp)
10006b90:	d8801f17 	ldw	r2,124(sp)
10006b94:	da000404 	addi	r8,sp,16
10006b98:	003fee06 	br	10006b54 <__alt_data_end+0xf8006b54>
10006b9c:	9088703a 	and	r4,r18,r2
10006ba0:	203eab1e 	bne	r4,zero,10006650 <__alt_data_end+0xf8006650>
10006ba4:	dc401f17 	ldw	r17,124(sp)
10006ba8:	40800115 	stw	r2,4(r8)
10006bac:	44000015 	stw	r16,0(r8)
10006bb0:	8c400044 	addi	r17,r17,1
10006bb4:	d8c02015 	stw	r3,128(sp)
10006bb8:	dc401f15 	stw	r17,124(sp)
10006bbc:	008001c4 	movi	r2,7
10006bc0:	14400e16 	blt	r2,r17,10006bfc <___vfprintf_internal_r+0x168c>
10006bc4:	45800204 	addi	r22,r8,8
10006bc8:	003eca06 	br	100066f4 <__alt_data_end+0xf80066f4>
10006bcc:	01040074 	movhi	r4,4097
10006bd0:	2111b684 	addi	r4,r4,18138
10006bd4:	d9002c15 	stw	r4,176(sp)
10006bd8:	d8802c17 	ldw	r2,176(sp)
10006bdc:	1c07883a 	add	r3,r3,r16
10006be0:	8c400044 	addi	r17,r17,1
10006be4:	b0800015 	stw	r2,0(r22)
10006be8:	b4000115 	stw	r16,4(r22)
10006bec:	d8c02015 	stw	r3,128(sp)
10006bf0:	dc401f15 	stw	r17,124(sp)
10006bf4:	008001c4 	movi	r2,7
10006bf8:	147ebd0e 	bge	r2,r17,100066f0 <__alt_data_end+0xf80066f0>
10006bfc:	d9002d17 	ldw	r4,180(sp)
10006c00:	d9801e04 	addi	r6,sp,120
10006c04:	b80b883a 	mov	r5,r23
10006c08:	000cd500 	call	1000cd50 <__sprint_r>
10006c0c:	103b5c1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006c10:	d8c02017 	ldw	r3,128(sp)
10006c14:	dc401f17 	ldw	r17,124(sp)
10006c18:	dd800404 	addi	r22,sp,16
10006c1c:	003eb506 	br	100066f4 <__alt_data_end+0xf80066f4>
10006c20:	d9002d17 	ldw	r4,180(sp)
10006c24:	d9801e04 	addi	r6,sp,120
10006c28:	b80b883a 	mov	r5,r23
10006c2c:	000cd500 	call	1000cd50 <__sprint_r>
10006c30:	103b531e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006c34:	d8c02017 	ldw	r3,128(sp)
10006c38:	dc401f17 	ldw	r17,124(sp)
10006c3c:	da000404 	addi	r8,sp,16
10006c40:	003e8d06 	br	10006678 <__alt_data_end+0xf8006678>
10006c44:	d9002d17 	ldw	r4,180(sp)
10006c48:	d9801e04 	addi	r6,sp,120
10006c4c:	b80b883a 	mov	r5,r23
10006c50:	000cd500 	call	1000cd50 <__sprint_r>
10006c54:	103b4a1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006c58:	d8c02017 	ldw	r3,128(sp)
10006c5c:	dc401f17 	ldw	r17,124(sp)
10006c60:	dd800404 	addi	r22,sp,16
10006c64:	003e8f06 	br	100066a4 <__alt_data_end+0xf80066a4>
10006c68:	0027883a 	mov	r19,zero
10006c6c:	003f4a06 	br	10006998 <__alt_data_end+0xf8006998>
10006c70:	d9002d17 	ldw	r4,180(sp)
10006c74:	d9801e04 	addi	r6,sp,120
10006c78:	b80b883a 	mov	r5,r23
10006c7c:	000cd500 	call	1000cd50 <__sprint_r>
10006c80:	103b3f1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006c84:	d8c02017 	ldw	r3,128(sp)
10006c88:	da000404 	addi	r8,sp,16
10006c8c:	003c7b06 	br	10005e7c <__alt_data_end+0xf8005e7c>
10006c90:	d9402a17 	ldw	r5,168(sp)
10006c94:	04e7c83a 	sub	r19,zero,r19
10006c98:	07000b44 	movi	fp,45
10006c9c:	9804c03a 	cmpne	r2,r19,zero
10006ca0:	05adc83a 	sub	r22,zero,r22
10006ca4:	df002785 	stb	fp,158(sp)
10006ca8:	b0adc83a 	sub	r22,r22,r2
10006cac:	28017b16 	blt	r5,zero,1000729c <___vfprintf_internal_r+0x1d2c>
10006cb0:	00bfdfc4 	movi	r2,-129
10006cb4:	90a4703a 	and	r18,r18,r2
10006cb8:	003b8906 	br	10005ae0 <__alt_data_end+0xf8005ae0>
10006cbc:	d9003617 	ldw	r4,216(sp)
10006cc0:	d9403817 	ldw	r5,224(sp)
10006cc4:	da003d15 	stw	r8,244(sp)
10006cc8:	000c9740 	call	1000c974 <__fpclassifyd>
10006ccc:	da003d17 	ldw	r8,244(sp)
10006cd0:	1000f026 	beq	r2,zero,10007094 <___vfprintf_internal_r+0x1b24>
10006cd4:	d9002a17 	ldw	r4,168(sp)
10006cd8:	05bff7c4 	movi	r22,-33
10006cdc:	00bfffc4 	movi	r2,-1
10006ce0:	8dac703a 	and	r22,r17,r22
10006ce4:	20820026 	beq	r4,r2,100074e8 <___vfprintf_internal_r+0x1f78>
10006ce8:	008011c4 	movi	r2,71
10006cec:	b081f726 	beq	r22,r2,100074cc <___vfprintf_internal_r+0x1f5c>
10006cf0:	d9003817 	ldw	r4,224(sp)
10006cf4:	90c04014 	ori	r3,r18,256
10006cf8:	d8c02c15 	stw	r3,176(sp)
10006cfc:	20021516 	blt	r4,zero,10007554 <___vfprintf_internal_r+0x1fe4>
10006d00:	dcc03817 	ldw	r19,224(sp)
10006d04:	d8002905 	stb	zero,164(sp)
10006d08:	00801984 	movi	r2,102
10006d0c:	8881f926 	beq	r17,r2,100074f4 <___vfprintf_internal_r+0x1f84>
10006d10:	00801184 	movi	r2,70
10006d14:	88821c26 	beq	r17,r2,10007588 <___vfprintf_internal_r+0x2018>
10006d18:	00801144 	movi	r2,69
10006d1c:	b081ef26 	beq	r22,r2,100074dc <___vfprintf_internal_r+0x1f6c>
10006d20:	d8c02a17 	ldw	r3,168(sp)
10006d24:	d8802104 	addi	r2,sp,132
10006d28:	d8800315 	stw	r2,12(sp)
10006d2c:	d9403617 	ldw	r5,216(sp)
10006d30:	d8802504 	addi	r2,sp,148
10006d34:	d9002d17 	ldw	r4,180(sp)
10006d38:	d8800215 	stw	r2,8(sp)
10006d3c:	d8802604 	addi	r2,sp,152
10006d40:	d8c00015 	stw	r3,0(sp)
10006d44:	d8800115 	stw	r2,4(sp)
10006d48:	01c00084 	movi	r7,2
10006d4c:	980d883a 	mov	r6,r19
10006d50:	d8c03c15 	stw	r3,240(sp)
10006d54:	da003d15 	stw	r8,244(sp)
10006d58:	0007ca00 	call	10007ca0 <_dtoa_r>
10006d5c:	1021883a 	mov	r16,r2
10006d60:	008019c4 	movi	r2,103
10006d64:	d8c03c17 	ldw	r3,240(sp)
10006d68:	da003d17 	ldw	r8,244(sp)
10006d6c:	88817126 	beq	r17,r2,10007334 <___vfprintf_internal_r+0x1dc4>
10006d70:	008011c4 	movi	r2,71
10006d74:	88829126 	beq	r17,r2,100077bc <___vfprintf_internal_r+0x224c>
10006d78:	80f9883a 	add	fp,r16,r3
10006d7c:	d9003617 	ldw	r4,216(sp)
10006d80:	000d883a 	mov	r6,zero
10006d84:	000f883a 	mov	r7,zero
10006d88:	980b883a 	mov	r5,r19
10006d8c:	da003d15 	stw	r8,244(sp)
10006d90:	00102100 	call	10010210 <__eqdf2>
10006d94:	da003d17 	ldw	r8,244(sp)
10006d98:	10018d26 	beq	r2,zero,100073d0 <___vfprintf_internal_r+0x1e60>
10006d9c:	d8802117 	ldw	r2,132(sp)
10006da0:	1700062e 	bgeu	r2,fp,10006dbc <___vfprintf_internal_r+0x184c>
10006da4:	01000c04 	movi	r4,48
10006da8:	10c00044 	addi	r3,r2,1
10006dac:	d8c02115 	stw	r3,132(sp)
10006db0:	11000005 	stb	r4,0(r2)
10006db4:	d8802117 	ldw	r2,132(sp)
10006db8:	173ffb36 	bltu	r2,fp,10006da8 <__alt_data_end+0xf8006da8>
10006dbc:	1405c83a 	sub	r2,r2,r16
10006dc0:	d8803315 	stw	r2,204(sp)
10006dc4:	008011c4 	movi	r2,71
10006dc8:	b0817626 	beq	r22,r2,100073a4 <___vfprintf_internal_r+0x1e34>
10006dcc:	00801944 	movi	r2,101
10006dd0:	1442800e 	bge	r2,r17,100077d4 <___vfprintf_internal_r+0x2264>
10006dd4:	d8c02617 	ldw	r3,152(sp)
10006dd8:	00801984 	movi	r2,102
10006ddc:	d8c03215 	stw	r3,200(sp)
10006de0:	8881fe26 	beq	r17,r2,100075dc <___vfprintf_internal_r+0x206c>
10006de4:	d8c03217 	ldw	r3,200(sp)
10006de8:	d9003317 	ldw	r4,204(sp)
10006dec:	1901dd16 	blt	r3,r4,10007564 <___vfprintf_internal_r+0x1ff4>
10006df0:	9480004c 	andi	r18,r18,1
10006df4:	90022b1e 	bne	r18,zero,100076a4 <___vfprintf_internal_r+0x2134>
10006df8:	1805883a 	mov	r2,r3
10006dfc:	18028316 	blt	r3,zero,1000780c <___vfprintf_internal_r+0x229c>
10006e00:	d8c03217 	ldw	r3,200(sp)
10006e04:	044019c4 	movi	r17,103
10006e08:	d8c02b15 	stw	r3,172(sp)
10006e0c:	df002907 	ldb	fp,164(sp)
10006e10:	e001531e 	bne	fp,zero,10007360 <___vfprintf_internal_r+0x1df0>
10006e14:	df002783 	ldbu	fp,158(sp)
10006e18:	d8802915 	stw	r2,164(sp)
10006e1c:	dc802c17 	ldw	r18,176(sp)
10006e20:	d8002a15 	stw	zero,168(sp)
10006e24:	003baf06 	br	10005ce4 <__alt_data_end+0xf8005ce4>
10006e28:	d8c02e17 	ldw	r3,184(sp)
10006e2c:	d9002e17 	ldw	r4,184(sp)
10006e30:	d9402e17 	ldw	r5,184(sp)
10006e34:	18c00017 	ldw	r3,0(r3)
10006e38:	21000117 	ldw	r4,4(r4)
10006e3c:	29400204 	addi	r5,r5,8
10006e40:	d8c03615 	stw	r3,216(sp)
10006e44:	d9003815 	stw	r4,224(sp)
10006e48:	d9402e15 	stw	r5,184(sp)
10006e4c:	003b5006 	br	10005b90 <__alt_data_end+0xf8005b90>
10006e50:	ac400007 	ldb	r17,0(r21)
10006e54:	003a2806 	br	100056f8 <__alt_data_end+0xf80056f8>
10006e58:	9080100c 	andi	r2,r18,64
10006e5c:	1000a826 	beq	r2,zero,10007100 <___vfprintf_internal_r+0x1b90>
10006e60:	d8c02e17 	ldw	r3,184(sp)
10006e64:	002d883a 	mov	r22,zero
10006e68:	1cc0000b 	ldhu	r19,0(r3)
10006e6c:	18c00104 	addi	r3,r3,4
10006e70:	d8c02e15 	stw	r3,184(sp)
10006e74:	003caf06 	br	10006134 <__alt_data_end+0xf8006134>
10006e78:	d9002e17 	ldw	r4,184(sp)
10006e7c:	d9402a17 	ldw	r5,168(sp)
10006e80:	002d883a 	mov	r22,zero
10006e84:	20800104 	addi	r2,r4,4
10006e88:	24c00017 	ldw	r19,0(r4)
10006e8c:	283ebb0e 	bge	r5,zero,1000697c <__alt_data_end+0xf800697c>
10006e90:	003ef106 	br	10006a58 <__alt_data_end+0xf8006a58>
10006e94:	9080040c 	andi	r2,r18,16
10006e98:	1000921e 	bne	r2,zero,100070e4 <___vfprintf_internal_r+0x1b74>
10006e9c:	9480100c 	andi	r18,r18,64
10006ea0:	90013926 	beq	r18,zero,10007388 <___vfprintf_internal_r+0x1e18>
10006ea4:	d9402e17 	ldw	r5,184(sp)
10006ea8:	d8c02f17 	ldw	r3,188(sp)
10006eac:	28800017 	ldw	r2,0(r5)
10006eb0:	29400104 	addi	r5,r5,4
10006eb4:	d9402e15 	stw	r5,184(sp)
10006eb8:	10c0000d 	sth	r3,0(r2)
10006ebc:	0039e406 	br	10005650 <__alt_data_end+0xf8005650>
10006ec0:	9080100c 	andi	r2,r18,64
10006ec4:	10008026 	beq	r2,zero,100070c8 <___vfprintf_internal_r+0x1b58>
10006ec8:	d8802e17 	ldw	r2,184(sp)
10006ecc:	14c0000f 	ldh	r19,0(r2)
10006ed0:	10800104 	addi	r2,r2,4
10006ed4:	d8802e15 	stw	r2,184(sp)
10006ed8:	982dd7fa 	srai	r22,r19,31
10006edc:	b005883a 	mov	r2,r22
10006ee0:	003af706 	br	10005ac0 <__alt_data_end+0xf8005ac0>
10006ee4:	9080100c 	andi	r2,r18,64
10006ee8:	d8002785 	stb	zero,158(sp)
10006eec:	10008a1e 	bne	r2,zero,10007118 <___vfprintf_internal_r+0x1ba8>
10006ef0:	d9002e17 	ldw	r4,184(sp)
10006ef4:	d9402a17 	ldw	r5,168(sp)
10006ef8:	002d883a 	mov	r22,zero
10006efc:	20800104 	addi	r2,r4,4
10006f00:	24c00017 	ldw	r19,0(r4)
10006f04:	283e4b0e 	bge	r5,zero,10006834 <__alt_data_end+0xf8006834>
10006f08:	9d86b03a 	or	r3,r19,r22
10006f0c:	d8802e15 	stw	r2,184(sp)
10006f10:	183e4c1e 	bne	r3,zero,10006844 <__alt_data_end+0xf8006844>
10006f14:	0039883a 	mov	fp,zero
10006f18:	0005883a 	mov	r2,zero
10006f1c:	003d4006 	br	10006420 <__alt_data_end+0xf8006420>
10006f20:	01440074 	movhi	r5,4097
10006f24:	2951b684 	addi	r5,r5,18138
10006f28:	d9402c15 	stw	r5,176(sp)
10006f2c:	d9402c17 	ldw	r5,176(sp)
10006f30:	1c47883a 	add	r3,r3,r17
10006f34:	10800044 	addi	r2,r2,1
10006f38:	41400015 	stw	r5,0(r8)
10006f3c:	44400115 	stw	r17,4(r8)
10006f40:	d8c02015 	stw	r3,128(sp)
10006f44:	d8801f15 	stw	r2,124(sp)
10006f48:	010001c4 	movi	r4,7
10006f4c:	20bec816 	blt	r4,r2,10006a70 <__alt_data_end+0xf8006a70>
10006f50:	42000204 	addi	r8,r8,8
10006f54:	003ecd06 	br	10006a8c <__alt_data_end+0xf8006a8c>
10006f58:	d9002a17 	ldw	r4,168(sp)
10006f5c:	d8002785 	stb	zero,158(sp)
10006f60:	203d2d16 	blt	r4,zero,10006418 <__alt_data_end+0xf8006418>
10006f64:	00bfdfc4 	movi	r2,-129
10006f68:	90a4703a 	and	r18,r18,r2
10006f6c:	003a6106 	br	100058f4 <__alt_data_end+0xf80058f4>
10006f70:	01040074 	movhi	r4,4097
10006f74:	2111b684 	addi	r4,r4,18138
10006f78:	d9002c15 	stw	r4,176(sp)
10006f7c:	003bea06 	br	10005f28 <__alt_data_end+0xf8005f28>
10006f80:	d9002d17 	ldw	r4,180(sp)
10006f84:	d9801e04 	addi	r6,sp,120
10006f88:	b80b883a 	mov	r5,r23
10006f8c:	000cd500 	call	1000cd50 <__sprint_r>
10006f90:	103a7b1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10006f94:	d8c02017 	ldw	r3,128(sp)
10006f98:	da000404 	addi	r8,sp,16
10006f9c:	003d4106 	br	100064a4 <__alt_data_end+0xf80064a4>
10006fa0:	d8801f17 	ldw	r2,124(sp)
10006fa4:	01440074 	movhi	r5,4097
10006fa8:	01000044 	movi	r4,1
10006fac:	18c00044 	addi	r3,r3,1
10006fb0:	10800044 	addi	r2,r2,1
10006fb4:	2951b604 	addi	r5,r5,18136
10006fb8:	41000115 	stw	r4,4(r8)
10006fbc:	41400015 	stw	r5,0(r8)
10006fc0:	d8c02015 	stw	r3,128(sp)
10006fc4:	d8801f15 	stw	r2,124(sp)
10006fc8:	010001c4 	movi	r4,7
10006fcc:	20805c16 	blt	r4,r2,10007140 <___vfprintf_internal_r+0x1bd0>
10006fd0:	42000204 	addi	r8,r8,8
10006fd4:	8800041e 	bne	r17,zero,10006fe8 <___vfprintf_internal_r+0x1a78>
10006fd8:	d8803317 	ldw	r2,204(sp)
10006fdc:	1000021e 	bne	r2,zero,10006fe8 <___vfprintf_internal_r+0x1a78>
10006fe0:	9080004c 	andi	r2,r18,1
10006fe4:	103be726 	beq	r2,zero,10005f84 <__alt_data_end+0xf8005f84>
10006fe8:	d9003717 	ldw	r4,220(sp)
10006fec:	d8801f17 	ldw	r2,124(sp)
10006ff0:	d9403417 	ldw	r5,208(sp)
10006ff4:	20c7883a 	add	r3,r4,r3
10006ff8:	10800044 	addi	r2,r2,1
10006ffc:	41000115 	stw	r4,4(r8)
10007000:	41400015 	stw	r5,0(r8)
10007004:	d8c02015 	stw	r3,128(sp)
10007008:	d8801f15 	stw	r2,124(sp)
1000700c:	010001c4 	movi	r4,7
10007010:	20812116 	blt	r4,r2,10007498 <___vfprintf_internal_r+0x1f28>
10007014:	42000204 	addi	r8,r8,8
10007018:	0463c83a 	sub	r17,zero,r17
1000701c:	0440730e 	bge	zero,r17,100071ec <___vfprintf_internal_r+0x1c7c>
10007020:	05800404 	movi	r22,16
10007024:	b440860e 	bge	r22,r17,10007240 <___vfprintf_internal_r+0x1cd0>
10007028:	01440074 	movhi	r5,4097
1000702c:	2951b684 	addi	r5,r5,18138
10007030:	d9402c15 	stw	r5,176(sp)
10007034:	070001c4 	movi	fp,7
10007038:	dcc02d17 	ldw	r19,180(sp)
1000703c:	00000306 	br	1000704c <___vfprintf_internal_r+0x1adc>
10007040:	42000204 	addi	r8,r8,8
10007044:	8c7ffc04 	addi	r17,r17,-16
10007048:	b440800e 	bge	r22,r17,1000724c <___vfprintf_internal_r+0x1cdc>
1000704c:	18c00404 	addi	r3,r3,16
10007050:	10800044 	addi	r2,r2,1
10007054:	45000015 	stw	r20,0(r8)
10007058:	45800115 	stw	r22,4(r8)
1000705c:	d8c02015 	stw	r3,128(sp)
10007060:	d8801f15 	stw	r2,124(sp)
10007064:	e0bff60e 	bge	fp,r2,10007040 <__alt_data_end+0xf8007040>
10007068:	d9801e04 	addi	r6,sp,120
1000706c:	b80b883a 	mov	r5,r23
10007070:	9809883a 	mov	r4,r19
10007074:	000cd500 	call	1000cd50 <__sprint_r>
10007078:	103a411e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
1000707c:	d8c02017 	ldw	r3,128(sp)
10007080:	d8801f17 	ldw	r2,124(sp)
10007084:	da000404 	addi	r8,sp,16
10007088:	003fee06 	br	10007044 <__alt_data_end+0xf8007044>
1000708c:	00bfffc4 	movi	r2,-1
10007090:	003a3f06 	br	10005990 <__alt_data_end+0xf8005990>
10007094:	008011c4 	movi	r2,71
10007098:	1440b816 	blt	r2,r17,1000737c <___vfprintf_internal_r+0x1e0c>
1000709c:	04040074 	movhi	r16,4097
100070a0:	8411a804 	addi	r16,r16,18080
100070a4:	00c000c4 	movi	r3,3
100070a8:	00bfdfc4 	movi	r2,-129
100070ac:	d8c02915 	stw	r3,164(sp)
100070b0:	90a4703a 	and	r18,r18,r2
100070b4:	df002783 	ldbu	fp,158(sp)
100070b8:	d8c02b15 	stw	r3,172(sp)
100070bc:	d8002a15 	stw	zero,168(sp)
100070c0:	d8003215 	stw	zero,200(sp)
100070c4:	003b0706 	br	10005ce4 <__alt_data_end+0xf8005ce4>
100070c8:	d8c02e17 	ldw	r3,184(sp)
100070cc:	1cc00017 	ldw	r19,0(r3)
100070d0:	18c00104 	addi	r3,r3,4
100070d4:	d8c02e15 	stw	r3,184(sp)
100070d8:	982dd7fa 	srai	r22,r19,31
100070dc:	b005883a 	mov	r2,r22
100070e0:	003a7706 	br	10005ac0 <__alt_data_end+0xf8005ac0>
100070e4:	d8c02e17 	ldw	r3,184(sp)
100070e8:	d9002f17 	ldw	r4,188(sp)
100070ec:	18800017 	ldw	r2,0(r3)
100070f0:	18c00104 	addi	r3,r3,4
100070f4:	d8c02e15 	stw	r3,184(sp)
100070f8:	11000015 	stw	r4,0(r2)
100070fc:	00395406 	br	10005650 <__alt_data_end+0xf8005650>
10007100:	d9002e17 	ldw	r4,184(sp)
10007104:	002d883a 	mov	r22,zero
10007108:	24c00017 	ldw	r19,0(r4)
1000710c:	21000104 	addi	r4,r4,4
10007110:	d9002e15 	stw	r4,184(sp)
10007114:	003c0706 	br	10006134 <__alt_data_end+0xf8006134>
10007118:	d9402e17 	ldw	r5,184(sp)
1000711c:	d8c02a17 	ldw	r3,168(sp)
10007120:	002d883a 	mov	r22,zero
10007124:	28800104 	addi	r2,r5,4
10007128:	2cc0000b 	ldhu	r19,0(r5)
1000712c:	183dc10e 	bge	r3,zero,10006834 <__alt_data_end+0xf8006834>
10007130:	003f7506 	br	10006f08 <__alt_data_end+0xf8006f08>
10007134:	04040074 	movhi	r16,4097
10007138:	8411a604 	addi	r16,r16,18072
1000713c:	003aa706 	br	10005bdc <__alt_data_end+0xf8005bdc>
10007140:	d9002d17 	ldw	r4,180(sp)
10007144:	d9801e04 	addi	r6,sp,120
10007148:	b80b883a 	mov	r5,r23
1000714c:	000cd500 	call	1000cd50 <__sprint_r>
10007150:	103a0b1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10007154:	dc402617 	ldw	r17,152(sp)
10007158:	d8c02017 	ldw	r3,128(sp)
1000715c:	da000404 	addi	r8,sp,16
10007160:	003f9c06 	br	10006fd4 <__alt_data_end+0xf8006fd4>
10007164:	ac400043 	ldbu	r17,1(r21)
10007168:	84000814 	ori	r16,r16,32
1000716c:	ad400044 	addi	r21,r21,1
10007170:	8c403fcc 	andi	r17,r17,255
10007174:	8c40201c 	xori	r17,r17,128
10007178:	8c7fe004 	addi	r17,r17,-128
1000717c:	00395e06 	br	100056f8 <__alt_data_end+0xf80056f8>
10007180:	d8c02e15 	stw	r3,184(sp)
10007184:	0039883a 	mov	fp,zero
10007188:	003e3506 	br	10006a60 <__alt_data_end+0xf8006a60>
1000718c:	d9002d17 	ldw	r4,180(sp)
10007190:	d9801e04 	addi	r6,sp,120
10007194:	b80b883a 	mov	r5,r23
10007198:	000cd500 	call	1000cd50 <__sprint_r>
1000719c:	1039f81e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
100071a0:	d8c02017 	ldw	r3,128(sp)
100071a4:	da000404 	addi	r8,sp,16
100071a8:	003cd006 	br	100064ec <__alt_data_end+0xf80064ec>
100071ac:	8009883a 	mov	r4,r16
100071b0:	df003d15 	stw	fp,244(sp)
100071b4:	00054d00 	call	100054d0 <strlen>
100071b8:	d8802b15 	stw	r2,172(sp)
100071bc:	da003d17 	ldw	r8,244(sp)
100071c0:	103c200e 	bge	r2,zero,10006244 <__alt_data_end+0xf8006244>
100071c4:	0005883a 	mov	r2,zero
100071c8:	003c1e06 	br	10006244 <__alt_data_end+0xf8006244>
100071cc:	d9002d17 	ldw	r4,180(sp)
100071d0:	d9801e04 	addi	r6,sp,120
100071d4:	b80b883a 	mov	r5,r23
100071d8:	000cd500 	call	1000cd50 <__sprint_r>
100071dc:	1039e81e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
100071e0:	d8c02017 	ldw	r3,128(sp)
100071e4:	d8801f17 	ldw	r2,124(sp)
100071e8:	da000404 	addi	r8,sp,16
100071ec:	d9403317 	ldw	r5,204(sp)
100071f0:	10800044 	addi	r2,r2,1
100071f4:	44000015 	stw	r16,0(r8)
100071f8:	28c7883a 	add	r3,r5,r3
100071fc:	003b5b06 	br	10005f6c <__alt_data_end+0xf8005f6c>
10007200:	01040074 	movhi	r4,4097
10007204:	2111ba84 	addi	r4,r4,18154
10007208:	d9003515 	stw	r4,212(sp)
1000720c:	003af206 	br	10005dd8 <__alt_data_end+0xf8005dd8>
10007210:	013fffc4 	movi	r4,-1
10007214:	003a0806 	br	10005a38 <__alt_data_end+0xf8005a38>
10007218:	0023883a 	mov	r17,zero
1000721c:	003d9d06 	br	10006894 <__alt_data_end+0xf8006894>
10007220:	d9002d17 	ldw	r4,180(sp)
10007224:	d9801e04 	addi	r6,sp,120
10007228:	b80b883a 	mov	r5,r23
1000722c:	000cd500 	call	1000cd50 <__sprint_r>
10007230:	1039d31e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
10007234:	d8c02017 	ldw	r3,128(sp)
10007238:	da000404 	addi	r8,sp,16
1000723c:	003d9406 	br	10006890 <__alt_data_end+0xf8006890>
10007240:	01040074 	movhi	r4,4097
10007244:	2111b684 	addi	r4,r4,18138
10007248:	d9002c15 	stw	r4,176(sp)
1000724c:	d9002c17 	ldw	r4,176(sp)
10007250:	1c47883a 	add	r3,r3,r17
10007254:	10800044 	addi	r2,r2,1
10007258:	41000015 	stw	r4,0(r8)
1000725c:	44400115 	stw	r17,4(r8)
10007260:	d8c02015 	stw	r3,128(sp)
10007264:	d8801f15 	stw	r2,124(sp)
10007268:	010001c4 	movi	r4,7
1000726c:	20bfd716 	blt	r4,r2,100071cc <__alt_data_end+0xf80071cc>
10007270:	42000204 	addi	r8,r8,8
10007274:	003fdd06 	br	100071ec <__alt_data_end+0xf80071ec>
10007278:	d9002d17 	ldw	r4,180(sp)
1000727c:	d9801e04 	addi	r6,sp,120
10007280:	b80b883a 	mov	r5,r23
10007284:	000cd500 	call	1000cd50 <__sprint_r>
10007288:	1039bd1e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
1000728c:	d8802617 	ldw	r2,152(sp)
10007290:	d8c02017 	ldw	r3,128(sp)
10007294:	da000404 	addi	r8,sp,16
10007298:	003e1006 	br	10006adc <__alt_data_end+0xf8006adc>
1000729c:	00800044 	movi	r2,1
100072a0:	10803fcc 	andi	r2,r2,255
100072a4:	00c00044 	movi	r3,1
100072a8:	10fa0d26 	beq	r2,r3,10005ae0 <__alt_data_end+0xf8005ae0>
100072ac:	00c00084 	movi	r3,2
100072b0:	10fbaf26 	beq	r2,r3,10006170 <__alt_data_end+0xf8006170>
100072b4:	003a6d06 	br	10005c6c <__alt_data_end+0xf8005c6c>
100072b8:	01040074 	movhi	r4,4097
100072bc:	2111ba84 	addi	r4,r4,18154
100072c0:	d9003515 	stw	r4,212(sp)
100072c4:	003b5406 	br	10006018 <__alt_data_end+0xf8006018>
100072c8:	d8802a17 	ldw	r2,168(sp)
100072cc:	00c00184 	movi	r3,6
100072d0:	1880012e 	bgeu	r3,r2,100072d8 <___vfprintf_internal_r+0x1d68>
100072d4:	1805883a 	mov	r2,r3
100072d8:	d8802b15 	stw	r2,172(sp)
100072dc:	1000ef16 	blt	r2,zero,1000769c <___vfprintf_internal_r+0x212c>
100072e0:	04040074 	movhi	r16,4097
100072e4:	d8802915 	stw	r2,164(sp)
100072e8:	dcc02e15 	stw	r19,184(sp)
100072ec:	d8002a15 	stw	zero,168(sp)
100072f0:	d8003215 	stw	zero,200(sp)
100072f4:	8411b404 	addi	r16,r16,18128
100072f8:	0039883a 	mov	fp,zero
100072fc:	003a8006 	br	10005d00 <__alt_data_end+0xf8005d00>
10007300:	0021883a 	mov	r16,zero
10007304:	003e0706 	br	10006b24 <__alt_data_end+0xf8006b24>
10007308:	d9002d17 	ldw	r4,180(sp)
1000730c:	d9801e04 	addi	r6,sp,120
10007310:	b80b883a 	mov	r5,r23
10007314:	000cd500 	call	1000cd50 <__sprint_r>
10007318:	1039991e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
1000731c:	d8802617 	ldw	r2,152(sp)
10007320:	d9403317 	ldw	r5,204(sp)
10007324:	d8c02017 	ldw	r3,128(sp)
10007328:	da000404 	addi	r8,sp,16
1000732c:	2885c83a 	sub	r2,r5,r2
10007330:	003dfb06 	br	10006b20 <__alt_data_end+0xf8006b20>
10007334:	9080004c 	andi	r2,r18,1
10007338:	103e8f1e 	bne	r2,zero,10006d78 <__alt_data_end+0xf8006d78>
1000733c:	d8802117 	ldw	r2,132(sp)
10007340:	003e9e06 	br	10006dbc <__alt_data_end+0xf8006dbc>
10007344:	1025883a 	mov	r18,r2
10007348:	0039883a 	mov	fp,zero
1000734c:	00800084 	movi	r2,2
10007350:	003fd306 	br	100072a0 <__alt_data_end+0xf80072a0>
10007354:	07000b44 	movi	fp,45
10007358:	df002785 	stb	fp,158(sp)
1000735c:	003a1b06 	br	10005bcc <__alt_data_end+0xf8005bcc>
10007360:	00c00b44 	movi	r3,45
10007364:	d8c02785 	stb	r3,158(sp)
10007368:	d8802915 	stw	r2,164(sp)
1000736c:	dc802c17 	ldw	r18,176(sp)
10007370:	d8002a15 	stw	zero,168(sp)
10007374:	07000b44 	movi	fp,45
10007378:	003a5e06 	br	10005cf4 <__alt_data_end+0xf8005cf4>
1000737c:	04040074 	movhi	r16,4097
10007380:	8411a904 	addi	r16,r16,18084
10007384:	003f4706 	br	100070a4 <__alt_data_end+0xf80070a4>
10007388:	d9002e17 	ldw	r4,184(sp)
1000738c:	d9402f17 	ldw	r5,188(sp)
10007390:	20800017 	ldw	r2,0(r4)
10007394:	21000104 	addi	r4,r4,4
10007398:	d9002e15 	stw	r4,184(sp)
1000739c:	11400015 	stw	r5,0(r2)
100073a0:	0038ab06 	br	10005650 <__alt_data_end+0xf8005650>
100073a4:	dd802617 	ldw	r22,152(sp)
100073a8:	00bfff44 	movi	r2,-3
100073ac:	b0801c16 	blt	r22,r2,10007420 <___vfprintf_internal_r+0x1eb0>
100073b0:	d9402a17 	ldw	r5,168(sp)
100073b4:	2d801a16 	blt	r5,r22,10007420 <___vfprintf_internal_r+0x1eb0>
100073b8:	dd803215 	stw	r22,200(sp)
100073bc:	003e8906 	br	10006de4 <__alt_data_end+0xf8006de4>
100073c0:	01040074 	movhi	r4,4097
100073c4:	2111b684 	addi	r4,r4,18138
100073c8:	d9002c15 	stw	r4,176(sp)
100073cc:	003c9106 	br	10006614 <__alt_data_end+0xf8006614>
100073d0:	e005883a 	mov	r2,fp
100073d4:	003e7906 	br	10006dbc <__alt_data_end+0xf8006dbc>
100073d8:	d9002a17 	ldw	r4,168(sp)
100073dc:	df002783 	ldbu	fp,158(sp)
100073e0:	dcc02e15 	stw	r19,184(sp)
100073e4:	d9002915 	stw	r4,164(sp)
100073e8:	d9002b15 	stw	r4,172(sp)
100073ec:	d8002a15 	stw	zero,168(sp)
100073f0:	d8003215 	stw	zero,200(sp)
100073f4:	003a3b06 	br	10005ce4 <__alt_data_end+0xf8005ce4>
100073f8:	9080004c 	andi	r2,r18,1
100073fc:	0039883a 	mov	fp,zero
10007400:	10000426 	beq	r2,zero,10007414 <___vfprintf_internal_r+0x1ea4>
10007404:	00800c04 	movi	r2,48
10007408:	dc001dc4 	addi	r16,sp,119
1000740c:	d8801dc5 	stb	r2,119(sp)
10007410:	003b6406 	br	100061a4 <__alt_data_end+0xf80061a4>
10007414:	d8002b15 	stw	zero,172(sp)
10007418:	dc001e04 	addi	r16,sp,120
1000741c:	003a2b06 	br	10005ccc <__alt_data_end+0xf8005ccc>
10007420:	8c7fff84 	addi	r17,r17,-2
10007424:	b5bfffc4 	addi	r22,r22,-1
10007428:	dd802615 	stw	r22,152(sp)
1000742c:	dc4022c5 	stb	r17,139(sp)
10007430:	b000bf16 	blt	r22,zero,10007730 <___vfprintf_internal_r+0x21c0>
10007434:	00800ac4 	movi	r2,43
10007438:	d8802305 	stb	r2,140(sp)
1000743c:	00800244 	movi	r2,9
10007440:	15807016 	blt	r2,r22,10007604 <___vfprintf_internal_r+0x2094>
10007444:	00800c04 	movi	r2,48
10007448:	b5800c04 	addi	r22,r22,48
1000744c:	d8802345 	stb	r2,141(sp)
10007450:	dd802385 	stb	r22,142(sp)
10007454:	d88023c4 	addi	r2,sp,143
10007458:	df0022c4 	addi	fp,sp,139
1000745c:	d8c03317 	ldw	r3,204(sp)
10007460:	1739c83a 	sub	fp,r2,fp
10007464:	d9003317 	ldw	r4,204(sp)
10007468:	e0c7883a 	add	r3,fp,r3
1000746c:	df003a15 	stw	fp,232(sp)
10007470:	d8c02b15 	stw	r3,172(sp)
10007474:	00800044 	movi	r2,1
10007478:	1100b30e 	bge	r2,r4,10007748 <___vfprintf_internal_r+0x21d8>
1000747c:	d8c02b17 	ldw	r3,172(sp)
10007480:	18c00044 	addi	r3,r3,1
10007484:	d8c02b15 	stw	r3,172(sp)
10007488:	1805883a 	mov	r2,r3
1000748c:	1800ac16 	blt	r3,zero,10007740 <___vfprintf_internal_r+0x21d0>
10007490:	d8003215 	stw	zero,200(sp)
10007494:	003e5d06 	br	10006e0c <__alt_data_end+0xf8006e0c>
10007498:	d9002d17 	ldw	r4,180(sp)
1000749c:	d9801e04 	addi	r6,sp,120
100074a0:	b80b883a 	mov	r5,r23
100074a4:	000cd500 	call	1000cd50 <__sprint_r>
100074a8:	1039351e 	bne	r2,zero,10005980 <__alt_data_end+0xf8005980>
100074ac:	dc402617 	ldw	r17,152(sp)
100074b0:	d8c02017 	ldw	r3,128(sp)
100074b4:	d8801f17 	ldw	r2,124(sp)
100074b8:	da000404 	addi	r8,sp,16
100074bc:	003ed606 	br	10007018 <__alt_data_end+0xf8007018>
100074c0:	182b883a 	mov	r21,r3
100074c4:	d8002a15 	stw	zero,168(sp)
100074c8:	00388c06 	br	100056fc <__alt_data_end+0xf80056fc>
100074cc:	d8802a17 	ldw	r2,168(sp)
100074d0:	103e071e 	bne	r2,zero,10006cf0 <__alt_data_end+0xf8006cf0>
100074d4:	dc002a15 	stw	r16,168(sp)
100074d8:	003e0506 	br	10006cf0 <__alt_data_end+0xf8006cf0>
100074dc:	d9002a17 	ldw	r4,168(sp)
100074e0:	20c00044 	addi	r3,r4,1
100074e4:	003e0f06 	br	10006d24 <__alt_data_end+0xf8006d24>
100074e8:	01400184 	movi	r5,6
100074ec:	d9402a15 	stw	r5,168(sp)
100074f0:	003dff06 	br	10006cf0 <__alt_data_end+0xf8006cf0>
100074f4:	d8802104 	addi	r2,sp,132
100074f8:	d8800315 	stw	r2,12(sp)
100074fc:	d8802504 	addi	r2,sp,148
10007500:	d8800215 	stw	r2,8(sp)
10007504:	d8802604 	addi	r2,sp,152
10007508:	d8800115 	stw	r2,4(sp)
1000750c:	d8802a17 	ldw	r2,168(sp)
10007510:	d9403617 	ldw	r5,216(sp)
10007514:	d9002d17 	ldw	r4,180(sp)
10007518:	d8800015 	stw	r2,0(sp)
1000751c:	01c000c4 	movi	r7,3
10007520:	980d883a 	mov	r6,r19
10007524:	da003d15 	stw	r8,244(sp)
10007528:	0007ca00 	call	10007ca0 <_dtoa_r>
1000752c:	d8c02a17 	ldw	r3,168(sp)
10007530:	da003d17 	ldw	r8,244(sp)
10007534:	1021883a 	mov	r16,r2
10007538:	10f9883a 	add	fp,r2,r3
1000753c:	81000007 	ldb	r4,0(r16)
10007540:	00800c04 	movi	r2,48
10007544:	20805e26 	beq	r4,r2,100076c0 <___vfprintf_internal_r+0x2150>
10007548:	d8c02617 	ldw	r3,152(sp)
1000754c:	e0f9883a 	add	fp,fp,r3
10007550:	003e0a06 	br	10006d7c <__alt_data_end+0xf8006d7c>
10007554:	00c00b44 	movi	r3,45
10007558:	24e0003c 	xorhi	r19,r4,32768
1000755c:	d8c02905 	stb	r3,164(sp)
10007560:	003de906 	br	10006d08 <__alt_data_end+0xf8006d08>
10007564:	d8c03217 	ldw	r3,200(sp)
10007568:	00c07a0e 	bge	zero,r3,10007754 <___vfprintf_internal_r+0x21e4>
1000756c:	00800044 	movi	r2,1
10007570:	d9003317 	ldw	r4,204(sp)
10007574:	1105883a 	add	r2,r2,r4
10007578:	d8802b15 	stw	r2,172(sp)
1000757c:	10004e16 	blt	r2,zero,100076b8 <___vfprintf_internal_r+0x2148>
10007580:	044019c4 	movi	r17,103
10007584:	003e2106 	br	10006e0c <__alt_data_end+0xf8006e0c>
10007588:	d9002a17 	ldw	r4,168(sp)
1000758c:	d8802104 	addi	r2,sp,132
10007590:	d8800315 	stw	r2,12(sp)
10007594:	d9000015 	stw	r4,0(sp)
10007598:	d8802504 	addi	r2,sp,148
1000759c:	d9403617 	ldw	r5,216(sp)
100075a0:	d9002d17 	ldw	r4,180(sp)
100075a4:	d8800215 	stw	r2,8(sp)
100075a8:	d8802604 	addi	r2,sp,152
100075ac:	d8800115 	stw	r2,4(sp)
100075b0:	01c000c4 	movi	r7,3
100075b4:	980d883a 	mov	r6,r19
100075b8:	da003d15 	stw	r8,244(sp)
100075bc:	0007ca00 	call	10007ca0 <_dtoa_r>
100075c0:	d8c02a17 	ldw	r3,168(sp)
100075c4:	da003d17 	ldw	r8,244(sp)
100075c8:	1021883a 	mov	r16,r2
100075cc:	00801184 	movi	r2,70
100075d0:	80f9883a 	add	fp,r16,r3
100075d4:	88bfd926 	beq	r17,r2,1000753c <__alt_data_end+0xf800753c>
100075d8:	003de806 	br	10006d7c <__alt_data_end+0xf8006d7c>
100075dc:	d9002a17 	ldw	r4,168(sp)
100075e0:	00c04d0e 	bge	zero,r3,10007718 <___vfprintf_internal_r+0x21a8>
100075e4:	2000441e 	bne	r4,zero,100076f8 <___vfprintf_internal_r+0x2188>
100075e8:	9480004c 	andi	r18,r18,1
100075ec:	9000421e 	bne	r18,zero,100076f8 <___vfprintf_internal_r+0x2188>
100075f0:	1805883a 	mov	r2,r3
100075f4:	18006f16 	blt	r3,zero,100077b4 <___vfprintf_internal_r+0x2244>
100075f8:	d8c03217 	ldw	r3,200(sp)
100075fc:	d8c02b15 	stw	r3,172(sp)
10007600:	003e0206 	br	10006e0c <__alt_data_end+0xf8006e0c>
10007604:	df0022c4 	addi	fp,sp,139
10007608:	dc002a15 	stw	r16,168(sp)
1000760c:	4027883a 	mov	r19,r8
10007610:	e021883a 	mov	r16,fp
10007614:	b009883a 	mov	r4,r22
10007618:	01400284 	movi	r5,10
1000761c:	00044c40 	call	100044c4 <__modsi3>
10007620:	10800c04 	addi	r2,r2,48
10007624:	843fffc4 	addi	r16,r16,-1
10007628:	b009883a 	mov	r4,r22
1000762c:	01400284 	movi	r5,10
10007630:	80800005 	stb	r2,0(r16)
10007634:	00044400 	call	10004440 <__divsi3>
10007638:	102d883a 	mov	r22,r2
1000763c:	00800244 	movi	r2,9
10007640:	15bff416 	blt	r2,r22,10007614 <__alt_data_end+0xf8007614>
10007644:	9811883a 	mov	r8,r19
10007648:	b0800c04 	addi	r2,r22,48
1000764c:	8027883a 	mov	r19,r16
10007650:	997fffc4 	addi	r5,r19,-1
10007654:	98bfffc5 	stb	r2,-1(r19)
10007658:	dc002a17 	ldw	r16,168(sp)
1000765c:	2f006d2e 	bgeu	r5,fp,10007814 <___vfprintf_internal_r+0x22a4>
10007660:	d9c02384 	addi	r7,sp,142
10007664:	3ccfc83a 	sub	r7,r7,r19
10007668:	d9002344 	addi	r4,sp,141
1000766c:	e1cf883a 	add	r7,fp,r7
10007670:	00000106 	br	10007678 <___vfprintf_internal_r+0x2108>
10007674:	28800003 	ldbu	r2,0(r5)
10007678:	20800005 	stb	r2,0(r4)
1000767c:	21000044 	addi	r4,r4,1
10007680:	29400044 	addi	r5,r5,1
10007684:	393ffb1e 	bne	r7,r4,10007674 <__alt_data_end+0xf8007674>
10007688:	d8802304 	addi	r2,sp,140
1000768c:	14c5c83a 	sub	r2,r2,r19
10007690:	d8c02344 	addi	r3,sp,141
10007694:	1885883a 	add	r2,r3,r2
10007698:	003f7006 	br	1000745c <__alt_data_end+0xf800745c>
1000769c:	0005883a 	mov	r2,zero
100076a0:	003f0f06 	br	100072e0 <__alt_data_end+0xf80072e0>
100076a4:	d8c03217 	ldw	r3,200(sp)
100076a8:	18c00044 	addi	r3,r3,1
100076ac:	d8c02b15 	stw	r3,172(sp)
100076b0:	1805883a 	mov	r2,r3
100076b4:	183fb20e 	bge	r3,zero,10007580 <__alt_data_end+0xf8007580>
100076b8:	0005883a 	mov	r2,zero
100076bc:	003fb006 	br	10007580 <__alt_data_end+0xf8007580>
100076c0:	d9003617 	ldw	r4,216(sp)
100076c4:	000d883a 	mov	r6,zero
100076c8:	000f883a 	mov	r7,zero
100076cc:	980b883a 	mov	r5,r19
100076d0:	d8c03c15 	stw	r3,240(sp)
100076d4:	da003d15 	stw	r8,244(sp)
100076d8:	00102100 	call	10010210 <__eqdf2>
100076dc:	d8c03c17 	ldw	r3,240(sp)
100076e0:	da003d17 	ldw	r8,244(sp)
100076e4:	103f9826 	beq	r2,zero,10007548 <__alt_data_end+0xf8007548>
100076e8:	00800044 	movi	r2,1
100076ec:	10c7c83a 	sub	r3,r2,r3
100076f0:	d8c02615 	stw	r3,152(sp)
100076f4:	003f9506 	br	1000754c <__alt_data_end+0xf800754c>
100076f8:	d9002a17 	ldw	r4,168(sp)
100076fc:	d8c03217 	ldw	r3,200(sp)
10007700:	20800044 	addi	r2,r4,1
10007704:	1885883a 	add	r2,r3,r2
10007708:	d8802b15 	stw	r2,172(sp)
1000770c:	103dbf0e 	bge	r2,zero,10006e0c <__alt_data_end+0xf8006e0c>
10007710:	0005883a 	mov	r2,zero
10007714:	003dbd06 	br	10006e0c <__alt_data_end+0xf8006e0c>
10007718:	2000201e 	bne	r4,zero,1000779c <___vfprintf_internal_r+0x222c>
1000771c:	9480004c 	andi	r18,r18,1
10007720:	90001e1e 	bne	r18,zero,1000779c <___vfprintf_internal_r+0x222c>
10007724:	00800044 	movi	r2,1
10007728:	d8802b15 	stw	r2,172(sp)
1000772c:	003db706 	br	10006e0c <__alt_data_end+0xf8006e0c>
10007730:	00800b44 	movi	r2,45
10007734:	05adc83a 	sub	r22,zero,r22
10007738:	d8802305 	stb	r2,140(sp)
1000773c:	003f3f06 	br	1000743c <__alt_data_end+0xf800743c>
10007740:	0005883a 	mov	r2,zero
10007744:	003f5206 	br	10007490 <__alt_data_end+0xf8007490>
10007748:	90a4703a 	and	r18,r18,r2
1000774c:	903f4e26 	beq	r18,zero,10007488 <__alt_data_end+0xf8007488>
10007750:	003f4a06 	br	1000747c <__alt_data_end+0xf800747c>
10007754:	00800084 	movi	r2,2
10007758:	10c5c83a 	sub	r2,r2,r3
1000775c:	003f8406 	br	10007570 <__alt_data_end+0xf8007570>
10007760:	d9402e17 	ldw	r5,184(sp)
10007764:	d9002e17 	ldw	r4,184(sp)
10007768:	ac400043 	ldbu	r17,1(r21)
1000776c:	29400017 	ldw	r5,0(r5)
10007770:	20800104 	addi	r2,r4,4
10007774:	d8802e15 	stw	r2,184(sp)
10007778:	d9402a15 	stw	r5,168(sp)
1000777c:	182b883a 	mov	r21,r3
10007780:	283e7b0e 	bge	r5,zero,10007170 <__alt_data_end+0xf8007170>
10007784:	8c403fcc 	andi	r17,r17,255
10007788:	017fffc4 	movi	r5,-1
1000778c:	8c40201c 	xori	r17,r17,128
10007790:	d9402a15 	stw	r5,168(sp)
10007794:	8c7fe004 	addi	r17,r17,-128
10007798:	0037d706 	br	100056f8 <__alt_data_end+0xf80056f8>
1000779c:	d8c02a17 	ldw	r3,168(sp)
100077a0:	18c00084 	addi	r3,r3,2
100077a4:	d8c02b15 	stw	r3,172(sp)
100077a8:	1805883a 	mov	r2,r3
100077ac:	183d970e 	bge	r3,zero,10006e0c <__alt_data_end+0xf8006e0c>
100077b0:	003fd706 	br	10007710 <__alt_data_end+0xf8007710>
100077b4:	0005883a 	mov	r2,zero
100077b8:	003f8f06 	br	100075f8 <__alt_data_end+0xf80075f8>
100077bc:	9080004c 	andi	r2,r18,1
100077c0:	103f821e 	bne	r2,zero,100075cc <__alt_data_end+0xf80075cc>
100077c4:	d8802117 	ldw	r2,132(sp)
100077c8:	1405c83a 	sub	r2,r2,r16
100077cc:	d8803315 	stw	r2,204(sp)
100077d0:	b47ef426 	beq	r22,r17,100073a4 <__alt_data_end+0xf80073a4>
100077d4:	dd802617 	ldw	r22,152(sp)
100077d8:	003f1206 	br	10007424 <__alt_data_end+0xf8007424>
100077dc:	d8c02b03 	ldbu	r3,172(sp)
100077e0:	d8c02785 	stb	r3,158(sp)
100077e4:	0038df06 	br	10005b64 <__alt_data_end+0xf8005b64>
100077e8:	d8c02b03 	ldbu	r3,172(sp)
100077ec:	d8c02785 	stb	r3,158(sp)
100077f0:	0038aa06 	br	10005a9c <__alt_data_end+0xf8005a9c>
100077f4:	d8c02b03 	ldbu	r3,172(sp)
100077f8:	d8c02785 	stb	r3,158(sp)
100077fc:	003a4306 	br	1000610c <__alt_data_end+0xf800610c>
10007800:	d8c02b03 	ldbu	r3,172(sp)
10007804:	d8c02785 	stb	r3,158(sp)
10007808:	003af506 	br	100063e0 <__alt_data_end+0xf80063e0>
1000780c:	0005883a 	mov	r2,zero
10007810:	003d7b06 	br	10006e00 <__alt_data_end+0xf8006e00>
10007814:	d8802344 	addi	r2,sp,141
10007818:	003f1006 	br	1000745c <__alt_data_end+0xf800745c>
1000781c:	d8c02b03 	ldbu	r3,172(sp)
10007820:	d8c02785 	stb	r3,158(sp)
10007824:	0038fd06 	br	10005c1c <__alt_data_end+0xf8005c1c>
10007828:	d8c02b03 	ldbu	r3,172(sp)
1000782c:	d8c02785 	stb	r3,158(sp)
10007830:	003a9706 	br	10006290 <__alt_data_end+0xf8006290>
10007834:	d8c02b03 	ldbu	r3,172(sp)
10007838:	d8c02785 	stb	r3,158(sp)
1000783c:	003a1806 	br	100060a0 <__alt_data_end+0xf80060a0>
10007840:	d8c02b03 	ldbu	r3,172(sp)
10007844:	d8c02785 	stb	r3,158(sp)
10007848:	003abe06 	br	10006344 <__alt_data_end+0xf8006344>

1000784c <__vfprintf_internal>:
1000784c:	00840074 	movhi	r2,4097
10007850:	1098d104 	addi	r2,r2,25412
10007854:	300f883a 	mov	r7,r6
10007858:	280d883a 	mov	r6,r5
1000785c:	200b883a 	mov	r5,r4
10007860:	11000017 	ldw	r4,0(r2)
10007864:	00055701 	jmpi	10005570 <___vfprintf_internal_r>

10007868 <__sbprintf>:
10007868:	2880030b 	ldhu	r2,12(r5)
1000786c:	2ac01917 	ldw	r11,100(r5)
10007870:	2a80038b 	ldhu	r10,14(r5)
10007874:	2a400717 	ldw	r9,28(r5)
10007878:	2a000917 	ldw	r8,36(r5)
1000787c:	defee204 	addi	sp,sp,-1144
10007880:	00c10004 	movi	r3,1024
10007884:	dc011a15 	stw	r16,1128(sp)
10007888:	10bfff4c 	andi	r2,r2,65533
1000788c:	2821883a 	mov	r16,r5
10007890:	d8cb883a 	add	r5,sp,r3
10007894:	dc811c15 	stw	r18,1136(sp)
10007898:	dc411b15 	stw	r17,1132(sp)
1000789c:	dfc11d15 	stw	ra,1140(sp)
100078a0:	2025883a 	mov	r18,r4
100078a4:	d881030d 	sth	r2,1036(sp)
100078a8:	dac11915 	stw	r11,1124(sp)
100078ac:	da81038d 	sth	r10,1038(sp)
100078b0:	da410715 	stw	r9,1052(sp)
100078b4:	da010915 	stw	r8,1060(sp)
100078b8:	dec10015 	stw	sp,1024(sp)
100078bc:	dec10415 	stw	sp,1040(sp)
100078c0:	d8c10215 	stw	r3,1032(sp)
100078c4:	d8c10515 	stw	r3,1044(sp)
100078c8:	d8010615 	stw	zero,1048(sp)
100078cc:	00055700 	call	10005570 <___vfprintf_internal_r>
100078d0:	1023883a 	mov	r17,r2
100078d4:	10000416 	blt	r2,zero,100078e8 <__sbprintf+0x80>
100078d8:	d9410004 	addi	r5,sp,1024
100078dc:	9009883a 	mov	r4,r18
100078e0:	00095440 	call	10009544 <_fflush_r>
100078e4:	10000d1e 	bne	r2,zero,1000791c <__sbprintf+0xb4>
100078e8:	d881030b 	ldhu	r2,1036(sp)
100078ec:	1080100c 	andi	r2,r2,64
100078f0:	10000326 	beq	r2,zero,10007900 <__sbprintf+0x98>
100078f4:	8080030b 	ldhu	r2,12(r16)
100078f8:	10801014 	ori	r2,r2,64
100078fc:	8080030d 	sth	r2,12(r16)
10007900:	8805883a 	mov	r2,r17
10007904:	dfc11d17 	ldw	ra,1140(sp)
10007908:	dc811c17 	ldw	r18,1136(sp)
1000790c:	dc411b17 	ldw	r17,1132(sp)
10007910:	dc011a17 	ldw	r16,1128(sp)
10007914:	dec11e04 	addi	sp,sp,1144
10007918:	f800283a 	ret
1000791c:	047fffc4 	movi	r17,-1
10007920:	003ff106 	br	100078e8 <__alt_data_end+0xf80078e8>

10007924 <__swsetup_r>:
10007924:	00840074 	movhi	r2,4097
10007928:	defffd04 	addi	sp,sp,-12
1000792c:	1098d104 	addi	r2,r2,25412
10007930:	dc400115 	stw	r17,4(sp)
10007934:	2023883a 	mov	r17,r4
10007938:	11000017 	ldw	r4,0(r2)
1000793c:	dc000015 	stw	r16,0(sp)
10007940:	dfc00215 	stw	ra,8(sp)
10007944:	2821883a 	mov	r16,r5
10007948:	20000226 	beq	r4,zero,10007954 <__swsetup_r+0x30>
1000794c:	20800e17 	ldw	r2,56(r4)
10007950:	10003126 	beq	r2,zero,10007a18 <__swsetup_r+0xf4>
10007954:	8080030b 	ldhu	r2,12(r16)
10007958:	10c0020c 	andi	r3,r2,8
1000795c:	1009883a 	mov	r4,r2
10007960:	18000f26 	beq	r3,zero,100079a0 <__swsetup_r+0x7c>
10007964:	80c00417 	ldw	r3,16(r16)
10007968:	18001526 	beq	r3,zero,100079c0 <__swsetup_r+0x9c>
1000796c:	1100004c 	andi	r4,r2,1
10007970:	20001c1e 	bne	r4,zero,100079e4 <__swsetup_r+0xc0>
10007974:	1080008c 	andi	r2,r2,2
10007978:	1000291e 	bne	r2,zero,10007a20 <__swsetup_r+0xfc>
1000797c:	80800517 	ldw	r2,20(r16)
10007980:	80800215 	stw	r2,8(r16)
10007984:	18001c26 	beq	r3,zero,100079f8 <__swsetup_r+0xd4>
10007988:	0005883a 	mov	r2,zero
1000798c:	dfc00217 	ldw	ra,8(sp)
10007990:	dc400117 	ldw	r17,4(sp)
10007994:	dc000017 	ldw	r16,0(sp)
10007998:	dec00304 	addi	sp,sp,12
1000799c:	f800283a 	ret
100079a0:	2080040c 	andi	r2,r4,16
100079a4:	10002e26 	beq	r2,zero,10007a60 <__swsetup_r+0x13c>
100079a8:	2080010c 	andi	r2,r4,4
100079ac:	10001e1e 	bne	r2,zero,10007a28 <__swsetup_r+0x104>
100079b0:	80c00417 	ldw	r3,16(r16)
100079b4:	20800214 	ori	r2,r4,8
100079b8:	8080030d 	sth	r2,12(r16)
100079bc:	183feb1e 	bne	r3,zero,1000796c <__alt_data_end+0xf800796c>
100079c0:	1100a00c 	andi	r4,r2,640
100079c4:	01408004 	movi	r5,512
100079c8:	217fe826 	beq	r4,r5,1000796c <__alt_data_end+0xf800796c>
100079cc:	800b883a 	mov	r5,r16
100079d0:	8809883a 	mov	r4,r17
100079d4:	000a4e00 	call	1000a4e0 <__smakebuf_r>
100079d8:	8080030b 	ldhu	r2,12(r16)
100079dc:	80c00417 	ldw	r3,16(r16)
100079e0:	003fe206 	br	1000796c <__alt_data_end+0xf800796c>
100079e4:	80800517 	ldw	r2,20(r16)
100079e8:	80000215 	stw	zero,8(r16)
100079ec:	0085c83a 	sub	r2,zero,r2
100079f0:	80800615 	stw	r2,24(r16)
100079f4:	183fe41e 	bne	r3,zero,10007988 <__alt_data_end+0xf8007988>
100079f8:	80c0030b 	ldhu	r3,12(r16)
100079fc:	0005883a 	mov	r2,zero
10007a00:	1900200c 	andi	r4,r3,128
10007a04:	203fe126 	beq	r4,zero,1000798c <__alt_data_end+0xf800798c>
10007a08:	18c01014 	ori	r3,r3,64
10007a0c:	80c0030d 	sth	r3,12(r16)
10007a10:	00bfffc4 	movi	r2,-1
10007a14:	003fdd06 	br	1000798c <__alt_data_end+0xf800798c>
10007a18:	00099300 	call	10009930 <__sinit>
10007a1c:	003fcd06 	br	10007954 <__alt_data_end+0xf8007954>
10007a20:	0005883a 	mov	r2,zero
10007a24:	003fd606 	br	10007980 <__alt_data_end+0xf8007980>
10007a28:	81400c17 	ldw	r5,48(r16)
10007a2c:	28000626 	beq	r5,zero,10007a48 <__swsetup_r+0x124>
10007a30:	80801004 	addi	r2,r16,64
10007a34:	28800326 	beq	r5,r2,10007a44 <__swsetup_r+0x120>
10007a38:	8809883a 	mov	r4,r17
10007a3c:	0009aa40 	call	10009aa4 <_free_r>
10007a40:	8100030b 	ldhu	r4,12(r16)
10007a44:	80000c15 	stw	zero,48(r16)
10007a48:	80c00417 	ldw	r3,16(r16)
10007a4c:	00bff6c4 	movi	r2,-37
10007a50:	1108703a 	and	r4,r2,r4
10007a54:	80000115 	stw	zero,4(r16)
10007a58:	80c00015 	stw	r3,0(r16)
10007a5c:	003fd506 	br	100079b4 <__alt_data_end+0xf80079b4>
10007a60:	00800244 	movi	r2,9
10007a64:	88800015 	stw	r2,0(r17)
10007a68:	20801014 	ori	r2,r4,64
10007a6c:	8080030d 	sth	r2,12(r16)
10007a70:	00bfffc4 	movi	r2,-1
10007a74:	003fc506 	br	1000798c <__alt_data_end+0xf800798c>

10007a78 <quorem>:
10007a78:	defff204 	addi	sp,sp,-56
10007a7c:	ddc00b15 	stw	r23,44(sp)
10007a80:	20800417 	ldw	r2,16(r4)
10007a84:	2dc00417 	ldw	r23,16(r5)
10007a88:	dfc00d15 	stw	ra,52(sp)
10007a8c:	df000c15 	stw	fp,48(sp)
10007a90:	dd800a15 	stw	r22,40(sp)
10007a94:	dd400915 	stw	r21,36(sp)
10007a98:	dd000815 	stw	r20,32(sp)
10007a9c:	dcc00715 	stw	r19,28(sp)
10007aa0:	dc800615 	stw	r18,24(sp)
10007aa4:	dc400515 	stw	r17,20(sp)
10007aa8:	dc000415 	stw	r16,16(sp)
10007aac:	15c07a16 	blt	r2,r23,10007c98 <quorem+0x220>
10007ab0:	bdffffc4 	addi	r23,r23,-1
10007ab4:	bde9883a 	add	r20,r23,r23
10007ab8:	28c00504 	addi	r3,r5,20
10007abc:	a529883a 	add	r20,r20,r20
10007ac0:	1d39883a 	add	fp,r3,r20
10007ac4:	24c00504 	addi	r19,r4,20
10007ac8:	d9400215 	stw	r5,8(sp)
10007acc:	9d29883a 	add	r20,r19,r20
10007ad0:	e1400017 	ldw	r5,0(fp)
10007ad4:	d9000015 	stw	r4,0(sp)
10007ad8:	a1000017 	ldw	r4,0(r20)
10007adc:	29400044 	addi	r5,r5,1
10007ae0:	d8c00115 	stw	r3,4(sp)
10007ae4:	dd000315 	stw	r20,12(sp)
10007ae8:	00045380 	call	10004538 <__udivsi3>
10007aec:	1025883a 	mov	r18,r2
10007af0:	10003026 	beq	r2,zero,10007bb4 <quorem+0x13c>
10007af4:	dc400117 	ldw	r17,4(sp)
10007af8:	9829883a 	mov	r20,r19
10007afc:	002d883a 	mov	r22,zero
10007b00:	0021883a 	mov	r16,zero
10007b04:	8d400017 	ldw	r21,0(r17)
10007b08:	900b883a 	mov	r5,r18
10007b0c:	8c400104 	addi	r17,r17,4
10007b10:	a93fffcc 	andi	r4,r21,65535
10007b14:	00052a00 	call	100052a0 <__mulsi3>
10007b18:	a808d43a 	srli	r4,r21,16
10007b1c:	900b883a 	mov	r5,r18
10007b20:	15ad883a 	add	r22,r2,r22
10007b24:	00052a00 	call	100052a0 <__mulsi3>
10007b28:	a1000017 	ldw	r4,0(r20)
10007b2c:	b00cd43a 	srli	r6,r22,16
10007b30:	b0ffffcc 	andi	r3,r22,65535
10007b34:	217fffcc 	andi	r5,r4,65535
10007b38:	2c21883a 	add	r16,r5,r16
10007b3c:	80c7c83a 	sub	r3,r16,r3
10007b40:	2008d43a 	srli	r4,r4,16
10007b44:	1185883a 	add	r2,r2,r6
10007b48:	1821d43a 	srai	r16,r3,16
10007b4c:	117fffcc 	andi	r5,r2,65535
10007b50:	2149c83a 	sub	r4,r4,r5
10007b54:	2421883a 	add	r16,r4,r16
10007b58:	8008943a 	slli	r4,r16,16
10007b5c:	18ffffcc 	andi	r3,r3,65535
10007b60:	102cd43a 	srli	r22,r2,16
10007b64:	20c8b03a 	or	r4,r4,r3
10007b68:	a1000015 	stw	r4,0(r20)
10007b6c:	8021d43a 	srai	r16,r16,16
10007b70:	a5000104 	addi	r20,r20,4
10007b74:	e47fe32e 	bgeu	fp,r17,10007b04 <__alt_data_end+0xf8007b04>
10007b78:	d8c00317 	ldw	r3,12(sp)
10007b7c:	18800017 	ldw	r2,0(r3)
10007b80:	10000c1e 	bne	r2,zero,10007bb4 <quorem+0x13c>
10007b84:	18bfff04 	addi	r2,r3,-4
10007b88:	9880082e 	bgeu	r19,r2,10007bac <quorem+0x134>
10007b8c:	18ffff17 	ldw	r3,-4(r3)
10007b90:	18000326 	beq	r3,zero,10007ba0 <quorem+0x128>
10007b94:	00000506 	br	10007bac <quorem+0x134>
10007b98:	10c00017 	ldw	r3,0(r2)
10007b9c:	1800031e 	bne	r3,zero,10007bac <quorem+0x134>
10007ba0:	10bfff04 	addi	r2,r2,-4
10007ba4:	bdffffc4 	addi	r23,r23,-1
10007ba8:	98bffb36 	bltu	r19,r2,10007b98 <__alt_data_end+0xf8007b98>
10007bac:	d8c00017 	ldw	r3,0(sp)
10007bb0:	1dc00415 	stw	r23,16(r3)
10007bb4:	d9400217 	ldw	r5,8(sp)
10007bb8:	d9000017 	ldw	r4,0(sp)
10007bbc:	000bcdc0 	call	1000bcdc <__mcmp>
10007bc0:	10002816 	blt	r2,zero,10007c64 <quorem+0x1ec>
10007bc4:	dc400117 	ldw	r17,4(sp)
10007bc8:	94800044 	addi	r18,r18,1
10007bcc:	980d883a 	mov	r6,r19
10007bd0:	0007883a 	mov	r3,zero
10007bd4:	31000017 	ldw	r4,0(r6)
10007bd8:	89400017 	ldw	r5,0(r17)
10007bdc:	31800104 	addi	r6,r6,4
10007be0:	20bfffcc 	andi	r2,r4,65535
10007be4:	10c7883a 	add	r3,r2,r3
10007be8:	28bfffcc 	andi	r2,r5,65535
10007bec:	1885c83a 	sub	r2,r3,r2
10007bf0:	280ad43a 	srli	r5,r5,16
10007bf4:	2008d43a 	srli	r4,r4,16
10007bf8:	1007d43a 	srai	r3,r2,16
10007bfc:	10bfffcc 	andi	r2,r2,65535
10007c00:	2149c83a 	sub	r4,r4,r5
10007c04:	20c9883a 	add	r4,r4,r3
10007c08:	200a943a 	slli	r5,r4,16
10007c0c:	8c400104 	addi	r17,r17,4
10007c10:	2007d43a 	srai	r3,r4,16
10007c14:	2884b03a 	or	r2,r5,r2
10007c18:	30bfff15 	stw	r2,-4(r6)
10007c1c:	e47fed2e 	bgeu	fp,r17,10007bd4 <__alt_data_end+0xf8007bd4>
10007c20:	bdc5883a 	add	r2,r23,r23
10007c24:	1085883a 	add	r2,r2,r2
10007c28:	9887883a 	add	r3,r19,r2
10007c2c:	18800017 	ldw	r2,0(r3)
10007c30:	10000c1e 	bne	r2,zero,10007c64 <quorem+0x1ec>
10007c34:	18bfff04 	addi	r2,r3,-4
10007c38:	9880082e 	bgeu	r19,r2,10007c5c <quorem+0x1e4>
10007c3c:	18ffff17 	ldw	r3,-4(r3)
10007c40:	18000326 	beq	r3,zero,10007c50 <quorem+0x1d8>
10007c44:	00000506 	br	10007c5c <quorem+0x1e4>
10007c48:	10c00017 	ldw	r3,0(r2)
10007c4c:	1800031e 	bne	r3,zero,10007c5c <quorem+0x1e4>
10007c50:	10bfff04 	addi	r2,r2,-4
10007c54:	bdffffc4 	addi	r23,r23,-1
10007c58:	98bffb36 	bltu	r19,r2,10007c48 <__alt_data_end+0xf8007c48>
10007c5c:	d8c00017 	ldw	r3,0(sp)
10007c60:	1dc00415 	stw	r23,16(r3)
10007c64:	9005883a 	mov	r2,r18
10007c68:	dfc00d17 	ldw	ra,52(sp)
10007c6c:	df000c17 	ldw	fp,48(sp)
10007c70:	ddc00b17 	ldw	r23,44(sp)
10007c74:	dd800a17 	ldw	r22,40(sp)
10007c78:	dd400917 	ldw	r21,36(sp)
10007c7c:	dd000817 	ldw	r20,32(sp)
10007c80:	dcc00717 	ldw	r19,28(sp)
10007c84:	dc800617 	ldw	r18,24(sp)
10007c88:	dc400517 	ldw	r17,20(sp)
10007c8c:	dc000417 	ldw	r16,16(sp)
10007c90:	dec00e04 	addi	sp,sp,56
10007c94:	f800283a 	ret
10007c98:	0005883a 	mov	r2,zero
10007c9c:	003ff206 	br	10007c68 <__alt_data_end+0xf8007c68>

10007ca0 <_dtoa_r>:
10007ca0:	20801017 	ldw	r2,64(r4)
10007ca4:	deffde04 	addi	sp,sp,-136
10007ca8:	df002015 	stw	fp,128(sp)
10007cac:	dcc01b15 	stw	r19,108(sp)
10007cb0:	dc801a15 	stw	r18,104(sp)
10007cb4:	dc401915 	stw	r17,100(sp)
10007cb8:	dc001815 	stw	r16,96(sp)
10007cbc:	dfc02115 	stw	ra,132(sp)
10007cc0:	ddc01f15 	stw	r23,124(sp)
10007cc4:	dd801e15 	stw	r22,120(sp)
10007cc8:	dd401d15 	stw	r21,116(sp)
10007ccc:	dd001c15 	stw	r20,112(sp)
10007cd0:	d9c00315 	stw	r7,12(sp)
10007cd4:	2039883a 	mov	fp,r4
10007cd8:	3023883a 	mov	r17,r6
10007cdc:	2825883a 	mov	r18,r5
10007ce0:	dc002417 	ldw	r16,144(sp)
10007ce4:	3027883a 	mov	r19,r6
10007ce8:	10000826 	beq	r2,zero,10007d0c <_dtoa_r+0x6c>
10007cec:	21801117 	ldw	r6,68(r4)
10007cf0:	00c00044 	movi	r3,1
10007cf4:	100b883a 	mov	r5,r2
10007cf8:	1986983a 	sll	r3,r3,r6
10007cfc:	11800115 	stw	r6,4(r2)
10007d00:	10c00215 	stw	r3,8(r2)
10007d04:	000b4000 	call	1000b400 <_Bfree>
10007d08:	e0001015 	stw	zero,64(fp)
10007d0c:	88002e16 	blt	r17,zero,10007dc8 <_dtoa_r+0x128>
10007d10:	80000015 	stw	zero,0(r16)
10007d14:	889ffc2c 	andhi	r2,r17,32752
10007d18:	00dffc34 	movhi	r3,32752
10007d1c:	10c01c26 	beq	r2,r3,10007d90 <_dtoa_r+0xf0>
10007d20:	000d883a 	mov	r6,zero
10007d24:	000f883a 	mov	r7,zero
10007d28:	9009883a 	mov	r4,r18
10007d2c:	980b883a 	mov	r5,r19
10007d30:	00102100 	call	10010210 <__eqdf2>
10007d34:	10002b1e 	bne	r2,zero,10007de4 <_dtoa_r+0x144>
10007d38:	d9c02317 	ldw	r7,140(sp)
10007d3c:	00800044 	movi	r2,1
10007d40:	38800015 	stw	r2,0(r7)
10007d44:	d8802517 	ldw	r2,148(sp)
10007d48:	10019e26 	beq	r2,zero,100083c4 <_dtoa_r+0x724>
10007d4c:	d8c02517 	ldw	r3,148(sp)
10007d50:	00840074 	movhi	r2,4097
10007d54:	1091b644 	addi	r2,r2,18137
10007d58:	18800015 	stw	r2,0(r3)
10007d5c:	10bfffc4 	addi	r2,r2,-1
10007d60:	dfc02117 	ldw	ra,132(sp)
10007d64:	df002017 	ldw	fp,128(sp)
10007d68:	ddc01f17 	ldw	r23,124(sp)
10007d6c:	dd801e17 	ldw	r22,120(sp)
10007d70:	dd401d17 	ldw	r21,116(sp)
10007d74:	dd001c17 	ldw	r20,112(sp)
10007d78:	dcc01b17 	ldw	r19,108(sp)
10007d7c:	dc801a17 	ldw	r18,104(sp)
10007d80:	dc401917 	ldw	r17,100(sp)
10007d84:	dc001817 	ldw	r16,96(sp)
10007d88:	dec02204 	addi	sp,sp,136
10007d8c:	f800283a 	ret
10007d90:	d8c02317 	ldw	r3,140(sp)
10007d94:	0089c3c4 	movi	r2,9999
10007d98:	18800015 	stw	r2,0(r3)
10007d9c:	90017726 	beq	r18,zero,1000837c <_dtoa_r+0x6dc>
10007da0:	00840074 	movhi	r2,4097
10007da4:	1091c204 	addi	r2,r2,18184
10007da8:	d9002517 	ldw	r4,148(sp)
10007dac:	203fec26 	beq	r4,zero,10007d60 <__alt_data_end+0xf8007d60>
10007db0:	10c000c7 	ldb	r3,3(r2)
10007db4:	1801781e 	bne	r3,zero,10008398 <_dtoa_r+0x6f8>
10007db8:	10c000c4 	addi	r3,r2,3
10007dbc:	d9802517 	ldw	r6,148(sp)
10007dc0:	30c00015 	stw	r3,0(r6)
10007dc4:	003fe606 	br	10007d60 <__alt_data_end+0xf8007d60>
10007dc8:	04e00034 	movhi	r19,32768
10007dcc:	9cffffc4 	addi	r19,r19,-1
10007dd0:	00800044 	movi	r2,1
10007dd4:	8ce6703a 	and	r19,r17,r19
10007dd8:	80800015 	stw	r2,0(r16)
10007ddc:	9823883a 	mov	r17,r19
10007de0:	003fcc06 	br	10007d14 <__alt_data_end+0xf8007d14>
10007de4:	d8800204 	addi	r2,sp,8
10007de8:	d8800015 	stw	r2,0(sp)
10007dec:	d9c00104 	addi	r7,sp,4
10007df0:	900b883a 	mov	r5,r18
10007df4:	980d883a 	mov	r6,r19
10007df8:	e009883a 	mov	r4,fp
10007dfc:	8820d53a 	srli	r16,r17,20
10007e00:	000c0a80 	call	1000c0a8 <__d2b>
10007e04:	d8800915 	stw	r2,36(sp)
10007e08:	8001651e 	bne	r16,zero,100083a0 <_dtoa_r+0x700>
10007e0c:	dd800217 	ldw	r22,8(sp)
10007e10:	dc000117 	ldw	r16,4(sp)
10007e14:	00800804 	movi	r2,32
10007e18:	b421883a 	add	r16,r22,r16
10007e1c:	80c10c84 	addi	r3,r16,1074
10007e20:	10c2d10e 	bge	r2,r3,10008968 <_dtoa_r+0xcc8>
10007e24:	00801004 	movi	r2,64
10007e28:	81010484 	addi	r4,r16,1042
10007e2c:	10c7c83a 	sub	r3,r2,r3
10007e30:	9108d83a 	srl	r4,r18,r4
10007e34:	88e2983a 	sll	r17,r17,r3
10007e38:	2448b03a 	or	r4,r4,r17
10007e3c:	00051940 	call	10005194 <__floatunsidf>
10007e40:	017f8434 	movhi	r5,65040
10007e44:	01800044 	movi	r6,1
10007e48:	1009883a 	mov	r4,r2
10007e4c:	194b883a 	add	r5,r3,r5
10007e50:	843fffc4 	addi	r16,r16,-1
10007e54:	d9801115 	stw	r6,68(sp)
10007e58:	000d883a 	mov	r6,zero
10007e5c:	01cffe34 	movhi	r7,16376
10007e60:	0010be00 	call	10010be0 <__subdf3>
10007e64:	0198dbf4 	movhi	r6,25455
10007e68:	01cff4f4 	movhi	r7,16339
10007e6c:	3190d844 	addi	r6,r6,17249
10007e70:	39e1e9c4 	addi	r7,r7,-30809
10007e74:	1009883a 	mov	r4,r2
10007e78:	180b883a 	mov	r5,r3
10007e7c:	00103740 	call	10010374 <__muldf3>
10007e80:	01a2d874 	movhi	r6,35681
10007e84:	01cff1f4 	movhi	r7,16327
10007e88:	31b22cc4 	addi	r6,r6,-14157
10007e8c:	39e28a04 	addi	r7,r7,-30168
10007e90:	180b883a 	mov	r5,r3
10007e94:	1009883a 	mov	r4,r2
10007e98:	000f9640 	call	1000f964 <__adddf3>
10007e9c:	8009883a 	mov	r4,r16
10007ea0:	1029883a 	mov	r20,r2
10007ea4:	1823883a 	mov	r17,r3
10007ea8:	00050b80 	call	100050b8 <__floatsidf>
10007eac:	019427f4 	movhi	r6,20639
10007eb0:	01cff4f4 	movhi	r7,16339
10007eb4:	319e7ec4 	addi	r6,r6,31227
10007eb8:	39d104c4 	addi	r7,r7,17427
10007ebc:	1009883a 	mov	r4,r2
10007ec0:	180b883a 	mov	r5,r3
10007ec4:	00103740 	call	10010374 <__muldf3>
10007ec8:	100d883a 	mov	r6,r2
10007ecc:	180f883a 	mov	r7,r3
10007ed0:	a009883a 	mov	r4,r20
10007ed4:	880b883a 	mov	r5,r17
10007ed8:	000f9640 	call	1000f964 <__adddf3>
10007edc:	1009883a 	mov	r4,r2
10007ee0:	180b883a 	mov	r5,r3
10007ee4:	1029883a 	mov	r20,r2
10007ee8:	1823883a 	mov	r17,r3
10007eec:	00114dc0 	call	100114dc <__fixdfsi>
10007ef0:	000d883a 	mov	r6,zero
10007ef4:	000f883a 	mov	r7,zero
10007ef8:	a009883a 	mov	r4,r20
10007efc:	880b883a 	mov	r5,r17
10007f00:	d8800515 	stw	r2,20(sp)
10007f04:	0004fc40 	call	10004fc4 <__ledf2>
10007f08:	10028716 	blt	r2,zero,10008928 <_dtoa_r+0xc88>
10007f0c:	d8c00517 	ldw	r3,20(sp)
10007f10:	00800584 	movi	r2,22
10007f14:	10c27536 	bltu	r2,r3,100088ec <_dtoa_r+0xc4c>
10007f18:	180490fa 	slli	r2,r3,3
10007f1c:	00c40074 	movhi	r3,4097
10007f20:	18d1dd04 	addi	r3,r3,18292
10007f24:	1885883a 	add	r2,r3,r2
10007f28:	11000017 	ldw	r4,0(r2)
10007f2c:	11400117 	ldw	r5,4(r2)
10007f30:	900d883a 	mov	r6,r18
10007f34:	980f883a 	mov	r7,r19
10007f38:	00102980 	call	10010298 <__gedf2>
10007f3c:	00828d0e 	bge	zero,r2,10008974 <_dtoa_r+0xcd4>
10007f40:	d9000517 	ldw	r4,20(sp)
10007f44:	d8000e15 	stw	zero,56(sp)
10007f48:	213fffc4 	addi	r4,r4,-1
10007f4c:	d9000515 	stw	r4,20(sp)
10007f50:	b42dc83a 	sub	r22,r22,r16
10007f54:	b5bfffc4 	addi	r22,r22,-1
10007f58:	b0026f16 	blt	r22,zero,10008918 <_dtoa_r+0xc78>
10007f5c:	d8000815 	stw	zero,32(sp)
10007f60:	d9c00517 	ldw	r7,20(sp)
10007f64:	38026416 	blt	r7,zero,100088f8 <_dtoa_r+0xc58>
10007f68:	b1ed883a 	add	r22,r22,r7
10007f6c:	d9c00d15 	stw	r7,52(sp)
10007f70:	d8000a15 	stw	zero,40(sp)
10007f74:	d9800317 	ldw	r6,12(sp)
10007f78:	00800244 	movi	r2,9
10007f7c:	11811436 	bltu	r2,r6,100083d0 <_dtoa_r+0x730>
10007f80:	00800144 	movi	r2,5
10007f84:	1184e10e 	bge	r2,r6,1000930c <_dtoa_r+0x166c>
10007f88:	31bfff04 	addi	r6,r6,-4
10007f8c:	d9800315 	stw	r6,12(sp)
10007f90:	0023883a 	mov	r17,zero
10007f94:	d9800317 	ldw	r6,12(sp)
10007f98:	008000c4 	movi	r2,3
10007f9c:	30836726 	beq	r6,r2,10008d3c <_dtoa_r+0x109c>
10007fa0:	1183410e 	bge	r2,r6,10008ca8 <_dtoa_r+0x1008>
10007fa4:	d9c00317 	ldw	r7,12(sp)
10007fa8:	00800104 	movi	r2,4
10007fac:	38827c26 	beq	r7,r2,100089a0 <_dtoa_r+0xd00>
10007fb0:	00800144 	movi	r2,5
10007fb4:	3884c41e 	bne	r7,r2,100092c8 <_dtoa_r+0x1628>
10007fb8:	00800044 	movi	r2,1
10007fbc:	d8800b15 	stw	r2,44(sp)
10007fc0:	d8c00517 	ldw	r3,20(sp)
10007fc4:	d9002217 	ldw	r4,136(sp)
10007fc8:	1907883a 	add	r3,r3,r4
10007fcc:	19800044 	addi	r6,r3,1
10007fd0:	d8c00c15 	stw	r3,48(sp)
10007fd4:	d9800615 	stw	r6,24(sp)
10007fd8:	0183a40e 	bge	zero,r6,10008e6c <_dtoa_r+0x11cc>
10007fdc:	d9800617 	ldw	r6,24(sp)
10007fe0:	3021883a 	mov	r16,r6
10007fe4:	e0001115 	stw	zero,68(fp)
10007fe8:	008005c4 	movi	r2,23
10007fec:	1184c92e 	bgeu	r2,r6,10009314 <_dtoa_r+0x1674>
10007ff0:	00c00044 	movi	r3,1
10007ff4:	00800104 	movi	r2,4
10007ff8:	1085883a 	add	r2,r2,r2
10007ffc:	11000504 	addi	r4,r2,20
10008000:	180b883a 	mov	r5,r3
10008004:	18c00044 	addi	r3,r3,1
10008008:	313ffb2e 	bgeu	r6,r4,10007ff8 <__alt_data_end+0xf8007ff8>
1000800c:	e1401115 	stw	r5,68(fp)
10008010:	e009883a 	mov	r4,fp
10008014:	000b3580 	call	1000b358 <_Balloc>
10008018:	d8800715 	stw	r2,28(sp)
1000801c:	e0801015 	stw	r2,64(fp)
10008020:	00800384 	movi	r2,14
10008024:	1400f736 	bltu	r2,r16,10008404 <_dtoa_r+0x764>
10008028:	8800f626 	beq	r17,zero,10008404 <_dtoa_r+0x764>
1000802c:	d9c00517 	ldw	r7,20(sp)
10008030:	01c39a0e 	bge	zero,r7,10008e9c <_dtoa_r+0x11fc>
10008034:	388003cc 	andi	r2,r7,15
10008038:	100490fa 	slli	r2,r2,3
1000803c:	382bd13a 	srai	r21,r7,4
10008040:	00c40074 	movhi	r3,4097
10008044:	18d1dd04 	addi	r3,r3,18292
10008048:	1885883a 	add	r2,r3,r2
1000804c:	a8c0040c 	andi	r3,r21,16
10008050:	12400017 	ldw	r9,0(r2)
10008054:	12000117 	ldw	r8,4(r2)
10008058:	18037926 	beq	r3,zero,10008e40 <_dtoa_r+0x11a0>
1000805c:	00840074 	movhi	r2,4097
10008060:	1091d304 	addi	r2,r2,18252
10008064:	11800817 	ldw	r6,32(r2)
10008068:	11c00917 	ldw	r7,36(r2)
1000806c:	9009883a 	mov	r4,r18
10008070:	980b883a 	mov	r5,r19
10008074:	da001715 	stw	r8,92(sp)
10008078:	da401615 	stw	r9,88(sp)
1000807c:	00045f40 	call	100045f4 <__divdf3>
10008080:	da001717 	ldw	r8,92(sp)
10008084:	da401617 	ldw	r9,88(sp)
10008088:	ad4003cc 	andi	r21,r21,15
1000808c:	040000c4 	movi	r16,3
10008090:	1023883a 	mov	r17,r2
10008094:	1829883a 	mov	r20,r3
10008098:	a8001126 	beq	r21,zero,100080e0 <_dtoa_r+0x440>
1000809c:	05c40074 	movhi	r23,4097
100080a0:	bdd1d304 	addi	r23,r23,18252
100080a4:	4805883a 	mov	r2,r9
100080a8:	4007883a 	mov	r3,r8
100080ac:	a980004c 	andi	r6,r21,1
100080b0:	1009883a 	mov	r4,r2
100080b4:	a82bd07a 	srai	r21,r21,1
100080b8:	180b883a 	mov	r5,r3
100080bc:	30000426 	beq	r6,zero,100080d0 <_dtoa_r+0x430>
100080c0:	b9800017 	ldw	r6,0(r23)
100080c4:	b9c00117 	ldw	r7,4(r23)
100080c8:	84000044 	addi	r16,r16,1
100080cc:	00103740 	call	10010374 <__muldf3>
100080d0:	bdc00204 	addi	r23,r23,8
100080d4:	a83ff51e 	bne	r21,zero,100080ac <__alt_data_end+0xf80080ac>
100080d8:	1013883a 	mov	r9,r2
100080dc:	1811883a 	mov	r8,r3
100080e0:	480d883a 	mov	r6,r9
100080e4:	400f883a 	mov	r7,r8
100080e8:	8809883a 	mov	r4,r17
100080ec:	a00b883a 	mov	r5,r20
100080f0:	00045f40 	call	100045f4 <__divdf3>
100080f4:	d8800f15 	stw	r2,60(sp)
100080f8:	d8c01015 	stw	r3,64(sp)
100080fc:	d8c00e17 	ldw	r3,56(sp)
10008100:	18000626 	beq	r3,zero,1000811c <_dtoa_r+0x47c>
10008104:	d9000f17 	ldw	r4,60(sp)
10008108:	d9401017 	ldw	r5,64(sp)
1000810c:	000d883a 	mov	r6,zero
10008110:	01cffc34 	movhi	r7,16368
10008114:	0004fc40 	call	10004fc4 <__ledf2>
10008118:	10040b16 	blt	r2,zero,10009148 <_dtoa_r+0x14a8>
1000811c:	8009883a 	mov	r4,r16
10008120:	00050b80 	call	100050b8 <__floatsidf>
10008124:	d9800f17 	ldw	r6,60(sp)
10008128:	d9c01017 	ldw	r7,64(sp)
1000812c:	1009883a 	mov	r4,r2
10008130:	180b883a 	mov	r5,r3
10008134:	00103740 	call	10010374 <__muldf3>
10008138:	000d883a 	mov	r6,zero
1000813c:	01d00734 	movhi	r7,16412
10008140:	1009883a 	mov	r4,r2
10008144:	180b883a 	mov	r5,r3
10008148:	000f9640 	call	1000f964 <__adddf3>
1000814c:	1021883a 	mov	r16,r2
10008150:	d8800617 	ldw	r2,24(sp)
10008154:	047f3034 	movhi	r17,64704
10008158:	1c63883a 	add	r17,r3,r17
1000815c:	10031826 	beq	r2,zero,10008dc0 <_dtoa_r+0x1120>
10008160:	d8c00517 	ldw	r3,20(sp)
10008164:	db000617 	ldw	r12,24(sp)
10008168:	d8c01315 	stw	r3,76(sp)
1000816c:	d9000b17 	ldw	r4,44(sp)
10008170:	20038f26 	beq	r4,zero,10008fb0 <_dtoa_r+0x1310>
10008174:	60bfffc4 	addi	r2,r12,-1
10008178:	100490fa 	slli	r2,r2,3
1000817c:	00c40074 	movhi	r3,4097
10008180:	18d1dd04 	addi	r3,r3,18292
10008184:	1885883a 	add	r2,r3,r2
10008188:	11800017 	ldw	r6,0(r2)
1000818c:	11c00117 	ldw	r7,4(r2)
10008190:	d8800717 	ldw	r2,28(sp)
10008194:	0009883a 	mov	r4,zero
10008198:	014ff834 	movhi	r5,16352
1000819c:	db001615 	stw	r12,88(sp)
100081a0:	15c00044 	addi	r23,r2,1
100081a4:	00045f40 	call	100045f4 <__divdf3>
100081a8:	800d883a 	mov	r6,r16
100081ac:	880f883a 	mov	r7,r17
100081b0:	1009883a 	mov	r4,r2
100081b4:	180b883a 	mov	r5,r3
100081b8:	0010be00 	call	10010be0 <__subdf3>
100081bc:	d9401017 	ldw	r5,64(sp)
100081c0:	d9000f17 	ldw	r4,60(sp)
100081c4:	102b883a 	mov	r21,r2
100081c8:	d8c01215 	stw	r3,72(sp)
100081cc:	00114dc0 	call	100114dc <__fixdfsi>
100081d0:	1009883a 	mov	r4,r2
100081d4:	1029883a 	mov	r20,r2
100081d8:	00050b80 	call	100050b8 <__floatsidf>
100081dc:	d9000f17 	ldw	r4,60(sp)
100081e0:	d9401017 	ldw	r5,64(sp)
100081e4:	100d883a 	mov	r6,r2
100081e8:	180f883a 	mov	r7,r3
100081ec:	0010be00 	call	10010be0 <__subdf3>
100081f0:	1823883a 	mov	r17,r3
100081f4:	d8c00717 	ldw	r3,28(sp)
100081f8:	d9401217 	ldw	r5,72(sp)
100081fc:	a2000c04 	addi	r8,r20,48
10008200:	1021883a 	mov	r16,r2
10008204:	1a000005 	stb	r8,0(r3)
10008208:	800d883a 	mov	r6,r16
1000820c:	880f883a 	mov	r7,r17
10008210:	a809883a 	mov	r4,r21
10008214:	4029883a 	mov	r20,r8
10008218:	00102980 	call	10010298 <__gedf2>
1000821c:	00841d16 	blt	zero,r2,10009294 <_dtoa_r+0x15f4>
10008220:	800d883a 	mov	r6,r16
10008224:	880f883a 	mov	r7,r17
10008228:	0009883a 	mov	r4,zero
1000822c:	014ffc34 	movhi	r5,16368
10008230:	0010be00 	call	10010be0 <__subdf3>
10008234:	d9401217 	ldw	r5,72(sp)
10008238:	100d883a 	mov	r6,r2
1000823c:	180f883a 	mov	r7,r3
10008240:	a809883a 	mov	r4,r21
10008244:	00102980 	call	10010298 <__gedf2>
10008248:	db001617 	ldw	r12,88(sp)
1000824c:	00840e16 	blt	zero,r2,10009288 <_dtoa_r+0x15e8>
10008250:	00800044 	movi	r2,1
10008254:	13006b0e 	bge	r2,r12,10008404 <_dtoa_r+0x764>
10008258:	d9000717 	ldw	r4,28(sp)
1000825c:	dd800f15 	stw	r22,60(sp)
10008260:	dcc01015 	stw	r19,64(sp)
10008264:	2319883a 	add	r12,r4,r12
10008268:	dcc01217 	ldw	r19,72(sp)
1000826c:	602d883a 	mov	r22,r12
10008270:	dc801215 	stw	r18,72(sp)
10008274:	b825883a 	mov	r18,r23
10008278:	00000906 	br	100082a0 <_dtoa_r+0x600>
1000827c:	0010be00 	call	10010be0 <__subdf3>
10008280:	a80d883a 	mov	r6,r21
10008284:	980f883a 	mov	r7,r19
10008288:	1009883a 	mov	r4,r2
1000828c:	180b883a 	mov	r5,r3
10008290:	0004fc40 	call	10004fc4 <__ledf2>
10008294:	1003e816 	blt	r2,zero,10009238 <_dtoa_r+0x1598>
10008298:	b825883a 	mov	r18,r23
1000829c:	bd83e926 	beq	r23,r22,10009244 <_dtoa_r+0x15a4>
100082a0:	a809883a 	mov	r4,r21
100082a4:	980b883a 	mov	r5,r19
100082a8:	000d883a 	mov	r6,zero
100082ac:	01d00934 	movhi	r7,16420
100082b0:	00103740 	call	10010374 <__muldf3>
100082b4:	000d883a 	mov	r6,zero
100082b8:	01d00934 	movhi	r7,16420
100082bc:	8009883a 	mov	r4,r16
100082c0:	880b883a 	mov	r5,r17
100082c4:	102b883a 	mov	r21,r2
100082c8:	1827883a 	mov	r19,r3
100082cc:	00103740 	call	10010374 <__muldf3>
100082d0:	180b883a 	mov	r5,r3
100082d4:	1009883a 	mov	r4,r2
100082d8:	1821883a 	mov	r16,r3
100082dc:	1023883a 	mov	r17,r2
100082e0:	00114dc0 	call	100114dc <__fixdfsi>
100082e4:	1009883a 	mov	r4,r2
100082e8:	1029883a 	mov	r20,r2
100082ec:	00050b80 	call	100050b8 <__floatsidf>
100082f0:	8809883a 	mov	r4,r17
100082f4:	800b883a 	mov	r5,r16
100082f8:	100d883a 	mov	r6,r2
100082fc:	180f883a 	mov	r7,r3
10008300:	0010be00 	call	10010be0 <__subdf3>
10008304:	a5000c04 	addi	r20,r20,48
10008308:	a80d883a 	mov	r6,r21
1000830c:	980f883a 	mov	r7,r19
10008310:	1009883a 	mov	r4,r2
10008314:	180b883a 	mov	r5,r3
10008318:	95000005 	stb	r20,0(r18)
1000831c:	1021883a 	mov	r16,r2
10008320:	1823883a 	mov	r17,r3
10008324:	0004fc40 	call	10004fc4 <__ledf2>
10008328:	bdc00044 	addi	r23,r23,1
1000832c:	800d883a 	mov	r6,r16
10008330:	880f883a 	mov	r7,r17
10008334:	0009883a 	mov	r4,zero
10008338:	014ffc34 	movhi	r5,16368
1000833c:	103fcf0e 	bge	r2,zero,1000827c <__alt_data_end+0xf800827c>
10008340:	d8c01317 	ldw	r3,76(sp)
10008344:	d8c00515 	stw	r3,20(sp)
10008348:	d9400917 	ldw	r5,36(sp)
1000834c:	e009883a 	mov	r4,fp
10008350:	000b4000 	call	1000b400 <_Bfree>
10008354:	d9000517 	ldw	r4,20(sp)
10008358:	d9802317 	ldw	r6,140(sp)
1000835c:	d9c02517 	ldw	r7,148(sp)
10008360:	b8000005 	stb	zero,0(r23)
10008364:	20800044 	addi	r2,r4,1
10008368:	30800015 	stw	r2,0(r6)
1000836c:	3802aa26 	beq	r7,zero,10008e18 <_dtoa_r+0x1178>
10008370:	3dc00015 	stw	r23,0(r7)
10008374:	d8800717 	ldw	r2,28(sp)
10008378:	003e7906 	br	10007d60 <__alt_data_end+0xf8007d60>
1000837c:	00800434 	movhi	r2,16
10008380:	10bfffc4 	addi	r2,r2,-1
10008384:	88a2703a 	and	r17,r17,r2
10008388:	883e851e 	bne	r17,zero,10007da0 <__alt_data_end+0xf8007da0>
1000838c:	00840074 	movhi	r2,4097
10008390:	1091bf04 	addi	r2,r2,18172
10008394:	003e8406 	br	10007da8 <__alt_data_end+0xf8007da8>
10008398:	10c00204 	addi	r3,r2,8
1000839c:	003e8706 	br	10007dbc <__alt_data_end+0xf8007dbc>
100083a0:	01400434 	movhi	r5,16
100083a4:	297fffc4 	addi	r5,r5,-1
100083a8:	994a703a 	and	r5,r19,r5
100083ac:	9009883a 	mov	r4,r18
100083b0:	843f0044 	addi	r16,r16,-1023
100083b4:	294ffc34 	orhi	r5,r5,16368
100083b8:	dd800217 	ldw	r22,8(sp)
100083bc:	d8001115 	stw	zero,68(sp)
100083c0:	003ea506 	br	10007e58 <__alt_data_end+0xf8007e58>
100083c4:	00840074 	movhi	r2,4097
100083c8:	1091b604 	addi	r2,r2,18136
100083cc:	003e6406 	br	10007d60 <__alt_data_end+0xf8007d60>
100083d0:	e0001115 	stw	zero,68(fp)
100083d4:	000b883a 	mov	r5,zero
100083d8:	e009883a 	mov	r4,fp
100083dc:	000b3580 	call	1000b358 <_Balloc>
100083e0:	01bfffc4 	movi	r6,-1
100083e4:	01c00044 	movi	r7,1
100083e8:	d8800715 	stw	r2,28(sp)
100083ec:	d9800c15 	stw	r6,48(sp)
100083f0:	e0801015 	stw	r2,64(fp)
100083f4:	d8000315 	stw	zero,12(sp)
100083f8:	d9c00b15 	stw	r7,44(sp)
100083fc:	d9800615 	stw	r6,24(sp)
10008400:	d8002215 	stw	zero,136(sp)
10008404:	d8800117 	ldw	r2,4(sp)
10008408:	10008916 	blt	r2,zero,10008630 <_dtoa_r+0x990>
1000840c:	d9000517 	ldw	r4,20(sp)
10008410:	00c00384 	movi	r3,14
10008414:	19008616 	blt	r3,r4,10008630 <_dtoa_r+0x990>
10008418:	200490fa 	slli	r2,r4,3
1000841c:	00c40074 	movhi	r3,4097
10008420:	d9802217 	ldw	r6,136(sp)
10008424:	18d1dd04 	addi	r3,r3,18292
10008428:	1885883a 	add	r2,r3,r2
1000842c:	14000017 	ldw	r16,0(r2)
10008430:	14400117 	ldw	r17,4(r2)
10008434:	30016316 	blt	r6,zero,100089c4 <_dtoa_r+0xd24>
10008438:	800d883a 	mov	r6,r16
1000843c:	880f883a 	mov	r7,r17
10008440:	9009883a 	mov	r4,r18
10008444:	980b883a 	mov	r5,r19
10008448:	00045f40 	call	100045f4 <__divdf3>
1000844c:	180b883a 	mov	r5,r3
10008450:	1009883a 	mov	r4,r2
10008454:	00114dc0 	call	100114dc <__fixdfsi>
10008458:	1009883a 	mov	r4,r2
1000845c:	102b883a 	mov	r21,r2
10008460:	00050b80 	call	100050b8 <__floatsidf>
10008464:	800d883a 	mov	r6,r16
10008468:	880f883a 	mov	r7,r17
1000846c:	1009883a 	mov	r4,r2
10008470:	180b883a 	mov	r5,r3
10008474:	00103740 	call	10010374 <__muldf3>
10008478:	100d883a 	mov	r6,r2
1000847c:	180f883a 	mov	r7,r3
10008480:	9009883a 	mov	r4,r18
10008484:	980b883a 	mov	r5,r19
10008488:	0010be00 	call	10010be0 <__subdf3>
1000848c:	d9c00717 	ldw	r7,28(sp)
10008490:	1009883a 	mov	r4,r2
10008494:	a8800c04 	addi	r2,r21,48
10008498:	38800005 	stb	r2,0(r7)
1000849c:	3dc00044 	addi	r23,r7,1
100084a0:	d9c00617 	ldw	r7,24(sp)
100084a4:	01800044 	movi	r6,1
100084a8:	180b883a 	mov	r5,r3
100084ac:	2005883a 	mov	r2,r4
100084b0:	39803826 	beq	r7,r6,10008594 <_dtoa_r+0x8f4>
100084b4:	000d883a 	mov	r6,zero
100084b8:	01d00934 	movhi	r7,16420
100084bc:	00103740 	call	10010374 <__muldf3>
100084c0:	000d883a 	mov	r6,zero
100084c4:	000f883a 	mov	r7,zero
100084c8:	1009883a 	mov	r4,r2
100084cc:	180b883a 	mov	r5,r3
100084d0:	1025883a 	mov	r18,r2
100084d4:	1827883a 	mov	r19,r3
100084d8:	00102100 	call	10010210 <__eqdf2>
100084dc:	103f9a26 	beq	r2,zero,10008348 <__alt_data_end+0xf8008348>
100084e0:	d9c00617 	ldw	r7,24(sp)
100084e4:	d8c00717 	ldw	r3,28(sp)
100084e8:	b829883a 	mov	r20,r23
100084ec:	38bfffc4 	addi	r2,r7,-1
100084f0:	18ad883a 	add	r22,r3,r2
100084f4:	00000a06 	br	10008520 <_dtoa_r+0x880>
100084f8:	00103740 	call	10010374 <__muldf3>
100084fc:	000d883a 	mov	r6,zero
10008500:	000f883a 	mov	r7,zero
10008504:	1009883a 	mov	r4,r2
10008508:	180b883a 	mov	r5,r3
1000850c:	1025883a 	mov	r18,r2
10008510:	1827883a 	mov	r19,r3
10008514:	b829883a 	mov	r20,r23
10008518:	00102100 	call	10010210 <__eqdf2>
1000851c:	103f8a26 	beq	r2,zero,10008348 <__alt_data_end+0xf8008348>
10008520:	800d883a 	mov	r6,r16
10008524:	880f883a 	mov	r7,r17
10008528:	9009883a 	mov	r4,r18
1000852c:	980b883a 	mov	r5,r19
10008530:	00045f40 	call	100045f4 <__divdf3>
10008534:	180b883a 	mov	r5,r3
10008538:	1009883a 	mov	r4,r2
1000853c:	00114dc0 	call	100114dc <__fixdfsi>
10008540:	1009883a 	mov	r4,r2
10008544:	102b883a 	mov	r21,r2
10008548:	00050b80 	call	100050b8 <__floatsidf>
1000854c:	800d883a 	mov	r6,r16
10008550:	880f883a 	mov	r7,r17
10008554:	1009883a 	mov	r4,r2
10008558:	180b883a 	mov	r5,r3
1000855c:	00103740 	call	10010374 <__muldf3>
10008560:	100d883a 	mov	r6,r2
10008564:	180f883a 	mov	r7,r3
10008568:	9009883a 	mov	r4,r18
1000856c:	980b883a 	mov	r5,r19
10008570:	0010be00 	call	10010be0 <__subdf3>
10008574:	aa000c04 	addi	r8,r21,48
10008578:	a2000005 	stb	r8,0(r20)
1000857c:	000d883a 	mov	r6,zero
10008580:	01d00934 	movhi	r7,16420
10008584:	1009883a 	mov	r4,r2
10008588:	180b883a 	mov	r5,r3
1000858c:	a5c00044 	addi	r23,r20,1
10008590:	b53fd91e 	bne	r22,r20,100084f8 <__alt_data_end+0xf80084f8>
10008594:	100d883a 	mov	r6,r2
10008598:	180f883a 	mov	r7,r3
1000859c:	1009883a 	mov	r4,r2
100085a0:	180b883a 	mov	r5,r3
100085a4:	000f9640 	call	1000f964 <__adddf3>
100085a8:	100d883a 	mov	r6,r2
100085ac:	180f883a 	mov	r7,r3
100085b0:	8009883a 	mov	r4,r16
100085b4:	880b883a 	mov	r5,r17
100085b8:	1027883a 	mov	r19,r2
100085bc:	1825883a 	mov	r18,r3
100085c0:	0004fc40 	call	10004fc4 <__ledf2>
100085c4:	10000816 	blt	r2,zero,100085e8 <_dtoa_r+0x948>
100085c8:	980d883a 	mov	r6,r19
100085cc:	900f883a 	mov	r7,r18
100085d0:	8009883a 	mov	r4,r16
100085d4:	880b883a 	mov	r5,r17
100085d8:	00102100 	call	10010210 <__eqdf2>
100085dc:	103f5a1e 	bne	r2,zero,10008348 <__alt_data_end+0xf8008348>
100085e0:	ad40004c 	andi	r21,r21,1
100085e4:	a83f5826 	beq	r21,zero,10008348 <__alt_data_end+0xf8008348>
100085e8:	bd3fffc3 	ldbu	r20,-1(r23)
100085ec:	b8bfffc4 	addi	r2,r23,-1
100085f0:	1007883a 	mov	r3,r2
100085f4:	01400e44 	movi	r5,57
100085f8:	d9800717 	ldw	r6,28(sp)
100085fc:	00000506 	br	10008614 <_dtoa_r+0x974>
10008600:	18ffffc4 	addi	r3,r3,-1
10008604:	11824726 	beq	r2,r6,10008f24 <_dtoa_r+0x1284>
10008608:	1d000003 	ldbu	r20,0(r3)
1000860c:	102f883a 	mov	r23,r2
10008610:	10bfffc4 	addi	r2,r2,-1
10008614:	a1003fcc 	andi	r4,r20,255
10008618:	2100201c 	xori	r4,r4,128
1000861c:	213fe004 	addi	r4,r4,-128
10008620:	217ff726 	beq	r4,r5,10008600 <__alt_data_end+0xf8008600>
10008624:	a2000044 	addi	r8,r20,1
10008628:	12000005 	stb	r8,0(r2)
1000862c:	003f4606 	br	10008348 <__alt_data_end+0xf8008348>
10008630:	d9000b17 	ldw	r4,44(sp)
10008634:	2000c826 	beq	r4,zero,10008958 <_dtoa_r+0xcb8>
10008638:	d9800317 	ldw	r6,12(sp)
1000863c:	00c00044 	movi	r3,1
10008640:	1980f90e 	bge	r3,r6,10008a28 <_dtoa_r+0xd88>
10008644:	d8800617 	ldw	r2,24(sp)
10008648:	d8c00a17 	ldw	r3,40(sp)
1000864c:	157fffc4 	addi	r21,r2,-1
10008650:	1d41f316 	blt	r3,r21,10008e20 <_dtoa_r+0x1180>
10008654:	1d6bc83a 	sub	r21,r3,r21
10008658:	d9c00617 	ldw	r7,24(sp)
1000865c:	3802aa16 	blt	r7,zero,10009108 <_dtoa_r+0x1468>
10008660:	dd000817 	ldw	r20,32(sp)
10008664:	d8800617 	ldw	r2,24(sp)
10008668:	d8c00817 	ldw	r3,32(sp)
1000866c:	01400044 	movi	r5,1
10008670:	e009883a 	mov	r4,fp
10008674:	1887883a 	add	r3,r3,r2
10008678:	d8c00815 	stw	r3,32(sp)
1000867c:	b0ad883a 	add	r22,r22,r2
10008680:	000b78c0 	call	1000b78c <__i2b>
10008684:	1023883a 	mov	r17,r2
10008688:	a0000826 	beq	r20,zero,100086ac <_dtoa_r+0xa0c>
1000868c:	0580070e 	bge	zero,r22,100086ac <_dtoa_r+0xa0c>
10008690:	a005883a 	mov	r2,r20
10008694:	b500b916 	blt	r22,r20,1000897c <_dtoa_r+0xcdc>
10008698:	d9000817 	ldw	r4,32(sp)
1000869c:	a0a9c83a 	sub	r20,r20,r2
100086a0:	b0adc83a 	sub	r22,r22,r2
100086a4:	2089c83a 	sub	r4,r4,r2
100086a8:	d9000815 	stw	r4,32(sp)
100086ac:	d9800a17 	ldw	r6,40(sp)
100086b0:	0181810e 	bge	zero,r6,10008cb8 <_dtoa_r+0x1018>
100086b4:	d9c00b17 	ldw	r7,44(sp)
100086b8:	3800b326 	beq	r7,zero,10008988 <_dtoa_r+0xce8>
100086bc:	a800b226 	beq	r21,zero,10008988 <_dtoa_r+0xce8>
100086c0:	880b883a 	mov	r5,r17
100086c4:	a80d883a 	mov	r6,r21
100086c8:	e009883a 	mov	r4,fp
100086cc:	000ba540 	call	1000ba54 <__pow5mult>
100086d0:	d9800917 	ldw	r6,36(sp)
100086d4:	100b883a 	mov	r5,r2
100086d8:	e009883a 	mov	r4,fp
100086dc:	1023883a 	mov	r17,r2
100086e0:	000b7c80 	call	1000b7c8 <__multiply>
100086e4:	1021883a 	mov	r16,r2
100086e8:	d8800a17 	ldw	r2,40(sp)
100086ec:	d9400917 	ldw	r5,36(sp)
100086f0:	e009883a 	mov	r4,fp
100086f4:	1545c83a 	sub	r2,r2,r21
100086f8:	d8800a15 	stw	r2,40(sp)
100086fc:	000b4000 	call	1000b400 <_Bfree>
10008700:	d8c00a17 	ldw	r3,40(sp)
10008704:	18009f1e 	bne	r3,zero,10008984 <_dtoa_r+0xce4>
10008708:	05c00044 	movi	r23,1
1000870c:	e009883a 	mov	r4,fp
10008710:	b80b883a 	mov	r5,r23
10008714:	000b78c0 	call	1000b78c <__i2b>
10008718:	d9000d17 	ldw	r4,52(sp)
1000871c:	102b883a 	mov	r21,r2
10008720:	2000ce26 	beq	r4,zero,10008a5c <_dtoa_r+0xdbc>
10008724:	200d883a 	mov	r6,r4
10008728:	100b883a 	mov	r5,r2
1000872c:	e009883a 	mov	r4,fp
10008730:	000ba540 	call	1000ba54 <__pow5mult>
10008734:	d9800317 	ldw	r6,12(sp)
10008738:	102b883a 	mov	r21,r2
1000873c:	b981810e 	bge	r23,r6,10008d44 <_dtoa_r+0x10a4>
10008740:	0027883a 	mov	r19,zero
10008744:	a8800417 	ldw	r2,16(r21)
10008748:	05c00804 	movi	r23,32
1000874c:	10800104 	addi	r2,r2,4
10008750:	1085883a 	add	r2,r2,r2
10008754:	1085883a 	add	r2,r2,r2
10008758:	a885883a 	add	r2,r21,r2
1000875c:	11000017 	ldw	r4,0(r2)
10008760:	000b6740 	call	1000b674 <__hi0bits>
10008764:	b885c83a 	sub	r2,r23,r2
10008768:	1585883a 	add	r2,r2,r22
1000876c:	108007cc 	andi	r2,r2,31
10008770:	1000b326 	beq	r2,zero,10008a40 <_dtoa_r+0xda0>
10008774:	00c00804 	movi	r3,32
10008778:	1887c83a 	sub	r3,r3,r2
1000877c:	01000104 	movi	r4,4
10008780:	20c2cd0e 	bge	r4,r3,100092b8 <_dtoa_r+0x1618>
10008784:	00c00704 	movi	r3,28
10008788:	1885c83a 	sub	r2,r3,r2
1000878c:	d8c00817 	ldw	r3,32(sp)
10008790:	a0a9883a 	add	r20,r20,r2
10008794:	b0ad883a 	add	r22,r22,r2
10008798:	1887883a 	add	r3,r3,r2
1000879c:	d8c00815 	stw	r3,32(sp)
100087a0:	d9800817 	ldw	r6,32(sp)
100087a4:	0180040e 	bge	zero,r6,100087b8 <_dtoa_r+0xb18>
100087a8:	800b883a 	mov	r5,r16
100087ac:	e009883a 	mov	r4,fp
100087b0:	000bb940 	call	1000bb94 <__lshift>
100087b4:	1021883a 	mov	r16,r2
100087b8:	0580050e 	bge	zero,r22,100087d0 <_dtoa_r+0xb30>
100087bc:	a80b883a 	mov	r5,r21
100087c0:	b00d883a 	mov	r6,r22
100087c4:	e009883a 	mov	r4,fp
100087c8:	000bb940 	call	1000bb94 <__lshift>
100087cc:	102b883a 	mov	r21,r2
100087d0:	d9c00e17 	ldw	r7,56(sp)
100087d4:	3801211e 	bne	r7,zero,10008c5c <_dtoa_r+0xfbc>
100087d8:	d9800617 	ldw	r6,24(sp)
100087dc:	0181380e 	bge	zero,r6,10008cc0 <_dtoa_r+0x1020>
100087e0:	d8c00b17 	ldw	r3,44(sp)
100087e4:	1800ab1e 	bne	r3,zero,10008a94 <_dtoa_r+0xdf4>
100087e8:	dc800717 	ldw	r18,28(sp)
100087ec:	dcc00617 	ldw	r19,24(sp)
100087f0:	9029883a 	mov	r20,r18
100087f4:	00000206 	br	10008800 <_dtoa_r+0xb60>
100087f8:	000b4280 	call	1000b428 <__multadd>
100087fc:	1021883a 	mov	r16,r2
10008800:	a80b883a 	mov	r5,r21
10008804:	8009883a 	mov	r4,r16
10008808:	0007a780 	call	10007a78 <quorem>
1000880c:	10800c04 	addi	r2,r2,48
10008810:	90800005 	stb	r2,0(r18)
10008814:	94800044 	addi	r18,r18,1
10008818:	9507c83a 	sub	r3,r18,r20
1000881c:	000f883a 	mov	r7,zero
10008820:	01800284 	movi	r6,10
10008824:	800b883a 	mov	r5,r16
10008828:	e009883a 	mov	r4,fp
1000882c:	1cfff216 	blt	r3,r19,100087f8 <__alt_data_end+0xf80087f8>
10008830:	1011883a 	mov	r8,r2
10008834:	d8800617 	ldw	r2,24(sp)
10008838:	0082370e 	bge	zero,r2,10009118 <_dtoa_r+0x1478>
1000883c:	d9000717 	ldw	r4,28(sp)
10008840:	0025883a 	mov	r18,zero
10008844:	20af883a 	add	r23,r4,r2
10008848:	01800044 	movi	r6,1
1000884c:	800b883a 	mov	r5,r16
10008850:	e009883a 	mov	r4,fp
10008854:	da001715 	stw	r8,92(sp)
10008858:	000bb940 	call	1000bb94 <__lshift>
1000885c:	a80b883a 	mov	r5,r21
10008860:	1009883a 	mov	r4,r2
10008864:	d8800915 	stw	r2,36(sp)
10008868:	000bcdc0 	call	1000bcdc <__mcmp>
1000886c:	da001717 	ldw	r8,92(sp)
10008870:	0081800e 	bge	zero,r2,10008e74 <_dtoa_r+0x11d4>
10008874:	b93fffc3 	ldbu	r4,-1(r23)
10008878:	b8bfffc4 	addi	r2,r23,-1
1000887c:	1007883a 	mov	r3,r2
10008880:	01800e44 	movi	r6,57
10008884:	d9c00717 	ldw	r7,28(sp)
10008888:	00000506 	br	100088a0 <_dtoa_r+0xc00>
1000888c:	18ffffc4 	addi	r3,r3,-1
10008890:	11c12326 	beq	r2,r7,10008d20 <_dtoa_r+0x1080>
10008894:	19000003 	ldbu	r4,0(r3)
10008898:	102f883a 	mov	r23,r2
1000889c:	10bfffc4 	addi	r2,r2,-1
100088a0:	21403fcc 	andi	r5,r4,255
100088a4:	2940201c 	xori	r5,r5,128
100088a8:	297fe004 	addi	r5,r5,-128
100088ac:	29bff726 	beq	r5,r6,1000888c <__alt_data_end+0xf800888c>
100088b0:	21000044 	addi	r4,r4,1
100088b4:	11000005 	stb	r4,0(r2)
100088b8:	a80b883a 	mov	r5,r21
100088bc:	e009883a 	mov	r4,fp
100088c0:	000b4000 	call	1000b400 <_Bfree>
100088c4:	883ea026 	beq	r17,zero,10008348 <__alt_data_end+0xf8008348>
100088c8:	90000426 	beq	r18,zero,100088dc <_dtoa_r+0xc3c>
100088cc:	94400326 	beq	r18,r17,100088dc <_dtoa_r+0xc3c>
100088d0:	900b883a 	mov	r5,r18
100088d4:	e009883a 	mov	r4,fp
100088d8:	000b4000 	call	1000b400 <_Bfree>
100088dc:	880b883a 	mov	r5,r17
100088e0:	e009883a 	mov	r4,fp
100088e4:	000b4000 	call	1000b400 <_Bfree>
100088e8:	003e9706 	br	10008348 <__alt_data_end+0xf8008348>
100088ec:	01800044 	movi	r6,1
100088f0:	d9800e15 	stw	r6,56(sp)
100088f4:	003d9606 	br	10007f50 <__alt_data_end+0xf8007f50>
100088f8:	d8800817 	ldw	r2,32(sp)
100088fc:	d8c00517 	ldw	r3,20(sp)
10008900:	d8000d15 	stw	zero,52(sp)
10008904:	10c5c83a 	sub	r2,r2,r3
10008908:	00c9c83a 	sub	r4,zero,r3
1000890c:	d8800815 	stw	r2,32(sp)
10008910:	d9000a15 	stw	r4,40(sp)
10008914:	003d9706 	br	10007f74 <__alt_data_end+0xf8007f74>
10008918:	05adc83a 	sub	r22,zero,r22
1000891c:	dd800815 	stw	r22,32(sp)
10008920:	002d883a 	mov	r22,zero
10008924:	003d8e06 	br	10007f60 <__alt_data_end+0xf8007f60>
10008928:	d9000517 	ldw	r4,20(sp)
1000892c:	00050b80 	call	100050b8 <__floatsidf>
10008930:	100d883a 	mov	r6,r2
10008934:	180f883a 	mov	r7,r3
10008938:	a009883a 	mov	r4,r20
1000893c:	880b883a 	mov	r5,r17
10008940:	00102100 	call	10010210 <__eqdf2>
10008944:	103d7126 	beq	r2,zero,10007f0c <__alt_data_end+0xf8007f0c>
10008948:	d9c00517 	ldw	r7,20(sp)
1000894c:	39ffffc4 	addi	r7,r7,-1
10008950:	d9c00515 	stw	r7,20(sp)
10008954:	003d6d06 	br	10007f0c <__alt_data_end+0xf8007f0c>
10008958:	dd400a17 	ldw	r21,40(sp)
1000895c:	dd000817 	ldw	r20,32(sp)
10008960:	0023883a 	mov	r17,zero
10008964:	003f4806 	br	10008688 <__alt_data_end+0xf8008688>
10008968:	10e3c83a 	sub	r17,r2,r3
1000896c:	9448983a 	sll	r4,r18,r17
10008970:	003d3206 	br	10007e3c <__alt_data_end+0xf8007e3c>
10008974:	d8000e15 	stw	zero,56(sp)
10008978:	003d7506 	br	10007f50 <__alt_data_end+0xf8007f50>
1000897c:	b005883a 	mov	r2,r22
10008980:	003f4506 	br	10008698 <__alt_data_end+0xf8008698>
10008984:	dc000915 	stw	r16,36(sp)
10008988:	d9800a17 	ldw	r6,40(sp)
1000898c:	d9400917 	ldw	r5,36(sp)
10008990:	e009883a 	mov	r4,fp
10008994:	000ba540 	call	1000ba54 <__pow5mult>
10008998:	1021883a 	mov	r16,r2
1000899c:	003f5a06 	br	10008708 <__alt_data_end+0xf8008708>
100089a0:	01c00044 	movi	r7,1
100089a4:	d9c00b15 	stw	r7,44(sp)
100089a8:	d8802217 	ldw	r2,136(sp)
100089ac:	0081280e 	bge	zero,r2,10008e50 <_dtoa_r+0x11b0>
100089b0:	100d883a 	mov	r6,r2
100089b4:	1021883a 	mov	r16,r2
100089b8:	d8800c15 	stw	r2,48(sp)
100089bc:	d8800615 	stw	r2,24(sp)
100089c0:	003d8806 	br	10007fe4 <__alt_data_end+0xf8007fe4>
100089c4:	d8800617 	ldw	r2,24(sp)
100089c8:	00be9b16 	blt	zero,r2,10008438 <__alt_data_end+0xf8008438>
100089cc:	10010f1e 	bne	r2,zero,10008e0c <_dtoa_r+0x116c>
100089d0:	880b883a 	mov	r5,r17
100089d4:	000d883a 	mov	r6,zero
100089d8:	01d00534 	movhi	r7,16404
100089dc:	8009883a 	mov	r4,r16
100089e0:	00103740 	call	10010374 <__muldf3>
100089e4:	900d883a 	mov	r6,r18
100089e8:	980f883a 	mov	r7,r19
100089ec:	1009883a 	mov	r4,r2
100089f0:	180b883a 	mov	r5,r3
100089f4:	00102980 	call	10010298 <__gedf2>
100089f8:	002b883a 	mov	r21,zero
100089fc:	0023883a 	mov	r17,zero
10008a00:	1000bf16 	blt	r2,zero,10008d00 <_dtoa_r+0x1060>
10008a04:	d9802217 	ldw	r6,136(sp)
10008a08:	ddc00717 	ldw	r23,28(sp)
10008a0c:	018c303a 	nor	r6,zero,r6
10008a10:	d9800515 	stw	r6,20(sp)
10008a14:	a80b883a 	mov	r5,r21
10008a18:	e009883a 	mov	r4,fp
10008a1c:	000b4000 	call	1000b400 <_Bfree>
10008a20:	883e4926 	beq	r17,zero,10008348 <__alt_data_end+0xf8008348>
10008a24:	003fad06 	br	100088dc <__alt_data_end+0xf80088dc>
10008a28:	d9c01117 	ldw	r7,68(sp)
10008a2c:	3801bc26 	beq	r7,zero,10009120 <_dtoa_r+0x1480>
10008a30:	10810cc4 	addi	r2,r2,1075
10008a34:	dd400a17 	ldw	r21,40(sp)
10008a38:	dd000817 	ldw	r20,32(sp)
10008a3c:	003f0a06 	br	10008668 <__alt_data_end+0xf8008668>
10008a40:	00800704 	movi	r2,28
10008a44:	d9000817 	ldw	r4,32(sp)
10008a48:	a0a9883a 	add	r20,r20,r2
10008a4c:	b0ad883a 	add	r22,r22,r2
10008a50:	2089883a 	add	r4,r4,r2
10008a54:	d9000815 	stw	r4,32(sp)
10008a58:	003f5106 	br	100087a0 <__alt_data_end+0xf80087a0>
10008a5c:	d8c00317 	ldw	r3,12(sp)
10008a60:	b8c1fc0e 	bge	r23,r3,10009254 <_dtoa_r+0x15b4>
10008a64:	0027883a 	mov	r19,zero
10008a68:	b805883a 	mov	r2,r23
10008a6c:	003f3e06 	br	10008768 <__alt_data_end+0xf8008768>
10008a70:	880b883a 	mov	r5,r17
10008a74:	e009883a 	mov	r4,fp
10008a78:	000f883a 	mov	r7,zero
10008a7c:	01800284 	movi	r6,10
10008a80:	000b4280 	call	1000b428 <__multadd>
10008a84:	d9000c17 	ldw	r4,48(sp)
10008a88:	1023883a 	mov	r17,r2
10008a8c:	0102040e 	bge	zero,r4,100092a0 <_dtoa_r+0x1600>
10008a90:	d9000615 	stw	r4,24(sp)
10008a94:	0500050e 	bge	zero,r20,10008aac <_dtoa_r+0xe0c>
10008a98:	880b883a 	mov	r5,r17
10008a9c:	a00d883a 	mov	r6,r20
10008aa0:	e009883a 	mov	r4,fp
10008aa4:	000bb940 	call	1000bb94 <__lshift>
10008aa8:	1023883a 	mov	r17,r2
10008aac:	9801241e 	bne	r19,zero,10008f40 <_dtoa_r+0x12a0>
10008ab0:	8829883a 	mov	r20,r17
10008ab4:	d9000617 	ldw	r4,24(sp)
10008ab8:	dcc00717 	ldw	r19,28(sp)
10008abc:	9480004c 	andi	r18,r18,1
10008ac0:	20bfffc4 	addi	r2,r4,-1
10008ac4:	9885883a 	add	r2,r19,r2
10008ac8:	d8800415 	stw	r2,16(sp)
10008acc:	dc800615 	stw	r18,24(sp)
10008ad0:	a80b883a 	mov	r5,r21
10008ad4:	8009883a 	mov	r4,r16
10008ad8:	0007a780 	call	10007a78 <quorem>
10008adc:	880b883a 	mov	r5,r17
10008ae0:	8009883a 	mov	r4,r16
10008ae4:	102f883a 	mov	r23,r2
10008ae8:	000bcdc0 	call	1000bcdc <__mcmp>
10008aec:	a80b883a 	mov	r5,r21
10008af0:	a00d883a 	mov	r6,r20
10008af4:	e009883a 	mov	r4,fp
10008af8:	102d883a 	mov	r22,r2
10008afc:	000bd3c0 	call	1000bd3c <__mdiff>
10008b00:	1007883a 	mov	r3,r2
10008b04:	10800317 	ldw	r2,12(r2)
10008b08:	bc800c04 	addi	r18,r23,48
10008b0c:	180b883a 	mov	r5,r3
10008b10:	10004e1e 	bne	r2,zero,10008c4c <_dtoa_r+0xfac>
10008b14:	8009883a 	mov	r4,r16
10008b18:	d8c01615 	stw	r3,88(sp)
10008b1c:	000bcdc0 	call	1000bcdc <__mcmp>
10008b20:	d8c01617 	ldw	r3,88(sp)
10008b24:	e009883a 	mov	r4,fp
10008b28:	d8801615 	stw	r2,88(sp)
10008b2c:	180b883a 	mov	r5,r3
10008b30:	000b4000 	call	1000b400 <_Bfree>
10008b34:	d8801617 	ldw	r2,88(sp)
10008b38:	1000041e 	bne	r2,zero,10008b4c <_dtoa_r+0xeac>
10008b3c:	d9800317 	ldw	r6,12(sp)
10008b40:	3000021e 	bne	r6,zero,10008b4c <_dtoa_r+0xeac>
10008b44:	d8c00617 	ldw	r3,24(sp)
10008b48:	18003726 	beq	r3,zero,10008c28 <_dtoa_r+0xf88>
10008b4c:	b0002016 	blt	r22,zero,10008bd0 <_dtoa_r+0xf30>
10008b50:	b000041e 	bne	r22,zero,10008b64 <_dtoa_r+0xec4>
10008b54:	d9000317 	ldw	r4,12(sp)
10008b58:	2000021e 	bne	r4,zero,10008b64 <_dtoa_r+0xec4>
10008b5c:	d8c00617 	ldw	r3,24(sp)
10008b60:	18001b26 	beq	r3,zero,10008bd0 <_dtoa_r+0xf30>
10008b64:	00810716 	blt	zero,r2,10008f84 <_dtoa_r+0x12e4>
10008b68:	d8c00417 	ldw	r3,16(sp)
10008b6c:	9d800044 	addi	r22,r19,1
10008b70:	9c800005 	stb	r18,0(r19)
10008b74:	b02f883a 	mov	r23,r22
10008b78:	98c10626 	beq	r19,r3,10008f94 <_dtoa_r+0x12f4>
10008b7c:	800b883a 	mov	r5,r16
10008b80:	000f883a 	mov	r7,zero
10008b84:	01800284 	movi	r6,10
10008b88:	e009883a 	mov	r4,fp
10008b8c:	000b4280 	call	1000b428 <__multadd>
10008b90:	1021883a 	mov	r16,r2
10008b94:	000f883a 	mov	r7,zero
10008b98:	01800284 	movi	r6,10
10008b9c:	880b883a 	mov	r5,r17
10008ba0:	e009883a 	mov	r4,fp
10008ba4:	8d002526 	beq	r17,r20,10008c3c <_dtoa_r+0xf9c>
10008ba8:	000b4280 	call	1000b428 <__multadd>
10008bac:	a00b883a 	mov	r5,r20
10008bb0:	000f883a 	mov	r7,zero
10008bb4:	01800284 	movi	r6,10
10008bb8:	e009883a 	mov	r4,fp
10008bbc:	1023883a 	mov	r17,r2
10008bc0:	000b4280 	call	1000b428 <__multadd>
10008bc4:	1029883a 	mov	r20,r2
10008bc8:	b027883a 	mov	r19,r22
10008bcc:	003fc006 	br	10008ad0 <__alt_data_end+0xf8008ad0>
10008bd0:	9011883a 	mov	r8,r18
10008bd4:	00800e0e 	bge	zero,r2,10008c10 <_dtoa_r+0xf70>
10008bd8:	800b883a 	mov	r5,r16
10008bdc:	01800044 	movi	r6,1
10008be0:	e009883a 	mov	r4,fp
10008be4:	da001715 	stw	r8,92(sp)
10008be8:	000bb940 	call	1000bb94 <__lshift>
10008bec:	a80b883a 	mov	r5,r21
10008bf0:	1009883a 	mov	r4,r2
10008bf4:	1021883a 	mov	r16,r2
10008bf8:	000bcdc0 	call	1000bcdc <__mcmp>
10008bfc:	da001717 	ldw	r8,92(sp)
10008c00:	0081960e 	bge	zero,r2,1000925c <_dtoa_r+0x15bc>
10008c04:	00800e44 	movi	r2,57
10008c08:	40817026 	beq	r8,r2,100091cc <_dtoa_r+0x152c>
10008c0c:	ba000c44 	addi	r8,r23,49
10008c10:	8825883a 	mov	r18,r17
10008c14:	9dc00044 	addi	r23,r19,1
10008c18:	9a000005 	stb	r8,0(r19)
10008c1c:	a023883a 	mov	r17,r20
10008c20:	dc000915 	stw	r16,36(sp)
10008c24:	003f2406 	br	100088b8 <__alt_data_end+0xf80088b8>
10008c28:	00800e44 	movi	r2,57
10008c2c:	9011883a 	mov	r8,r18
10008c30:	90816626 	beq	r18,r2,100091cc <_dtoa_r+0x152c>
10008c34:	05bff516 	blt	zero,r22,10008c0c <__alt_data_end+0xf8008c0c>
10008c38:	003ff506 	br	10008c10 <__alt_data_end+0xf8008c10>
10008c3c:	000b4280 	call	1000b428 <__multadd>
10008c40:	1023883a 	mov	r17,r2
10008c44:	1029883a 	mov	r20,r2
10008c48:	003fdf06 	br	10008bc8 <__alt_data_end+0xf8008bc8>
10008c4c:	e009883a 	mov	r4,fp
10008c50:	000b4000 	call	1000b400 <_Bfree>
10008c54:	00800044 	movi	r2,1
10008c58:	003fbc06 	br	10008b4c <__alt_data_end+0xf8008b4c>
10008c5c:	a80b883a 	mov	r5,r21
10008c60:	8009883a 	mov	r4,r16
10008c64:	000bcdc0 	call	1000bcdc <__mcmp>
10008c68:	103edb0e 	bge	r2,zero,100087d8 <__alt_data_end+0xf80087d8>
10008c6c:	800b883a 	mov	r5,r16
10008c70:	000f883a 	mov	r7,zero
10008c74:	01800284 	movi	r6,10
10008c78:	e009883a 	mov	r4,fp
10008c7c:	000b4280 	call	1000b428 <__multadd>
10008c80:	1021883a 	mov	r16,r2
10008c84:	d8800517 	ldw	r2,20(sp)
10008c88:	d8c00b17 	ldw	r3,44(sp)
10008c8c:	10bfffc4 	addi	r2,r2,-1
10008c90:	d8800515 	stw	r2,20(sp)
10008c94:	183f761e 	bne	r3,zero,10008a70 <__alt_data_end+0xf8008a70>
10008c98:	d9000c17 	ldw	r4,48(sp)
10008c9c:	0101730e 	bge	zero,r4,1000926c <_dtoa_r+0x15cc>
10008ca0:	d9000615 	stw	r4,24(sp)
10008ca4:	003ed006 	br	100087e8 <__alt_data_end+0xf80087e8>
10008ca8:	00800084 	movi	r2,2
10008cac:	3081861e 	bne	r6,r2,100092c8 <_dtoa_r+0x1628>
10008cb0:	d8000b15 	stw	zero,44(sp)
10008cb4:	003f3c06 	br	100089a8 <__alt_data_end+0xf80089a8>
10008cb8:	dc000917 	ldw	r16,36(sp)
10008cbc:	003e9206 	br	10008708 <__alt_data_end+0xf8008708>
10008cc0:	d9c00317 	ldw	r7,12(sp)
10008cc4:	00800084 	movi	r2,2
10008cc8:	11fec50e 	bge	r2,r7,100087e0 <__alt_data_end+0xf80087e0>
10008ccc:	d9000617 	ldw	r4,24(sp)
10008cd0:	20013c1e 	bne	r4,zero,100091c4 <_dtoa_r+0x1524>
10008cd4:	a80b883a 	mov	r5,r21
10008cd8:	000f883a 	mov	r7,zero
10008cdc:	01800144 	movi	r6,5
10008ce0:	e009883a 	mov	r4,fp
10008ce4:	000b4280 	call	1000b428 <__multadd>
10008ce8:	100b883a 	mov	r5,r2
10008cec:	8009883a 	mov	r4,r16
10008cf0:	102b883a 	mov	r21,r2
10008cf4:	000bcdc0 	call	1000bcdc <__mcmp>
10008cf8:	dc000915 	stw	r16,36(sp)
10008cfc:	00bf410e 	bge	zero,r2,10008a04 <__alt_data_end+0xf8008a04>
10008d00:	d9c00717 	ldw	r7,28(sp)
10008d04:	00800c44 	movi	r2,49
10008d08:	38800005 	stb	r2,0(r7)
10008d0c:	d8800517 	ldw	r2,20(sp)
10008d10:	3dc00044 	addi	r23,r7,1
10008d14:	10800044 	addi	r2,r2,1
10008d18:	d8800515 	stw	r2,20(sp)
10008d1c:	003f3d06 	br	10008a14 <__alt_data_end+0xf8008a14>
10008d20:	d9800517 	ldw	r6,20(sp)
10008d24:	d9c00717 	ldw	r7,28(sp)
10008d28:	00800c44 	movi	r2,49
10008d2c:	31800044 	addi	r6,r6,1
10008d30:	d9800515 	stw	r6,20(sp)
10008d34:	38800005 	stb	r2,0(r7)
10008d38:	003edf06 	br	100088b8 <__alt_data_end+0xf80088b8>
10008d3c:	d8000b15 	stw	zero,44(sp)
10008d40:	003c9f06 	br	10007fc0 <__alt_data_end+0xf8007fc0>
10008d44:	903e7e1e 	bne	r18,zero,10008740 <__alt_data_end+0xf8008740>
10008d48:	00800434 	movhi	r2,16
10008d4c:	10bfffc4 	addi	r2,r2,-1
10008d50:	9884703a 	and	r2,r19,r2
10008d54:	1000ea1e 	bne	r2,zero,10009100 <_dtoa_r+0x1460>
10008d58:	9cdffc2c 	andhi	r19,r19,32752
10008d5c:	9800e826 	beq	r19,zero,10009100 <_dtoa_r+0x1460>
10008d60:	d9c00817 	ldw	r7,32(sp)
10008d64:	b5800044 	addi	r22,r22,1
10008d68:	04c00044 	movi	r19,1
10008d6c:	39c00044 	addi	r7,r7,1
10008d70:	d9c00815 	stw	r7,32(sp)
10008d74:	d8800d17 	ldw	r2,52(sp)
10008d78:	103e721e 	bne	r2,zero,10008744 <__alt_data_end+0xf8008744>
10008d7c:	00800044 	movi	r2,1
10008d80:	003e7906 	br	10008768 <__alt_data_end+0xf8008768>
10008d84:	8009883a 	mov	r4,r16
10008d88:	00050b80 	call	100050b8 <__floatsidf>
10008d8c:	d9800f17 	ldw	r6,60(sp)
10008d90:	d9c01017 	ldw	r7,64(sp)
10008d94:	1009883a 	mov	r4,r2
10008d98:	180b883a 	mov	r5,r3
10008d9c:	00103740 	call	10010374 <__muldf3>
10008da0:	000d883a 	mov	r6,zero
10008da4:	01d00734 	movhi	r7,16412
10008da8:	1009883a 	mov	r4,r2
10008dac:	180b883a 	mov	r5,r3
10008db0:	000f9640 	call	1000f964 <__adddf3>
10008db4:	047f3034 	movhi	r17,64704
10008db8:	1021883a 	mov	r16,r2
10008dbc:	1c63883a 	add	r17,r3,r17
10008dc0:	d9000f17 	ldw	r4,60(sp)
10008dc4:	d9401017 	ldw	r5,64(sp)
10008dc8:	000d883a 	mov	r6,zero
10008dcc:	01d00534 	movhi	r7,16404
10008dd0:	0010be00 	call	10010be0 <__subdf3>
10008dd4:	800d883a 	mov	r6,r16
10008dd8:	880f883a 	mov	r7,r17
10008ddc:	1009883a 	mov	r4,r2
10008de0:	180b883a 	mov	r5,r3
10008de4:	102b883a 	mov	r21,r2
10008de8:	1829883a 	mov	r20,r3
10008dec:	00102980 	call	10010298 <__gedf2>
10008df0:	00806c16 	blt	zero,r2,10008fa4 <_dtoa_r+0x1304>
10008df4:	89e0003c 	xorhi	r7,r17,32768
10008df8:	800d883a 	mov	r6,r16
10008dfc:	a809883a 	mov	r4,r21
10008e00:	a00b883a 	mov	r5,r20
10008e04:	0004fc40 	call	10004fc4 <__ledf2>
10008e08:	103d7e0e 	bge	r2,zero,10008404 <__alt_data_end+0xf8008404>
10008e0c:	002b883a 	mov	r21,zero
10008e10:	0023883a 	mov	r17,zero
10008e14:	003efb06 	br	10008a04 <__alt_data_end+0xf8008a04>
10008e18:	d8800717 	ldw	r2,28(sp)
10008e1c:	003bd006 	br	10007d60 <__alt_data_end+0xf8007d60>
10008e20:	d9000a17 	ldw	r4,40(sp)
10008e24:	d9800d17 	ldw	r6,52(sp)
10008e28:	dd400a15 	stw	r21,40(sp)
10008e2c:	a905c83a 	sub	r2,r21,r4
10008e30:	308d883a 	add	r6,r6,r2
10008e34:	d9800d15 	stw	r6,52(sp)
10008e38:	002b883a 	mov	r21,zero
10008e3c:	003e0606 	br	10008658 <__alt_data_end+0xf8008658>
10008e40:	9023883a 	mov	r17,r18
10008e44:	9829883a 	mov	r20,r19
10008e48:	04000084 	movi	r16,2
10008e4c:	003c9206 	br	10008098 <__alt_data_end+0xf8008098>
10008e50:	04000044 	movi	r16,1
10008e54:	dc000c15 	stw	r16,48(sp)
10008e58:	dc000615 	stw	r16,24(sp)
10008e5c:	dc002215 	stw	r16,136(sp)
10008e60:	e0001115 	stw	zero,68(fp)
10008e64:	000b883a 	mov	r5,zero
10008e68:	003c6906 	br	10008010 <__alt_data_end+0xf8008010>
10008e6c:	3021883a 	mov	r16,r6
10008e70:	003ffb06 	br	10008e60 <__alt_data_end+0xf8008e60>
10008e74:	1000021e 	bne	r2,zero,10008e80 <_dtoa_r+0x11e0>
10008e78:	4200004c 	andi	r8,r8,1
10008e7c:	403e7d1e 	bne	r8,zero,10008874 <__alt_data_end+0xf8008874>
10008e80:	01000c04 	movi	r4,48
10008e84:	00000106 	br	10008e8c <_dtoa_r+0x11ec>
10008e88:	102f883a 	mov	r23,r2
10008e8c:	b8bfffc4 	addi	r2,r23,-1
10008e90:	10c00007 	ldb	r3,0(r2)
10008e94:	193ffc26 	beq	r3,r4,10008e88 <__alt_data_end+0xf8008e88>
10008e98:	003e8706 	br	100088b8 <__alt_data_end+0xf80088b8>
10008e9c:	d8800517 	ldw	r2,20(sp)
10008ea0:	00a3c83a 	sub	r17,zero,r2
10008ea4:	8800a426 	beq	r17,zero,10009138 <_dtoa_r+0x1498>
10008ea8:	888003cc 	andi	r2,r17,15
10008eac:	100490fa 	slli	r2,r2,3
10008eb0:	00c40074 	movhi	r3,4097
10008eb4:	18d1dd04 	addi	r3,r3,18292
10008eb8:	1885883a 	add	r2,r3,r2
10008ebc:	11800017 	ldw	r6,0(r2)
10008ec0:	11c00117 	ldw	r7,4(r2)
10008ec4:	9009883a 	mov	r4,r18
10008ec8:	980b883a 	mov	r5,r19
10008ecc:	8823d13a 	srai	r17,r17,4
10008ed0:	00103740 	call	10010374 <__muldf3>
10008ed4:	d8800f15 	stw	r2,60(sp)
10008ed8:	d8c01015 	stw	r3,64(sp)
10008edc:	8800e826 	beq	r17,zero,10009280 <_dtoa_r+0x15e0>
10008ee0:	05040074 	movhi	r20,4097
10008ee4:	a511d304 	addi	r20,r20,18252
10008ee8:	04000084 	movi	r16,2
10008eec:	8980004c 	andi	r6,r17,1
10008ef0:	1009883a 	mov	r4,r2
10008ef4:	8823d07a 	srai	r17,r17,1
10008ef8:	180b883a 	mov	r5,r3
10008efc:	30000426 	beq	r6,zero,10008f10 <_dtoa_r+0x1270>
10008f00:	a1800017 	ldw	r6,0(r20)
10008f04:	a1c00117 	ldw	r7,4(r20)
10008f08:	84000044 	addi	r16,r16,1
10008f0c:	00103740 	call	10010374 <__muldf3>
10008f10:	a5000204 	addi	r20,r20,8
10008f14:	883ff51e 	bne	r17,zero,10008eec <__alt_data_end+0xf8008eec>
10008f18:	d8800f15 	stw	r2,60(sp)
10008f1c:	d8c01015 	stw	r3,64(sp)
10008f20:	003c7606 	br	100080fc <__alt_data_end+0xf80080fc>
10008f24:	00c00c04 	movi	r3,48
10008f28:	10c00005 	stb	r3,0(r2)
10008f2c:	d8c00517 	ldw	r3,20(sp)
10008f30:	bd3fffc3 	ldbu	r20,-1(r23)
10008f34:	18c00044 	addi	r3,r3,1
10008f38:	d8c00515 	stw	r3,20(sp)
10008f3c:	003db906 	br	10008624 <__alt_data_end+0xf8008624>
10008f40:	89400117 	ldw	r5,4(r17)
10008f44:	e009883a 	mov	r4,fp
10008f48:	000b3580 	call	1000b358 <_Balloc>
10008f4c:	89800417 	ldw	r6,16(r17)
10008f50:	89400304 	addi	r5,r17,12
10008f54:	11000304 	addi	r4,r2,12
10008f58:	31800084 	addi	r6,r6,2
10008f5c:	318d883a 	add	r6,r6,r6
10008f60:	318d883a 	add	r6,r6,r6
10008f64:	1027883a 	mov	r19,r2
10008f68:	000af8c0 	call	1000af8c <memcpy>
10008f6c:	01800044 	movi	r6,1
10008f70:	980b883a 	mov	r5,r19
10008f74:	e009883a 	mov	r4,fp
10008f78:	000bb940 	call	1000bb94 <__lshift>
10008f7c:	1029883a 	mov	r20,r2
10008f80:	003ecc06 	br	10008ab4 <__alt_data_end+0xf8008ab4>
10008f84:	00800e44 	movi	r2,57
10008f88:	90809026 	beq	r18,r2,100091cc <_dtoa_r+0x152c>
10008f8c:	92000044 	addi	r8,r18,1
10008f90:	003f1f06 	br	10008c10 <__alt_data_end+0xf8008c10>
10008f94:	9011883a 	mov	r8,r18
10008f98:	8825883a 	mov	r18,r17
10008f9c:	a023883a 	mov	r17,r20
10008fa0:	003e2906 	br	10008848 <__alt_data_end+0xf8008848>
10008fa4:	002b883a 	mov	r21,zero
10008fa8:	0023883a 	mov	r17,zero
10008fac:	003f5406 	br	10008d00 <__alt_data_end+0xf8008d00>
10008fb0:	61bfffc4 	addi	r6,r12,-1
10008fb4:	300490fa 	slli	r2,r6,3
10008fb8:	00c40074 	movhi	r3,4097
10008fbc:	18d1dd04 	addi	r3,r3,18292
10008fc0:	1885883a 	add	r2,r3,r2
10008fc4:	11000017 	ldw	r4,0(r2)
10008fc8:	11400117 	ldw	r5,4(r2)
10008fcc:	d8800717 	ldw	r2,28(sp)
10008fd0:	880f883a 	mov	r7,r17
10008fd4:	d9801215 	stw	r6,72(sp)
10008fd8:	800d883a 	mov	r6,r16
10008fdc:	db001615 	stw	r12,88(sp)
10008fe0:	15c00044 	addi	r23,r2,1
10008fe4:	00103740 	call	10010374 <__muldf3>
10008fe8:	d9401017 	ldw	r5,64(sp)
10008fec:	d9000f17 	ldw	r4,60(sp)
10008ff0:	d8c01515 	stw	r3,84(sp)
10008ff4:	d8801415 	stw	r2,80(sp)
10008ff8:	00114dc0 	call	100114dc <__fixdfsi>
10008ffc:	1009883a 	mov	r4,r2
10009000:	1021883a 	mov	r16,r2
10009004:	00050b80 	call	100050b8 <__floatsidf>
10009008:	d9000f17 	ldw	r4,60(sp)
1000900c:	d9401017 	ldw	r5,64(sp)
10009010:	100d883a 	mov	r6,r2
10009014:	180f883a 	mov	r7,r3
10009018:	0010be00 	call	10010be0 <__subdf3>
1000901c:	1829883a 	mov	r20,r3
10009020:	d8c00717 	ldw	r3,28(sp)
10009024:	84000c04 	addi	r16,r16,48
10009028:	1023883a 	mov	r17,r2
1000902c:	1c000005 	stb	r16,0(r3)
10009030:	db001617 	ldw	r12,88(sp)
10009034:	00800044 	movi	r2,1
10009038:	60802226 	beq	r12,r2,100090c4 <_dtoa_r+0x1424>
1000903c:	d9c00717 	ldw	r7,28(sp)
10009040:	8805883a 	mov	r2,r17
10009044:	b82b883a 	mov	r21,r23
10009048:	3b19883a 	add	r12,r7,r12
1000904c:	6023883a 	mov	r17,r12
10009050:	a007883a 	mov	r3,r20
10009054:	dc800f15 	stw	r18,60(sp)
10009058:	000d883a 	mov	r6,zero
1000905c:	01d00934 	movhi	r7,16420
10009060:	1009883a 	mov	r4,r2
10009064:	180b883a 	mov	r5,r3
10009068:	00103740 	call	10010374 <__muldf3>
1000906c:	180b883a 	mov	r5,r3
10009070:	1009883a 	mov	r4,r2
10009074:	1829883a 	mov	r20,r3
10009078:	1025883a 	mov	r18,r2
1000907c:	00114dc0 	call	100114dc <__fixdfsi>
10009080:	1009883a 	mov	r4,r2
10009084:	1021883a 	mov	r16,r2
10009088:	00050b80 	call	100050b8 <__floatsidf>
1000908c:	100d883a 	mov	r6,r2
10009090:	180f883a 	mov	r7,r3
10009094:	9009883a 	mov	r4,r18
10009098:	a00b883a 	mov	r5,r20
1000909c:	84000c04 	addi	r16,r16,48
100090a0:	0010be00 	call	10010be0 <__subdf3>
100090a4:	ad400044 	addi	r21,r21,1
100090a8:	ac3fffc5 	stb	r16,-1(r21)
100090ac:	ac7fea1e 	bne	r21,r17,10009058 <__alt_data_end+0xf8009058>
100090b0:	1023883a 	mov	r17,r2
100090b4:	d8801217 	ldw	r2,72(sp)
100090b8:	dc800f17 	ldw	r18,60(sp)
100090bc:	1829883a 	mov	r20,r3
100090c0:	b8af883a 	add	r23,r23,r2
100090c4:	d9001417 	ldw	r4,80(sp)
100090c8:	d9401517 	ldw	r5,84(sp)
100090cc:	000d883a 	mov	r6,zero
100090d0:	01cff834 	movhi	r7,16352
100090d4:	000f9640 	call	1000f964 <__adddf3>
100090d8:	880d883a 	mov	r6,r17
100090dc:	a00f883a 	mov	r7,r20
100090e0:	1009883a 	mov	r4,r2
100090e4:	180b883a 	mov	r5,r3
100090e8:	0004fc40 	call	10004fc4 <__ledf2>
100090ec:	10003e0e 	bge	r2,zero,100091e8 <_dtoa_r+0x1548>
100090f0:	d9001317 	ldw	r4,76(sp)
100090f4:	bd3fffc3 	ldbu	r20,-1(r23)
100090f8:	d9000515 	stw	r4,20(sp)
100090fc:	003d3b06 	br	100085ec <__alt_data_end+0xf80085ec>
10009100:	0027883a 	mov	r19,zero
10009104:	003f1b06 	br	10008d74 <__alt_data_end+0xf8008d74>
10009108:	d8800817 	ldw	r2,32(sp)
1000910c:	11e9c83a 	sub	r20,r2,r7
10009110:	0005883a 	mov	r2,zero
10009114:	003d5406 	br	10008668 <__alt_data_end+0xf8008668>
10009118:	00800044 	movi	r2,1
1000911c:	003dc706 	br	1000883c <__alt_data_end+0xf800883c>
10009120:	d8c00217 	ldw	r3,8(sp)
10009124:	00800d84 	movi	r2,54
10009128:	dd400a17 	ldw	r21,40(sp)
1000912c:	10c5c83a 	sub	r2,r2,r3
10009130:	dd000817 	ldw	r20,32(sp)
10009134:	003d4c06 	br	10008668 <__alt_data_end+0xf8008668>
10009138:	dc800f15 	stw	r18,60(sp)
1000913c:	dcc01015 	stw	r19,64(sp)
10009140:	04000084 	movi	r16,2
10009144:	003bed06 	br	100080fc <__alt_data_end+0xf80080fc>
10009148:	d9000617 	ldw	r4,24(sp)
1000914c:	203f0d26 	beq	r4,zero,10008d84 <__alt_data_end+0xf8008d84>
10009150:	d9800c17 	ldw	r6,48(sp)
10009154:	01bcab0e 	bge	zero,r6,10008404 <__alt_data_end+0xf8008404>
10009158:	d9401017 	ldw	r5,64(sp)
1000915c:	d9000f17 	ldw	r4,60(sp)
10009160:	000d883a 	mov	r6,zero
10009164:	01d00934 	movhi	r7,16420
10009168:	00103740 	call	10010374 <__muldf3>
1000916c:	81000044 	addi	r4,r16,1
10009170:	d8800f15 	stw	r2,60(sp)
10009174:	d8c01015 	stw	r3,64(sp)
10009178:	00050b80 	call	100050b8 <__floatsidf>
1000917c:	d9800f17 	ldw	r6,60(sp)
10009180:	d9c01017 	ldw	r7,64(sp)
10009184:	1009883a 	mov	r4,r2
10009188:	180b883a 	mov	r5,r3
1000918c:	00103740 	call	10010374 <__muldf3>
10009190:	01d00734 	movhi	r7,16412
10009194:	000d883a 	mov	r6,zero
10009198:	1009883a 	mov	r4,r2
1000919c:	180b883a 	mov	r5,r3
100091a0:	000f9640 	call	1000f964 <__adddf3>
100091a4:	d9c00517 	ldw	r7,20(sp)
100091a8:	047f3034 	movhi	r17,64704
100091ac:	1021883a 	mov	r16,r2
100091b0:	39ffffc4 	addi	r7,r7,-1
100091b4:	d9c01315 	stw	r7,76(sp)
100091b8:	1c63883a 	add	r17,r3,r17
100091bc:	db000c17 	ldw	r12,48(sp)
100091c0:	003bea06 	br	1000816c <__alt_data_end+0xf800816c>
100091c4:	dc000915 	stw	r16,36(sp)
100091c8:	003e0e06 	br	10008a04 <__alt_data_end+0xf8008a04>
100091cc:	01000e44 	movi	r4,57
100091d0:	8825883a 	mov	r18,r17
100091d4:	9dc00044 	addi	r23,r19,1
100091d8:	99000005 	stb	r4,0(r19)
100091dc:	a023883a 	mov	r17,r20
100091e0:	dc000915 	stw	r16,36(sp)
100091e4:	003da406 	br	10008878 <__alt_data_end+0xf8008878>
100091e8:	d9801417 	ldw	r6,80(sp)
100091ec:	d9c01517 	ldw	r7,84(sp)
100091f0:	0009883a 	mov	r4,zero
100091f4:	014ff834 	movhi	r5,16352
100091f8:	0010be00 	call	10010be0 <__subdf3>
100091fc:	880d883a 	mov	r6,r17
10009200:	a00f883a 	mov	r7,r20
10009204:	1009883a 	mov	r4,r2
10009208:	180b883a 	mov	r5,r3
1000920c:	00102980 	call	10010298 <__gedf2>
10009210:	00bc7c0e 	bge	zero,r2,10008404 <__alt_data_end+0xf8008404>
10009214:	01000c04 	movi	r4,48
10009218:	00000106 	br	10009220 <_dtoa_r+0x1580>
1000921c:	102f883a 	mov	r23,r2
10009220:	b8bfffc4 	addi	r2,r23,-1
10009224:	10c00007 	ldb	r3,0(r2)
10009228:	193ffc26 	beq	r3,r4,1000921c <__alt_data_end+0xf800921c>
1000922c:	d9801317 	ldw	r6,76(sp)
10009230:	d9800515 	stw	r6,20(sp)
10009234:	003c4406 	br	10008348 <__alt_data_end+0xf8008348>
10009238:	d9801317 	ldw	r6,76(sp)
1000923c:	d9800515 	stw	r6,20(sp)
10009240:	003cea06 	br	100085ec <__alt_data_end+0xf80085ec>
10009244:	dd800f17 	ldw	r22,60(sp)
10009248:	dcc01017 	ldw	r19,64(sp)
1000924c:	dc801217 	ldw	r18,72(sp)
10009250:	003c6c06 	br	10008404 <__alt_data_end+0xf8008404>
10009254:	903e031e 	bne	r18,zero,10008a64 <__alt_data_end+0xf8008a64>
10009258:	003ebb06 	br	10008d48 <__alt_data_end+0xf8008d48>
1000925c:	103e6c1e 	bne	r2,zero,10008c10 <__alt_data_end+0xf8008c10>
10009260:	4080004c 	andi	r2,r8,1
10009264:	103e6a26 	beq	r2,zero,10008c10 <__alt_data_end+0xf8008c10>
10009268:	003e6606 	br	10008c04 <__alt_data_end+0xf8008c04>
1000926c:	d8c00317 	ldw	r3,12(sp)
10009270:	00800084 	movi	r2,2
10009274:	10c02916 	blt	r2,r3,1000931c <_dtoa_r+0x167c>
10009278:	d9000c17 	ldw	r4,48(sp)
1000927c:	003e8806 	br	10008ca0 <__alt_data_end+0xf8008ca0>
10009280:	04000084 	movi	r16,2
10009284:	003b9d06 	br	100080fc <__alt_data_end+0xf80080fc>
10009288:	d9001317 	ldw	r4,76(sp)
1000928c:	d9000515 	stw	r4,20(sp)
10009290:	003cd606 	br	100085ec <__alt_data_end+0xf80085ec>
10009294:	d8801317 	ldw	r2,76(sp)
10009298:	d8800515 	stw	r2,20(sp)
1000929c:	003c2a06 	br	10008348 <__alt_data_end+0xf8008348>
100092a0:	d9800317 	ldw	r6,12(sp)
100092a4:	00800084 	movi	r2,2
100092a8:	11801516 	blt	r2,r6,10009300 <_dtoa_r+0x1660>
100092ac:	d9c00c17 	ldw	r7,48(sp)
100092b0:	d9c00615 	stw	r7,24(sp)
100092b4:	003df706 	br	10008a94 <__alt_data_end+0xf8008a94>
100092b8:	193d3926 	beq	r3,r4,100087a0 <__alt_data_end+0xf80087a0>
100092bc:	00c00f04 	movi	r3,60
100092c0:	1885c83a 	sub	r2,r3,r2
100092c4:	003ddf06 	br	10008a44 <__alt_data_end+0xf8008a44>
100092c8:	e009883a 	mov	r4,fp
100092cc:	e0001115 	stw	zero,68(fp)
100092d0:	000b883a 	mov	r5,zero
100092d4:	000b3580 	call	1000b358 <_Balloc>
100092d8:	d8800715 	stw	r2,28(sp)
100092dc:	d8c00717 	ldw	r3,28(sp)
100092e0:	00bfffc4 	movi	r2,-1
100092e4:	01000044 	movi	r4,1
100092e8:	d8800c15 	stw	r2,48(sp)
100092ec:	e0c01015 	stw	r3,64(fp)
100092f0:	d9000b15 	stw	r4,44(sp)
100092f4:	d8800615 	stw	r2,24(sp)
100092f8:	d8002215 	stw	zero,136(sp)
100092fc:	003c4106 	br	10008404 <__alt_data_end+0xf8008404>
10009300:	d8c00c17 	ldw	r3,48(sp)
10009304:	d8c00615 	stw	r3,24(sp)
10009308:	003e7006 	br	10008ccc <__alt_data_end+0xf8008ccc>
1000930c:	04400044 	movi	r17,1
10009310:	003b2006 	br	10007f94 <__alt_data_end+0xf8007f94>
10009314:	000b883a 	mov	r5,zero
10009318:	003b3d06 	br	10008010 <__alt_data_end+0xf8008010>
1000931c:	d8800c17 	ldw	r2,48(sp)
10009320:	d8800615 	stw	r2,24(sp)
10009324:	003e6906 	br	10008ccc <__alt_data_end+0xf8008ccc>

10009328 <__sflush_r>:
10009328:	2880030b 	ldhu	r2,12(r5)
1000932c:	defffb04 	addi	sp,sp,-20
10009330:	dcc00315 	stw	r19,12(sp)
10009334:	dc400115 	stw	r17,4(sp)
10009338:	dfc00415 	stw	ra,16(sp)
1000933c:	dc800215 	stw	r18,8(sp)
10009340:	dc000015 	stw	r16,0(sp)
10009344:	10c0020c 	andi	r3,r2,8
10009348:	2823883a 	mov	r17,r5
1000934c:	2027883a 	mov	r19,r4
10009350:	1800311e 	bne	r3,zero,10009418 <__sflush_r+0xf0>
10009354:	28c00117 	ldw	r3,4(r5)
10009358:	10820014 	ori	r2,r2,2048
1000935c:	2880030d 	sth	r2,12(r5)
10009360:	00c04b0e 	bge	zero,r3,10009490 <__sflush_r+0x168>
10009364:	8a000a17 	ldw	r8,40(r17)
10009368:	40002326 	beq	r8,zero,100093f8 <__sflush_r+0xd0>
1000936c:	9c000017 	ldw	r16,0(r19)
10009370:	10c4000c 	andi	r3,r2,4096
10009374:	98000015 	stw	zero,0(r19)
10009378:	18004826 	beq	r3,zero,1000949c <__sflush_r+0x174>
1000937c:	89801417 	ldw	r6,80(r17)
10009380:	10c0010c 	andi	r3,r2,4
10009384:	18000626 	beq	r3,zero,100093a0 <__sflush_r+0x78>
10009388:	88c00117 	ldw	r3,4(r17)
1000938c:	88800c17 	ldw	r2,48(r17)
10009390:	30cdc83a 	sub	r6,r6,r3
10009394:	10000226 	beq	r2,zero,100093a0 <__sflush_r+0x78>
10009398:	88800f17 	ldw	r2,60(r17)
1000939c:	308dc83a 	sub	r6,r6,r2
100093a0:	89400717 	ldw	r5,28(r17)
100093a4:	000f883a 	mov	r7,zero
100093a8:	9809883a 	mov	r4,r19
100093ac:	403ee83a 	callr	r8
100093b0:	00ffffc4 	movi	r3,-1
100093b4:	10c04426 	beq	r2,r3,100094c8 <__sflush_r+0x1a0>
100093b8:	88c0030b 	ldhu	r3,12(r17)
100093bc:	89000417 	ldw	r4,16(r17)
100093c0:	88000115 	stw	zero,4(r17)
100093c4:	197dffcc 	andi	r5,r3,63487
100093c8:	8940030d 	sth	r5,12(r17)
100093cc:	89000015 	stw	r4,0(r17)
100093d0:	18c4000c 	andi	r3,r3,4096
100093d4:	18002c1e 	bne	r3,zero,10009488 <__sflush_r+0x160>
100093d8:	89400c17 	ldw	r5,48(r17)
100093dc:	9c000015 	stw	r16,0(r19)
100093e0:	28000526 	beq	r5,zero,100093f8 <__sflush_r+0xd0>
100093e4:	88801004 	addi	r2,r17,64
100093e8:	28800226 	beq	r5,r2,100093f4 <__sflush_r+0xcc>
100093ec:	9809883a 	mov	r4,r19
100093f0:	0009aa40 	call	10009aa4 <_free_r>
100093f4:	88000c15 	stw	zero,48(r17)
100093f8:	0005883a 	mov	r2,zero
100093fc:	dfc00417 	ldw	ra,16(sp)
10009400:	dcc00317 	ldw	r19,12(sp)
10009404:	dc800217 	ldw	r18,8(sp)
10009408:	dc400117 	ldw	r17,4(sp)
1000940c:	dc000017 	ldw	r16,0(sp)
10009410:	dec00504 	addi	sp,sp,20
10009414:	f800283a 	ret
10009418:	2c800417 	ldw	r18,16(r5)
1000941c:	903ff626 	beq	r18,zero,100093f8 <__alt_data_end+0xf80093f8>
10009420:	2c000017 	ldw	r16,0(r5)
10009424:	108000cc 	andi	r2,r2,3
10009428:	2c800015 	stw	r18,0(r5)
1000942c:	84a1c83a 	sub	r16,r16,r18
10009430:	1000131e 	bne	r2,zero,10009480 <__sflush_r+0x158>
10009434:	28800517 	ldw	r2,20(r5)
10009438:	88800215 	stw	r2,8(r17)
1000943c:	04000316 	blt	zero,r16,1000944c <__sflush_r+0x124>
10009440:	003fed06 	br	100093f8 <__alt_data_end+0xf80093f8>
10009444:	90a5883a 	add	r18,r18,r2
10009448:	043feb0e 	bge	zero,r16,100093f8 <__alt_data_end+0xf80093f8>
1000944c:	88800917 	ldw	r2,36(r17)
10009450:	89400717 	ldw	r5,28(r17)
10009454:	800f883a 	mov	r7,r16
10009458:	900d883a 	mov	r6,r18
1000945c:	9809883a 	mov	r4,r19
10009460:	103ee83a 	callr	r2
10009464:	80a1c83a 	sub	r16,r16,r2
10009468:	00bff616 	blt	zero,r2,10009444 <__alt_data_end+0xf8009444>
1000946c:	88c0030b 	ldhu	r3,12(r17)
10009470:	00bfffc4 	movi	r2,-1
10009474:	18c01014 	ori	r3,r3,64
10009478:	88c0030d 	sth	r3,12(r17)
1000947c:	003fdf06 	br	100093fc <__alt_data_end+0xf80093fc>
10009480:	0005883a 	mov	r2,zero
10009484:	003fec06 	br	10009438 <__alt_data_end+0xf8009438>
10009488:	88801415 	stw	r2,80(r17)
1000948c:	003fd206 	br	100093d8 <__alt_data_end+0xf80093d8>
10009490:	28c00f17 	ldw	r3,60(r5)
10009494:	00ffb316 	blt	zero,r3,10009364 <__alt_data_end+0xf8009364>
10009498:	003fd706 	br	100093f8 <__alt_data_end+0xf80093f8>
1000949c:	89400717 	ldw	r5,28(r17)
100094a0:	000d883a 	mov	r6,zero
100094a4:	01c00044 	movi	r7,1
100094a8:	9809883a 	mov	r4,r19
100094ac:	403ee83a 	callr	r8
100094b0:	100d883a 	mov	r6,r2
100094b4:	00bfffc4 	movi	r2,-1
100094b8:	30801426 	beq	r6,r2,1000950c <__sflush_r+0x1e4>
100094bc:	8880030b 	ldhu	r2,12(r17)
100094c0:	8a000a17 	ldw	r8,40(r17)
100094c4:	003fae06 	br	10009380 <__alt_data_end+0xf8009380>
100094c8:	98c00017 	ldw	r3,0(r19)
100094cc:	183fba26 	beq	r3,zero,100093b8 <__alt_data_end+0xf80093b8>
100094d0:	01000744 	movi	r4,29
100094d4:	19000626 	beq	r3,r4,100094f0 <__sflush_r+0x1c8>
100094d8:	01000584 	movi	r4,22
100094dc:	19000426 	beq	r3,r4,100094f0 <__sflush_r+0x1c8>
100094e0:	88c0030b 	ldhu	r3,12(r17)
100094e4:	18c01014 	ori	r3,r3,64
100094e8:	88c0030d 	sth	r3,12(r17)
100094ec:	003fc306 	br	100093fc <__alt_data_end+0xf80093fc>
100094f0:	8880030b 	ldhu	r2,12(r17)
100094f4:	88c00417 	ldw	r3,16(r17)
100094f8:	88000115 	stw	zero,4(r17)
100094fc:	10bdffcc 	andi	r2,r2,63487
10009500:	8880030d 	sth	r2,12(r17)
10009504:	88c00015 	stw	r3,0(r17)
10009508:	003fb306 	br	100093d8 <__alt_data_end+0xf80093d8>
1000950c:	98800017 	ldw	r2,0(r19)
10009510:	103fea26 	beq	r2,zero,100094bc <__alt_data_end+0xf80094bc>
10009514:	00c00744 	movi	r3,29
10009518:	10c00226 	beq	r2,r3,10009524 <__sflush_r+0x1fc>
1000951c:	00c00584 	movi	r3,22
10009520:	10c0031e 	bne	r2,r3,10009530 <__sflush_r+0x208>
10009524:	9c000015 	stw	r16,0(r19)
10009528:	0005883a 	mov	r2,zero
1000952c:	003fb306 	br	100093fc <__alt_data_end+0xf80093fc>
10009530:	88c0030b 	ldhu	r3,12(r17)
10009534:	3005883a 	mov	r2,r6
10009538:	18c01014 	ori	r3,r3,64
1000953c:	88c0030d 	sth	r3,12(r17)
10009540:	003fae06 	br	100093fc <__alt_data_end+0xf80093fc>

10009544 <_fflush_r>:
10009544:	defffd04 	addi	sp,sp,-12
10009548:	dc000115 	stw	r16,4(sp)
1000954c:	dfc00215 	stw	ra,8(sp)
10009550:	2021883a 	mov	r16,r4
10009554:	20000226 	beq	r4,zero,10009560 <_fflush_r+0x1c>
10009558:	20800e17 	ldw	r2,56(r4)
1000955c:	10000c26 	beq	r2,zero,10009590 <_fflush_r+0x4c>
10009560:	2880030f 	ldh	r2,12(r5)
10009564:	1000051e 	bne	r2,zero,1000957c <_fflush_r+0x38>
10009568:	0005883a 	mov	r2,zero
1000956c:	dfc00217 	ldw	ra,8(sp)
10009570:	dc000117 	ldw	r16,4(sp)
10009574:	dec00304 	addi	sp,sp,12
10009578:	f800283a 	ret
1000957c:	8009883a 	mov	r4,r16
10009580:	dfc00217 	ldw	ra,8(sp)
10009584:	dc000117 	ldw	r16,4(sp)
10009588:	dec00304 	addi	sp,sp,12
1000958c:	00093281 	jmpi	10009328 <__sflush_r>
10009590:	d9400015 	stw	r5,0(sp)
10009594:	00099300 	call	10009930 <__sinit>
10009598:	d9400017 	ldw	r5,0(sp)
1000959c:	003ff006 	br	10009560 <__alt_data_end+0xf8009560>

100095a0 <fflush>:
100095a0:	20000526 	beq	r4,zero,100095b8 <fflush+0x18>
100095a4:	00840074 	movhi	r2,4097
100095a8:	1098d104 	addi	r2,r2,25412
100095ac:	200b883a 	mov	r5,r4
100095b0:	11000017 	ldw	r4,0(r2)
100095b4:	00095441 	jmpi	10009544 <_fflush_r>
100095b8:	00840074 	movhi	r2,4097
100095bc:	1098d004 	addi	r2,r2,25408
100095c0:	11000017 	ldw	r4,0(r2)
100095c4:	01440074 	movhi	r5,4097
100095c8:	29655104 	addi	r5,r5,-27324
100095cc:	000a3401 	jmpi	1000a340 <_fwalk_reent>

100095d0 <__fp_unlock>:
100095d0:	0005883a 	mov	r2,zero
100095d4:	f800283a 	ret

100095d8 <_cleanup_r>:
100095d8:	01440074 	movhi	r5,4097
100095dc:	29793704 	addi	r5,r5,-6948
100095e0:	000a3401 	jmpi	1000a340 <_fwalk_reent>

100095e4 <__sinit.part.1>:
100095e4:	defff704 	addi	sp,sp,-36
100095e8:	00c40074 	movhi	r3,4097
100095ec:	dfc00815 	stw	ra,32(sp)
100095f0:	ddc00715 	stw	r23,28(sp)
100095f4:	dd800615 	stw	r22,24(sp)
100095f8:	dd400515 	stw	r21,20(sp)
100095fc:	dd000415 	stw	r20,16(sp)
10009600:	dcc00315 	stw	r19,12(sp)
10009604:	dc800215 	stw	r18,8(sp)
10009608:	dc400115 	stw	r17,4(sp)
1000960c:	dc000015 	stw	r16,0(sp)
10009610:	18e57604 	addi	r3,r3,-27176
10009614:	24000117 	ldw	r16,4(r4)
10009618:	20c00f15 	stw	r3,60(r4)
1000961c:	2080bb04 	addi	r2,r4,748
10009620:	00c000c4 	movi	r3,3
10009624:	20c0b915 	stw	r3,740(r4)
10009628:	2080ba15 	stw	r2,744(r4)
1000962c:	2000b815 	stw	zero,736(r4)
10009630:	05c00204 	movi	r23,8
10009634:	00800104 	movi	r2,4
10009638:	2025883a 	mov	r18,r4
1000963c:	b80d883a 	mov	r6,r23
10009640:	81001704 	addi	r4,r16,92
10009644:	000b883a 	mov	r5,zero
10009648:	80000015 	stw	zero,0(r16)
1000964c:	80000115 	stw	zero,4(r16)
10009650:	80000215 	stw	zero,8(r16)
10009654:	8080030d 	sth	r2,12(r16)
10009658:	80001915 	stw	zero,100(r16)
1000965c:	8000038d 	sth	zero,14(r16)
10009660:	80000415 	stw	zero,16(r16)
10009664:	80000515 	stw	zero,20(r16)
10009668:	80000615 	stw	zero,24(r16)
1000966c:	000b2300 	call	1000b230 <memset>
10009670:	05840074 	movhi	r22,4097
10009674:	94400217 	ldw	r17,8(r18)
10009678:	05440074 	movhi	r21,4097
1000967c:	05040074 	movhi	r20,4097
10009680:	04c40074 	movhi	r19,4097
10009684:	b5b28f04 	addi	r22,r22,-13764
10009688:	ad72a604 	addi	r21,r21,-13672
1000968c:	a532c504 	addi	r20,r20,-13548
10009690:	9cf2dc04 	addi	r19,r19,-13456
10009694:	85800815 	stw	r22,32(r16)
10009698:	85400915 	stw	r21,36(r16)
1000969c:	85000a15 	stw	r20,40(r16)
100096a0:	84c00b15 	stw	r19,44(r16)
100096a4:	84000715 	stw	r16,28(r16)
100096a8:	00800284 	movi	r2,10
100096ac:	8880030d 	sth	r2,12(r17)
100096b0:	00800044 	movi	r2,1
100096b4:	b80d883a 	mov	r6,r23
100096b8:	89001704 	addi	r4,r17,92
100096bc:	000b883a 	mov	r5,zero
100096c0:	88000015 	stw	zero,0(r17)
100096c4:	88000115 	stw	zero,4(r17)
100096c8:	88000215 	stw	zero,8(r17)
100096cc:	88001915 	stw	zero,100(r17)
100096d0:	8880038d 	sth	r2,14(r17)
100096d4:	88000415 	stw	zero,16(r17)
100096d8:	88000515 	stw	zero,20(r17)
100096dc:	88000615 	stw	zero,24(r17)
100096e0:	000b2300 	call	1000b230 <memset>
100096e4:	94000317 	ldw	r16,12(r18)
100096e8:	00800484 	movi	r2,18
100096ec:	8c400715 	stw	r17,28(r17)
100096f0:	8d800815 	stw	r22,32(r17)
100096f4:	8d400915 	stw	r21,36(r17)
100096f8:	8d000a15 	stw	r20,40(r17)
100096fc:	8cc00b15 	stw	r19,44(r17)
10009700:	8080030d 	sth	r2,12(r16)
10009704:	00800084 	movi	r2,2
10009708:	80000015 	stw	zero,0(r16)
1000970c:	80000115 	stw	zero,4(r16)
10009710:	80000215 	stw	zero,8(r16)
10009714:	80001915 	stw	zero,100(r16)
10009718:	8080038d 	sth	r2,14(r16)
1000971c:	80000415 	stw	zero,16(r16)
10009720:	80000515 	stw	zero,20(r16)
10009724:	80000615 	stw	zero,24(r16)
10009728:	b80d883a 	mov	r6,r23
1000972c:	000b883a 	mov	r5,zero
10009730:	81001704 	addi	r4,r16,92
10009734:	000b2300 	call	1000b230 <memset>
10009738:	00800044 	movi	r2,1
1000973c:	84000715 	stw	r16,28(r16)
10009740:	85800815 	stw	r22,32(r16)
10009744:	85400915 	stw	r21,36(r16)
10009748:	85000a15 	stw	r20,40(r16)
1000974c:	84c00b15 	stw	r19,44(r16)
10009750:	90800e15 	stw	r2,56(r18)
10009754:	dfc00817 	ldw	ra,32(sp)
10009758:	ddc00717 	ldw	r23,28(sp)
1000975c:	dd800617 	ldw	r22,24(sp)
10009760:	dd400517 	ldw	r21,20(sp)
10009764:	dd000417 	ldw	r20,16(sp)
10009768:	dcc00317 	ldw	r19,12(sp)
1000976c:	dc800217 	ldw	r18,8(sp)
10009770:	dc400117 	ldw	r17,4(sp)
10009774:	dc000017 	ldw	r16,0(sp)
10009778:	dec00904 	addi	sp,sp,36
1000977c:	f800283a 	ret

10009780 <__fp_lock>:
10009780:	0005883a 	mov	r2,zero
10009784:	f800283a 	ret

10009788 <__sfmoreglue>:
10009788:	defffc04 	addi	sp,sp,-16
1000978c:	dc800215 	stw	r18,8(sp)
10009790:	2825883a 	mov	r18,r5
10009794:	dc000015 	stw	r16,0(sp)
10009798:	01401a04 	movi	r5,104
1000979c:	2021883a 	mov	r16,r4
100097a0:	913fffc4 	addi	r4,r18,-1
100097a4:	dfc00315 	stw	ra,12(sp)
100097a8:	dc400115 	stw	r17,4(sp)
100097ac:	00052a00 	call	100052a0 <__mulsi3>
100097b0:	8009883a 	mov	r4,r16
100097b4:	11401d04 	addi	r5,r2,116
100097b8:	1023883a 	mov	r17,r2
100097bc:	000a69c0 	call	1000a69c <_malloc_r>
100097c0:	1021883a 	mov	r16,r2
100097c4:	10000726 	beq	r2,zero,100097e4 <__sfmoreglue+0x5c>
100097c8:	11000304 	addi	r4,r2,12
100097cc:	10000015 	stw	zero,0(r2)
100097d0:	14800115 	stw	r18,4(r2)
100097d4:	11000215 	stw	r4,8(r2)
100097d8:	89801a04 	addi	r6,r17,104
100097dc:	000b883a 	mov	r5,zero
100097e0:	000b2300 	call	1000b230 <memset>
100097e4:	8005883a 	mov	r2,r16
100097e8:	dfc00317 	ldw	ra,12(sp)
100097ec:	dc800217 	ldw	r18,8(sp)
100097f0:	dc400117 	ldw	r17,4(sp)
100097f4:	dc000017 	ldw	r16,0(sp)
100097f8:	dec00404 	addi	sp,sp,16
100097fc:	f800283a 	ret

10009800 <__sfp>:
10009800:	defffb04 	addi	sp,sp,-20
10009804:	dc000015 	stw	r16,0(sp)
10009808:	04040074 	movhi	r16,4097
1000980c:	8418d004 	addi	r16,r16,25408
10009810:	dcc00315 	stw	r19,12(sp)
10009814:	2027883a 	mov	r19,r4
10009818:	81000017 	ldw	r4,0(r16)
1000981c:	dfc00415 	stw	ra,16(sp)
10009820:	dc800215 	stw	r18,8(sp)
10009824:	20800e17 	ldw	r2,56(r4)
10009828:	dc400115 	stw	r17,4(sp)
1000982c:	1000021e 	bne	r2,zero,10009838 <__sfp+0x38>
10009830:	00095e40 	call	100095e4 <__sinit.part.1>
10009834:	81000017 	ldw	r4,0(r16)
10009838:	2480b804 	addi	r18,r4,736
1000983c:	047fffc4 	movi	r17,-1
10009840:	91000117 	ldw	r4,4(r18)
10009844:	94000217 	ldw	r16,8(r18)
10009848:	213fffc4 	addi	r4,r4,-1
1000984c:	20000a16 	blt	r4,zero,10009878 <__sfp+0x78>
10009850:	8080030f 	ldh	r2,12(r16)
10009854:	10000c26 	beq	r2,zero,10009888 <__sfp+0x88>
10009858:	80c01d04 	addi	r3,r16,116
1000985c:	00000206 	br	10009868 <__sfp+0x68>
10009860:	18bfe60f 	ldh	r2,-104(r3)
10009864:	10000826 	beq	r2,zero,10009888 <__sfp+0x88>
10009868:	213fffc4 	addi	r4,r4,-1
1000986c:	1c3ffd04 	addi	r16,r3,-12
10009870:	18c01a04 	addi	r3,r3,104
10009874:	247ffa1e 	bne	r4,r17,10009860 <__alt_data_end+0xf8009860>
10009878:	90800017 	ldw	r2,0(r18)
1000987c:	10001d26 	beq	r2,zero,100098f4 <__sfp+0xf4>
10009880:	1025883a 	mov	r18,r2
10009884:	003fee06 	br	10009840 <__alt_data_end+0xf8009840>
10009888:	00bfffc4 	movi	r2,-1
1000988c:	8080038d 	sth	r2,14(r16)
10009890:	00800044 	movi	r2,1
10009894:	8080030d 	sth	r2,12(r16)
10009898:	80001915 	stw	zero,100(r16)
1000989c:	80000015 	stw	zero,0(r16)
100098a0:	80000215 	stw	zero,8(r16)
100098a4:	80000115 	stw	zero,4(r16)
100098a8:	80000415 	stw	zero,16(r16)
100098ac:	80000515 	stw	zero,20(r16)
100098b0:	80000615 	stw	zero,24(r16)
100098b4:	01800204 	movi	r6,8
100098b8:	000b883a 	mov	r5,zero
100098bc:	81001704 	addi	r4,r16,92
100098c0:	000b2300 	call	1000b230 <memset>
100098c4:	8005883a 	mov	r2,r16
100098c8:	80000c15 	stw	zero,48(r16)
100098cc:	80000d15 	stw	zero,52(r16)
100098d0:	80001115 	stw	zero,68(r16)
100098d4:	80001215 	stw	zero,72(r16)
100098d8:	dfc00417 	ldw	ra,16(sp)
100098dc:	dcc00317 	ldw	r19,12(sp)
100098e0:	dc800217 	ldw	r18,8(sp)
100098e4:	dc400117 	ldw	r17,4(sp)
100098e8:	dc000017 	ldw	r16,0(sp)
100098ec:	dec00504 	addi	sp,sp,20
100098f0:	f800283a 	ret
100098f4:	01400104 	movi	r5,4
100098f8:	9809883a 	mov	r4,r19
100098fc:	00097880 	call	10009788 <__sfmoreglue>
10009900:	90800015 	stw	r2,0(r18)
10009904:	103fde1e 	bne	r2,zero,10009880 <__alt_data_end+0xf8009880>
10009908:	00800304 	movi	r2,12
1000990c:	98800015 	stw	r2,0(r19)
10009910:	0005883a 	mov	r2,zero
10009914:	003ff006 	br	100098d8 <__alt_data_end+0xf80098d8>

10009918 <_cleanup>:
10009918:	00840074 	movhi	r2,4097
1000991c:	1098d004 	addi	r2,r2,25408
10009920:	11000017 	ldw	r4,0(r2)
10009924:	01440074 	movhi	r5,4097
10009928:	29793704 	addi	r5,r5,-6948
1000992c:	000a3401 	jmpi	1000a340 <_fwalk_reent>

10009930 <__sinit>:
10009930:	20800e17 	ldw	r2,56(r4)
10009934:	10000126 	beq	r2,zero,1000993c <__sinit+0xc>
10009938:	f800283a 	ret
1000993c:	00095e41 	jmpi	100095e4 <__sinit.part.1>

10009940 <__sfp_lock_acquire>:
10009940:	f800283a 	ret

10009944 <__sfp_lock_release>:
10009944:	f800283a 	ret

10009948 <__sinit_lock_acquire>:
10009948:	f800283a 	ret

1000994c <__sinit_lock_release>:
1000994c:	f800283a 	ret

10009950 <__fp_lock_all>:
10009950:	00840074 	movhi	r2,4097
10009954:	1098d104 	addi	r2,r2,25412
10009958:	11000017 	ldw	r4,0(r2)
1000995c:	01440074 	movhi	r5,4097
10009960:	2965e004 	addi	r5,r5,-26752
10009964:	000a27c1 	jmpi	1000a27c <_fwalk>

10009968 <__fp_unlock_all>:
10009968:	00840074 	movhi	r2,4097
1000996c:	1098d104 	addi	r2,r2,25412
10009970:	11000017 	ldw	r4,0(r2)
10009974:	01440074 	movhi	r5,4097
10009978:	29657404 	addi	r5,r5,-27184
1000997c:	000a27c1 	jmpi	1000a27c <_fwalk>

10009980 <_malloc_trim_r>:
10009980:	defffb04 	addi	sp,sp,-20
10009984:	dcc00315 	stw	r19,12(sp)
10009988:	04c40074 	movhi	r19,4097
1000998c:	dc800215 	stw	r18,8(sp)
10009990:	dc400115 	stw	r17,4(sp)
10009994:	dc000015 	stw	r16,0(sp)
10009998:	dfc00415 	stw	ra,16(sp)
1000999c:	2821883a 	mov	r16,r5
100099a0:	9cd34b04 	addi	r19,r19,19756
100099a4:	2025883a 	mov	r18,r4
100099a8:	0011af80 	call	10011af8 <__malloc_lock>
100099ac:	98800217 	ldw	r2,8(r19)
100099b0:	14400117 	ldw	r17,4(r2)
100099b4:	00bfff04 	movi	r2,-4
100099b8:	88a2703a 	and	r17,r17,r2
100099bc:	8c21c83a 	sub	r16,r17,r16
100099c0:	8403fbc4 	addi	r16,r16,4079
100099c4:	8020d33a 	srli	r16,r16,12
100099c8:	0083ffc4 	movi	r2,4095
100099cc:	843fffc4 	addi	r16,r16,-1
100099d0:	8020933a 	slli	r16,r16,12
100099d4:	1400060e 	bge	r2,r16,100099f0 <_malloc_trim_r+0x70>
100099d8:	000b883a 	mov	r5,zero
100099dc:	9009883a 	mov	r4,r18
100099e0:	000c9e80 	call	1000c9e8 <_sbrk_r>
100099e4:	98c00217 	ldw	r3,8(r19)
100099e8:	1c47883a 	add	r3,r3,r17
100099ec:	10c00a26 	beq	r2,r3,10009a18 <_malloc_trim_r+0x98>
100099f0:	9009883a 	mov	r4,r18
100099f4:	0011b1c0 	call	10011b1c <__malloc_unlock>
100099f8:	0005883a 	mov	r2,zero
100099fc:	dfc00417 	ldw	ra,16(sp)
10009a00:	dcc00317 	ldw	r19,12(sp)
10009a04:	dc800217 	ldw	r18,8(sp)
10009a08:	dc400117 	ldw	r17,4(sp)
10009a0c:	dc000017 	ldw	r16,0(sp)
10009a10:	dec00504 	addi	sp,sp,20
10009a14:	f800283a 	ret
10009a18:	040bc83a 	sub	r5,zero,r16
10009a1c:	9009883a 	mov	r4,r18
10009a20:	000c9e80 	call	1000c9e8 <_sbrk_r>
10009a24:	00ffffc4 	movi	r3,-1
10009a28:	10c00d26 	beq	r2,r3,10009a60 <_malloc_trim_r+0xe0>
10009a2c:	00c40074 	movhi	r3,4097
10009a30:	18dfb704 	addi	r3,r3,32476
10009a34:	18800017 	ldw	r2,0(r3)
10009a38:	99000217 	ldw	r4,8(r19)
10009a3c:	8c23c83a 	sub	r17,r17,r16
10009a40:	8c400054 	ori	r17,r17,1
10009a44:	1421c83a 	sub	r16,r2,r16
10009a48:	24400115 	stw	r17,4(r4)
10009a4c:	9009883a 	mov	r4,r18
10009a50:	1c000015 	stw	r16,0(r3)
10009a54:	0011b1c0 	call	10011b1c <__malloc_unlock>
10009a58:	00800044 	movi	r2,1
10009a5c:	003fe706 	br	100099fc <__alt_data_end+0xf80099fc>
10009a60:	000b883a 	mov	r5,zero
10009a64:	9009883a 	mov	r4,r18
10009a68:	000c9e80 	call	1000c9e8 <_sbrk_r>
10009a6c:	99000217 	ldw	r4,8(r19)
10009a70:	014003c4 	movi	r5,15
10009a74:	1107c83a 	sub	r3,r2,r4
10009a78:	28ffdd0e 	bge	r5,r3,100099f0 <__alt_data_end+0xf80099f0>
10009a7c:	01440074 	movhi	r5,4097
10009a80:	2958d304 	addi	r5,r5,25420
10009a84:	29400017 	ldw	r5,0(r5)
10009a88:	18c00054 	ori	r3,r3,1
10009a8c:	20c00115 	stw	r3,4(r4)
10009a90:	00c40074 	movhi	r3,4097
10009a94:	1145c83a 	sub	r2,r2,r5
10009a98:	18dfb704 	addi	r3,r3,32476
10009a9c:	18800015 	stw	r2,0(r3)
10009aa0:	003fd306 	br	100099f0 <__alt_data_end+0xf80099f0>

10009aa4 <_free_r>:
10009aa4:	28004126 	beq	r5,zero,10009bac <_free_r+0x108>
10009aa8:	defffd04 	addi	sp,sp,-12
10009aac:	dc400115 	stw	r17,4(sp)
10009ab0:	dc000015 	stw	r16,0(sp)
10009ab4:	2023883a 	mov	r17,r4
10009ab8:	2821883a 	mov	r16,r5
10009abc:	dfc00215 	stw	ra,8(sp)
10009ac0:	0011af80 	call	10011af8 <__malloc_lock>
10009ac4:	81ffff17 	ldw	r7,-4(r16)
10009ac8:	00bfff84 	movi	r2,-2
10009acc:	01040074 	movhi	r4,4097
10009ad0:	81bffe04 	addi	r6,r16,-8
10009ad4:	3884703a 	and	r2,r7,r2
10009ad8:	21134b04 	addi	r4,r4,19756
10009adc:	308b883a 	add	r5,r6,r2
10009ae0:	2a400117 	ldw	r9,4(r5)
10009ae4:	22000217 	ldw	r8,8(r4)
10009ae8:	00ffff04 	movi	r3,-4
10009aec:	48c6703a 	and	r3,r9,r3
10009af0:	2a005726 	beq	r5,r8,10009c50 <_free_r+0x1ac>
10009af4:	28c00115 	stw	r3,4(r5)
10009af8:	39c0004c 	andi	r7,r7,1
10009afc:	3800091e 	bne	r7,zero,10009b24 <_free_r+0x80>
10009b00:	823ffe17 	ldw	r8,-8(r16)
10009b04:	22400204 	addi	r9,r4,8
10009b08:	320dc83a 	sub	r6,r6,r8
10009b0c:	31c00217 	ldw	r7,8(r6)
10009b10:	1205883a 	add	r2,r2,r8
10009b14:	3a406526 	beq	r7,r9,10009cac <_free_r+0x208>
10009b18:	32000317 	ldw	r8,12(r6)
10009b1c:	3a000315 	stw	r8,12(r7)
10009b20:	41c00215 	stw	r7,8(r8)
10009b24:	28cf883a 	add	r7,r5,r3
10009b28:	39c00117 	ldw	r7,4(r7)
10009b2c:	39c0004c 	andi	r7,r7,1
10009b30:	38003a26 	beq	r7,zero,10009c1c <_free_r+0x178>
10009b34:	10c00054 	ori	r3,r2,1
10009b38:	30c00115 	stw	r3,4(r6)
10009b3c:	3087883a 	add	r3,r6,r2
10009b40:	18800015 	stw	r2,0(r3)
10009b44:	00c07fc4 	movi	r3,511
10009b48:	18801936 	bltu	r3,r2,10009bb0 <_free_r+0x10c>
10009b4c:	1004d0fa 	srli	r2,r2,3
10009b50:	01c00044 	movi	r7,1
10009b54:	21400117 	ldw	r5,4(r4)
10009b58:	10c00044 	addi	r3,r2,1
10009b5c:	18c7883a 	add	r3,r3,r3
10009b60:	1005d0ba 	srai	r2,r2,2
10009b64:	18c7883a 	add	r3,r3,r3
10009b68:	18c7883a 	add	r3,r3,r3
10009b6c:	1907883a 	add	r3,r3,r4
10009b70:	3884983a 	sll	r2,r7,r2
10009b74:	19c00017 	ldw	r7,0(r3)
10009b78:	1a3ffe04 	addi	r8,r3,-8
10009b7c:	1144b03a 	or	r2,r2,r5
10009b80:	32000315 	stw	r8,12(r6)
10009b84:	31c00215 	stw	r7,8(r6)
10009b88:	20800115 	stw	r2,4(r4)
10009b8c:	19800015 	stw	r6,0(r3)
10009b90:	39800315 	stw	r6,12(r7)
10009b94:	8809883a 	mov	r4,r17
10009b98:	dfc00217 	ldw	ra,8(sp)
10009b9c:	dc400117 	ldw	r17,4(sp)
10009ba0:	dc000017 	ldw	r16,0(sp)
10009ba4:	dec00304 	addi	sp,sp,12
10009ba8:	0011b1c1 	jmpi	10011b1c <__malloc_unlock>
10009bac:	f800283a 	ret
10009bb0:	100ad27a 	srli	r5,r2,9
10009bb4:	00c00104 	movi	r3,4
10009bb8:	19404a36 	bltu	r3,r5,10009ce4 <_free_r+0x240>
10009bbc:	100ad1ba 	srli	r5,r2,6
10009bc0:	28c00e44 	addi	r3,r5,57
10009bc4:	18c7883a 	add	r3,r3,r3
10009bc8:	29400e04 	addi	r5,r5,56
10009bcc:	18c7883a 	add	r3,r3,r3
10009bd0:	18c7883a 	add	r3,r3,r3
10009bd4:	1909883a 	add	r4,r3,r4
10009bd8:	20c00017 	ldw	r3,0(r4)
10009bdc:	01c40074 	movhi	r7,4097
10009be0:	213ffe04 	addi	r4,r4,-8
10009be4:	39d34b04 	addi	r7,r7,19756
10009be8:	20c04426 	beq	r4,r3,10009cfc <_free_r+0x258>
10009bec:	01ffff04 	movi	r7,-4
10009bf0:	19400117 	ldw	r5,4(r3)
10009bf4:	29ca703a 	and	r5,r5,r7
10009bf8:	1140022e 	bgeu	r2,r5,10009c04 <_free_r+0x160>
10009bfc:	18c00217 	ldw	r3,8(r3)
10009c00:	20fffb1e 	bne	r4,r3,10009bf0 <__alt_data_end+0xf8009bf0>
10009c04:	19000317 	ldw	r4,12(r3)
10009c08:	31000315 	stw	r4,12(r6)
10009c0c:	30c00215 	stw	r3,8(r6)
10009c10:	21800215 	stw	r6,8(r4)
10009c14:	19800315 	stw	r6,12(r3)
10009c18:	003fde06 	br	10009b94 <__alt_data_end+0xf8009b94>
10009c1c:	29c00217 	ldw	r7,8(r5)
10009c20:	10c5883a 	add	r2,r2,r3
10009c24:	00c40074 	movhi	r3,4097
10009c28:	18d34d04 	addi	r3,r3,19764
10009c2c:	38c03b26 	beq	r7,r3,10009d1c <_free_r+0x278>
10009c30:	2a000317 	ldw	r8,12(r5)
10009c34:	11400054 	ori	r5,r2,1
10009c38:	3087883a 	add	r3,r6,r2
10009c3c:	3a000315 	stw	r8,12(r7)
10009c40:	41c00215 	stw	r7,8(r8)
10009c44:	31400115 	stw	r5,4(r6)
10009c48:	18800015 	stw	r2,0(r3)
10009c4c:	003fbd06 	br	10009b44 <__alt_data_end+0xf8009b44>
10009c50:	39c0004c 	andi	r7,r7,1
10009c54:	10c5883a 	add	r2,r2,r3
10009c58:	3800071e 	bne	r7,zero,10009c78 <_free_r+0x1d4>
10009c5c:	81fffe17 	ldw	r7,-8(r16)
10009c60:	31cdc83a 	sub	r6,r6,r7
10009c64:	30c00317 	ldw	r3,12(r6)
10009c68:	31400217 	ldw	r5,8(r6)
10009c6c:	11c5883a 	add	r2,r2,r7
10009c70:	28c00315 	stw	r3,12(r5)
10009c74:	19400215 	stw	r5,8(r3)
10009c78:	10c00054 	ori	r3,r2,1
10009c7c:	30c00115 	stw	r3,4(r6)
10009c80:	00c40074 	movhi	r3,4097
10009c84:	18d8d404 	addi	r3,r3,25424
10009c88:	18c00017 	ldw	r3,0(r3)
10009c8c:	21800215 	stw	r6,8(r4)
10009c90:	10ffc036 	bltu	r2,r3,10009b94 <__alt_data_end+0xf8009b94>
10009c94:	00840074 	movhi	r2,4097
10009c98:	109fae04 	addi	r2,r2,32440
10009c9c:	11400017 	ldw	r5,0(r2)
10009ca0:	8809883a 	mov	r4,r17
10009ca4:	00099800 	call	10009980 <_malloc_trim_r>
10009ca8:	003fba06 	br	10009b94 <__alt_data_end+0xf8009b94>
10009cac:	28c9883a 	add	r4,r5,r3
10009cb0:	21000117 	ldw	r4,4(r4)
10009cb4:	2100004c 	andi	r4,r4,1
10009cb8:	2000391e 	bne	r4,zero,10009da0 <_free_r+0x2fc>
10009cbc:	29c00217 	ldw	r7,8(r5)
10009cc0:	29000317 	ldw	r4,12(r5)
10009cc4:	1885883a 	add	r2,r3,r2
10009cc8:	10c00054 	ori	r3,r2,1
10009ccc:	39000315 	stw	r4,12(r7)
10009cd0:	21c00215 	stw	r7,8(r4)
10009cd4:	30c00115 	stw	r3,4(r6)
10009cd8:	308d883a 	add	r6,r6,r2
10009cdc:	30800015 	stw	r2,0(r6)
10009ce0:	003fac06 	br	10009b94 <__alt_data_end+0xf8009b94>
10009ce4:	00c00504 	movi	r3,20
10009ce8:	19401536 	bltu	r3,r5,10009d40 <_free_r+0x29c>
10009cec:	28c01704 	addi	r3,r5,92
10009cf0:	18c7883a 	add	r3,r3,r3
10009cf4:	294016c4 	addi	r5,r5,91
10009cf8:	003fb406 	br	10009bcc <__alt_data_end+0xf8009bcc>
10009cfc:	280bd0ba 	srai	r5,r5,2
10009d00:	00c00044 	movi	r3,1
10009d04:	38800117 	ldw	r2,4(r7)
10009d08:	194a983a 	sll	r5,r3,r5
10009d0c:	2007883a 	mov	r3,r4
10009d10:	2884b03a 	or	r2,r5,r2
10009d14:	38800115 	stw	r2,4(r7)
10009d18:	003fbb06 	br	10009c08 <__alt_data_end+0xf8009c08>
10009d1c:	21800515 	stw	r6,20(r4)
10009d20:	21800415 	stw	r6,16(r4)
10009d24:	10c00054 	ori	r3,r2,1
10009d28:	31c00315 	stw	r7,12(r6)
10009d2c:	31c00215 	stw	r7,8(r6)
10009d30:	30c00115 	stw	r3,4(r6)
10009d34:	308d883a 	add	r6,r6,r2
10009d38:	30800015 	stw	r2,0(r6)
10009d3c:	003f9506 	br	10009b94 <__alt_data_end+0xf8009b94>
10009d40:	00c01504 	movi	r3,84
10009d44:	19400536 	bltu	r3,r5,10009d5c <_free_r+0x2b8>
10009d48:	100ad33a 	srli	r5,r2,12
10009d4c:	28c01bc4 	addi	r3,r5,111
10009d50:	18c7883a 	add	r3,r3,r3
10009d54:	29401b84 	addi	r5,r5,110
10009d58:	003f9c06 	br	10009bcc <__alt_data_end+0xf8009bcc>
10009d5c:	00c05504 	movi	r3,340
10009d60:	19400536 	bltu	r3,r5,10009d78 <_free_r+0x2d4>
10009d64:	100ad3fa 	srli	r5,r2,15
10009d68:	28c01e04 	addi	r3,r5,120
10009d6c:	18c7883a 	add	r3,r3,r3
10009d70:	29401dc4 	addi	r5,r5,119
10009d74:	003f9506 	br	10009bcc <__alt_data_end+0xf8009bcc>
10009d78:	00c15504 	movi	r3,1364
10009d7c:	19400536 	bltu	r3,r5,10009d94 <_free_r+0x2f0>
10009d80:	100ad4ba 	srli	r5,r2,18
10009d84:	28c01f44 	addi	r3,r5,125
10009d88:	18c7883a 	add	r3,r3,r3
10009d8c:	29401f04 	addi	r5,r5,124
10009d90:	003f8e06 	br	10009bcc <__alt_data_end+0xf8009bcc>
10009d94:	00c03f84 	movi	r3,254
10009d98:	01401f84 	movi	r5,126
10009d9c:	003f8b06 	br	10009bcc <__alt_data_end+0xf8009bcc>
10009da0:	10c00054 	ori	r3,r2,1
10009da4:	30c00115 	stw	r3,4(r6)
10009da8:	308d883a 	add	r6,r6,r2
10009dac:	30800015 	stw	r2,0(r6)
10009db0:	003f7806 	br	10009b94 <__alt_data_end+0xf8009b94>

10009db4 <__sfvwrite_r>:
10009db4:	30800217 	ldw	r2,8(r6)
10009db8:	10006726 	beq	r2,zero,10009f58 <__sfvwrite_r+0x1a4>
10009dbc:	28c0030b 	ldhu	r3,12(r5)
10009dc0:	defff404 	addi	sp,sp,-48
10009dc4:	dd400715 	stw	r21,28(sp)
10009dc8:	dd000615 	stw	r20,24(sp)
10009dcc:	dc000215 	stw	r16,8(sp)
10009dd0:	dfc00b15 	stw	ra,44(sp)
10009dd4:	df000a15 	stw	fp,40(sp)
10009dd8:	ddc00915 	stw	r23,36(sp)
10009ddc:	dd800815 	stw	r22,32(sp)
10009de0:	dcc00515 	stw	r19,20(sp)
10009de4:	dc800415 	stw	r18,16(sp)
10009de8:	dc400315 	stw	r17,12(sp)
10009dec:	1880020c 	andi	r2,r3,8
10009df0:	2821883a 	mov	r16,r5
10009df4:	202b883a 	mov	r21,r4
10009df8:	3029883a 	mov	r20,r6
10009dfc:	10002726 	beq	r2,zero,10009e9c <__sfvwrite_r+0xe8>
10009e00:	28800417 	ldw	r2,16(r5)
10009e04:	10002526 	beq	r2,zero,10009e9c <__sfvwrite_r+0xe8>
10009e08:	1880008c 	andi	r2,r3,2
10009e0c:	a4400017 	ldw	r17,0(r20)
10009e10:	10002a26 	beq	r2,zero,10009ebc <__sfvwrite_r+0x108>
10009e14:	05a00034 	movhi	r22,32768
10009e18:	0027883a 	mov	r19,zero
10009e1c:	0025883a 	mov	r18,zero
10009e20:	b5bf0004 	addi	r22,r22,-1024
10009e24:	980d883a 	mov	r6,r19
10009e28:	a809883a 	mov	r4,r21
10009e2c:	90004626 	beq	r18,zero,10009f48 <__sfvwrite_r+0x194>
10009e30:	900f883a 	mov	r7,r18
10009e34:	b480022e 	bgeu	r22,r18,10009e40 <__sfvwrite_r+0x8c>
10009e38:	01e00034 	movhi	r7,32768
10009e3c:	39ff0004 	addi	r7,r7,-1024
10009e40:	80800917 	ldw	r2,36(r16)
10009e44:	81400717 	ldw	r5,28(r16)
10009e48:	103ee83a 	callr	r2
10009e4c:	00805a0e 	bge	zero,r2,10009fb8 <__sfvwrite_r+0x204>
10009e50:	a0c00217 	ldw	r3,8(r20)
10009e54:	98a7883a 	add	r19,r19,r2
10009e58:	90a5c83a 	sub	r18,r18,r2
10009e5c:	1885c83a 	sub	r2,r3,r2
10009e60:	a0800215 	stw	r2,8(r20)
10009e64:	103fef1e 	bne	r2,zero,10009e24 <__alt_data_end+0xf8009e24>
10009e68:	0005883a 	mov	r2,zero
10009e6c:	dfc00b17 	ldw	ra,44(sp)
10009e70:	df000a17 	ldw	fp,40(sp)
10009e74:	ddc00917 	ldw	r23,36(sp)
10009e78:	dd800817 	ldw	r22,32(sp)
10009e7c:	dd400717 	ldw	r21,28(sp)
10009e80:	dd000617 	ldw	r20,24(sp)
10009e84:	dcc00517 	ldw	r19,20(sp)
10009e88:	dc800417 	ldw	r18,16(sp)
10009e8c:	dc400317 	ldw	r17,12(sp)
10009e90:	dc000217 	ldw	r16,8(sp)
10009e94:	dec00c04 	addi	sp,sp,48
10009e98:	f800283a 	ret
10009e9c:	800b883a 	mov	r5,r16
10009ea0:	a809883a 	mov	r4,r21
10009ea4:	00079240 	call	10007924 <__swsetup_r>
10009ea8:	1000ee1e 	bne	r2,zero,1000a264 <__sfvwrite_r+0x4b0>
10009eac:	80c0030b 	ldhu	r3,12(r16)
10009eb0:	a4400017 	ldw	r17,0(r20)
10009eb4:	1880008c 	andi	r2,r3,2
10009eb8:	103fd61e 	bne	r2,zero,10009e14 <__alt_data_end+0xf8009e14>
10009ebc:	1880004c 	andi	r2,r3,1
10009ec0:	1000421e 	bne	r2,zero,10009fcc <__sfvwrite_r+0x218>
10009ec4:	0039883a 	mov	fp,zero
10009ec8:	0025883a 	mov	r18,zero
10009ecc:	90001a26 	beq	r18,zero,10009f38 <__sfvwrite_r+0x184>
10009ed0:	1880800c 	andi	r2,r3,512
10009ed4:	84c00217 	ldw	r19,8(r16)
10009ed8:	10002126 	beq	r2,zero,10009f60 <__sfvwrite_r+0x1ac>
10009edc:	982f883a 	mov	r23,r19
10009ee0:	94c09636 	bltu	r18,r19,1000a13c <__sfvwrite_r+0x388>
10009ee4:	1881200c 	andi	r2,r3,1152
10009ee8:	1000a11e 	bne	r2,zero,1000a170 <__sfvwrite_r+0x3bc>
10009eec:	81000017 	ldw	r4,0(r16)
10009ef0:	b80d883a 	mov	r6,r23
10009ef4:	e00b883a 	mov	r5,fp
10009ef8:	000b0d40 	call	1000b0d4 <memmove>
10009efc:	80c00217 	ldw	r3,8(r16)
10009f00:	81000017 	ldw	r4,0(r16)
10009f04:	9005883a 	mov	r2,r18
10009f08:	1ce7c83a 	sub	r19,r3,r19
10009f0c:	25cf883a 	add	r7,r4,r23
10009f10:	84c00215 	stw	r19,8(r16)
10009f14:	81c00015 	stw	r7,0(r16)
10009f18:	a0c00217 	ldw	r3,8(r20)
10009f1c:	e0b9883a 	add	fp,fp,r2
10009f20:	90a5c83a 	sub	r18,r18,r2
10009f24:	18a7c83a 	sub	r19,r3,r2
10009f28:	a4c00215 	stw	r19,8(r20)
10009f2c:	983fce26 	beq	r19,zero,10009e68 <__alt_data_end+0xf8009e68>
10009f30:	80c0030b 	ldhu	r3,12(r16)
10009f34:	903fe61e 	bne	r18,zero,10009ed0 <__alt_data_end+0xf8009ed0>
10009f38:	8f000017 	ldw	fp,0(r17)
10009f3c:	8c800117 	ldw	r18,4(r17)
10009f40:	8c400204 	addi	r17,r17,8
10009f44:	003fe106 	br	10009ecc <__alt_data_end+0xf8009ecc>
10009f48:	8cc00017 	ldw	r19,0(r17)
10009f4c:	8c800117 	ldw	r18,4(r17)
10009f50:	8c400204 	addi	r17,r17,8
10009f54:	003fb306 	br	10009e24 <__alt_data_end+0xf8009e24>
10009f58:	0005883a 	mov	r2,zero
10009f5c:	f800283a 	ret
10009f60:	81000017 	ldw	r4,0(r16)
10009f64:	80800417 	ldw	r2,16(r16)
10009f68:	11005a36 	bltu	r2,r4,1000a0d4 <__sfvwrite_r+0x320>
10009f6c:	85c00517 	ldw	r23,20(r16)
10009f70:	95c05836 	bltu	r18,r23,1000a0d4 <__sfvwrite_r+0x320>
10009f74:	00a00034 	movhi	r2,32768
10009f78:	10bfffc4 	addi	r2,r2,-1
10009f7c:	9009883a 	mov	r4,r18
10009f80:	1480012e 	bgeu	r2,r18,10009f88 <__sfvwrite_r+0x1d4>
10009f84:	1009883a 	mov	r4,r2
10009f88:	b80b883a 	mov	r5,r23
10009f8c:	00044400 	call	10004440 <__divsi3>
10009f90:	b80b883a 	mov	r5,r23
10009f94:	1009883a 	mov	r4,r2
10009f98:	00052a00 	call	100052a0 <__mulsi3>
10009f9c:	81400717 	ldw	r5,28(r16)
10009fa0:	80c00917 	ldw	r3,36(r16)
10009fa4:	100f883a 	mov	r7,r2
10009fa8:	e00d883a 	mov	r6,fp
10009fac:	a809883a 	mov	r4,r21
10009fb0:	183ee83a 	callr	r3
10009fb4:	00bfd816 	blt	zero,r2,10009f18 <__alt_data_end+0xf8009f18>
10009fb8:	8080030b 	ldhu	r2,12(r16)
10009fbc:	10801014 	ori	r2,r2,64
10009fc0:	8080030d 	sth	r2,12(r16)
10009fc4:	00bfffc4 	movi	r2,-1
10009fc8:	003fa806 	br	10009e6c <__alt_data_end+0xf8009e6c>
10009fcc:	0027883a 	mov	r19,zero
10009fd0:	0011883a 	mov	r8,zero
10009fd4:	0039883a 	mov	fp,zero
10009fd8:	0025883a 	mov	r18,zero
10009fdc:	90001f26 	beq	r18,zero,1000a05c <__sfvwrite_r+0x2a8>
10009fe0:	40005a26 	beq	r8,zero,1000a14c <__sfvwrite_r+0x398>
10009fe4:	982d883a 	mov	r22,r19
10009fe8:	94c0012e 	bgeu	r18,r19,10009ff0 <__sfvwrite_r+0x23c>
10009fec:	902d883a 	mov	r22,r18
10009ff0:	81000017 	ldw	r4,0(r16)
10009ff4:	80800417 	ldw	r2,16(r16)
10009ff8:	b02f883a 	mov	r23,r22
10009ffc:	81c00517 	ldw	r7,20(r16)
1000a000:	1100032e 	bgeu	r2,r4,1000a010 <__sfvwrite_r+0x25c>
1000a004:	80c00217 	ldw	r3,8(r16)
1000a008:	38c7883a 	add	r3,r7,r3
1000a00c:	1d801816 	blt	r3,r22,1000a070 <__sfvwrite_r+0x2bc>
1000a010:	b1c03e16 	blt	r22,r7,1000a10c <__sfvwrite_r+0x358>
1000a014:	80800917 	ldw	r2,36(r16)
1000a018:	81400717 	ldw	r5,28(r16)
1000a01c:	e00d883a 	mov	r6,fp
1000a020:	da000115 	stw	r8,4(sp)
1000a024:	a809883a 	mov	r4,r21
1000a028:	103ee83a 	callr	r2
1000a02c:	102f883a 	mov	r23,r2
1000a030:	da000117 	ldw	r8,4(sp)
1000a034:	00bfe00e 	bge	zero,r2,10009fb8 <__alt_data_end+0xf8009fb8>
1000a038:	9de7c83a 	sub	r19,r19,r23
1000a03c:	98001f26 	beq	r19,zero,1000a0bc <__sfvwrite_r+0x308>
1000a040:	a0800217 	ldw	r2,8(r20)
1000a044:	e5f9883a 	add	fp,fp,r23
1000a048:	95e5c83a 	sub	r18,r18,r23
1000a04c:	15efc83a 	sub	r23,r2,r23
1000a050:	a5c00215 	stw	r23,8(r20)
1000a054:	b83f8426 	beq	r23,zero,10009e68 <__alt_data_end+0xf8009e68>
1000a058:	903fe11e 	bne	r18,zero,10009fe0 <__alt_data_end+0xf8009fe0>
1000a05c:	8f000017 	ldw	fp,0(r17)
1000a060:	8c800117 	ldw	r18,4(r17)
1000a064:	0011883a 	mov	r8,zero
1000a068:	8c400204 	addi	r17,r17,8
1000a06c:	003fdb06 	br	10009fdc <__alt_data_end+0xf8009fdc>
1000a070:	180d883a 	mov	r6,r3
1000a074:	e00b883a 	mov	r5,fp
1000a078:	da000115 	stw	r8,4(sp)
1000a07c:	d8c00015 	stw	r3,0(sp)
1000a080:	000b0d40 	call	1000b0d4 <memmove>
1000a084:	d8c00017 	ldw	r3,0(sp)
1000a088:	80800017 	ldw	r2,0(r16)
1000a08c:	800b883a 	mov	r5,r16
1000a090:	a809883a 	mov	r4,r21
1000a094:	10c5883a 	add	r2,r2,r3
1000a098:	80800015 	stw	r2,0(r16)
1000a09c:	d8c00015 	stw	r3,0(sp)
1000a0a0:	00095440 	call	10009544 <_fflush_r>
1000a0a4:	d8c00017 	ldw	r3,0(sp)
1000a0a8:	da000117 	ldw	r8,4(sp)
1000a0ac:	103fc21e 	bne	r2,zero,10009fb8 <__alt_data_end+0xf8009fb8>
1000a0b0:	182f883a 	mov	r23,r3
1000a0b4:	9de7c83a 	sub	r19,r19,r23
1000a0b8:	983fe11e 	bne	r19,zero,1000a040 <__alt_data_end+0xf800a040>
1000a0bc:	800b883a 	mov	r5,r16
1000a0c0:	a809883a 	mov	r4,r21
1000a0c4:	00095440 	call	10009544 <_fflush_r>
1000a0c8:	103fbb1e 	bne	r2,zero,10009fb8 <__alt_data_end+0xf8009fb8>
1000a0cc:	0011883a 	mov	r8,zero
1000a0d0:	003fdb06 	br	1000a040 <__alt_data_end+0xf800a040>
1000a0d4:	94c0012e 	bgeu	r18,r19,1000a0dc <__sfvwrite_r+0x328>
1000a0d8:	9027883a 	mov	r19,r18
1000a0dc:	980d883a 	mov	r6,r19
1000a0e0:	e00b883a 	mov	r5,fp
1000a0e4:	000b0d40 	call	1000b0d4 <memmove>
1000a0e8:	80800217 	ldw	r2,8(r16)
1000a0ec:	80c00017 	ldw	r3,0(r16)
1000a0f0:	14c5c83a 	sub	r2,r2,r19
1000a0f4:	1cc7883a 	add	r3,r3,r19
1000a0f8:	80800215 	stw	r2,8(r16)
1000a0fc:	80c00015 	stw	r3,0(r16)
1000a100:	10004326 	beq	r2,zero,1000a210 <__sfvwrite_r+0x45c>
1000a104:	9805883a 	mov	r2,r19
1000a108:	003f8306 	br	10009f18 <__alt_data_end+0xf8009f18>
1000a10c:	b00d883a 	mov	r6,r22
1000a110:	e00b883a 	mov	r5,fp
1000a114:	da000115 	stw	r8,4(sp)
1000a118:	000b0d40 	call	1000b0d4 <memmove>
1000a11c:	80800217 	ldw	r2,8(r16)
1000a120:	80c00017 	ldw	r3,0(r16)
1000a124:	da000117 	ldw	r8,4(sp)
1000a128:	1585c83a 	sub	r2,r2,r22
1000a12c:	1dad883a 	add	r22,r3,r22
1000a130:	80800215 	stw	r2,8(r16)
1000a134:	85800015 	stw	r22,0(r16)
1000a138:	003fbf06 	br	1000a038 <__alt_data_end+0xf800a038>
1000a13c:	81000017 	ldw	r4,0(r16)
1000a140:	9027883a 	mov	r19,r18
1000a144:	902f883a 	mov	r23,r18
1000a148:	003f6906 	br	10009ef0 <__alt_data_end+0xf8009ef0>
1000a14c:	900d883a 	mov	r6,r18
1000a150:	01400284 	movi	r5,10
1000a154:	e009883a 	mov	r4,fp
1000a158:	000aea80 	call	1000aea8 <memchr>
1000a15c:	10003e26 	beq	r2,zero,1000a258 <__sfvwrite_r+0x4a4>
1000a160:	10800044 	addi	r2,r2,1
1000a164:	1727c83a 	sub	r19,r2,fp
1000a168:	02000044 	movi	r8,1
1000a16c:	003f9d06 	br	10009fe4 <__alt_data_end+0xf8009fe4>
1000a170:	80800517 	ldw	r2,20(r16)
1000a174:	81400417 	ldw	r5,16(r16)
1000a178:	81c00017 	ldw	r7,0(r16)
1000a17c:	10a7883a 	add	r19,r2,r2
1000a180:	9885883a 	add	r2,r19,r2
1000a184:	1026d7fa 	srli	r19,r2,31
1000a188:	396dc83a 	sub	r22,r7,r5
1000a18c:	b1000044 	addi	r4,r22,1
1000a190:	9885883a 	add	r2,r19,r2
1000a194:	1027d07a 	srai	r19,r2,1
1000a198:	2485883a 	add	r2,r4,r18
1000a19c:	980d883a 	mov	r6,r19
1000a1a0:	9880022e 	bgeu	r19,r2,1000a1ac <__sfvwrite_r+0x3f8>
1000a1a4:	1027883a 	mov	r19,r2
1000a1a8:	100d883a 	mov	r6,r2
1000a1ac:	18c1000c 	andi	r3,r3,1024
1000a1b0:	18001c26 	beq	r3,zero,1000a224 <__sfvwrite_r+0x470>
1000a1b4:	300b883a 	mov	r5,r6
1000a1b8:	a809883a 	mov	r4,r21
1000a1bc:	000a69c0 	call	1000a69c <_malloc_r>
1000a1c0:	102f883a 	mov	r23,r2
1000a1c4:	10002926 	beq	r2,zero,1000a26c <__sfvwrite_r+0x4b8>
1000a1c8:	81400417 	ldw	r5,16(r16)
1000a1cc:	b00d883a 	mov	r6,r22
1000a1d0:	1009883a 	mov	r4,r2
1000a1d4:	000af8c0 	call	1000af8c <memcpy>
1000a1d8:	8080030b 	ldhu	r2,12(r16)
1000a1dc:	00fedfc4 	movi	r3,-1153
1000a1e0:	10c4703a 	and	r2,r2,r3
1000a1e4:	10802014 	ori	r2,r2,128
1000a1e8:	8080030d 	sth	r2,12(r16)
1000a1ec:	bd89883a 	add	r4,r23,r22
1000a1f0:	9d8fc83a 	sub	r7,r19,r22
1000a1f4:	85c00415 	stw	r23,16(r16)
1000a1f8:	84c00515 	stw	r19,20(r16)
1000a1fc:	81000015 	stw	r4,0(r16)
1000a200:	9027883a 	mov	r19,r18
1000a204:	81c00215 	stw	r7,8(r16)
1000a208:	902f883a 	mov	r23,r18
1000a20c:	003f3806 	br	10009ef0 <__alt_data_end+0xf8009ef0>
1000a210:	800b883a 	mov	r5,r16
1000a214:	a809883a 	mov	r4,r21
1000a218:	00095440 	call	10009544 <_fflush_r>
1000a21c:	103fb926 	beq	r2,zero,1000a104 <__alt_data_end+0xf800a104>
1000a220:	003f6506 	br	10009fb8 <__alt_data_end+0xf8009fb8>
1000a224:	a809883a 	mov	r4,r21
1000a228:	000c4100 	call	1000c410 <_realloc_r>
1000a22c:	102f883a 	mov	r23,r2
1000a230:	103fee1e 	bne	r2,zero,1000a1ec <__alt_data_end+0xf800a1ec>
1000a234:	81400417 	ldw	r5,16(r16)
1000a238:	a809883a 	mov	r4,r21
1000a23c:	0009aa40 	call	10009aa4 <_free_r>
1000a240:	8080030b 	ldhu	r2,12(r16)
1000a244:	00ffdfc4 	movi	r3,-129
1000a248:	1884703a 	and	r2,r3,r2
1000a24c:	00c00304 	movi	r3,12
1000a250:	a8c00015 	stw	r3,0(r21)
1000a254:	003f5906 	br	10009fbc <__alt_data_end+0xf8009fbc>
1000a258:	94c00044 	addi	r19,r18,1
1000a25c:	02000044 	movi	r8,1
1000a260:	003f6006 	br	10009fe4 <__alt_data_end+0xf8009fe4>
1000a264:	00bfffc4 	movi	r2,-1
1000a268:	003f0006 	br	10009e6c <__alt_data_end+0xf8009e6c>
1000a26c:	00800304 	movi	r2,12
1000a270:	a8800015 	stw	r2,0(r21)
1000a274:	8080030b 	ldhu	r2,12(r16)
1000a278:	003f5006 	br	10009fbc <__alt_data_end+0xf8009fbc>

1000a27c <_fwalk>:
1000a27c:	defff704 	addi	sp,sp,-36
1000a280:	dd000415 	stw	r20,16(sp)
1000a284:	dfc00815 	stw	ra,32(sp)
1000a288:	ddc00715 	stw	r23,28(sp)
1000a28c:	dd800615 	stw	r22,24(sp)
1000a290:	dd400515 	stw	r21,20(sp)
1000a294:	dcc00315 	stw	r19,12(sp)
1000a298:	dc800215 	stw	r18,8(sp)
1000a29c:	dc400115 	stw	r17,4(sp)
1000a2a0:	dc000015 	stw	r16,0(sp)
1000a2a4:	2500b804 	addi	r20,r4,736
1000a2a8:	a0002326 	beq	r20,zero,1000a338 <_fwalk+0xbc>
1000a2ac:	282b883a 	mov	r21,r5
1000a2b0:	002f883a 	mov	r23,zero
1000a2b4:	05800044 	movi	r22,1
1000a2b8:	04ffffc4 	movi	r19,-1
1000a2bc:	a4400117 	ldw	r17,4(r20)
1000a2c0:	a4800217 	ldw	r18,8(r20)
1000a2c4:	8c7fffc4 	addi	r17,r17,-1
1000a2c8:	88000d16 	blt	r17,zero,1000a300 <_fwalk+0x84>
1000a2cc:	94000304 	addi	r16,r18,12
1000a2d0:	94800384 	addi	r18,r18,14
1000a2d4:	8080000b 	ldhu	r2,0(r16)
1000a2d8:	8c7fffc4 	addi	r17,r17,-1
1000a2dc:	813ffd04 	addi	r4,r16,-12
1000a2e0:	b080042e 	bgeu	r22,r2,1000a2f4 <_fwalk+0x78>
1000a2e4:	9080000f 	ldh	r2,0(r18)
1000a2e8:	14c00226 	beq	r2,r19,1000a2f4 <_fwalk+0x78>
1000a2ec:	a83ee83a 	callr	r21
1000a2f0:	b8aeb03a 	or	r23,r23,r2
1000a2f4:	84001a04 	addi	r16,r16,104
1000a2f8:	94801a04 	addi	r18,r18,104
1000a2fc:	8cfff51e 	bne	r17,r19,1000a2d4 <__alt_data_end+0xf800a2d4>
1000a300:	a5000017 	ldw	r20,0(r20)
1000a304:	a03fed1e 	bne	r20,zero,1000a2bc <__alt_data_end+0xf800a2bc>
1000a308:	b805883a 	mov	r2,r23
1000a30c:	dfc00817 	ldw	ra,32(sp)
1000a310:	ddc00717 	ldw	r23,28(sp)
1000a314:	dd800617 	ldw	r22,24(sp)
1000a318:	dd400517 	ldw	r21,20(sp)
1000a31c:	dd000417 	ldw	r20,16(sp)
1000a320:	dcc00317 	ldw	r19,12(sp)
1000a324:	dc800217 	ldw	r18,8(sp)
1000a328:	dc400117 	ldw	r17,4(sp)
1000a32c:	dc000017 	ldw	r16,0(sp)
1000a330:	dec00904 	addi	sp,sp,36
1000a334:	f800283a 	ret
1000a338:	002f883a 	mov	r23,zero
1000a33c:	003ff206 	br	1000a308 <__alt_data_end+0xf800a308>

1000a340 <_fwalk_reent>:
1000a340:	defff704 	addi	sp,sp,-36
1000a344:	dd000415 	stw	r20,16(sp)
1000a348:	dfc00815 	stw	ra,32(sp)
1000a34c:	ddc00715 	stw	r23,28(sp)
1000a350:	dd800615 	stw	r22,24(sp)
1000a354:	dd400515 	stw	r21,20(sp)
1000a358:	dcc00315 	stw	r19,12(sp)
1000a35c:	dc800215 	stw	r18,8(sp)
1000a360:	dc400115 	stw	r17,4(sp)
1000a364:	dc000015 	stw	r16,0(sp)
1000a368:	2500b804 	addi	r20,r4,736
1000a36c:	a0002326 	beq	r20,zero,1000a3fc <_fwalk_reent+0xbc>
1000a370:	282b883a 	mov	r21,r5
1000a374:	2027883a 	mov	r19,r4
1000a378:	002f883a 	mov	r23,zero
1000a37c:	05800044 	movi	r22,1
1000a380:	04bfffc4 	movi	r18,-1
1000a384:	a4400117 	ldw	r17,4(r20)
1000a388:	a4000217 	ldw	r16,8(r20)
1000a38c:	8c7fffc4 	addi	r17,r17,-1
1000a390:	88000c16 	blt	r17,zero,1000a3c4 <_fwalk_reent+0x84>
1000a394:	84000304 	addi	r16,r16,12
1000a398:	8080000b 	ldhu	r2,0(r16)
1000a39c:	8c7fffc4 	addi	r17,r17,-1
1000a3a0:	817ffd04 	addi	r5,r16,-12
1000a3a4:	b080052e 	bgeu	r22,r2,1000a3bc <_fwalk_reent+0x7c>
1000a3a8:	8080008f 	ldh	r2,2(r16)
1000a3ac:	9809883a 	mov	r4,r19
1000a3b0:	14800226 	beq	r2,r18,1000a3bc <_fwalk_reent+0x7c>
1000a3b4:	a83ee83a 	callr	r21
1000a3b8:	b8aeb03a 	or	r23,r23,r2
1000a3bc:	84001a04 	addi	r16,r16,104
1000a3c0:	8cbff51e 	bne	r17,r18,1000a398 <__alt_data_end+0xf800a398>
1000a3c4:	a5000017 	ldw	r20,0(r20)
1000a3c8:	a03fee1e 	bne	r20,zero,1000a384 <__alt_data_end+0xf800a384>
1000a3cc:	b805883a 	mov	r2,r23
1000a3d0:	dfc00817 	ldw	ra,32(sp)
1000a3d4:	ddc00717 	ldw	r23,28(sp)
1000a3d8:	dd800617 	ldw	r22,24(sp)
1000a3dc:	dd400517 	ldw	r21,20(sp)
1000a3e0:	dd000417 	ldw	r20,16(sp)
1000a3e4:	dcc00317 	ldw	r19,12(sp)
1000a3e8:	dc800217 	ldw	r18,8(sp)
1000a3ec:	dc400117 	ldw	r17,4(sp)
1000a3f0:	dc000017 	ldw	r16,0(sp)
1000a3f4:	dec00904 	addi	sp,sp,36
1000a3f8:	f800283a 	ret
1000a3fc:	002f883a 	mov	r23,zero
1000a400:	003ff206 	br	1000a3cc <__alt_data_end+0xf800a3cc>

1000a404 <_setlocale_r>:
1000a404:	30001b26 	beq	r6,zero,1000a474 <_setlocale_r+0x70>
1000a408:	01440074 	movhi	r5,4097
1000a40c:	defffe04 	addi	sp,sp,-8
1000a410:	2951c304 	addi	r5,r5,18188
1000a414:	3009883a 	mov	r4,r6
1000a418:	dc000015 	stw	r16,0(sp)
1000a41c:	dfc00115 	stw	ra,4(sp)
1000a420:	3021883a 	mov	r16,r6
1000a424:	000cb780 	call	1000cb78 <strcmp>
1000a428:	1000061e 	bne	r2,zero,1000a444 <_setlocale_r+0x40>
1000a42c:	00840074 	movhi	r2,4097
1000a430:	1091a404 	addi	r2,r2,18064
1000a434:	dfc00117 	ldw	ra,4(sp)
1000a438:	dc000017 	ldw	r16,0(sp)
1000a43c:	dec00204 	addi	sp,sp,8
1000a440:	f800283a 	ret
1000a444:	01440074 	movhi	r5,4097
1000a448:	2951a404 	addi	r5,r5,18064
1000a44c:	8009883a 	mov	r4,r16
1000a450:	000cb780 	call	1000cb78 <strcmp>
1000a454:	103ff526 	beq	r2,zero,1000a42c <__alt_data_end+0xf800a42c>
1000a458:	01440074 	movhi	r5,4097
1000a45c:	2951ae04 	addi	r5,r5,18104
1000a460:	8009883a 	mov	r4,r16
1000a464:	000cb780 	call	1000cb78 <strcmp>
1000a468:	103ff026 	beq	r2,zero,1000a42c <__alt_data_end+0xf800a42c>
1000a46c:	0005883a 	mov	r2,zero
1000a470:	003ff006 	br	1000a434 <__alt_data_end+0xf800a434>
1000a474:	00840074 	movhi	r2,4097
1000a478:	1091a404 	addi	r2,r2,18064
1000a47c:	f800283a 	ret

1000a480 <__locale_charset>:
1000a480:	00840074 	movhi	r2,4097
1000a484:	10933504 	addi	r2,r2,19668
1000a488:	f800283a 	ret

1000a48c <__locale_mb_cur_max>:
1000a48c:	00840074 	movhi	r2,4097
1000a490:	1098d204 	addi	r2,r2,25416
1000a494:	10800017 	ldw	r2,0(r2)
1000a498:	f800283a 	ret

1000a49c <__locale_msgcharset>:
1000a49c:	00840074 	movhi	r2,4097
1000a4a0:	10932d04 	addi	r2,r2,19636
1000a4a4:	f800283a 	ret

1000a4a8 <__locale_cjk_lang>:
1000a4a8:	0005883a 	mov	r2,zero
1000a4ac:	f800283a 	ret

1000a4b0 <_localeconv_r>:
1000a4b0:	00840074 	movhi	r2,4097
1000a4b4:	10933d04 	addi	r2,r2,19700
1000a4b8:	f800283a 	ret

1000a4bc <setlocale>:
1000a4bc:	00840074 	movhi	r2,4097
1000a4c0:	1098d104 	addi	r2,r2,25412
1000a4c4:	280d883a 	mov	r6,r5
1000a4c8:	200b883a 	mov	r5,r4
1000a4cc:	11000017 	ldw	r4,0(r2)
1000a4d0:	000a4041 	jmpi	1000a404 <_setlocale_r>

1000a4d4 <localeconv>:
1000a4d4:	00840074 	movhi	r2,4097
1000a4d8:	10933d04 	addi	r2,r2,19700
1000a4dc:	f800283a 	ret

1000a4e0 <__smakebuf_r>:
1000a4e0:	2880030b 	ldhu	r2,12(r5)
1000a4e4:	10c0008c 	andi	r3,r2,2
1000a4e8:	1800411e 	bne	r3,zero,1000a5f0 <__smakebuf_r+0x110>
1000a4ec:	deffec04 	addi	sp,sp,-80
1000a4f0:	dc000f15 	stw	r16,60(sp)
1000a4f4:	2821883a 	mov	r16,r5
1000a4f8:	2940038f 	ldh	r5,14(r5)
1000a4fc:	dc401015 	stw	r17,64(sp)
1000a500:	dfc01315 	stw	ra,76(sp)
1000a504:	dcc01215 	stw	r19,72(sp)
1000a508:	dc801115 	stw	r18,68(sp)
1000a50c:	2023883a 	mov	r17,r4
1000a510:	28001c16 	blt	r5,zero,1000a584 <__smakebuf_r+0xa4>
1000a514:	d80d883a 	mov	r6,sp
1000a518:	000e7e80 	call	1000e7e8 <_fstat_r>
1000a51c:	10001816 	blt	r2,zero,1000a580 <__smakebuf_r+0xa0>
1000a520:	d8800117 	ldw	r2,4(sp)
1000a524:	00e00014 	movui	r3,32768
1000a528:	10bc000c 	andi	r2,r2,61440
1000a52c:	14c80020 	cmpeqi	r19,r2,8192
1000a530:	10c03726 	beq	r2,r3,1000a610 <__smakebuf_r+0x130>
1000a534:	80c0030b 	ldhu	r3,12(r16)
1000a538:	18c20014 	ori	r3,r3,2048
1000a53c:	80c0030d 	sth	r3,12(r16)
1000a540:	00c80004 	movi	r3,8192
1000a544:	10c0521e 	bne	r2,r3,1000a690 <__smakebuf_r+0x1b0>
1000a548:	8140038f 	ldh	r5,14(r16)
1000a54c:	8809883a 	mov	r4,r17
1000a550:	000e8440 	call	1000e844 <_isatty_r>
1000a554:	10004c26 	beq	r2,zero,1000a688 <__smakebuf_r+0x1a8>
1000a558:	8080030b 	ldhu	r2,12(r16)
1000a55c:	80c010c4 	addi	r3,r16,67
1000a560:	80c00015 	stw	r3,0(r16)
1000a564:	10800054 	ori	r2,r2,1
1000a568:	8080030d 	sth	r2,12(r16)
1000a56c:	00800044 	movi	r2,1
1000a570:	80c00415 	stw	r3,16(r16)
1000a574:	80800515 	stw	r2,20(r16)
1000a578:	04810004 	movi	r18,1024
1000a57c:	00000706 	br	1000a59c <__smakebuf_r+0xbc>
1000a580:	8080030b 	ldhu	r2,12(r16)
1000a584:	10c0200c 	andi	r3,r2,128
1000a588:	18001f1e 	bne	r3,zero,1000a608 <__smakebuf_r+0x128>
1000a58c:	04810004 	movi	r18,1024
1000a590:	10820014 	ori	r2,r2,2048
1000a594:	8080030d 	sth	r2,12(r16)
1000a598:	0027883a 	mov	r19,zero
1000a59c:	900b883a 	mov	r5,r18
1000a5a0:	8809883a 	mov	r4,r17
1000a5a4:	000a69c0 	call	1000a69c <_malloc_r>
1000a5a8:	10002c26 	beq	r2,zero,1000a65c <__smakebuf_r+0x17c>
1000a5ac:	80c0030b 	ldhu	r3,12(r16)
1000a5b0:	01040074 	movhi	r4,4097
1000a5b4:	21257604 	addi	r4,r4,-27176
1000a5b8:	89000f15 	stw	r4,60(r17)
1000a5bc:	18c02014 	ori	r3,r3,128
1000a5c0:	80c0030d 	sth	r3,12(r16)
1000a5c4:	80800015 	stw	r2,0(r16)
1000a5c8:	80800415 	stw	r2,16(r16)
1000a5cc:	84800515 	stw	r18,20(r16)
1000a5d0:	98001a1e 	bne	r19,zero,1000a63c <__smakebuf_r+0x15c>
1000a5d4:	dfc01317 	ldw	ra,76(sp)
1000a5d8:	dcc01217 	ldw	r19,72(sp)
1000a5dc:	dc801117 	ldw	r18,68(sp)
1000a5e0:	dc401017 	ldw	r17,64(sp)
1000a5e4:	dc000f17 	ldw	r16,60(sp)
1000a5e8:	dec01404 	addi	sp,sp,80
1000a5ec:	f800283a 	ret
1000a5f0:	288010c4 	addi	r2,r5,67
1000a5f4:	28800015 	stw	r2,0(r5)
1000a5f8:	28800415 	stw	r2,16(r5)
1000a5fc:	00800044 	movi	r2,1
1000a600:	28800515 	stw	r2,20(r5)
1000a604:	f800283a 	ret
1000a608:	04801004 	movi	r18,64
1000a60c:	003fe006 	br	1000a590 <__alt_data_end+0xf800a590>
1000a610:	81000a17 	ldw	r4,40(r16)
1000a614:	00c40074 	movhi	r3,4097
1000a618:	18f2c504 	addi	r3,r3,-13548
1000a61c:	20ffc51e 	bne	r4,r3,1000a534 <__alt_data_end+0xf800a534>
1000a620:	8080030b 	ldhu	r2,12(r16)
1000a624:	04810004 	movi	r18,1024
1000a628:	84801315 	stw	r18,76(r16)
1000a62c:	1484b03a 	or	r2,r2,r18
1000a630:	8080030d 	sth	r2,12(r16)
1000a634:	0027883a 	mov	r19,zero
1000a638:	003fd806 	br	1000a59c <__alt_data_end+0xf800a59c>
1000a63c:	8140038f 	ldh	r5,14(r16)
1000a640:	8809883a 	mov	r4,r17
1000a644:	000e8440 	call	1000e844 <_isatty_r>
1000a648:	103fe226 	beq	r2,zero,1000a5d4 <__alt_data_end+0xf800a5d4>
1000a64c:	8080030b 	ldhu	r2,12(r16)
1000a650:	10800054 	ori	r2,r2,1
1000a654:	8080030d 	sth	r2,12(r16)
1000a658:	003fde06 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000a65c:	8080030b 	ldhu	r2,12(r16)
1000a660:	10c0800c 	andi	r3,r2,512
1000a664:	183fdb1e 	bne	r3,zero,1000a5d4 <__alt_data_end+0xf800a5d4>
1000a668:	10800094 	ori	r2,r2,2
1000a66c:	80c010c4 	addi	r3,r16,67
1000a670:	8080030d 	sth	r2,12(r16)
1000a674:	00800044 	movi	r2,1
1000a678:	80c00015 	stw	r3,0(r16)
1000a67c:	80c00415 	stw	r3,16(r16)
1000a680:	80800515 	stw	r2,20(r16)
1000a684:	003fd306 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000a688:	04810004 	movi	r18,1024
1000a68c:	003fc306 	br	1000a59c <__alt_data_end+0xf800a59c>
1000a690:	0027883a 	mov	r19,zero
1000a694:	04810004 	movi	r18,1024
1000a698:	003fc006 	br	1000a59c <__alt_data_end+0xf800a59c>

1000a69c <_malloc_r>:
1000a69c:	defff504 	addi	sp,sp,-44
1000a6a0:	dc800315 	stw	r18,12(sp)
1000a6a4:	dfc00a15 	stw	ra,40(sp)
1000a6a8:	df000915 	stw	fp,36(sp)
1000a6ac:	ddc00815 	stw	r23,32(sp)
1000a6b0:	dd800715 	stw	r22,28(sp)
1000a6b4:	dd400615 	stw	r21,24(sp)
1000a6b8:	dd000515 	stw	r20,20(sp)
1000a6bc:	dcc00415 	stw	r19,16(sp)
1000a6c0:	dc400215 	stw	r17,8(sp)
1000a6c4:	dc000115 	stw	r16,4(sp)
1000a6c8:	288002c4 	addi	r2,r5,11
1000a6cc:	00c00584 	movi	r3,22
1000a6d0:	2025883a 	mov	r18,r4
1000a6d4:	18807f2e 	bgeu	r3,r2,1000a8d4 <_malloc_r+0x238>
1000a6d8:	047ffe04 	movi	r17,-8
1000a6dc:	1462703a 	and	r17,r2,r17
1000a6e0:	8800a316 	blt	r17,zero,1000a970 <_malloc_r+0x2d4>
1000a6e4:	8940a236 	bltu	r17,r5,1000a970 <_malloc_r+0x2d4>
1000a6e8:	0011af80 	call	10011af8 <__malloc_lock>
1000a6ec:	00807dc4 	movi	r2,503
1000a6f0:	1441e92e 	bgeu	r2,r17,1000ae98 <_malloc_r+0x7fc>
1000a6f4:	8804d27a 	srli	r2,r17,9
1000a6f8:	1000a126 	beq	r2,zero,1000a980 <_malloc_r+0x2e4>
1000a6fc:	00c00104 	movi	r3,4
1000a700:	18811e36 	bltu	r3,r2,1000ab7c <_malloc_r+0x4e0>
1000a704:	8804d1ba 	srli	r2,r17,6
1000a708:	12000e44 	addi	r8,r2,57
1000a70c:	11c00e04 	addi	r7,r2,56
1000a710:	4209883a 	add	r4,r8,r8
1000a714:	04c40074 	movhi	r19,4097
1000a718:	2109883a 	add	r4,r4,r4
1000a71c:	9cd34b04 	addi	r19,r19,19756
1000a720:	2109883a 	add	r4,r4,r4
1000a724:	9909883a 	add	r4,r19,r4
1000a728:	24000117 	ldw	r16,4(r4)
1000a72c:	213ffe04 	addi	r4,r4,-8
1000a730:	24009726 	beq	r4,r16,1000a990 <_malloc_r+0x2f4>
1000a734:	80800117 	ldw	r2,4(r16)
1000a738:	01bfff04 	movi	r6,-4
1000a73c:	014003c4 	movi	r5,15
1000a740:	1184703a 	and	r2,r2,r6
1000a744:	1447c83a 	sub	r3,r2,r17
1000a748:	28c00716 	blt	r5,r3,1000a768 <_malloc_r+0xcc>
1000a74c:	1800920e 	bge	r3,zero,1000a998 <_malloc_r+0x2fc>
1000a750:	84000317 	ldw	r16,12(r16)
1000a754:	24008e26 	beq	r4,r16,1000a990 <_malloc_r+0x2f4>
1000a758:	80800117 	ldw	r2,4(r16)
1000a75c:	1184703a 	and	r2,r2,r6
1000a760:	1447c83a 	sub	r3,r2,r17
1000a764:	28fff90e 	bge	r5,r3,1000a74c <__alt_data_end+0xf800a74c>
1000a768:	3809883a 	mov	r4,r7
1000a76c:	01840074 	movhi	r6,4097
1000a770:	9c000417 	ldw	r16,16(r19)
1000a774:	31934b04 	addi	r6,r6,19756
1000a778:	32000204 	addi	r8,r6,8
1000a77c:	82013426 	beq	r16,r8,1000ac50 <_malloc_r+0x5b4>
1000a780:	80c00117 	ldw	r3,4(r16)
1000a784:	00bfff04 	movi	r2,-4
1000a788:	188e703a 	and	r7,r3,r2
1000a78c:	3c45c83a 	sub	r2,r7,r17
1000a790:	00c003c4 	movi	r3,15
1000a794:	18811f16 	blt	r3,r2,1000ac14 <_malloc_r+0x578>
1000a798:	32000515 	stw	r8,20(r6)
1000a79c:	32000415 	stw	r8,16(r6)
1000a7a0:	10007f0e 	bge	r2,zero,1000a9a0 <_malloc_r+0x304>
1000a7a4:	00807fc4 	movi	r2,511
1000a7a8:	11c0fd36 	bltu	r2,r7,1000aba0 <_malloc_r+0x504>
1000a7ac:	3806d0fa 	srli	r3,r7,3
1000a7b0:	01c00044 	movi	r7,1
1000a7b4:	30800117 	ldw	r2,4(r6)
1000a7b8:	19400044 	addi	r5,r3,1
1000a7bc:	294b883a 	add	r5,r5,r5
1000a7c0:	1807d0ba 	srai	r3,r3,2
1000a7c4:	294b883a 	add	r5,r5,r5
1000a7c8:	294b883a 	add	r5,r5,r5
1000a7cc:	298b883a 	add	r5,r5,r6
1000a7d0:	38c6983a 	sll	r3,r7,r3
1000a7d4:	29c00017 	ldw	r7,0(r5)
1000a7d8:	2a7ffe04 	addi	r9,r5,-8
1000a7dc:	1886b03a 	or	r3,r3,r2
1000a7e0:	82400315 	stw	r9,12(r16)
1000a7e4:	81c00215 	stw	r7,8(r16)
1000a7e8:	30c00115 	stw	r3,4(r6)
1000a7ec:	2c000015 	stw	r16,0(r5)
1000a7f0:	3c000315 	stw	r16,12(r7)
1000a7f4:	2005d0ba 	srai	r2,r4,2
1000a7f8:	01400044 	movi	r5,1
1000a7fc:	288a983a 	sll	r5,r5,r2
1000a800:	19406f36 	bltu	r3,r5,1000a9c0 <_malloc_r+0x324>
1000a804:	28c4703a 	and	r2,r5,r3
1000a808:	10000a1e 	bne	r2,zero,1000a834 <_malloc_r+0x198>
1000a80c:	00bfff04 	movi	r2,-4
1000a810:	294b883a 	add	r5,r5,r5
1000a814:	2088703a 	and	r4,r4,r2
1000a818:	28c4703a 	and	r2,r5,r3
1000a81c:	21000104 	addi	r4,r4,4
1000a820:	1000041e 	bne	r2,zero,1000a834 <_malloc_r+0x198>
1000a824:	294b883a 	add	r5,r5,r5
1000a828:	28c4703a 	and	r2,r5,r3
1000a82c:	21000104 	addi	r4,r4,4
1000a830:	103ffc26 	beq	r2,zero,1000a824 <__alt_data_end+0xf800a824>
1000a834:	02bfff04 	movi	r10,-4
1000a838:	024003c4 	movi	r9,15
1000a83c:	21800044 	addi	r6,r4,1
1000a840:	318d883a 	add	r6,r6,r6
1000a844:	318d883a 	add	r6,r6,r6
1000a848:	318d883a 	add	r6,r6,r6
1000a84c:	998d883a 	add	r6,r19,r6
1000a850:	333ffe04 	addi	r12,r6,-8
1000a854:	2017883a 	mov	r11,r4
1000a858:	31800104 	addi	r6,r6,4
1000a85c:	34000017 	ldw	r16,0(r6)
1000a860:	31fffd04 	addi	r7,r6,-12
1000a864:	81c0041e 	bne	r16,r7,1000a878 <_malloc_r+0x1dc>
1000a868:	0000fb06 	br	1000ac58 <_malloc_r+0x5bc>
1000a86c:	1801030e 	bge	r3,zero,1000ac7c <_malloc_r+0x5e0>
1000a870:	84000317 	ldw	r16,12(r16)
1000a874:	81c0f826 	beq	r16,r7,1000ac58 <_malloc_r+0x5bc>
1000a878:	80800117 	ldw	r2,4(r16)
1000a87c:	1284703a 	and	r2,r2,r10
1000a880:	1447c83a 	sub	r3,r2,r17
1000a884:	48fff90e 	bge	r9,r3,1000a86c <__alt_data_end+0xf800a86c>
1000a888:	80800317 	ldw	r2,12(r16)
1000a88c:	81000217 	ldw	r4,8(r16)
1000a890:	89400054 	ori	r5,r17,1
1000a894:	81400115 	stw	r5,4(r16)
1000a898:	20800315 	stw	r2,12(r4)
1000a89c:	11000215 	stw	r4,8(r2)
1000a8a0:	8463883a 	add	r17,r16,r17
1000a8a4:	9c400515 	stw	r17,20(r19)
1000a8a8:	9c400415 	stw	r17,16(r19)
1000a8ac:	18800054 	ori	r2,r3,1
1000a8b0:	88800115 	stw	r2,4(r17)
1000a8b4:	8a000315 	stw	r8,12(r17)
1000a8b8:	8a000215 	stw	r8,8(r17)
1000a8bc:	88e3883a 	add	r17,r17,r3
1000a8c0:	88c00015 	stw	r3,0(r17)
1000a8c4:	9009883a 	mov	r4,r18
1000a8c8:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000a8cc:	80800204 	addi	r2,r16,8
1000a8d0:	00001b06 	br	1000a940 <_malloc_r+0x2a4>
1000a8d4:	04400404 	movi	r17,16
1000a8d8:	89402536 	bltu	r17,r5,1000a970 <_malloc_r+0x2d4>
1000a8dc:	0011af80 	call	10011af8 <__malloc_lock>
1000a8e0:	00800184 	movi	r2,6
1000a8e4:	01000084 	movi	r4,2
1000a8e8:	04c40074 	movhi	r19,4097
1000a8ec:	1085883a 	add	r2,r2,r2
1000a8f0:	9cd34b04 	addi	r19,r19,19756
1000a8f4:	1085883a 	add	r2,r2,r2
1000a8f8:	9885883a 	add	r2,r19,r2
1000a8fc:	14000117 	ldw	r16,4(r2)
1000a900:	10fffe04 	addi	r3,r2,-8
1000a904:	80c0d926 	beq	r16,r3,1000ac6c <_malloc_r+0x5d0>
1000a908:	80c00117 	ldw	r3,4(r16)
1000a90c:	81000317 	ldw	r4,12(r16)
1000a910:	00bfff04 	movi	r2,-4
1000a914:	1884703a 	and	r2,r3,r2
1000a918:	81400217 	ldw	r5,8(r16)
1000a91c:	8085883a 	add	r2,r16,r2
1000a920:	10c00117 	ldw	r3,4(r2)
1000a924:	29000315 	stw	r4,12(r5)
1000a928:	21400215 	stw	r5,8(r4)
1000a92c:	18c00054 	ori	r3,r3,1
1000a930:	10c00115 	stw	r3,4(r2)
1000a934:	9009883a 	mov	r4,r18
1000a938:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000a93c:	80800204 	addi	r2,r16,8
1000a940:	dfc00a17 	ldw	ra,40(sp)
1000a944:	df000917 	ldw	fp,36(sp)
1000a948:	ddc00817 	ldw	r23,32(sp)
1000a94c:	dd800717 	ldw	r22,28(sp)
1000a950:	dd400617 	ldw	r21,24(sp)
1000a954:	dd000517 	ldw	r20,20(sp)
1000a958:	dcc00417 	ldw	r19,16(sp)
1000a95c:	dc800317 	ldw	r18,12(sp)
1000a960:	dc400217 	ldw	r17,8(sp)
1000a964:	dc000117 	ldw	r16,4(sp)
1000a968:	dec00b04 	addi	sp,sp,44
1000a96c:	f800283a 	ret
1000a970:	00800304 	movi	r2,12
1000a974:	90800015 	stw	r2,0(r18)
1000a978:	0005883a 	mov	r2,zero
1000a97c:	003ff006 	br	1000a940 <__alt_data_end+0xf800a940>
1000a980:	01002004 	movi	r4,128
1000a984:	02001004 	movi	r8,64
1000a988:	01c00fc4 	movi	r7,63
1000a98c:	003f6106 	br	1000a714 <__alt_data_end+0xf800a714>
1000a990:	4009883a 	mov	r4,r8
1000a994:	003f7506 	br	1000a76c <__alt_data_end+0xf800a76c>
1000a998:	81000317 	ldw	r4,12(r16)
1000a99c:	003fde06 	br	1000a918 <__alt_data_end+0xf800a918>
1000a9a0:	81c5883a 	add	r2,r16,r7
1000a9a4:	11400117 	ldw	r5,4(r2)
1000a9a8:	9009883a 	mov	r4,r18
1000a9ac:	29400054 	ori	r5,r5,1
1000a9b0:	11400115 	stw	r5,4(r2)
1000a9b4:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000a9b8:	80800204 	addi	r2,r16,8
1000a9bc:	003fe006 	br	1000a940 <__alt_data_end+0xf800a940>
1000a9c0:	9c000217 	ldw	r16,8(r19)
1000a9c4:	00bfff04 	movi	r2,-4
1000a9c8:	85800117 	ldw	r22,4(r16)
1000a9cc:	b0ac703a 	and	r22,r22,r2
1000a9d0:	b4400336 	bltu	r22,r17,1000a9e0 <_malloc_r+0x344>
1000a9d4:	b445c83a 	sub	r2,r22,r17
1000a9d8:	00c003c4 	movi	r3,15
1000a9dc:	18805d16 	blt	r3,r2,1000ab54 <_malloc_r+0x4b8>
1000a9e0:	05c40074 	movhi	r23,4097
1000a9e4:	00840074 	movhi	r2,4097
1000a9e8:	109fae04 	addi	r2,r2,32440
1000a9ec:	bdd8d304 	addi	r23,r23,25420
1000a9f0:	15400017 	ldw	r21,0(r2)
1000a9f4:	b8c00017 	ldw	r3,0(r23)
1000a9f8:	00bfffc4 	movi	r2,-1
1000a9fc:	858d883a 	add	r6,r16,r22
1000aa00:	8d6b883a 	add	r21,r17,r21
1000aa04:	1880ea26 	beq	r3,r2,1000adb0 <_malloc_r+0x714>
1000aa08:	ad4403c4 	addi	r21,r21,4111
1000aa0c:	00bc0004 	movi	r2,-4096
1000aa10:	a8aa703a 	and	r21,r21,r2
1000aa14:	a80b883a 	mov	r5,r21
1000aa18:	9009883a 	mov	r4,r18
1000aa1c:	d9800015 	stw	r6,0(sp)
1000aa20:	000c9e80 	call	1000c9e8 <_sbrk_r>
1000aa24:	1029883a 	mov	r20,r2
1000aa28:	00bfffc4 	movi	r2,-1
1000aa2c:	d9800017 	ldw	r6,0(sp)
1000aa30:	a080e826 	beq	r20,r2,1000add4 <_malloc_r+0x738>
1000aa34:	a180a636 	bltu	r20,r6,1000acd0 <_malloc_r+0x634>
1000aa38:	07040074 	movhi	fp,4097
1000aa3c:	e71fb704 	addi	fp,fp,32476
1000aa40:	e0800017 	ldw	r2,0(fp)
1000aa44:	a887883a 	add	r3,r21,r2
1000aa48:	e0c00015 	stw	r3,0(fp)
1000aa4c:	3500e626 	beq	r6,r20,1000ade8 <_malloc_r+0x74c>
1000aa50:	b9000017 	ldw	r4,0(r23)
1000aa54:	00bfffc4 	movi	r2,-1
1000aa58:	2080ee26 	beq	r4,r2,1000ae14 <_malloc_r+0x778>
1000aa5c:	a185c83a 	sub	r2,r20,r6
1000aa60:	10c5883a 	add	r2,r2,r3
1000aa64:	e0800015 	stw	r2,0(fp)
1000aa68:	a0c001cc 	andi	r3,r20,7
1000aa6c:	1800bc26 	beq	r3,zero,1000ad60 <_malloc_r+0x6c4>
1000aa70:	a0e9c83a 	sub	r20,r20,r3
1000aa74:	00840204 	movi	r2,4104
1000aa78:	a5000204 	addi	r20,r20,8
1000aa7c:	10c7c83a 	sub	r3,r2,r3
1000aa80:	a545883a 	add	r2,r20,r21
1000aa84:	1083ffcc 	andi	r2,r2,4095
1000aa88:	18abc83a 	sub	r21,r3,r2
1000aa8c:	a80b883a 	mov	r5,r21
1000aa90:	9009883a 	mov	r4,r18
1000aa94:	000c9e80 	call	1000c9e8 <_sbrk_r>
1000aa98:	00ffffc4 	movi	r3,-1
1000aa9c:	10c0e126 	beq	r2,r3,1000ae24 <_malloc_r+0x788>
1000aaa0:	1505c83a 	sub	r2,r2,r20
1000aaa4:	1545883a 	add	r2,r2,r21
1000aaa8:	10800054 	ori	r2,r2,1
1000aaac:	e0c00017 	ldw	r3,0(fp)
1000aab0:	9d000215 	stw	r20,8(r19)
1000aab4:	a0800115 	stw	r2,4(r20)
1000aab8:	a8c7883a 	add	r3,r21,r3
1000aabc:	e0c00015 	stw	r3,0(fp)
1000aac0:	84c00e26 	beq	r16,r19,1000aafc <_malloc_r+0x460>
1000aac4:	018003c4 	movi	r6,15
1000aac8:	3580a72e 	bgeu	r6,r22,1000ad68 <_malloc_r+0x6cc>
1000aacc:	81400117 	ldw	r5,4(r16)
1000aad0:	013ffe04 	movi	r4,-8
1000aad4:	b0bffd04 	addi	r2,r22,-12
1000aad8:	1104703a 	and	r2,r2,r4
1000aadc:	2900004c 	andi	r4,r5,1
1000aae0:	2088b03a 	or	r4,r4,r2
1000aae4:	81000115 	stw	r4,4(r16)
1000aae8:	01400144 	movi	r5,5
1000aaec:	8089883a 	add	r4,r16,r2
1000aaf0:	21400115 	stw	r5,4(r4)
1000aaf4:	21400215 	stw	r5,8(r4)
1000aaf8:	3080cd36 	bltu	r6,r2,1000ae30 <_malloc_r+0x794>
1000aafc:	00840074 	movhi	r2,4097
1000ab00:	109fad04 	addi	r2,r2,32436
1000ab04:	11000017 	ldw	r4,0(r2)
1000ab08:	20c0012e 	bgeu	r4,r3,1000ab10 <_malloc_r+0x474>
1000ab0c:	10c00015 	stw	r3,0(r2)
1000ab10:	00840074 	movhi	r2,4097
1000ab14:	109fac04 	addi	r2,r2,32432
1000ab18:	11000017 	ldw	r4,0(r2)
1000ab1c:	9c000217 	ldw	r16,8(r19)
1000ab20:	20c0012e 	bgeu	r4,r3,1000ab28 <_malloc_r+0x48c>
1000ab24:	10c00015 	stw	r3,0(r2)
1000ab28:	80c00117 	ldw	r3,4(r16)
1000ab2c:	00bfff04 	movi	r2,-4
1000ab30:	1886703a 	and	r3,r3,r2
1000ab34:	1c45c83a 	sub	r2,r3,r17
1000ab38:	1c400236 	bltu	r3,r17,1000ab44 <_malloc_r+0x4a8>
1000ab3c:	00c003c4 	movi	r3,15
1000ab40:	18800416 	blt	r3,r2,1000ab54 <_malloc_r+0x4b8>
1000ab44:	9009883a 	mov	r4,r18
1000ab48:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000ab4c:	0005883a 	mov	r2,zero
1000ab50:	003f7b06 	br	1000a940 <__alt_data_end+0xf800a940>
1000ab54:	88c00054 	ori	r3,r17,1
1000ab58:	80c00115 	stw	r3,4(r16)
1000ab5c:	8463883a 	add	r17,r16,r17
1000ab60:	10800054 	ori	r2,r2,1
1000ab64:	9c400215 	stw	r17,8(r19)
1000ab68:	88800115 	stw	r2,4(r17)
1000ab6c:	9009883a 	mov	r4,r18
1000ab70:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000ab74:	80800204 	addi	r2,r16,8
1000ab78:	003f7106 	br	1000a940 <__alt_data_end+0xf800a940>
1000ab7c:	00c00504 	movi	r3,20
1000ab80:	18804a2e 	bgeu	r3,r2,1000acac <_malloc_r+0x610>
1000ab84:	00c01504 	movi	r3,84
1000ab88:	18806e36 	bltu	r3,r2,1000ad44 <_malloc_r+0x6a8>
1000ab8c:	8804d33a 	srli	r2,r17,12
1000ab90:	12001bc4 	addi	r8,r2,111
1000ab94:	11c01b84 	addi	r7,r2,110
1000ab98:	4209883a 	add	r4,r8,r8
1000ab9c:	003edd06 	br	1000a714 <__alt_data_end+0xf800a714>
1000aba0:	3804d27a 	srli	r2,r7,9
1000aba4:	00c00104 	movi	r3,4
1000aba8:	1880442e 	bgeu	r3,r2,1000acbc <_malloc_r+0x620>
1000abac:	00c00504 	movi	r3,20
1000abb0:	18808136 	bltu	r3,r2,1000adb8 <_malloc_r+0x71c>
1000abb4:	11401704 	addi	r5,r2,92
1000abb8:	10c016c4 	addi	r3,r2,91
1000abbc:	294b883a 	add	r5,r5,r5
1000abc0:	294b883a 	add	r5,r5,r5
1000abc4:	294b883a 	add	r5,r5,r5
1000abc8:	994b883a 	add	r5,r19,r5
1000abcc:	28800017 	ldw	r2,0(r5)
1000abd0:	01840074 	movhi	r6,4097
1000abd4:	297ffe04 	addi	r5,r5,-8
1000abd8:	31934b04 	addi	r6,r6,19756
1000abdc:	28806526 	beq	r5,r2,1000ad74 <_malloc_r+0x6d8>
1000abe0:	01bfff04 	movi	r6,-4
1000abe4:	10c00117 	ldw	r3,4(r2)
1000abe8:	1986703a 	and	r3,r3,r6
1000abec:	38c0022e 	bgeu	r7,r3,1000abf8 <_malloc_r+0x55c>
1000abf0:	10800217 	ldw	r2,8(r2)
1000abf4:	28bffb1e 	bne	r5,r2,1000abe4 <__alt_data_end+0xf800abe4>
1000abf8:	11400317 	ldw	r5,12(r2)
1000abfc:	98c00117 	ldw	r3,4(r19)
1000ac00:	81400315 	stw	r5,12(r16)
1000ac04:	80800215 	stw	r2,8(r16)
1000ac08:	2c000215 	stw	r16,8(r5)
1000ac0c:	14000315 	stw	r16,12(r2)
1000ac10:	003ef806 	br	1000a7f4 <__alt_data_end+0xf800a7f4>
1000ac14:	88c00054 	ori	r3,r17,1
1000ac18:	80c00115 	stw	r3,4(r16)
1000ac1c:	8463883a 	add	r17,r16,r17
1000ac20:	34400515 	stw	r17,20(r6)
1000ac24:	34400415 	stw	r17,16(r6)
1000ac28:	10c00054 	ori	r3,r2,1
1000ac2c:	8a000315 	stw	r8,12(r17)
1000ac30:	8a000215 	stw	r8,8(r17)
1000ac34:	88c00115 	stw	r3,4(r17)
1000ac38:	88a3883a 	add	r17,r17,r2
1000ac3c:	88800015 	stw	r2,0(r17)
1000ac40:	9009883a 	mov	r4,r18
1000ac44:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000ac48:	80800204 	addi	r2,r16,8
1000ac4c:	003f3c06 	br	1000a940 <__alt_data_end+0xf800a940>
1000ac50:	30c00117 	ldw	r3,4(r6)
1000ac54:	003ee706 	br	1000a7f4 <__alt_data_end+0xf800a7f4>
1000ac58:	5ac00044 	addi	r11,r11,1
1000ac5c:	588000cc 	andi	r2,r11,3
1000ac60:	31800204 	addi	r6,r6,8
1000ac64:	103efd1e 	bne	r2,zero,1000a85c <__alt_data_end+0xf800a85c>
1000ac68:	00002406 	br	1000acfc <_malloc_r+0x660>
1000ac6c:	14000317 	ldw	r16,12(r2)
1000ac70:	143f251e 	bne	r2,r16,1000a908 <__alt_data_end+0xf800a908>
1000ac74:	21000084 	addi	r4,r4,2
1000ac78:	003ebc06 	br	1000a76c <__alt_data_end+0xf800a76c>
1000ac7c:	8085883a 	add	r2,r16,r2
1000ac80:	10c00117 	ldw	r3,4(r2)
1000ac84:	81000317 	ldw	r4,12(r16)
1000ac88:	81400217 	ldw	r5,8(r16)
1000ac8c:	18c00054 	ori	r3,r3,1
1000ac90:	10c00115 	stw	r3,4(r2)
1000ac94:	29000315 	stw	r4,12(r5)
1000ac98:	21400215 	stw	r5,8(r4)
1000ac9c:	9009883a 	mov	r4,r18
1000aca0:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000aca4:	80800204 	addi	r2,r16,8
1000aca8:	003f2506 	br	1000a940 <__alt_data_end+0xf800a940>
1000acac:	12001704 	addi	r8,r2,92
1000acb0:	11c016c4 	addi	r7,r2,91
1000acb4:	4209883a 	add	r4,r8,r8
1000acb8:	003e9606 	br	1000a714 <__alt_data_end+0xf800a714>
1000acbc:	3804d1ba 	srli	r2,r7,6
1000acc0:	11400e44 	addi	r5,r2,57
1000acc4:	10c00e04 	addi	r3,r2,56
1000acc8:	294b883a 	add	r5,r5,r5
1000accc:	003fbc06 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000acd0:	84ff5926 	beq	r16,r19,1000aa38 <__alt_data_end+0xf800aa38>
1000acd4:	00840074 	movhi	r2,4097
1000acd8:	10934b04 	addi	r2,r2,19756
1000acdc:	14000217 	ldw	r16,8(r2)
1000ace0:	00bfff04 	movi	r2,-4
1000ace4:	80c00117 	ldw	r3,4(r16)
1000ace8:	1886703a 	and	r3,r3,r2
1000acec:	003f9106 	br	1000ab34 <__alt_data_end+0xf800ab34>
1000acf0:	60800217 	ldw	r2,8(r12)
1000acf4:	213fffc4 	addi	r4,r4,-1
1000acf8:	1300651e 	bne	r2,r12,1000ae90 <_malloc_r+0x7f4>
1000acfc:	208000cc 	andi	r2,r4,3
1000ad00:	633ffe04 	addi	r12,r12,-8
1000ad04:	103ffa1e 	bne	r2,zero,1000acf0 <__alt_data_end+0xf800acf0>
1000ad08:	98800117 	ldw	r2,4(r19)
1000ad0c:	0146303a 	nor	r3,zero,r5
1000ad10:	1884703a 	and	r2,r3,r2
1000ad14:	98800115 	stw	r2,4(r19)
1000ad18:	294b883a 	add	r5,r5,r5
1000ad1c:	117f2836 	bltu	r2,r5,1000a9c0 <__alt_data_end+0xf800a9c0>
1000ad20:	283f2726 	beq	r5,zero,1000a9c0 <__alt_data_end+0xf800a9c0>
1000ad24:	2886703a 	and	r3,r5,r2
1000ad28:	5809883a 	mov	r4,r11
1000ad2c:	183ec31e 	bne	r3,zero,1000a83c <__alt_data_end+0xf800a83c>
1000ad30:	294b883a 	add	r5,r5,r5
1000ad34:	2886703a 	and	r3,r5,r2
1000ad38:	21000104 	addi	r4,r4,4
1000ad3c:	183ffc26 	beq	r3,zero,1000ad30 <__alt_data_end+0xf800ad30>
1000ad40:	003ebe06 	br	1000a83c <__alt_data_end+0xf800a83c>
1000ad44:	00c05504 	movi	r3,340
1000ad48:	18801236 	bltu	r3,r2,1000ad94 <_malloc_r+0x6f8>
1000ad4c:	8804d3fa 	srli	r2,r17,15
1000ad50:	12001e04 	addi	r8,r2,120
1000ad54:	11c01dc4 	addi	r7,r2,119
1000ad58:	4209883a 	add	r4,r8,r8
1000ad5c:	003e6d06 	br	1000a714 <__alt_data_end+0xf800a714>
1000ad60:	00c40004 	movi	r3,4096
1000ad64:	003f4606 	br	1000aa80 <__alt_data_end+0xf800aa80>
1000ad68:	00800044 	movi	r2,1
1000ad6c:	a0800115 	stw	r2,4(r20)
1000ad70:	003f7406 	br	1000ab44 <__alt_data_end+0xf800ab44>
1000ad74:	1805d0ba 	srai	r2,r3,2
1000ad78:	01c00044 	movi	r7,1
1000ad7c:	30c00117 	ldw	r3,4(r6)
1000ad80:	388e983a 	sll	r7,r7,r2
1000ad84:	2805883a 	mov	r2,r5
1000ad88:	38c6b03a 	or	r3,r7,r3
1000ad8c:	30c00115 	stw	r3,4(r6)
1000ad90:	003f9b06 	br	1000ac00 <__alt_data_end+0xf800ac00>
1000ad94:	00c15504 	movi	r3,1364
1000ad98:	18801a36 	bltu	r3,r2,1000ae04 <_malloc_r+0x768>
1000ad9c:	8804d4ba 	srli	r2,r17,18
1000ada0:	12001f44 	addi	r8,r2,125
1000ada4:	11c01f04 	addi	r7,r2,124
1000ada8:	4209883a 	add	r4,r8,r8
1000adac:	003e5906 	br	1000a714 <__alt_data_end+0xf800a714>
1000adb0:	ad400404 	addi	r21,r21,16
1000adb4:	003f1706 	br	1000aa14 <__alt_data_end+0xf800aa14>
1000adb8:	00c01504 	movi	r3,84
1000adbc:	18802336 	bltu	r3,r2,1000ae4c <_malloc_r+0x7b0>
1000adc0:	3804d33a 	srli	r2,r7,12
1000adc4:	11401bc4 	addi	r5,r2,111
1000adc8:	10c01b84 	addi	r3,r2,110
1000adcc:	294b883a 	add	r5,r5,r5
1000add0:	003f7b06 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000add4:	9c000217 	ldw	r16,8(r19)
1000add8:	00bfff04 	movi	r2,-4
1000addc:	80c00117 	ldw	r3,4(r16)
1000ade0:	1886703a 	and	r3,r3,r2
1000ade4:	003f5306 	br	1000ab34 <__alt_data_end+0xf800ab34>
1000ade8:	3083ffcc 	andi	r2,r6,4095
1000adec:	103f181e 	bne	r2,zero,1000aa50 <__alt_data_end+0xf800aa50>
1000adf0:	99000217 	ldw	r4,8(r19)
1000adf4:	b545883a 	add	r2,r22,r21
1000adf8:	10800054 	ori	r2,r2,1
1000adfc:	20800115 	stw	r2,4(r4)
1000ae00:	003f3e06 	br	1000aafc <__alt_data_end+0xf800aafc>
1000ae04:	01003f84 	movi	r4,254
1000ae08:	02001fc4 	movi	r8,127
1000ae0c:	01c01f84 	movi	r7,126
1000ae10:	003e4006 	br	1000a714 <__alt_data_end+0xf800a714>
1000ae14:	00840074 	movhi	r2,4097
1000ae18:	1098d304 	addi	r2,r2,25420
1000ae1c:	15000015 	stw	r20,0(r2)
1000ae20:	003f1106 	br	1000aa68 <__alt_data_end+0xf800aa68>
1000ae24:	00800044 	movi	r2,1
1000ae28:	002b883a 	mov	r21,zero
1000ae2c:	003f1f06 	br	1000aaac <__alt_data_end+0xf800aaac>
1000ae30:	81400204 	addi	r5,r16,8
1000ae34:	9009883a 	mov	r4,r18
1000ae38:	0009aa40 	call	10009aa4 <_free_r>
1000ae3c:	00840074 	movhi	r2,4097
1000ae40:	109fb704 	addi	r2,r2,32476
1000ae44:	10c00017 	ldw	r3,0(r2)
1000ae48:	003f2c06 	br	1000aafc <__alt_data_end+0xf800aafc>
1000ae4c:	00c05504 	movi	r3,340
1000ae50:	18800536 	bltu	r3,r2,1000ae68 <_malloc_r+0x7cc>
1000ae54:	3804d3fa 	srli	r2,r7,15
1000ae58:	11401e04 	addi	r5,r2,120
1000ae5c:	10c01dc4 	addi	r3,r2,119
1000ae60:	294b883a 	add	r5,r5,r5
1000ae64:	003f5606 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000ae68:	00c15504 	movi	r3,1364
1000ae6c:	18800536 	bltu	r3,r2,1000ae84 <_malloc_r+0x7e8>
1000ae70:	3804d4ba 	srli	r2,r7,18
1000ae74:	11401f44 	addi	r5,r2,125
1000ae78:	10c01f04 	addi	r3,r2,124
1000ae7c:	294b883a 	add	r5,r5,r5
1000ae80:	003f4f06 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000ae84:	01403f84 	movi	r5,254
1000ae88:	00c01f84 	movi	r3,126
1000ae8c:	003f4c06 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000ae90:	98800117 	ldw	r2,4(r19)
1000ae94:	003fa006 	br	1000ad18 <__alt_data_end+0xf800ad18>
1000ae98:	8808d0fa 	srli	r4,r17,3
1000ae9c:	20800044 	addi	r2,r4,1
1000aea0:	1085883a 	add	r2,r2,r2
1000aea4:	003e9006 	br	1000a8e8 <__alt_data_end+0xf800a8e8>

1000aea8 <memchr>:
1000aea8:	208000cc 	andi	r2,r4,3
1000aeac:	280f883a 	mov	r7,r5
1000aeb0:	10003426 	beq	r2,zero,1000af84 <memchr+0xdc>
1000aeb4:	30bfffc4 	addi	r2,r6,-1
1000aeb8:	30001a26 	beq	r6,zero,1000af24 <memchr+0x7c>
1000aebc:	20c00003 	ldbu	r3,0(r4)
1000aec0:	29803fcc 	andi	r6,r5,255
1000aec4:	30c0051e 	bne	r6,r3,1000aedc <memchr+0x34>
1000aec8:	00001806 	br	1000af2c <memchr+0x84>
1000aecc:	10001526 	beq	r2,zero,1000af24 <memchr+0x7c>
1000aed0:	20c00003 	ldbu	r3,0(r4)
1000aed4:	10bfffc4 	addi	r2,r2,-1
1000aed8:	30c01426 	beq	r6,r3,1000af2c <memchr+0x84>
1000aedc:	21000044 	addi	r4,r4,1
1000aee0:	20c000cc 	andi	r3,r4,3
1000aee4:	183ff91e 	bne	r3,zero,1000aecc <__alt_data_end+0xf800aecc>
1000aee8:	020000c4 	movi	r8,3
1000aeec:	40801136 	bltu	r8,r2,1000af34 <memchr+0x8c>
1000aef0:	10000c26 	beq	r2,zero,1000af24 <memchr+0x7c>
1000aef4:	20c00003 	ldbu	r3,0(r4)
1000aef8:	29403fcc 	andi	r5,r5,255
1000aefc:	28c00b26 	beq	r5,r3,1000af2c <memchr+0x84>
1000af00:	20c00044 	addi	r3,r4,1
1000af04:	39803fcc 	andi	r6,r7,255
1000af08:	2089883a 	add	r4,r4,r2
1000af0c:	00000306 	br	1000af1c <memchr+0x74>
1000af10:	18c00044 	addi	r3,r3,1
1000af14:	197fffc3 	ldbu	r5,-1(r3)
1000af18:	31400526 	beq	r6,r5,1000af30 <memchr+0x88>
1000af1c:	1805883a 	mov	r2,r3
1000af20:	20fffb1e 	bne	r4,r3,1000af10 <__alt_data_end+0xf800af10>
1000af24:	0005883a 	mov	r2,zero
1000af28:	f800283a 	ret
1000af2c:	2005883a 	mov	r2,r4
1000af30:	f800283a 	ret
1000af34:	28c03fcc 	andi	r3,r5,255
1000af38:	1812923a 	slli	r9,r3,8
1000af3c:	02ffbff4 	movhi	r11,65279
1000af40:	02a02074 	movhi	r10,32897
1000af44:	48d2b03a 	or	r9,r9,r3
1000af48:	4806943a 	slli	r3,r9,16
1000af4c:	5affbfc4 	addi	r11,r11,-257
1000af50:	52a02004 	addi	r10,r10,-32640
1000af54:	48d2b03a 	or	r9,r9,r3
1000af58:	20c00017 	ldw	r3,0(r4)
1000af5c:	48c6f03a 	xor	r3,r9,r3
1000af60:	1acd883a 	add	r6,r3,r11
1000af64:	00c6303a 	nor	r3,zero,r3
1000af68:	30c6703a 	and	r3,r6,r3
1000af6c:	1a86703a 	and	r3,r3,r10
1000af70:	183fe01e 	bne	r3,zero,1000aef4 <__alt_data_end+0xf800aef4>
1000af74:	10bfff04 	addi	r2,r2,-4
1000af78:	21000104 	addi	r4,r4,4
1000af7c:	40bff636 	bltu	r8,r2,1000af58 <__alt_data_end+0xf800af58>
1000af80:	003fdb06 	br	1000aef0 <__alt_data_end+0xf800aef0>
1000af84:	3005883a 	mov	r2,r6
1000af88:	003fd706 	br	1000aee8 <__alt_data_end+0xf800aee8>

1000af8c <memcpy>:
1000af8c:	defffd04 	addi	sp,sp,-12
1000af90:	dfc00215 	stw	ra,8(sp)
1000af94:	dc400115 	stw	r17,4(sp)
1000af98:	dc000015 	stw	r16,0(sp)
1000af9c:	00c003c4 	movi	r3,15
1000afa0:	2005883a 	mov	r2,r4
1000afa4:	1980452e 	bgeu	r3,r6,1000b0bc <memcpy+0x130>
1000afa8:	2906b03a 	or	r3,r5,r4
1000afac:	18c000cc 	andi	r3,r3,3
1000afb0:	1800441e 	bne	r3,zero,1000b0c4 <memcpy+0x138>
1000afb4:	347ffc04 	addi	r17,r6,-16
1000afb8:	8822d13a 	srli	r17,r17,4
1000afbc:	28c00104 	addi	r3,r5,4
1000afc0:	23400104 	addi	r13,r4,4
1000afc4:	8820913a 	slli	r16,r17,4
1000afc8:	2b000204 	addi	r12,r5,8
1000afcc:	22c00204 	addi	r11,r4,8
1000afd0:	84000504 	addi	r16,r16,20
1000afd4:	2a800304 	addi	r10,r5,12
1000afd8:	22400304 	addi	r9,r4,12
1000afdc:	2c21883a 	add	r16,r5,r16
1000afe0:	2811883a 	mov	r8,r5
1000afe4:	200f883a 	mov	r7,r4
1000afe8:	41000017 	ldw	r4,0(r8)
1000afec:	1fc00017 	ldw	ra,0(r3)
1000aff0:	63c00017 	ldw	r15,0(r12)
1000aff4:	39000015 	stw	r4,0(r7)
1000aff8:	53800017 	ldw	r14,0(r10)
1000affc:	6fc00015 	stw	ra,0(r13)
1000b000:	5bc00015 	stw	r15,0(r11)
1000b004:	4b800015 	stw	r14,0(r9)
1000b008:	18c00404 	addi	r3,r3,16
1000b00c:	39c00404 	addi	r7,r7,16
1000b010:	42000404 	addi	r8,r8,16
1000b014:	6b400404 	addi	r13,r13,16
1000b018:	63000404 	addi	r12,r12,16
1000b01c:	5ac00404 	addi	r11,r11,16
1000b020:	52800404 	addi	r10,r10,16
1000b024:	4a400404 	addi	r9,r9,16
1000b028:	1c3fef1e 	bne	r3,r16,1000afe8 <__alt_data_end+0xf800afe8>
1000b02c:	89c00044 	addi	r7,r17,1
1000b030:	380e913a 	slli	r7,r7,4
1000b034:	310003cc 	andi	r4,r6,15
1000b038:	02c000c4 	movi	r11,3
1000b03c:	11c7883a 	add	r3,r2,r7
1000b040:	29cb883a 	add	r5,r5,r7
1000b044:	5900212e 	bgeu	r11,r4,1000b0cc <memcpy+0x140>
1000b048:	1813883a 	mov	r9,r3
1000b04c:	2811883a 	mov	r8,r5
1000b050:	200f883a 	mov	r7,r4
1000b054:	42800017 	ldw	r10,0(r8)
1000b058:	4a400104 	addi	r9,r9,4
1000b05c:	39ffff04 	addi	r7,r7,-4
1000b060:	4abfff15 	stw	r10,-4(r9)
1000b064:	42000104 	addi	r8,r8,4
1000b068:	59fffa36 	bltu	r11,r7,1000b054 <__alt_data_end+0xf800b054>
1000b06c:	213fff04 	addi	r4,r4,-4
1000b070:	2008d0ba 	srli	r4,r4,2
1000b074:	318000cc 	andi	r6,r6,3
1000b078:	21000044 	addi	r4,r4,1
1000b07c:	2109883a 	add	r4,r4,r4
1000b080:	2109883a 	add	r4,r4,r4
1000b084:	1907883a 	add	r3,r3,r4
1000b088:	290b883a 	add	r5,r5,r4
1000b08c:	30000626 	beq	r6,zero,1000b0a8 <memcpy+0x11c>
1000b090:	198d883a 	add	r6,r3,r6
1000b094:	29c00003 	ldbu	r7,0(r5)
1000b098:	18c00044 	addi	r3,r3,1
1000b09c:	29400044 	addi	r5,r5,1
1000b0a0:	19ffffc5 	stb	r7,-1(r3)
1000b0a4:	19bffb1e 	bne	r3,r6,1000b094 <__alt_data_end+0xf800b094>
1000b0a8:	dfc00217 	ldw	ra,8(sp)
1000b0ac:	dc400117 	ldw	r17,4(sp)
1000b0b0:	dc000017 	ldw	r16,0(sp)
1000b0b4:	dec00304 	addi	sp,sp,12
1000b0b8:	f800283a 	ret
1000b0bc:	2007883a 	mov	r3,r4
1000b0c0:	003ff206 	br	1000b08c <__alt_data_end+0xf800b08c>
1000b0c4:	2007883a 	mov	r3,r4
1000b0c8:	003ff106 	br	1000b090 <__alt_data_end+0xf800b090>
1000b0cc:	200d883a 	mov	r6,r4
1000b0d0:	003fee06 	br	1000b08c <__alt_data_end+0xf800b08c>

1000b0d4 <memmove>:
1000b0d4:	2005883a 	mov	r2,r4
1000b0d8:	29000b2e 	bgeu	r5,r4,1000b108 <memmove+0x34>
1000b0dc:	298f883a 	add	r7,r5,r6
1000b0e0:	21c0092e 	bgeu	r4,r7,1000b108 <memmove+0x34>
1000b0e4:	2187883a 	add	r3,r4,r6
1000b0e8:	198bc83a 	sub	r5,r3,r6
1000b0ec:	30004826 	beq	r6,zero,1000b210 <memmove+0x13c>
1000b0f0:	39ffffc4 	addi	r7,r7,-1
1000b0f4:	39000003 	ldbu	r4,0(r7)
1000b0f8:	18ffffc4 	addi	r3,r3,-1
1000b0fc:	19000005 	stb	r4,0(r3)
1000b100:	28fffb1e 	bne	r5,r3,1000b0f0 <__alt_data_end+0xf800b0f0>
1000b104:	f800283a 	ret
1000b108:	00c003c4 	movi	r3,15
1000b10c:	1980412e 	bgeu	r3,r6,1000b214 <memmove+0x140>
1000b110:	2886b03a 	or	r3,r5,r2
1000b114:	18c000cc 	andi	r3,r3,3
1000b118:	1800401e 	bne	r3,zero,1000b21c <memmove+0x148>
1000b11c:	33fffc04 	addi	r15,r6,-16
1000b120:	781ed13a 	srli	r15,r15,4
1000b124:	28c00104 	addi	r3,r5,4
1000b128:	13400104 	addi	r13,r2,4
1000b12c:	781c913a 	slli	r14,r15,4
1000b130:	2b000204 	addi	r12,r5,8
1000b134:	12c00204 	addi	r11,r2,8
1000b138:	73800504 	addi	r14,r14,20
1000b13c:	2a800304 	addi	r10,r5,12
1000b140:	12400304 	addi	r9,r2,12
1000b144:	2b9d883a 	add	r14,r5,r14
1000b148:	2811883a 	mov	r8,r5
1000b14c:	100f883a 	mov	r7,r2
1000b150:	41000017 	ldw	r4,0(r8)
1000b154:	39c00404 	addi	r7,r7,16
1000b158:	18c00404 	addi	r3,r3,16
1000b15c:	393ffc15 	stw	r4,-16(r7)
1000b160:	193ffc17 	ldw	r4,-16(r3)
1000b164:	6b400404 	addi	r13,r13,16
1000b168:	5ac00404 	addi	r11,r11,16
1000b16c:	693ffc15 	stw	r4,-16(r13)
1000b170:	61000017 	ldw	r4,0(r12)
1000b174:	4a400404 	addi	r9,r9,16
1000b178:	42000404 	addi	r8,r8,16
1000b17c:	593ffc15 	stw	r4,-16(r11)
1000b180:	51000017 	ldw	r4,0(r10)
1000b184:	63000404 	addi	r12,r12,16
1000b188:	52800404 	addi	r10,r10,16
1000b18c:	493ffc15 	stw	r4,-16(r9)
1000b190:	1bbfef1e 	bne	r3,r14,1000b150 <__alt_data_end+0xf800b150>
1000b194:	79000044 	addi	r4,r15,1
1000b198:	2008913a 	slli	r4,r4,4
1000b19c:	328003cc 	andi	r10,r6,15
1000b1a0:	02c000c4 	movi	r11,3
1000b1a4:	1107883a 	add	r3,r2,r4
1000b1a8:	290b883a 	add	r5,r5,r4
1000b1ac:	5a801e2e 	bgeu	r11,r10,1000b228 <memmove+0x154>
1000b1b0:	1813883a 	mov	r9,r3
1000b1b4:	2811883a 	mov	r8,r5
1000b1b8:	500f883a 	mov	r7,r10
1000b1bc:	41000017 	ldw	r4,0(r8)
1000b1c0:	4a400104 	addi	r9,r9,4
1000b1c4:	39ffff04 	addi	r7,r7,-4
1000b1c8:	493fff15 	stw	r4,-4(r9)
1000b1cc:	42000104 	addi	r8,r8,4
1000b1d0:	59fffa36 	bltu	r11,r7,1000b1bc <__alt_data_end+0xf800b1bc>
1000b1d4:	513fff04 	addi	r4,r10,-4
1000b1d8:	2008d0ba 	srli	r4,r4,2
1000b1dc:	318000cc 	andi	r6,r6,3
1000b1e0:	21000044 	addi	r4,r4,1
1000b1e4:	2109883a 	add	r4,r4,r4
1000b1e8:	2109883a 	add	r4,r4,r4
1000b1ec:	1907883a 	add	r3,r3,r4
1000b1f0:	290b883a 	add	r5,r5,r4
1000b1f4:	30000b26 	beq	r6,zero,1000b224 <memmove+0x150>
1000b1f8:	198d883a 	add	r6,r3,r6
1000b1fc:	29c00003 	ldbu	r7,0(r5)
1000b200:	18c00044 	addi	r3,r3,1
1000b204:	29400044 	addi	r5,r5,1
1000b208:	19ffffc5 	stb	r7,-1(r3)
1000b20c:	19bffb1e 	bne	r3,r6,1000b1fc <__alt_data_end+0xf800b1fc>
1000b210:	f800283a 	ret
1000b214:	1007883a 	mov	r3,r2
1000b218:	003ff606 	br	1000b1f4 <__alt_data_end+0xf800b1f4>
1000b21c:	1007883a 	mov	r3,r2
1000b220:	003ff506 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b224:	f800283a 	ret
1000b228:	500d883a 	mov	r6,r10
1000b22c:	003ff106 	br	1000b1f4 <__alt_data_end+0xf800b1f4>

1000b230 <memset>:
1000b230:	20c000cc 	andi	r3,r4,3
1000b234:	2005883a 	mov	r2,r4
1000b238:	18004426 	beq	r3,zero,1000b34c <memset+0x11c>
1000b23c:	31ffffc4 	addi	r7,r6,-1
1000b240:	30004026 	beq	r6,zero,1000b344 <memset+0x114>
1000b244:	2813883a 	mov	r9,r5
1000b248:	200d883a 	mov	r6,r4
1000b24c:	2007883a 	mov	r3,r4
1000b250:	00000406 	br	1000b264 <memset+0x34>
1000b254:	3a3fffc4 	addi	r8,r7,-1
1000b258:	31800044 	addi	r6,r6,1
1000b25c:	38003926 	beq	r7,zero,1000b344 <memset+0x114>
1000b260:	400f883a 	mov	r7,r8
1000b264:	18c00044 	addi	r3,r3,1
1000b268:	32400005 	stb	r9,0(r6)
1000b26c:	1a0000cc 	andi	r8,r3,3
1000b270:	403ff81e 	bne	r8,zero,1000b254 <__alt_data_end+0xf800b254>
1000b274:	010000c4 	movi	r4,3
1000b278:	21c02d2e 	bgeu	r4,r7,1000b330 <memset+0x100>
1000b27c:	29003fcc 	andi	r4,r5,255
1000b280:	200c923a 	slli	r6,r4,8
1000b284:	3108b03a 	or	r4,r6,r4
1000b288:	200c943a 	slli	r6,r4,16
1000b28c:	218cb03a 	or	r6,r4,r6
1000b290:	010003c4 	movi	r4,15
1000b294:	21c0182e 	bgeu	r4,r7,1000b2f8 <memset+0xc8>
1000b298:	3b3ffc04 	addi	r12,r7,-16
1000b29c:	6018d13a 	srli	r12,r12,4
1000b2a0:	1a000104 	addi	r8,r3,4
1000b2a4:	1ac00204 	addi	r11,r3,8
1000b2a8:	6008913a 	slli	r4,r12,4
1000b2ac:	1a800304 	addi	r10,r3,12
1000b2b0:	1813883a 	mov	r9,r3
1000b2b4:	21000504 	addi	r4,r4,20
1000b2b8:	1909883a 	add	r4,r3,r4
1000b2bc:	49800015 	stw	r6,0(r9)
1000b2c0:	41800015 	stw	r6,0(r8)
1000b2c4:	59800015 	stw	r6,0(r11)
1000b2c8:	51800015 	stw	r6,0(r10)
1000b2cc:	42000404 	addi	r8,r8,16
1000b2d0:	4a400404 	addi	r9,r9,16
1000b2d4:	5ac00404 	addi	r11,r11,16
1000b2d8:	52800404 	addi	r10,r10,16
1000b2dc:	413ff71e 	bne	r8,r4,1000b2bc <__alt_data_end+0xf800b2bc>
1000b2e0:	63000044 	addi	r12,r12,1
1000b2e4:	6018913a 	slli	r12,r12,4
1000b2e8:	39c003cc 	andi	r7,r7,15
1000b2ec:	010000c4 	movi	r4,3
1000b2f0:	1b07883a 	add	r3,r3,r12
1000b2f4:	21c00e2e 	bgeu	r4,r7,1000b330 <memset+0x100>
1000b2f8:	1813883a 	mov	r9,r3
1000b2fc:	3811883a 	mov	r8,r7
1000b300:	010000c4 	movi	r4,3
1000b304:	49800015 	stw	r6,0(r9)
1000b308:	423fff04 	addi	r8,r8,-4
1000b30c:	4a400104 	addi	r9,r9,4
1000b310:	223ffc36 	bltu	r4,r8,1000b304 <__alt_data_end+0xf800b304>
1000b314:	393fff04 	addi	r4,r7,-4
1000b318:	2008d0ba 	srli	r4,r4,2
1000b31c:	39c000cc 	andi	r7,r7,3
1000b320:	21000044 	addi	r4,r4,1
1000b324:	2109883a 	add	r4,r4,r4
1000b328:	2109883a 	add	r4,r4,r4
1000b32c:	1907883a 	add	r3,r3,r4
1000b330:	38000526 	beq	r7,zero,1000b348 <memset+0x118>
1000b334:	19cf883a 	add	r7,r3,r7
1000b338:	19400005 	stb	r5,0(r3)
1000b33c:	18c00044 	addi	r3,r3,1
1000b340:	38fffd1e 	bne	r7,r3,1000b338 <__alt_data_end+0xf800b338>
1000b344:	f800283a 	ret
1000b348:	f800283a 	ret
1000b34c:	2007883a 	mov	r3,r4
1000b350:	300f883a 	mov	r7,r6
1000b354:	003fc706 	br	1000b274 <__alt_data_end+0xf800b274>

1000b358 <_Balloc>:
1000b358:	20801317 	ldw	r2,76(r4)
1000b35c:	defffc04 	addi	sp,sp,-16
1000b360:	dc400115 	stw	r17,4(sp)
1000b364:	dc000015 	stw	r16,0(sp)
1000b368:	dfc00315 	stw	ra,12(sp)
1000b36c:	dc800215 	stw	r18,8(sp)
1000b370:	2023883a 	mov	r17,r4
1000b374:	2821883a 	mov	r16,r5
1000b378:	10000f26 	beq	r2,zero,1000b3b8 <_Balloc+0x60>
1000b37c:	8407883a 	add	r3,r16,r16
1000b380:	18c7883a 	add	r3,r3,r3
1000b384:	10c7883a 	add	r3,r2,r3
1000b388:	18800017 	ldw	r2,0(r3)
1000b38c:	10001126 	beq	r2,zero,1000b3d4 <_Balloc+0x7c>
1000b390:	11000017 	ldw	r4,0(r2)
1000b394:	19000015 	stw	r4,0(r3)
1000b398:	10000415 	stw	zero,16(r2)
1000b39c:	10000315 	stw	zero,12(r2)
1000b3a0:	dfc00317 	ldw	ra,12(sp)
1000b3a4:	dc800217 	ldw	r18,8(sp)
1000b3a8:	dc400117 	ldw	r17,4(sp)
1000b3ac:	dc000017 	ldw	r16,0(sp)
1000b3b0:	dec00404 	addi	sp,sp,16
1000b3b4:	f800283a 	ret
1000b3b8:	01800844 	movi	r6,33
1000b3bc:	01400104 	movi	r5,4
1000b3c0:	000e4000 	call	1000e400 <_calloc_r>
1000b3c4:	88801315 	stw	r2,76(r17)
1000b3c8:	103fec1e 	bne	r2,zero,1000b37c <__alt_data_end+0xf800b37c>
1000b3cc:	0005883a 	mov	r2,zero
1000b3d0:	003ff306 	br	1000b3a0 <__alt_data_end+0xf800b3a0>
1000b3d4:	01400044 	movi	r5,1
1000b3d8:	2c24983a 	sll	r18,r5,r16
1000b3dc:	8809883a 	mov	r4,r17
1000b3e0:	91800144 	addi	r6,r18,5
1000b3e4:	318d883a 	add	r6,r6,r6
1000b3e8:	318d883a 	add	r6,r6,r6
1000b3ec:	000e4000 	call	1000e400 <_calloc_r>
1000b3f0:	103ff626 	beq	r2,zero,1000b3cc <__alt_data_end+0xf800b3cc>
1000b3f4:	14000115 	stw	r16,4(r2)
1000b3f8:	14800215 	stw	r18,8(r2)
1000b3fc:	003fe606 	br	1000b398 <__alt_data_end+0xf800b398>

1000b400 <_Bfree>:
1000b400:	28000826 	beq	r5,zero,1000b424 <_Bfree+0x24>
1000b404:	28c00117 	ldw	r3,4(r5)
1000b408:	20801317 	ldw	r2,76(r4)
1000b40c:	18c7883a 	add	r3,r3,r3
1000b410:	18c7883a 	add	r3,r3,r3
1000b414:	10c5883a 	add	r2,r2,r3
1000b418:	10c00017 	ldw	r3,0(r2)
1000b41c:	28c00015 	stw	r3,0(r5)
1000b420:	11400015 	stw	r5,0(r2)
1000b424:	f800283a 	ret

1000b428 <__multadd>:
1000b428:	defff704 	addi	sp,sp,-36
1000b42c:	dc800215 	stw	r18,8(sp)
1000b430:	2c800417 	ldw	r18,16(r5)
1000b434:	dd800615 	stw	r22,24(sp)
1000b438:	dd400515 	stw	r21,20(sp)
1000b43c:	dd000415 	stw	r20,16(sp)
1000b440:	dcc00315 	stw	r19,12(sp)
1000b444:	dc400115 	stw	r17,4(sp)
1000b448:	dc000015 	stw	r16,0(sp)
1000b44c:	dfc00815 	stw	ra,32(sp)
1000b450:	ddc00715 	stw	r23,28(sp)
1000b454:	2827883a 	mov	r19,r5
1000b458:	2029883a 	mov	r20,r4
1000b45c:	3023883a 	mov	r17,r6
1000b460:	3821883a 	mov	r16,r7
1000b464:	2d400504 	addi	r21,r5,20
1000b468:	002d883a 	mov	r22,zero
1000b46c:	adc00017 	ldw	r23,0(r21)
1000b470:	880b883a 	mov	r5,r17
1000b474:	ad400104 	addi	r21,r21,4
1000b478:	b93fffcc 	andi	r4,r23,65535
1000b47c:	00052a00 	call	100052a0 <__mulsi3>
1000b480:	b808d43a 	srli	r4,r23,16
1000b484:	880b883a 	mov	r5,r17
1000b488:	1421883a 	add	r16,r2,r16
1000b48c:	00052a00 	call	100052a0 <__mulsi3>
1000b490:	800ed43a 	srli	r7,r16,16
1000b494:	80ffffcc 	andi	r3,r16,65535
1000b498:	b5800044 	addi	r22,r22,1
1000b49c:	11c5883a 	add	r2,r2,r7
1000b4a0:	100e943a 	slli	r7,r2,16
1000b4a4:	1020d43a 	srli	r16,r2,16
1000b4a8:	38c7883a 	add	r3,r7,r3
1000b4ac:	a8ffff15 	stw	r3,-4(r21)
1000b4b0:	b4bfee16 	blt	r22,r18,1000b46c <__alt_data_end+0xf800b46c>
1000b4b4:	80000926 	beq	r16,zero,1000b4dc <__multadd+0xb4>
1000b4b8:	98800217 	ldw	r2,8(r19)
1000b4bc:	9080130e 	bge	r18,r2,1000b50c <__multadd+0xe4>
1000b4c0:	90800144 	addi	r2,r18,5
1000b4c4:	1085883a 	add	r2,r2,r2
1000b4c8:	1085883a 	add	r2,r2,r2
1000b4cc:	9885883a 	add	r2,r19,r2
1000b4d0:	14000015 	stw	r16,0(r2)
1000b4d4:	94800044 	addi	r18,r18,1
1000b4d8:	9c800415 	stw	r18,16(r19)
1000b4dc:	9805883a 	mov	r2,r19
1000b4e0:	dfc00817 	ldw	ra,32(sp)
1000b4e4:	ddc00717 	ldw	r23,28(sp)
1000b4e8:	dd800617 	ldw	r22,24(sp)
1000b4ec:	dd400517 	ldw	r21,20(sp)
1000b4f0:	dd000417 	ldw	r20,16(sp)
1000b4f4:	dcc00317 	ldw	r19,12(sp)
1000b4f8:	dc800217 	ldw	r18,8(sp)
1000b4fc:	dc400117 	ldw	r17,4(sp)
1000b500:	dc000017 	ldw	r16,0(sp)
1000b504:	dec00904 	addi	sp,sp,36
1000b508:	f800283a 	ret
1000b50c:	99400117 	ldw	r5,4(r19)
1000b510:	a009883a 	mov	r4,r20
1000b514:	29400044 	addi	r5,r5,1
1000b518:	000b3580 	call	1000b358 <_Balloc>
1000b51c:	99800417 	ldw	r6,16(r19)
1000b520:	99400304 	addi	r5,r19,12
1000b524:	11000304 	addi	r4,r2,12
1000b528:	31800084 	addi	r6,r6,2
1000b52c:	318d883a 	add	r6,r6,r6
1000b530:	318d883a 	add	r6,r6,r6
1000b534:	1023883a 	mov	r17,r2
1000b538:	000af8c0 	call	1000af8c <memcpy>
1000b53c:	98000a26 	beq	r19,zero,1000b568 <__multadd+0x140>
1000b540:	98c00117 	ldw	r3,4(r19)
1000b544:	a0801317 	ldw	r2,76(r20)
1000b548:	18c7883a 	add	r3,r3,r3
1000b54c:	18c7883a 	add	r3,r3,r3
1000b550:	10c5883a 	add	r2,r2,r3
1000b554:	10c00017 	ldw	r3,0(r2)
1000b558:	98c00015 	stw	r3,0(r19)
1000b55c:	14c00015 	stw	r19,0(r2)
1000b560:	8827883a 	mov	r19,r17
1000b564:	003fd606 	br	1000b4c0 <__alt_data_end+0xf800b4c0>
1000b568:	8827883a 	mov	r19,r17
1000b56c:	003fd406 	br	1000b4c0 <__alt_data_end+0xf800b4c0>

1000b570 <__s2b>:
1000b570:	defff904 	addi	sp,sp,-28
1000b574:	dc400115 	stw	r17,4(sp)
1000b578:	dc000015 	stw	r16,0(sp)
1000b57c:	2023883a 	mov	r17,r4
1000b580:	2821883a 	mov	r16,r5
1000b584:	39000204 	addi	r4,r7,8
1000b588:	01400244 	movi	r5,9
1000b58c:	dcc00315 	stw	r19,12(sp)
1000b590:	dc800215 	stw	r18,8(sp)
1000b594:	dfc00615 	stw	ra,24(sp)
1000b598:	dd400515 	stw	r21,20(sp)
1000b59c:	dd000415 	stw	r20,16(sp)
1000b5a0:	3825883a 	mov	r18,r7
1000b5a4:	3027883a 	mov	r19,r6
1000b5a8:	00044400 	call	10004440 <__divsi3>
1000b5ac:	00c00044 	movi	r3,1
1000b5b0:	000b883a 	mov	r5,zero
1000b5b4:	1880030e 	bge	r3,r2,1000b5c4 <__s2b+0x54>
1000b5b8:	18c7883a 	add	r3,r3,r3
1000b5bc:	29400044 	addi	r5,r5,1
1000b5c0:	18bffd16 	blt	r3,r2,1000b5b8 <__alt_data_end+0xf800b5b8>
1000b5c4:	8809883a 	mov	r4,r17
1000b5c8:	000b3580 	call	1000b358 <_Balloc>
1000b5cc:	d8c00717 	ldw	r3,28(sp)
1000b5d0:	10c00515 	stw	r3,20(r2)
1000b5d4:	00c00044 	movi	r3,1
1000b5d8:	10c00415 	stw	r3,16(r2)
1000b5dc:	00c00244 	movi	r3,9
1000b5e0:	1cc0210e 	bge	r3,r19,1000b668 <__s2b+0xf8>
1000b5e4:	80eb883a 	add	r21,r16,r3
1000b5e8:	a829883a 	mov	r20,r21
1000b5ec:	84e1883a 	add	r16,r16,r19
1000b5f0:	a1c00007 	ldb	r7,0(r20)
1000b5f4:	01800284 	movi	r6,10
1000b5f8:	a5000044 	addi	r20,r20,1
1000b5fc:	100b883a 	mov	r5,r2
1000b600:	39fff404 	addi	r7,r7,-48
1000b604:	8809883a 	mov	r4,r17
1000b608:	000b4280 	call	1000b428 <__multadd>
1000b60c:	a43ff81e 	bne	r20,r16,1000b5f0 <__alt_data_end+0xf800b5f0>
1000b610:	ace1883a 	add	r16,r21,r19
1000b614:	843ffe04 	addi	r16,r16,-8
1000b618:	9c800a0e 	bge	r19,r18,1000b644 <__s2b+0xd4>
1000b61c:	94e5c83a 	sub	r18,r18,r19
1000b620:	84a5883a 	add	r18,r16,r18
1000b624:	81c00007 	ldb	r7,0(r16)
1000b628:	01800284 	movi	r6,10
1000b62c:	84000044 	addi	r16,r16,1
1000b630:	100b883a 	mov	r5,r2
1000b634:	39fff404 	addi	r7,r7,-48
1000b638:	8809883a 	mov	r4,r17
1000b63c:	000b4280 	call	1000b428 <__multadd>
1000b640:	84bff81e 	bne	r16,r18,1000b624 <__alt_data_end+0xf800b624>
1000b644:	dfc00617 	ldw	ra,24(sp)
1000b648:	dd400517 	ldw	r21,20(sp)
1000b64c:	dd000417 	ldw	r20,16(sp)
1000b650:	dcc00317 	ldw	r19,12(sp)
1000b654:	dc800217 	ldw	r18,8(sp)
1000b658:	dc400117 	ldw	r17,4(sp)
1000b65c:	dc000017 	ldw	r16,0(sp)
1000b660:	dec00704 	addi	sp,sp,28
1000b664:	f800283a 	ret
1000b668:	84000284 	addi	r16,r16,10
1000b66c:	1827883a 	mov	r19,r3
1000b670:	003fe906 	br	1000b618 <__alt_data_end+0xf800b618>

1000b674 <__hi0bits>:
1000b674:	20bfffec 	andhi	r2,r4,65535
1000b678:	1000141e 	bne	r2,zero,1000b6cc <__hi0bits+0x58>
1000b67c:	2008943a 	slli	r4,r4,16
1000b680:	00800404 	movi	r2,16
1000b684:	20ffc02c 	andhi	r3,r4,65280
1000b688:	1800021e 	bne	r3,zero,1000b694 <__hi0bits+0x20>
1000b68c:	2008923a 	slli	r4,r4,8
1000b690:	10800204 	addi	r2,r2,8
1000b694:	20fc002c 	andhi	r3,r4,61440
1000b698:	1800021e 	bne	r3,zero,1000b6a4 <__hi0bits+0x30>
1000b69c:	2008913a 	slli	r4,r4,4
1000b6a0:	10800104 	addi	r2,r2,4
1000b6a4:	20f0002c 	andhi	r3,r4,49152
1000b6a8:	1800031e 	bne	r3,zero,1000b6b8 <__hi0bits+0x44>
1000b6ac:	2109883a 	add	r4,r4,r4
1000b6b0:	10800084 	addi	r2,r2,2
1000b6b4:	2109883a 	add	r4,r4,r4
1000b6b8:	20000316 	blt	r4,zero,1000b6c8 <__hi0bits+0x54>
1000b6bc:	2110002c 	andhi	r4,r4,16384
1000b6c0:	2000041e 	bne	r4,zero,1000b6d4 <__hi0bits+0x60>
1000b6c4:	00800804 	movi	r2,32
1000b6c8:	f800283a 	ret
1000b6cc:	0005883a 	mov	r2,zero
1000b6d0:	003fec06 	br	1000b684 <__alt_data_end+0xf800b684>
1000b6d4:	10800044 	addi	r2,r2,1
1000b6d8:	f800283a 	ret

1000b6dc <__lo0bits>:
1000b6dc:	20c00017 	ldw	r3,0(r4)
1000b6e0:	188001cc 	andi	r2,r3,7
1000b6e4:	10000826 	beq	r2,zero,1000b708 <__lo0bits+0x2c>
1000b6e8:	1880004c 	andi	r2,r3,1
1000b6ec:	1000211e 	bne	r2,zero,1000b774 <__lo0bits+0x98>
1000b6f0:	1880008c 	andi	r2,r3,2
1000b6f4:	1000211e 	bne	r2,zero,1000b77c <__lo0bits+0xa0>
1000b6f8:	1806d0ba 	srli	r3,r3,2
1000b6fc:	00800084 	movi	r2,2
1000b700:	20c00015 	stw	r3,0(r4)
1000b704:	f800283a 	ret
1000b708:	18bfffcc 	andi	r2,r3,65535
1000b70c:	10001326 	beq	r2,zero,1000b75c <__lo0bits+0x80>
1000b710:	0005883a 	mov	r2,zero
1000b714:	19403fcc 	andi	r5,r3,255
1000b718:	2800021e 	bne	r5,zero,1000b724 <__lo0bits+0x48>
1000b71c:	1806d23a 	srli	r3,r3,8
1000b720:	10800204 	addi	r2,r2,8
1000b724:	194003cc 	andi	r5,r3,15
1000b728:	2800021e 	bne	r5,zero,1000b734 <__lo0bits+0x58>
1000b72c:	1806d13a 	srli	r3,r3,4
1000b730:	10800104 	addi	r2,r2,4
1000b734:	194000cc 	andi	r5,r3,3
1000b738:	2800021e 	bne	r5,zero,1000b744 <__lo0bits+0x68>
1000b73c:	1806d0ba 	srli	r3,r3,2
1000b740:	10800084 	addi	r2,r2,2
1000b744:	1940004c 	andi	r5,r3,1
1000b748:	2800081e 	bne	r5,zero,1000b76c <__lo0bits+0x90>
1000b74c:	1806d07a 	srli	r3,r3,1
1000b750:	1800051e 	bne	r3,zero,1000b768 <__lo0bits+0x8c>
1000b754:	00800804 	movi	r2,32
1000b758:	f800283a 	ret
1000b75c:	1806d43a 	srli	r3,r3,16
1000b760:	00800404 	movi	r2,16
1000b764:	003feb06 	br	1000b714 <__alt_data_end+0xf800b714>
1000b768:	10800044 	addi	r2,r2,1
1000b76c:	20c00015 	stw	r3,0(r4)
1000b770:	f800283a 	ret
1000b774:	0005883a 	mov	r2,zero
1000b778:	f800283a 	ret
1000b77c:	1806d07a 	srli	r3,r3,1
1000b780:	00800044 	movi	r2,1
1000b784:	20c00015 	stw	r3,0(r4)
1000b788:	f800283a 	ret

1000b78c <__i2b>:
1000b78c:	defffd04 	addi	sp,sp,-12
1000b790:	dc000015 	stw	r16,0(sp)
1000b794:	04000044 	movi	r16,1
1000b798:	dc400115 	stw	r17,4(sp)
1000b79c:	2823883a 	mov	r17,r5
1000b7a0:	800b883a 	mov	r5,r16
1000b7a4:	dfc00215 	stw	ra,8(sp)
1000b7a8:	000b3580 	call	1000b358 <_Balloc>
1000b7ac:	14400515 	stw	r17,20(r2)
1000b7b0:	14000415 	stw	r16,16(r2)
1000b7b4:	dfc00217 	ldw	ra,8(sp)
1000b7b8:	dc400117 	ldw	r17,4(sp)
1000b7bc:	dc000017 	ldw	r16,0(sp)
1000b7c0:	dec00304 	addi	sp,sp,12
1000b7c4:	f800283a 	ret

1000b7c8 <__multiply>:
1000b7c8:	deffef04 	addi	sp,sp,-68
1000b7cc:	dc400815 	stw	r17,32(sp)
1000b7d0:	dc000715 	stw	r16,28(sp)
1000b7d4:	34400417 	ldw	r17,16(r6)
1000b7d8:	2c000417 	ldw	r16,16(r5)
1000b7dc:	dd800d15 	stw	r22,52(sp)
1000b7e0:	dc800915 	stw	r18,36(sp)
1000b7e4:	dfc01015 	stw	ra,64(sp)
1000b7e8:	df000f15 	stw	fp,60(sp)
1000b7ec:	ddc00e15 	stw	r23,56(sp)
1000b7f0:	dd400c15 	stw	r21,48(sp)
1000b7f4:	dd000b15 	stw	r20,44(sp)
1000b7f8:	dcc00a15 	stw	r19,40(sp)
1000b7fc:	2825883a 	mov	r18,r5
1000b800:	302d883a 	mov	r22,r6
1000b804:	8440050e 	bge	r16,r17,1000b81c <__multiply+0x54>
1000b808:	8007883a 	mov	r3,r16
1000b80c:	3025883a 	mov	r18,r6
1000b810:	8821883a 	mov	r16,r17
1000b814:	282d883a 	mov	r22,r5
1000b818:	1823883a 	mov	r17,r3
1000b81c:	90800217 	ldw	r2,8(r18)
1000b820:	8447883a 	add	r3,r16,r17
1000b824:	d8c00215 	stw	r3,8(sp)
1000b828:	91400117 	ldw	r5,4(r18)
1000b82c:	10c0010e 	bge	r2,r3,1000b834 <__multiply+0x6c>
1000b830:	29400044 	addi	r5,r5,1
1000b834:	000b3580 	call	1000b358 <_Balloc>
1000b838:	d8c00217 	ldw	r3,8(sp)
1000b83c:	d8800615 	stw	r2,24(sp)
1000b840:	18eb883a 	add	r21,r3,r3
1000b844:	ad6b883a 	add	r21,r21,r21
1000b848:	10c00504 	addi	r3,r2,20
1000b84c:	1d6b883a 	add	r21,r3,r21
1000b850:	d8c00115 	stw	r3,4(sp)
1000b854:	dd400315 	stw	r21,12(sp)
1000b858:	1805883a 	mov	r2,r3
1000b85c:	1d40042e 	bgeu	r3,r21,1000b870 <__multiply+0xa8>
1000b860:	d8c00317 	ldw	r3,12(sp)
1000b864:	10000015 	stw	zero,0(r2)
1000b868:	10800104 	addi	r2,r2,4
1000b86c:	10fffc36 	bltu	r2,r3,1000b860 <__alt_data_end+0xf800b860>
1000b870:	8c63883a 	add	r17,r17,r17
1000b874:	b5800504 	addi	r22,r22,20
1000b878:	8c63883a 	add	r17,r17,r17
1000b87c:	94800504 	addi	r18,r18,20
1000b880:	8421883a 	add	r16,r16,r16
1000b884:	b463883a 	add	r17,r22,r17
1000b888:	8421883a 	add	r16,r16,r16
1000b88c:	dd800015 	stw	r22,0(sp)
1000b890:	dc800415 	stw	r18,16(sp)
1000b894:	dc400515 	stw	r17,20(sp)
1000b898:	9429883a 	add	r20,r18,r16
1000b89c:	b4404f2e 	bgeu	r22,r17,1000b9dc <__multiply+0x214>
1000b8a0:	d8c00017 	ldw	r3,0(sp)
1000b8a4:	1c800017 	ldw	r18,0(r3)
1000b8a8:	947fffcc 	andi	r17,r18,65535
1000b8ac:	88001e26 	beq	r17,zero,1000b928 <__multiply+0x160>
1000b8b0:	dd800117 	ldw	r22,4(sp)
1000b8b4:	dd400417 	ldw	r21,16(sp)
1000b8b8:	0027883a 	mov	r19,zero
1000b8bc:	ac800017 	ldw	r18,0(r21)
1000b8c0:	b4000017 	ldw	r16,0(r22)
1000b8c4:	880b883a 	mov	r5,r17
1000b8c8:	913fffcc 	andi	r4,r18,65535
1000b8cc:	00052a00 	call	100052a0 <__mulsi3>
1000b8d0:	9008d43a 	srli	r4,r18,16
1000b8d4:	84bfffcc 	andi	r18,r16,65535
1000b8d8:	1485883a 	add	r2,r2,r18
1000b8dc:	14e5883a 	add	r18,r2,r19
1000b8e0:	8020d43a 	srli	r16,r16,16
1000b8e4:	9026d43a 	srli	r19,r18,16
1000b8e8:	880b883a 	mov	r5,r17
1000b8ec:	00052a00 	call	100052a0 <__mulsi3>
1000b8f0:	1405883a 	add	r2,r2,r16
1000b8f4:	14e1883a 	add	r16,r2,r19
1000b8f8:	90ffffcc 	andi	r3,r18,65535
1000b8fc:	8024943a 	slli	r18,r16,16
1000b900:	ad400104 	addi	r21,r21,4
1000b904:	b005883a 	mov	r2,r22
1000b908:	90c6b03a 	or	r3,r18,r3
1000b90c:	b0c00015 	stw	r3,0(r22)
1000b910:	8026d43a 	srli	r19,r16,16
1000b914:	b5800104 	addi	r22,r22,4
1000b918:	ad3fe836 	bltu	r21,r20,1000b8bc <__alt_data_end+0xf800b8bc>
1000b91c:	d8c00017 	ldw	r3,0(sp)
1000b920:	14c00115 	stw	r19,4(r2)
1000b924:	1c800017 	ldw	r18,0(r3)
1000b928:	9024d43a 	srli	r18,r18,16
1000b92c:	90002226 	beq	r18,zero,1000b9b8 <__multiply+0x1f0>
1000b930:	d8c00117 	ldw	r3,4(sp)
1000b934:	dd800417 	ldw	r22,16(sp)
1000b938:	002f883a 	mov	r23,zero
1000b93c:	1f000017 	ldw	fp,0(r3)
1000b940:	1823883a 	mov	r17,r3
1000b944:	182b883a 	mov	r21,r3
1000b948:	e021883a 	mov	r16,fp
1000b94c:	00000106 	br	1000b954 <__multiply+0x18c>
1000b950:	982b883a 	mov	r21,r19
1000b954:	b100000b 	ldhu	r4,0(r22)
1000b958:	8020d43a 	srli	r16,r16,16
1000b95c:	900b883a 	mov	r5,r18
1000b960:	00052a00 	call	100052a0 <__mulsi3>
1000b964:	1405883a 	add	r2,r2,r16
1000b968:	15ef883a 	add	r23,r2,r23
1000b96c:	b804943a 	slli	r2,r23,16
1000b970:	e0ffffcc 	andi	r3,fp,65535
1000b974:	8c400104 	addi	r17,r17,4
1000b978:	10c6b03a 	or	r3,r2,r3
1000b97c:	88ffff15 	stw	r3,-4(r17)
1000b980:	b5800104 	addi	r22,r22,4
1000b984:	b13fff17 	ldw	r4,-4(r22)
1000b988:	acc00104 	addi	r19,r21,4
1000b98c:	900b883a 	mov	r5,r18
1000b990:	2008d43a 	srli	r4,r4,16
1000b994:	9c000017 	ldw	r16,0(r19)
1000b998:	00052a00 	call	100052a0 <__mulsi3>
1000b99c:	b806d43a 	srli	r3,r23,16
1000b9a0:	813fffcc 	andi	r4,r16,65535
1000b9a4:	1105883a 	add	r2,r2,r4
1000b9a8:	10f9883a 	add	fp,r2,r3
1000b9ac:	e02ed43a 	srli	r23,fp,16
1000b9b0:	b53fe736 	bltu	r22,r20,1000b950 <__alt_data_end+0xf800b950>
1000b9b4:	af000115 	stw	fp,4(r21)
1000b9b8:	d8c00017 	ldw	r3,0(sp)
1000b9bc:	d9000517 	ldw	r4,20(sp)
1000b9c0:	18c00104 	addi	r3,r3,4
1000b9c4:	d8c00015 	stw	r3,0(sp)
1000b9c8:	d8c00117 	ldw	r3,4(sp)
1000b9cc:	18c00104 	addi	r3,r3,4
1000b9d0:	d8c00115 	stw	r3,4(sp)
1000b9d4:	d8c00017 	ldw	r3,0(sp)
1000b9d8:	193fb136 	bltu	r3,r4,1000b8a0 <__alt_data_end+0xf800b8a0>
1000b9dc:	d8c00217 	ldw	r3,8(sp)
1000b9e0:	00c00c0e 	bge	zero,r3,1000ba14 <__multiply+0x24c>
1000b9e4:	d8c00317 	ldw	r3,12(sp)
1000b9e8:	18bfff17 	ldw	r2,-4(r3)
1000b9ec:	1d7fff04 	addi	r21,r3,-4
1000b9f0:	10000326 	beq	r2,zero,1000ba00 <__multiply+0x238>
1000b9f4:	00000706 	br	1000ba14 <__multiply+0x24c>
1000b9f8:	a8800017 	ldw	r2,0(r21)
1000b9fc:	1000051e 	bne	r2,zero,1000ba14 <__multiply+0x24c>
1000ba00:	d8c00217 	ldw	r3,8(sp)
1000ba04:	ad7fff04 	addi	r21,r21,-4
1000ba08:	18ffffc4 	addi	r3,r3,-1
1000ba0c:	d8c00215 	stw	r3,8(sp)
1000ba10:	183ff91e 	bne	r3,zero,1000b9f8 <__alt_data_end+0xf800b9f8>
1000ba14:	d8c00617 	ldw	r3,24(sp)
1000ba18:	d9000217 	ldw	r4,8(sp)
1000ba1c:	1805883a 	mov	r2,r3
1000ba20:	19000415 	stw	r4,16(r3)
1000ba24:	dfc01017 	ldw	ra,64(sp)
1000ba28:	df000f17 	ldw	fp,60(sp)
1000ba2c:	ddc00e17 	ldw	r23,56(sp)
1000ba30:	dd800d17 	ldw	r22,52(sp)
1000ba34:	dd400c17 	ldw	r21,48(sp)
1000ba38:	dd000b17 	ldw	r20,44(sp)
1000ba3c:	dcc00a17 	ldw	r19,40(sp)
1000ba40:	dc800917 	ldw	r18,36(sp)
1000ba44:	dc400817 	ldw	r17,32(sp)
1000ba48:	dc000717 	ldw	r16,28(sp)
1000ba4c:	dec01104 	addi	sp,sp,68
1000ba50:	f800283a 	ret

1000ba54 <__pow5mult>:
1000ba54:	defffa04 	addi	sp,sp,-24
1000ba58:	dcc00315 	stw	r19,12(sp)
1000ba5c:	dc000015 	stw	r16,0(sp)
1000ba60:	dfc00515 	stw	ra,20(sp)
1000ba64:	dd000415 	stw	r20,16(sp)
1000ba68:	dc800215 	stw	r18,8(sp)
1000ba6c:	dc400115 	stw	r17,4(sp)
1000ba70:	308000cc 	andi	r2,r6,3
1000ba74:	3021883a 	mov	r16,r6
1000ba78:	2027883a 	mov	r19,r4
1000ba7c:	10002f1e 	bne	r2,zero,1000bb3c <__pow5mult+0xe8>
1000ba80:	2825883a 	mov	r18,r5
1000ba84:	8021d0ba 	srai	r16,r16,2
1000ba88:	80001a26 	beq	r16,zero,1000baf4 <__pow5mult+0xa0>
1000ba8c:	9c401217 	ldw	r17,72(r19)
1000ba90:	8800061e 	bne	r17,zero,1000baac <__pow5mult+0x58>
1000ba94:	00003406 	br	1000bb68 <__pow5mult+0x114>
1000ba98:	8021d07a 	srai	r16,r16,1
1000ba9c:	80001526 	beq	r16,zero,1000baf4 <__pow5mult+0xa0>
1000baa0:	88800017 	ldw	r2,0(r17)
1000baa4:	10001c26 	beq	r2,zero,1000bb18 <__pow5mult+0xc4>
1000baa8:	1023883a 	mov	r17,r2
1000baac:	8080004c 	andi	r2,r16,1
1000bab0:	103ff926 	beq	r2,zero,1000ba98 <__alt_data_end+0xf800ba98>
1000bab4:	880d883a 	mov	r6,r17
1000bab8:	900b883a 	mov	r5,r18
1000babc:	9809883a 	mov	r4,r19
1000bac0:	000b7c80 	call	1000b7c8 <__multiply>
1000bac4:	90001b26 	beq	r18,zero,1000bb34 <__pow5mult+0xe0>
1000bac8:	91000117 	ldw	r4,4(r18)
1000bacc:	98c01317 	ldw	r3,76(r19)
1000bad0:	8021d07a 	srai	r16,r16,1
1000bad4:	2109883a 	add	r4,r4,r4
1000bad8:	2109883a 	add	r4,r4,r4
1000badc:	1907883a 	add	r3,r3,r4
1000bae0:	19000017 	ldw	r4,0(r3)
1000bae4:	91000015 	stw	r4,0(r18)
1000bae8:	1c800015 	stw	r18,0(r3)
1000baec:	1025883a 	mov	r18,r2
1000baf0:	803feb1e 	bne	r16,zero,1000baa0 <__alt_data_end+0xf800baa0>
1000baf4:	9005883a 	mov	r2,r18
1000baf8:	dfc00517 	ldw	ra,20(sp)
1000bafc:	dd000417 	ldw	r20,16(sp)
1000bb00:	dcc00317 	ldw	r19,12(sp)
1000bb04:	dc800217 	ldw	r18,8(sp)
1000bb08:	dc400117 	ldw	r17,4(sp)
1000bb0c:	dc000017 	ldw	r16,0(sp)
1000bb10:	dec00604 	addi	sp,sp,24
1000bb14:	f800283a 	ret
1000bb18:	880d883a 	mov	r6,r17
1000bb1c:	880b883a 	mov	r5,r17
1000bb20:	9809883a 	mov	r4,r19
1000bb24:	000b7c80 	call	1000b7c8 <__multiply>
1000bb28:	88800015 	stw	r2,0(r17)
1000bb2c:	10000015 	stw	zero,0(r2)
1000bb30:	003fdd06 	br	1000baa8 <__alt_data_end+0xf800baa8>
1000bb34:	1025883a 	mov	r18,r2
1000bb38:	003fd706 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000bb3c:	10bfffc4 	addi	r2,r2,-1
1000bb40:	1085883a 	add	r2,r2,r2
1000bb44:	00c40074 	movhi	r3,4097
1000bb48:	18d1c604 	addi	r3,r3,18200
1000bb4c:	1085883a 	add	r2,r2,r2
1000bb50:	1885883a 	add	r2,r3,r2
1000bb54:	11800017 	ldw	r6,0(r2)
1000bb58:	000f883a 	mov	r7,zero
1000bb5c:	000b4280 	call	1000b428 <__multadd>
1000bb60:	1025883a 	mov	r18,r2
1000bb64:	003fc706 	br	1000ba84 <__alt_data_end+0xf800ba84>
1000bb68:	05000044 	movi	r20,1
1000bb6c:	a00b883a 	mov	r5,r20
1000bb70:	9809883a 	mov	r4,r19
1000bb74:	000b3580 	call	1000b358 <_Balloc>
1000bb78:	1023883a 	mov	r17,r2
1000bb7c:	00809c44 	movi	r2,625
1000bb80:	88800515 	stw	r2,20(r17)
1000bb84:	8d000415 	stw	r20,16(r17)
1000bb88:	9c401215 	stw	r17,72(r19)
1000bb8c:	88000015 	stw	zero,0(r17)
1000bb90:	003fc606 	br	1000baac <__alt_data_end+0xf800baac>

1000bb94 <__lshift>:
1000bb94:	defff904 	addi	sp,sp,-28
1000bb98:	dd400515 	stw	r21,20(sp)
1000bb9c:	dcc00315 	stw	r19,12(sp)
1000bba0:	302bd17a 	srai	r21,r6,5
1000bba4:	2cc00417 	ldw	r19,16(r5)
1000bba8:	28800217 	ldw	r2,8(r5)
1000bbac:	dd000415 	stw	r20,16(sp)
1000bbb0:	ace7883a 	add	r19,r21,r19
1000bbb4:	dc800215 	stw	r18,8(sp)
1000bbb8:	dc400115 	stw	r17,4(sp)
1000bbbc:	dc000015 	stw	r16,0(sp)
1000bbc0:	dfc00615 	stw	ra,24(sp)
1000bbc4:	9c000044 	addi	r16,r19,1
1000bbc8:	2823883a 	mov	r17,r5
1000bbcc:	3029883a 	mov	r20,r6
1000bbd0:	2025883a 	mov	r18,r4
1000bbd4:	29400117 	ldw	r5,4(r5)
1000bbd8:	1400030e 	bge	r2,r16,1000bbe8 <__lshift+0x54>
1000bbdc:	1085883a 	add	r2,r2,r2
1000bbe0:	29400044 	addi	r5,r5,1
1000bbe4:	143ffd16 	blt	r2,r16,1000bbdc <__alt_data_end+0xf800bbdc>
1000bbe8:	9009883a 	mov	r4,r18
1000bbec:	000b3580 	call	1000b358 <_Balloc>
1000bbf0:	10c00504 	addi	r3,r2,20
1000bbf4:	0540070e 	bge	zero,r21,1000bc14 <__lshift+0x80>
1000bbf8:	ad6b883a 	add	r21,r21,r21
1000bbfc:	ad6b883a 	add	r21,r21,r21
1000bc00:	1809883a 	mov	r4,r3
1000bc04:	1d47883a 	add	r3,r3,r21
1000bc08:	20000015 	stw	zero,0(r4)
1000bc0c:	21000104 	addi	r4,r4,4
1000bc10:	193ffd1e 	bne	r3,r4,1000bc08 <__alt_data_end+0xf800bc08>
1000bc14:	8a000417 	ldw	r8,16(r17)
1000bc18:	89000504 	addi	r4,r17,20
1000bc1c:	a18007cc 	andi	r6,r20,31
1000bc20:	4211883a 	add	r8,r8,r8
1000bc24:	4211883a 	add	r8,r8,r8
1000bc28:	2211883a 	add	r8,r4,r8
1000bc2c:	30002326 	beq	r6,zero,1000bcbc <__lshift+0x128>
1000bc30:	02400804 	movi	r9,32
1000bc34:	4993c83a 	sub	r9,r9,r6
1000bc38:	000b883a 	mov	r5,zero
1000bc3c:	21c00017 	ldw	r7,0(r4)
1000bc40:	1815883a 	mov	r10,r3
1000bc44:	18c00104 	addi	r3,r3,4
1000bc48:	398e983a 	sll	r7,r7,r6
1000bc4c:	21000104 	addi	r4,r4,4
1000bc50:	394ab03a 	or	r5,r7,r5
1000bc54:	197fff15 	stw	r5,-4(r3)
1000bc58:	217fff17 	ldw	r5,-4(r4)
1000bc5c:	2a4ad83a 	srl	r5,r5,r9
1000bc60:	223ff636 	bltu	r4,r8,1000bc3c <__alt_data_end+0xf800bc3c>
1000bc64:	51400115 	stw	r5,4(r10)
1000bc68:	28001a1e 	bne	r5,zero,1000bcd4 <__lshift+0x140>
1000bc6c:	843fffc4 	addi	r16,r16,-1
1000bc70:	14000415 	stw	r16,16(r2)
1000bc74:	88000826 	beq	r17,zero,1000bc98 <__lshift+0x104>
1000bc78:	89000117 	ldw	r4,4(r17)
1000bc7c:	90c01317 	ldw	r3,76(r18)
1000bc80:	2109883a 	add	r4,r4,r4
1000bc84:	2109883a 	add	r4,r4,r4
1000bc88:	1907883a 	add	r3,r3,r4
1000bc8c:	19000017 	ldw	r4,0(r3)
1000bc90:	89000015 	stw	r4,0(r17)
1000bc94:	1c400015 	stw	r17,0(r3)
1000bc98:	dfc00617 	ldw	ra,24(sp)
1000bc9c:	dd400517 	ldw	r21,20(sp)
1000bca0:	dd000417 	ldw	r20,16(sp)
1000bca4:	dcc00317 	ldw	r19,12(sp)
1000bca8:	dc800217 	ldw	r18,8(sp)
1000bcac:	dc400117 	ldw	r17,4(sp)
1000bcb0:	dc000017 	ldw	r16,0(sp)
1000bcb4:	dec00704 	addi	sp,sp,28
1000bcb8:	f800283a 	ret
1000bcbc:	21400017 	ldw	r5,0(r4)
1000bcc0:	18c00104 	addi	r3,r3,4
1000bcc4:	21000104 	addi	r4,r4,4
1000bcc8:	197fff15 	stw	r5,-4(r3)
1000bccc:	223ffb36 	bltu	r4,r8,1000bcbc <__alt_data_end+0xf800bcbc>
1000bcd0:	003fe606 	br	1000bc6c <__alt_data_end+0xf800bc6c>
1000bcd4:	9c000084 	addi	r16,r19,2
1000bcd8:	003fe406 	br	1000bc6c <__alt_data_end+0xf800bc6c>

1000bcdc <__mcmp>:
1000bcdc:	20800417 	ldw	r2,16(r4)
1000bce0:	28c00417 	ldw	r3,16(r5)
1000bce4:	10c5c83a 	sub	r2,r2,r3
1000bce8:	1000111e 	bne	r2,zero,1000bd30 <__mcmp+0x54>
1000bcec:	18c7883a 	add	r3,r3,r3
1000bcf0:	18c7883a 	add	r3,r3,r3
1000bcf4:	21000504 	addi	r4,r4,20
1000bcf8:	29400504 	addi	r5,r5,20
1000bcfc:	20c5883a 	add	r2,r4,r3
1000bd00:	28cb883a 	add	r5,r5,r3
1000bd04:	00000106 	br	1000bd0c <__mcmp+0x30>
1000bd08:	20800a2e 	bgeu	r4,r2,1000bd34 <__mcmp+0x58>
1000bd0c:	10bfff04 	addi	r2,r2,-4
1000bd10:	297fff04 	addi	r5,r5,-4
1000bd14:	11800017 	ldw	r6,0(r2)
1000bd18:	28c00017 	ldw	r3,0(r5)
1000bd1c:	30fffa26 	beq	r6,r3,1000bd08 <__alt_data_end+0xf800bd08>
1000bd20:	30c00236 	bltu	r6,r3,1000bd2c <__mcmp+0x50>
1000bd24:	00800044 	movi	r2,1
1000bd28:	f800283a 	ret
1000bd2c:	00bfffc4 	movi	r2,-1
1000bd30:	f800283a 	ret
1000bd34:	0005883a 	mov	r2,zero
1000bd38:	f800283a 	ret

1000bd3c <__mdiff>:
1000bd3c:	28c00417 	ldw	r3,16(r5)
1000bd40:	30800417 	ldw	r2,16(r6)
1000bd44:	defffa04 	addi	sp,sp,-24
1000bd48:	dcc00315 	stw	r19,12(sp)
1000bd4c:	dc800215 	stw	r18,8(sp)
1000bd50:	dfc00515 	stw	ra,20(sp)
1000bd54:	dd000415 	stw	r20,16(sp)
1000bd58:	dc400115 	stw	r17,4(sp)
1000bd5c:	dc000015 	stw	r16,0(sp)
1000bd60:	1887c83a 	sub	r3,r3,r2
1000bd64:	2825883a 	mov	r18,r5
1000bd68:	3027883a 	mov	r19,r6
1000bd6c:	1800141e 	bne	r3,zero,1000bdc0 <__mdiff+0x84>
1000bd70:	1085883a 	add	r2,r2,r2
1000bd74:	1085883a 	add	r2,r2,r2
1000bd78:	2a000504 	addi	r8,r5,20
1000bd7c:	34000504 	addi	r16,r6,20
1000bd80:	4087883a 	add	r3,r8,r2
1000bd84:	8085883a 	add	r2,r16,r2
1000bd88:	00000106 	br	1000bd90 <__mdiff+0x54>
1000bd8c:	40c0592e 	bgeu	r8,r3,1000bef4 <__mdiff+0x1b8>
1000bd90:	18ffff04 	addi	r3,r3,-4
1000bd94:	10bfff04 	addi	r2,r2,-4
1000bd98:	19c00017 	ldw	r7,0(r3)
1000bd9c:	11400017 	ldw	r5,0(r2)
1000bda0:	397ffa26 	beq	r7,r5,1000bd8c <__alt_data_end+0xf800bd8c>
1000bda4:	3940592e 	bgeu	r7,r5,1000bf0c <__mdiff+0x1d0>
1000bda8:	9005883a 	mov	r2,r18
1000bdac:	4023883a 	mov	r17,r8
1000bdb0:	9825883a 	mov	r18,r19
1000bdb4:	05000044 	movi	r20,1
1000bdb8:	1027883a 	mov	r19,r2
1000bdbc:	00000406 	br	1000bdd0 <__mdiff+0x94>
1000bdc0:	18005616 	blt	r3,zero,1000bf1c <__mdiff+0x1e0>
1000bdc4:	34400504 	addi	r17,r6,20
1000bdc8:	2c000504 	addi	r16,r5,20
1000bdcc:	0029883a 	mov	r20,zero
1000bdd0:	91400117 	ldw	r5,4(r18)
1000bdd4:	000b3580 	call	1000b358 <_Balloc>
1000bdd8:	92400417 	ldw	r9,16(r18)
1000bddc:	9b000417 	ldw	r12,16(r19)
1000bde0:	12c00504 	addi	r11,r2,20
1000bde4:	4a51883a 	add	r8,r9,r9
1000bde8:	6319883a 	add	r12,r12,r12
1000bdec:	4211883a 	add	r8,r8,r8
1000bdf0:	6319883a 	add	r12,r12,r12
1000bdf4:	15000315 	stw	r20,12(r2)
1000bdf8:	8211883a 	add	r8,r16,r8
1000bdfc:	8b19883a 	add	r12,r17,r12
1000be00:	0007883a 	mov	r3,zero
1000be04:	81400017 	ldw	r5,0(r16)
1000be08:	89c00017 	ldw	r7,0(r17)
1000be0c:	59800104 	addi	r6,r11,4
1000be10:	293fffcc 	andi	r4,r5,65535
1000be14:	20c7883a 	add	r3,r4,r3
1000be18:	393fffcc 	andi	r4,r7,65535
1000be1c:	1909c83a 	sub	r4,r3,r4
1000be20:	280ad43a 	srli	r5,r5,16
1000be24:	380ed43a 	srli	r7,r7,16
1000be28:	2007d43a 	srai	r3,r4,16
1000be2c:	213fffcc 	andi	r4,r4,65535
1000be30:	29cbc83a 	sub	r5,r5,r7
1000be34:	28c7883a 	add	r3,r5,r3
1000be38:	180a943a 	slli	r5,r3,16
1000be3c:	8c400104 	addi	r17,r17,4
1000be40:	84000104 	addi	r16,r16,4
1000be44:	2908b03a 	or	r4,r5,r4
1000be48:	59000015 	stw	r4,0(r11)
1000be4c:	1807d43a 	srai	r3,r3,16
1000be50:	3015883a 	mov	r10,r6
1000be54:	3017883a 	mov	r11,r6
1000be58:	8b3fea36 	bltu	r17,r12,1000be04 <__alt_data_end+0xf800be04>
1000be5c:	8200162e 	bgeu	r16,r8,1000beb8 <__mdiff+0x17c>
1000be60:	8017883a 	mov	r11,r16
1000be64:	59400017 	ldw	r5,0(r11)
1000be68:	31800104 	addi	r6,r6,4
1000be6c:	5ac00104 	addi	r11,r11,4
1000be70:	293fffcc 	andi	r4,r5,65535
1000be74:	20c7883a 	add	r3,r4,r3
1000be78:	280ed43a 	srli	r7,r5,16
1000be7c:	180bd43a 	srai	r5,r3,16
1000be80:	193fffcc 	andi	r4,r3,65535
1000be84:	3947883a 	add	r3,r7,r5
1000be88:	180a943a 	slli	r5,r3,16
1000be8c:	1807d43a 	srai	r3,r3,16
1000be90:	2908b03a 	or	r4,r5,r4
1000be94:	313fff15 	stw	r4,-4(r6)
1000be98:	5a3ff236 	bltu	r11,r8,1000be64 <__alt_data_end+0xf800be64>
1000be9c:	0406303a 	nor	r3,zero,r16
1000bea0:	1a07883a 	add	r3,r3,r8
1000bea4:	1806d0ba 	srli	r3,r3,2
1000bea8:	18c00044 	addi	r3,r3,1
1000beac:	18c7883a 	add	r3,r3,r3
1000beb0:	18c7883a 	add	r3,r3,r3
1000beb4:	50d5883a 	add	r10,r10,r3
1000beb8:	50ffff04 	addi	r3,r10,-4
1000bebc:	2000041e 	bne	r4,zero,1000bed0 <__mdiff+0x194>
1000bec0:	18ffff04 	addi	r3,r3,-4
1000bec4:	19000017 	ldw	r4,0(r3)
1000bec8:	4a7fffc4 	addi	r9,r9,-1
1000becc:	203ffc26 	beq	r4,zero,1000bec0 <__alt_data_end+0xf800bec0>
1000bed0:	12400415 	stw	r9,16(r2)
1000bed4:	dfc00517 	ldw	ra,20(sp)
1000bed8:	dd000417 	ldw	r20,16(sp)
1000bedc:	dcc00317 	ldw	r19,12(sp)
1000bee0:	dc800217 	ldw	r18,8(sp)
1000bee4:	dc400117 	ldw	r17,4(sp)
1000bee8:	dc000017 	ldw	r16,0(sp)
1000beec:	dec00604 	addi	sp,sp,24
1000bef0:	f800283a 	ret
1000bef4:	000b883a 	mov	r5,zero
1000bef8:	000b3580 	call	1000b358 <_Balloc>
1000befc:	00c00044 	movi	r3,1
1000bf00:	10c00415 	stw	r3,16(r2)
1000bf04:	10000515 	stw	zero,20(r2)
1000bf08:	003ff206 	br	1000bed4 <__alt_data_end+0xf800bed4>
1000bf0c:	8023883a 	mov	r17,r16
1000bf10:	0029883a 	mov	r20,zero
1000bf14:	4021883a 	mov	r16,r8
1000bf18:	003fad06 	br	1000bdd0 <__alt_data_end+0xf800bdd0>
1000bf1c:	9005883a 	mov	r2,r18
1000bf20:	94400504 	addi	r17,r18,20
1000bf24:	9c000504 	addi	r16,r19,20
1000bf28:	9825883a 	mov	r18,r19
1000bf2c:	05000044 	movi	r20,1
1000bf30:	1027883a 	mov	r19,r2
1000bf34:	003fa606 	br	1000bdd0 <__alt_data_end+0xf800bdd0>

1000bf38 <__ulp>:
1000bf38:	295ffc2c 	andhi	r5,r5,32752
1000bf3c:	00bf3034 	movhi	r2,64704
1000bf40:	2887883a 	add	r3,r5,r2
1000bf44:	00c0020e 	bge	zero,r3,1000bf50 <__ulp+0x18>
1000bf48:	0005883a 	mov	r2,zero
1000bf4c:	f800283a 	ret
1000bf50:	00c7c83a 	sub	r3,zero,r3
1000bf54:	1807d53a 	srai	r3,r3,20
1000bf58:	008004c4 	movi	r2,19
1000bf5c:	10c00b0e 	bge	r2,r3,1000bf8c <__ulp+0x54>
1000bf60:	18bffb04 	addi	r2,r3,-20
1000bf64:	01000784 	movi	r4,30
1000bf68:	0007883a 	mov	r3,zero
1000bf6c:	20800516 	blt	r4,r2,1000bf84 <__ulp+0x4c>
1000bf70:	010007c4 	movi	r4,31
1000bf74:	2089c83a 	sub	r4,r4,r2
1000bf78:	00800044 	movi	r2,1
1000bf7c:	1104983a 	sll	r2,r2,r4
1000bf80:	f800283a 	ret
1000bf84:	00800044 	movi	r2,1
1000bf88:	f800283a 	ret
1000bf8c:	01400234 	movhi	r5,8
1000bf90:	28c7d83a 	sra	r3,r5,r3
1000bf94:	0005883a 	mov	r2,zero
1000bf98:	f800283a 	ret

1000bf9c <__b2d>:
1000bf9c:	defffa04 	addi	sp,sp,-24
1000bfa0:	dc000015 	stw	r16,0(sp)
1000bfa4:	24000417 	ldw	r16,16(r4)
1000bfa8:	dc400115 	stw	r17,4(sp)
1000bfac:	24400504 	addi	r17,r4,20
1000bfb0:	8421883a 	add	r16,r16,r16
1000bfb4:	8421883a 	add	r16,r16,r16
1000bfb8:	8c21883a 	add	r16,r17,r16
1000bfbc:	dc800215 	stw	r18,8(sp)
1000bfc0:	84bfff17 	ldw	r18,-4(r16)
1000bfc4:	dd000415 	stw	r20,16(sp)
1000bfc8:	dcc00315 	stw	r19,12(sp)
1000bfcc:	9009883a 	mov	r4,r18
1000bfd0:	2829883a 	mov	r20,r5
1000bfd4:	dfc00515 	stw	ra,20(sp)
1000bfd8:	000b6740 	call	1000b674 <__hi0bits>
1000bfdc:	00c00804 	movi	r3,32
1000bfe0:	1889c83a 	sub	r4,r3,r2
1000bfe4:	a1000015 	stw	r4,0(r20)
1000bfe8:	01000284 	movi	r4,10
1000bfec:	84ffff04 	addi	r19,r16,-4
1000bff0:	20801216 	blt	r4,r2,1000c03c <__b2d+0xa0>
1000bff4:	018002c4 	movi	r6,11
1000bff8:	308dc83a 	sub	r6,r6,r2
1000bffc:	9186d83a 	srl	r3,r18,r6
1000c000:	18cffc34 	orhi	r3,r3,16368
1000c004:	8cc0212e 	bgeu	r17,r19,1000c08c <__b2d+0xf0>
1000c008:	813ffe17 	ldw	r4,-8(r16)
1000c00c:	218cd83a 	srl	r6,r4,r6
1000c010:	10800544 	addi	r2,r2,21
1000c014:	9084983a 	sll	r2,r18,r2
1000c018:	1184b03a 	or	r2,r2,r6
1000c01c:	dfc00517 	ldw	ra,20(sp)
1000c020:	dd000417 	ldw	r20,16(sp)
1000c024:	dcc00317 	ldw	r19,12(sp)
1000c028:	dc800217 	ldw	r18,8(sp)
1000c02c:	dc400117 	ldw	r17,4(sp)
1000c030:	dc000017 	ldw	r16,0(sp)
1000c034:	dec00604 	addi	sp,sp,24
1000c038:	f800283a 	ret
1000c03c:	8cc00f2e 	bgeu	r17,r19,1000c07c <__b2d+0xe0>
1000c040:	117ffd44 	addi	r5,r2,-11
1000c044:	80bffe17 	ldw	r2,-8(r16)
1000c048:	28000e26 	beq	r5,zero,1000c084 <__b2d+0xe8>
1000c04c:	1949c83a 	sub	r4,r3,r5
1000c050:	9164983a 	sll	r18,r18,r5
1000c054:	1106d83a 	srl	r3,r2,r4
1000c058:	81bffe04 	addi	r6,r16,-8
1000c05c:	948ffc34 	orhi	r18,r18,16368
1000c060:	90c6b03a 	or	r3,r18,r3
1000c064:	89800e2e 	bgeu	r17,r6,1000c0a0 <__b2d+0x104>
1000c068:	81bffd17 	ldw	r6,-12(r16)
1000c06c:	1144983a 	sll	r2,r2,r5
1000c070:	310ad83a 	srl	r5,r6,r4
1000c074:	2884b03a 	or	r2,r5,r2
1000c078:	003fe806 	br	1000c01c <__alt_data_end+0xf800c01c>
1000c07c:	10bffd44 	addi	r2,r2,-11
1000c080:	1000041e 	bne	r2,zero,1000c094 <__b2d+0xf8>
1000c084:	90cffc34 	orhi	r3,r18,16368
1000c088:	003fe406 	br	1000c01c <__alt_data_end+0xf800c01c>
1000c08c:	000d883a 	mov	r6,zero
1000c090:	003fdf06 	br	1000c010 <__alt_data_end+0xf800c010>
1000c094:	90a4983a 	sll	r18,r18,r2
1000c098:	0005883a 	mov	r2,zero
1000c09c:	003ff906 	br	1000c084 <__alt_data_end+0xf800c084>
1000c0a0:	1144983a 	sll	r2,r2,r5
1000c0a4:	003fdd06 	br	1000c01c <__alt_data_end+0xf800c01c>

1000c0a8 <__d2b>:
1000c0a8:	defff804 	addi	sp,sp,-32
1000c0ac:	dc000215 	stw	r16,8(sp)
1000c0b0:	3021883a 	mov	r16,r6
1000c0b4:	dc400315 	stw	r17,12(sp)
1000c0b8:	8022907a 	slli	r17,r16,1
1000c0bc:	dd000615 	stw	r20,24(sp)
1000c0c0:	2829883a 	mov	r20,r5
1000c0c4:	01400044 	movi	r5,1
1000c0c8:	dcc00515 	stw	r19,20(sp)
1000c0cc:	dc800415 	stw	r18,16(sp)
1000c0d0:	dfc00715 	stw	ra,28(sp)
1000c0d4:	3825883a 	mov	r18,r7
1000c0d8:	8822d57a 	srli	r17,r17,21
1000c0dc:	000b3580 	call	1000b358 <_Balloc>
1000c0e0:	1027883a 	mov	r19,r2
1000c0e4:	00800434 	movhi	r2,16
1000c0e8:	10bfffc4 	addi	r2,r2,-1
1000c0ec:	808c703a 	and	r6,r16,r2
1000c0f0:	88000126 	beq	r17,zero,1000c0f8 <__d2b+0x50>
1000c0f4:	31800434 	orhi	r6,r6,16
1000c0f8:	d9800015 	stw	r6,0(sp)
1000c0fc:	a0002426 	beq	r20,zero,1000c190 <__d2b+0xe8>
1000c100:	d9000104 	addi	r4,sp,4
1000c104:	dd000115 	stw	r20,4(sp)
1000c108:	000b6dc0 	call	1000b6dc <__lo0bits>
1000c10c:	d8c00017 	ldw	r3,0(sp)
1000c110:	10002f1e 	bne	r2,zero,1000c1d0 <__d2b+0x128>
1000c114:	d9000117 	ldw	r4,4(sp)
1000c118:	99000515 	stw	r4,20(r19)
1000c11c:	1821003a 	cmpeq	r16,r3,zero
1000c120:	01000084 	movi	r4,2
1000c124:	2421c83a 	sub	r16,r4,r16
1000c128:	98c00615 	stw	r3,24(r19)
1000c12c:	9c000415 	stw	r16,16(r19)
1000c130:	88001f1e 	bne	r17,zero,1000c1b0 <__d2b+0x108>
1000c134:	10bef384 	addi	r2,r2,-1074
1000c138:	90800015 	stw	r2,0(r18)
1000c13c:	00900034 	movhi	r2,16384
1000c140:	10bfffc4 	addi	r2,r2,-1
1000c144:	8085883a 	add	r2,r16,r2
1000c148:	1085883a 	add	r2,r2,r2
1000c14c:	1085883a 	add	r2,r2,r2
1000c150:	9885883a 	add	r2,r19,r2
1000c154:	11000517 	ldw	r4,20(r2)
1000c158:	8020917a 	slli	r16,r16,5
1000c15c:	000b6740 	call	1000b674 <__hi0bits>
1000c160:	d8c00817 	ldw	r3,32(sp)
1000c164:	8085c83a 	sub	r2,r16,r2
1000c168:	18800015 	stw	r2,0(r3)
1000c16c:	9805883a 	mov	r2,r19
1000c170:	dfc00717 	ldw	ra,28(sp)
1000c174:	dd000617 	ldw	r20,24(sp)
1000c178:	dcc00517 	ldw	r19,20(sp)
1000c17c:	dc800417 	ldw	r18,16(sp)
1000c180:	dc400317 	ldw	r17,12(sp)
1000c184:	dc000217 	ldw	r16,8(sp)
1000c188:	dec00804 	addi	sp,sp,32
1000c18c:	f800283a 	ret
1000c190:	d809883a 	mov	r4,sp
1000c194:	000b6dc0 	call	1000b6dc <__lo0bits>
1000c198:	d8c00017 	ldw	r3,0(sp)
1000c19c:	04000044 	movi	r16,1
1000c1a0:	9c000415 	stw	r16,16(r19)
1000c1a4:	98c00515 	stw	r3,20(r19)
1000c1a8:	10800804 	addi	r2,r2,32
1000c1ac:	883fe126 	beq	r17,zero,1000c134 <__alt_data_end+0xf800c134>
1000c1b0:	00c00d44 	movi	r3,53
1000c1b4:	8c7ef344 	addi	r17,r17,-1075
1000c1b8:	88a3883a 	add	r17,r17,r2
1000c1bc:	1885c83a 	sub	r2,r3,r2
1000c1c0:	d8c00817 	ldw	r3,32(sp)
1000c1c4:	94400015 	stw	r17,0(r18)
1000c1c8:	18800015 	stw	r2,0(r3)
1000c1cc:	003fe706 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c1d0:	01000804 	movi	r4,32
1000c1d4:	2089c83a 	sub	r4,r4,r2
1000c1d8:	1908983a 	sll	r4,r3,r4
1000c1dc:	d9400117 	ldw	r5,4(sp)
1000c1e0:	1886d83a 	srl	r3,r3,r2
1000c1e4:	2148b03a 	or	r4,r4,r5
1000c1e8:	99000515 	stw	r4,20(r19)
1000c1ec:	d8c00015 	stw	r3,0(sp)
1000c1f0:	003fca06 	br	1000c11c <__alt_data_end+0xf800c11c>

1000c1f4 <__ratio>:
1000c1f4:	defff904 	addi	sp,sp,-28
1000c1f8:	dc400315 	stw	r17,12(sp)
1000c1fc:	2823883a 	mov	r17,r5
1000c200:	d9400104 	addi	r5,sp,4
1000c204:	dfc00615 	stw	ra,24(sp)
1000c208:	dcc00515 	stw	r19,20(sp)
1000c20c:	dc800415 	stw	r18,16(sp)
1000c210:	2027883a 	mov	r19,r4
1000c214:	dc000215 	stw	r16,8(sp)
1000c218:	000bf9c0 	call	1000bf9c <__b2d>
1000c21c:	d80b883a 	mov	r5,sp
1000c220:	8809883a 	mov	r4,r17
1000c224:	1025883a 	mov	r18,r2
1000c228:	1821883a 	mov	r16,r3
1000c22c:	000bf9c0 	call	1000bf9c <__b2d>
1000c230:	8a000417 	ldw	r8,16(r17)
1000c234:	99000417 	ldw	r4,16(r19)
1000c238:	d9400117 	ldw	r5,4(sp)
1000c23c:	2209c83a 	sub	r4,r4,r8
1000c240:	2010917a 	slli	r8,r4,5
1000c244:	d9000017 	ldw	r4,0(sp)
1000c248:	2909c83a 	sub	r4,r5,r4
1000c24c:	4109883a 	add	r4,r8,r4
1000c250:	01000e0e 	bge	zero,r4,1000c28c <__ratio+0x98>
1000c254:	2008953a 	slli	r4,r4,20
1000c258:	2421883a 	add	r16,r4,r16
1000c25c:	100d883a 	mov	r6,r2
1000c260:	180f883a 	mov	r7,r3
1000c264:	9009883a 	mov	r4,r18
1000c268:	800b883a 	mov	r5,r16
1000c26c:	00045f40 	call	100045f4 <__divdf3>
1000c270:	dfc00617 	ldw	ra,24(sp)
1000c274:	dcc00517 	ldw	r19,20(sp)
1000c278:	dc800417 	ldw	r18,16(sp)
1000c27c:	dc400317 	ldw	r17,12(sp)
1000c280:	dc000217 	ldw	r16,8(sp)
1000c284:	dec00704 	addi	sp,sp,28
1000c288:	f800283a 	ret
1000c28c:	2008953a 	slli	r4,r4,20
1000c290:	1907c83a 	sub	r3,r3,r4
1000c294:	003ff106 	br	1000c25c <__alt_data_end+0xf800c25c>

1000c298 <_mprec_log10>:
1000c298:	defffe04 	addi	sp,sp,-8
1000c29c:	dc000015 	stw	r16,0(sp)
1000c2a0:	dfc00115 	stw	ra,4(sp)
1000c2a4:	008005c4 	movi	r2,23
1000c2a8:	2021883a 	mov	r16,r4
1000c2ac:	11000d0e 	bge	r2,r4,1000c2e4 <_mprec_log10+0x4c>
1000c2b0:	0005883a 	mov	r2,zero
1000c2b4:	00cffc34 	movhi	r3,16368
1000c2b8:	843fffc4 	addi	r16,r16,-1
1000c2bc:	000d883a 	mov	r6,zero
1000c2c0:	01d00934 	movhi	r7,16420
1000c2c4:	1009883a 	mov	r4,r2
1000c2c8:	180b883a 	mov	r5,r3
1000c2cc:	00103740 	call	10010374 <__muldf3>
1000c2d0:	803ff91e 	bne	r16,zero,1000c2b8 <__alt_data_end+0xf800c2b8>
1000c2d4:	dfc00117 	ldw	ra,4(sp)
1000c2d8:	dc000017 	ldw	r16,0(sp)
1000c2dc:	dec00204 	addi	sp,sp,8
1000c2e0:	f800283a 	ret
1000c2e4:	202090fa 	slli	r16,r4,3
1000c2e8:	00840074 	movhi	r2,4097
1000c2ec:	1091dd04 	addi	r2,r2,18292
1000c2f0:	1421883a 	add	r16,r2,r16
1000c2f4:	80800017 	ldw	r2,0(r16)
1000c2f8:	80c00117 	ldw	r3,4(r16)
1000c2fc:	dfc00117 	ldw	ra,4(sp)
1000c300:	dc000017 	ldw	r16,0(sp)
1000c304:	dec00204 	addi	sp,sp,8
1000c308:	f800283a 	ret

1000c30c <__copybits>:
1000c30c:	297fffc4 	addi	r5,r5,-1
1000c310:	280fd17a 	srai	r7,r5,5
1000c314:	30c00417 	ldw	r3,16(r6)
1000c318:	30800504 	addi	r2,r6,20
1000c31c:	39c00044 	addi	r7,r7,1
1000c320:	18c7883a 	add	r3,r3,r3
1000c324:	39cf883a 	add	r7,r7,r7
1000c328:	18c7883a 	add	r3,r3,r3
1000c32c:	39cf883a 	add	r7,r7,r7
1000c330:	10c7883a 	add	r3,r2,r3
1000c334:	21cf883a 	add	r7,r4,r7
1000c338:	10c00d2e 	bgeu	r2,r3,1000c370 <__copybits+0x64>
1000c33c:	200b883a 	mov	r5,r4
1000c340:	12000017 	ldw	r8,0(r2)
1000c344:	29400104 	addi	r5,r5,4
1000c348:	10800104 	addi	r2,r2,4
1000c34c:	2a3fff15 	stw	r8,-4(r5)
1000c350:	10fffb36 	bltu	r2,r3,1000c340 <__alt_data_end+0xf800c340>
1000c354:	1985c83a 	sub	r2,r3,r6
1000c358:	10bffac4 	addi	r2,r2,-21
1000c35c:	1004d0ba 	srli	r2,r2,2
1000c360:	10800044 	addi	r2,r2,1
1000c364:	1085883a 	add	r2,r2,r2
1000c368:	1085883a 	add	r2,r2,r2
1000c36c:	2089883a 	add	r4,r4,r2
1000c370:	21c0032e 	bgeu	r4,r7,1000c380 <__copybits+0x74>
1000c374:	20000015 	stw	zero,0(r4)
1000c378:	21000104 	addi	r4,r4,4
1000c37c:	21fffd36 	bltu	r4,r7,1000c374 <__alt_data_end+0xf800c374>
1000c380:	f800283a 	ret

1000c384 <__any_on>:
1000c384:	20c00417 	ldw	r3,16(r4)
1000c388:	2805d17a 	srai	r2,r5,5
1000c38c:	21000504 	addi	r4,r4,20
1000c390:	18800d0e 	bge	r3,r2,1000c3c8 <__any_on+0x44>
1000c394:	18c7883a 	add	r3,r3,r3
1000c398:	18c7883a 	add	r3,r3,r3
1000c39c:	20c7883a 	add	r3,r4,r3
1000c3a0:	20c0192e 	bgeu	r4,r3,1000c408 <__any_on+0x84>
1000c3a4:	18bfff17 	ldw	r2,-4(r3)
1000c3a8:	18ffff04 	addi	r3,r3,-4
1000c3ac:	1000041e 	bne	r2,zero,1000c3c0 <__any_on+0x3c>
1000c3b0:	20c0142e 	bgeu	r4,r3,1000c404 <__any_on+0x80>
1000c3b4:	18ffff04 	addi	r3,r3,-4
1000c3b8:	19400017 	ldw	r5,0(r3)
1000c3bc:	283ffc26 	beq	r5,zero,1000c3b0 <__alt_data_end+0xf800c3b0>
1000c3c0:	00800044 	movi	r2,1
1000c3c4:	f800283a 	ret
1000c3c8:	10c00a0e 	bge	r2,r3,1000c3f4 <__any_on+0x70>
1000c3cc:	1085883a 	add	r2,r2,r2
1000c3d0:	1085883a 	add	r2,r2,r2
1000c3d4:	294007cc 	andi	r5,r5,31
1000c3d8:	2087883a 	add	r3,r4,r2
1000c3dc:	283ff026 	beq	r5,zero,1000c3a0 <__alt_data_end+0xf800c3a0>
1000c3e0:	19800017 	ldw	r6,0(r3)
1000c3e4:	3144d83a 	srl	r2,r6,r5
1000c3e8:	114a983a 	sll	r5,r2,r5
1000c3ec:	317ff41e 	bne	r6,r5,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c3f0:	003feb06 	br	1000c3a0 <__alt_data_end+0xf800c3a0>
1000c3f4:	1085883a 	add	r2,r2,r2
1000c3f8:	1085883a 	add	r2,r2,r2
1000c3fc:	2087883a 	add	r3,r4,r2
1000c400:	003fe706 	br	1000c3a0 <__alt_data_end+0xf800c3a0>
1000c404:	f800283a 	ret
1000c408:	0005883a 	mov	r2,zero
1000c40c:	f800283a 	ret

1000c410 <_realloc_r>:
1000c410:	defff604 	addi	sp,sp,-40
1000c414:	dc800215 	stw	r18,8(sp)
1000c418:	dfc00915 	stw	ra,36(sp)
1000c41c:	df000815 	stw	fp,32(sp)
1000c420:	ddc00715 	stw	r23,28(sp)
1000c424:	dd800615 	stw	r22,24(sp)
1000c428:	dd400515 	stw	r21,20(sp)
1000c42c:	dd000415 	stw	r20,16(sp)
1000c430:	dcc00315 	stw	r19,12(sp)
1000c434:	dc400115 	stw	r17,4(sp)
1000c438:	dc000015 	stw	r16,0(sp)
1000c43c:	3025883a 	mov	r18,r6
1000c440:	2800b726 	beq	r5,zero,1000c720 <_realloc_r+0x310>
1000c444:	282b883a 	mov	r21,r5
1000c448:	2029883a 	mov	r20,r4
1000c44c:	0011af80 	call	10011af8 <__malloc_lock>
1000c450:	a8bfff17 	ldw	r2,-4(r21)
1000c454:	043fff04 	movi	r16,-4
1000c458:	90c002c4 	addi	r3,r18,11
1000c45c:	01000584 	movi	r4,22
1000c460:	acfffe04 	addi	r19,r21,-8
1000c464:	1420703a 	and	r16,r2,r16
1000c468:	20c0332e 	bgeu	r4,r3,1000c538 <_realloc_r+0x128>
1000c46c:	047ffe04 	movi	r17,-8
1000c470:	1c62703a 	and	r17,r3,r17
1000c474:	8807883a 	mov	r3,r17
1000c478:	88005816 	blt	r17,zero,1000c5dc <_realloc_r+0x1cc>
1000c47c:	8c805736 	bltu	r17,r18,1000c5dc <_realloc_r+0x1cc>
1000c480:	80c0300e 	bge	r16,r3,1000c544 <_realloc_r+0x134>
1000c484:	07040074 	movhi	fp,4097
1000c488:	e7134b04 	addi	fp,fp,19756
1000c48c:	e1c00217 	ldw	r7,8(fp)
1000c490:	9c09883a 	add	r4,r19,r16
1000c494:	22000117 	ldw	r8,4(r4)
1000c498:	21c06326 	beq	r4,r7,1000c628 <_realloc_r+0x218>
1000c49c:	017fff84 	movi	r5,-2
1000c4a0:	414a703a 	and	r5,r8,r5
1000c4a4:	214b883a 	add	r5,r4,r5
1000c4a8:	29800117 	ldw	r6,4(r5)
1000c4ac:	3180004c 	andi	r6,r6,1
1000c4b0:	30003f26 	beq	r6,zero,1000c5b0 <_realloc_r+0x1a0>
1000c4b4:	1080004c 	andi	r2,r2,1
1000c4b8:	10008326 	beq	r2,zero,1000c6c8 <_realloc_r+0x2b8>
1000c4bc:	900b883a 	mov	r5,r18
1000c4c0:	a009883a 	mov	r4,r20
1000c4c4:	000a69c0 	call	1000a69c <_malloc_r>
1000c4c8:	1025883a 	mov	r18,r2
1000c4cc:	10011e26 	beq	r2,zero,1000c948 <_realloc_r+0x538>
1000c4d0:	a93fff17 	ldw	r4,-4(r21)
1000c4d4:	10fffe04 	addi	r3,r2,-8
1000c4d8:	00bfff84 	movi	r2,-2
1000c4dc:	2084703a 	and	r2,r4,r2
1000c4e0:	9885883a 	add	r2,r19,r2
1000c4e4:	1880ee26 	beq	r3,r2,1000c8a0 <_realloc_r+0x490>
1000c4e8:	81bfff04 	addi	r6,r16,-4
1000c4ec:	00800904 	movi	r2,36
1000c4f0:	1180b836 	bltu	r2,r6,1000c7d4 <_realloc_r+0x3c4>
1000c4f4:	00c004c4 	movi	r3,19
1000c4f8:	19809636 	bltu	r3,r6,1000c754 <_realloc_r+0x344>
1000c4fc:	9005883a 	mov	r2,r18
1000c500:	a807883a 	mov	r3,r21
1000c504:	19000017 	ldw	r4,0(r3)
1000c508:	11000015 	stw	r4,0(r2)
1000c50c:	19000117 	ldw	r4,4(r3)
1000c510:	11000115 	stw	r4,4(r2)
1000c514:	18c00217 	ldw	r3,8(r3)
1000c518:	10c00215 	stw	r3,8(r2)
1000c51c:	a80b883a 	mov	r5,r21
1000c520:	a009883a 	mov	r4,r20
1000c524:	0009aa40 	call	10009aa4 <_free_r>
1000c528:	a009883a 	mov	r4,r20
1000c52c:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000c530:	9005883a 	mov	r2,r18
1000c534:	00001206 	br	1000c580 <_realloc_r+0x170>
1000c538:	00c00404 	movi	r3,16
1000c53c:	1823883a 	mov	r17,r3
1000c540:	003fce06 	br	1000c47c <__alt_data_end+0xf800c47c>
1000c544:	a825883a 	mov	r18,r21
1000c548:	8445c83a 	sub	r2,r16,r17
1000c54c:	00c003c4 	movi	r3,15
1000c550:	18802636 	bltu	r3,r2,1000c5ec <_realloc_r+0x1dc>
1000c554:	99800117 	ldw	r6,4(r19)
1000c558:	9c07883a 	add	r3,r19,r16
1000c55c:	3180004c 	andi	r6,r6,1
1000c560:	3420b03a 	or	r16,r6,r16
1000c564:	9c000115 	stw	r16,4(r19)
1000c568:	18800117 	ldw	r2,4(r3)
1000c56c:	10800054 	ori	r2,r2,1
1000c570:	18800115 	stw	r2,4(r3)
1000c574:	a009883a 	mov	r4,r20
1000c578:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000c57c:	9005883a 	mov	r2,r18
1000c580:	dfc00917 	ldw	ra,36(sp)
1000c584:	df000817 	ldw	fp,32(sp)
1000c588:	ddc00717 	ldw	r23,28(sp)
1000c58c:	dd800617 	ldw	r22,24(sp)
1000c590:	dd400517 	ldw	r21,20(sp)
1000c594:	dd000417 	ldw	r20,16(sp)
1000c598:	dcc00317 	ldw	r19,12(sp)
1000c59c:	dc800217 	ldw	r18,8(sp)
1000c5a0:	dc400117 	ldw	r17,4(sp)
1000c5a4:	dc000017 	ldw	r16,0(sp)
1000c5a8:	dec00a04 	addi	sp,sp,40
1000c5ac:	f800283a 	ret
1000c5b0:	017fff04 	movi	r5,-4
1000c5b4:	414a703a 	and	r5,r8,r5
1000c5b8:	814d883a 	add	r6,r16,r5
1000c5bc:	30c01f16 	blt	r6,r3,1000c63c <_realloc_r+0x22c>
1000c5c0:	20800317 	ldw	r2,12(r4)
1000c5c4:	20c00217 	ldw	r3,8(r4)
1000c5c8:	a825883a 	mov	r18,r21
1000c5cc:	3021883a 	mov	r16,r6
1000c5d0:	18800315 	stw	r2,12(r3)
1000c5d4:	10c00215 	stw	r3,8(r2)
1000c5d8:	003fdb06 	br	1000c548 <__alt_data_end+0xf800c548>
1000c5dc:	00800304 	movi	r2,12
1000c5e0:	a0800015 	stw	r2,0(r20)
1000c5e4:	0005883a 	mov	r2,zero
1000c5e8:	003fe506 	br	1000c580 <__alt_data_end+0xf800c580>
1000c5ec:	98c00117 	ldw	r3,4(r19)
1000c5f0:	9c4b883a 	add	r5,r19,r17
1000c5f4:	11000054 	ori	r4,r2,1
1000c5f8:	18c0004c 	andi	r3,r3,1
1000c5fc:	1c62b03a 	or	r17,r3,r17
1000c600:	9c400115 	stw	r17,4(r19)
1000c604:	29000115 	stw	r4,4(r5)
1000c608:	2885883a 	add	r2,r5,r2
1000c60c:	10c00117 	ldw	r3,4(r2)
1000c610:	29400204 	addi	r5,r5,8
1000c614:	a009883a 	mov	r4,r20
1000c618:	18c00054 	ori	r3,r3,1
1000c61c:	10c00115 	stw	r3,4(r2)
1000c620:	0009aa40 	call	10009aa4 <_free_r>
1000c624:	003fd306 	br	1000c574 <__alt_data_end+0xf800c574>
1000c628:	017fff04 	movi	r5,-4
1000c62c:	414a703a 	and	r5,r8,r5
1000c630:	89800404 	addi	r6,r17,16
1000c634:	8151883a 	add	r8,r16,r5
1000c638:	4180590e 	bge	r8,r6,1000c7a0 <_realloc_r+0x390>
1000c63c:	1080004c 	andi	r2,r2,1
1000c640:	103f9e1e 	bne	r2,zero,1000c4bc <__alt_data_end+0xf800c4bc>
1000c644:	adbffe17 	ldw	r22,-8(r21)
1000c648:	00bfff04 	movi	r2,-4
1000c64c:	9dadc83a 	sub	r22,r19,r22
1000c650:	b1800117 	ldw	r6,4(r22)
1000c654:	3084703a 	and	r2,r6,r2
1000c658:	20002026 	beq	r4,zero,1000c6dc <_realloc_r+0x2cc>
1000c65c:	80af883a 	add	r23,r16,r2
1000c660:	b96f883a 	add	r23,r23,r5
1000c664:	21c05f26 	beq	r4,r7,1000c7e4 <_realloc_r+0x3d4>
1000c668:	b8c01c16 	blt	r23,r3,1000c6dc <_realloc_r+0x2cc>
1000c66c:	20800317 	ldw	r2,12(r4)
1000c670:	20c00217 	ldw	r3,8(r4)
1000c674:	81bfff04 	addi	r6,r16,-4
1000c678:	01000904 	movi	r4,36
1000c67c:	18800315 	stw	r2,12(r3)
1000c680:	10c00215 	stw	r3,8(r2)
1000c684:	b0c00217 	ldw	r3,8(r22)
1000c688:	b0800317 	ldw	r2,12(r22)
1000c68c:	b4800204 	addi	r18,r22,8
1000c690:	18800315 	stw	r2,12(r3)
1000c694:	10c00215 	stw	r3,8(r2)
1000c698:	21801b36 	bltu	r4,r6,1000c708 <_realloc_r+0x2f8>
1000c69c:	008004c4 	movi	r2,19
1000c6a0:	1180352e 	bgeu	r2,r6,1000c778 <_realloc_r+0x368>
1000c6a4:	a8800017 	ldw	r2,0(r21)
1000c6a8:	b0800215 	stw	r2,8(r22)
1000c6ac:	a8800117 	ldw	r2,4(r21)
1000c6b0:	b0800315 	stw	r2,12(r22)
1000c6b4:	008006c4 	movi	r2,27
1000c6b8:	11807f36 	bltu	r2,r6,1000c8b8 <_realloc_r+0x4a8>
1000c6bc:	b0800404 	addi	r2,r22,16
1000c6c0:	ad400204 	addi	r21,r21,8
1000c6c4:	00002d06 	br	1000c77c <_realloc_r+0x36c>
1000c6c8:	adbffe17 	ldw	r22,-8(r21)
1000c6cc:	00bfff04 	movi	r2,-4
1000c6d0:	9dadc83a 	sub	r22,r19,r22
1000c6d4:	b1000117 	ldw	r4,4(r22)
1000c6d8:	2084703a 	and	r2,r4,r2
1000c6dc:	b03f7726 	beq	r22,zero,1000c4bc <__alt_data_end+0xf800c4bc>
1000c6e0:	80af883a 	add	r23,r16,r2
1000c6e4:	b8ff7516 	blt	r23,r3,1000c4bc <__alt_data_end+0xf800c4bc>
1000c6e8:	b0800317 	ldw	r2,12(r22)
1000c6ec:	b0c00217 	ldw	r3,8(r22)
1000c6f0:	81bfff04 	addi	r6,r16,-4
1000c6f4:	01000904 	movi	r4,36
1000c6f8:	18800315 	stw	r2,12(r3)
1000c6fc:	10c00215 	stw	r3,8(r2)
1000c700:	b4800204 	addi	r18,r22,8
1000c704:	21bfe52e 	bgeu	r4,r6,1000c69c <__alt_data_end+0xf800c69c>
1000c708:	a80b883a 	mov	r5,r21
1000c70c:	9009883a 	mov	r4,r18
1000c710:	000b0d40 	call	1000b0d4 <memmove>
1000c714:	b821883a 	mov	r16,r23
1000c718:	b027883a 	mov	r19,r22
1000c71c:	003f8a06 	br	1000c548 <__alt_data_end+0xf800c548>
1000c720:	300b883a 	mov	r5,r6
1000c724:	dfc00917 	ldw	ra,36(sp)
1000c728:	df000817 	ldw	fp,32(sp)
1000c72c:	ddc00717 	ldw	r23,28(sp)
1000c730:	dd800617 	ldw	r22,24(sp)
1000c734:	dd400517 	ldw	r21,20(sp)
1000c738:	dd000417 	ldw	r20,16(sp)
1000c73c:	dcc00317 	ldw	r19,12(sp)
1000c740:	dc800217 	ldw	r18,8(sp)
1000c744:	dc400117 	ldw	r17,4(sp)
1000c748:	dc000017 	ldw	r16,0(sp)
1000c74c:	dec00a04 	addi	sp,sp,40
1000c750:	000a69c1 	jmpi	1000a69c <_malloc_r>
1000c754:	a8c00017 	ldw	r3,0(r21)
1000c758:	90c00015 	stw	r3,0(r18)
1000c75c:	a8c00117 	ldw	r3,4(r21)
1000c760:	90c00115 	stw	r3,4(r18)
1000c764:	00c006c4 	movi	r3,27
1000c768:	19804536 	bltu	r3,r6,1000c880 <_realloc_r+0x470>
1000c76c:	90800204 	addi	r2,r18,8
1000c770:	a8c00204 	addi	r3,r21,8
1000c774:	003f6306 	br	1000c504 <__alt_data_end+0xf800c504>
1000c778:	9005883a 	mov	r2,r18
1000c77c:	a8c00017 	ldw	r3,0(r21)
1000c780:	b821883a 	mov	r16,r23
1000c784:	b027883a 	mov	r19,r22
1000c788:	10c00015 	stw	r3,0(r2)
1000c78c:	a8c00117 	ldw	r3,4(r21)
1000c790:	10c00115 	stw	r3,4(r2)
1000c794:	a8c00217 	ldw	r3,8(r21)
1000c798:	10c00215 	stw	r3,8(r2)
1000c79c:	003f6a06 	br	1000c548 <__alt_data_end+0xf800c548>
1000c7a0:	9c67883a 	add	r19,r19,r17
1000c7a4:	4445c83a 	sub	r2,r8,r17
1000c7a8:	e4c00215 	stw	r19,8(fp)
1000c7ac:	10800054 	ori	r2,r2,1
1000c7b0:	98800115 	stw	r2,4(r19)
1000c7b4:	a8bfff17 	ldw	r2,-4(r21)
1000c7b8:	a009883a 	mov	r4,r20
1000c7bc:	1080004c 	andi	r2,r2,1
1000c7c0:	1462b03a 	or	r17,r2,r17
1000c7c4:	ac7fff15 	stw	r17,-4(r21)
1000c7c8:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000c7cc:	a805883a 	mov	r2,r21
1000c7d0:	003f6b06 	br	1000c580 <__alt_data_end+0xf800c580>
1000c7d4:	a80b883a 	mov	r5,r21
1000c7d8:	9009883a 	mov	r4,r18
1000c7dc:	000b0d40 	call	1000b0d4 <memmove>
1000c7e0:	003f4e06 	br	1000c51c <__alt_data_end+0xf800c51c>
1000c7e4:	89000404 	addi	r4,r17,16
1000c7e8:	b93fbc16 	blt	r23,r4,1000c6dc <__alt_data_end+0xf800c6dc>
1000c7ec:	b0800317 	ldw	r2,12(r22)
1000c7f0:	b0c00217 	ldw	r3,8(r22)
1000c7f4:	81bfff04 	addi	r6,r16,-4
1000c7f8:	01000904 	movi	r4,36
1000c7fc:	18800315 	stw	r2,12(r3)
1000c800:	10c00215 	stw	r3,8(r2)
1000c804:	b4800204 	addi	r18,r22,8
1000c808:	21804336 	bltu	r4,r6,1000c918 <_realloc_r+0x508>
1000c80c:	008004c4 	movi	r2,19
1000c810:	11803f2e 	bgeu	r2,r6,1000c910 <_realloc_r+0x500>
1000c814:	a8800017 	ldw	r2,0(r21)
1000c818:	b0800215 	stw	r2,8(r22)
1000c81c:	a8800117 	ldw	r2,4(r21)
1000c820:	b0800315 	stw	r2,12(r22)
1000c824:	008006c4 	movi	r2,27
1000c828:	11803f36 	bltu	r2,r6,1000c928 <_realloc_r+0x518>
1000c82c:	b0800404 	addi	r2,r22,16
1000c830:	ad400204 	addi	r21,r21,8
1000c834:	a8c00017 	ldw	r3,0(r21)
1000c838:	10c00015 	stw	r3,0(r2)
1000c83c:	a8c00117 	ldw	r3,4(r21)
1000c840:	10c00115 	stw	r3,4(r2)
1000c844:	a8c00217 	ldw	r3,8(r21)
1000c848:	10c00215 	stw	r3,8(r2)
1000c84c:	b447883a 	add	r3,r22,r17
1000c850:	bc45c83a 	sub	r2,r23,r17
1000c854:	e0c00215 	stw	r3,8(fp)
1000c858:	10800054 	ori	r2,r2,1
1000c85c:	18800115 	stw	r2,4(r3)
1000c860:	b0800117 	ldw	r2,4(r22)
1000c864:	a009883a 	mov	r4,r20
1000c868:	1080004c 	andi	r2,r2,1
1000c86c:	1462b03a 	or	r17,r2,r17
1000c870:	b4400115 	stw	r17,4(r22)
1000c874:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000c878:	9005883a 	mov	r2,r18
1000c87c:	003f4006 	br	1000c580 <__alt_data_end+0xf800c580>
1000c880:	a8c00217 	ldw	r3,8(r21)
1000c884:	90c00215 	stw	r3,8(r18)
1000c888:	a8c00317 	ldw	r3,12(r21)
1000c88c:	90c00315 	stw	r3,12(r18)
1000c890:	30801126 	beq	r6,r2,1000c8d8 <_realloc_r+0x4c8>
1000c894:	90800404 	addi	r2,r18,16
1000c898:	a8c00404 	addi	r3,r21,16
1000c89c:	003f1906 	br	1000c504 <__alt_data_end+0xf800c504>
1000c8a0:	90ffff17 	ldw	r3,-4(r18)
1000c8a4:	00bfff04 	movi	r2,-4
1000c8a8:	a825883a 	mov	r18,r21
1000c8ac:	1884703a 	and	r2,r3,r2
1000c8b0:	80a1883a 	add	r16,r16,r2
1000c8b4:	003f2406 	br	1000c548 <__alt_data_end+0xf800c548>
1000c8b8:	a8800217 	ldw	r2,8(r21)
1000c8bc:	b0800415 	stw	r2,16(r22)
1000c8c0:	a8800317 	ldw	r2,12(r21)
1000c8c4:	b0800515 	stw	r2,20(r22)
1000c8c8:	31000a26 	beq	r6,r4,1000c8f4 <_realloc_r+0x4e4>
1000c8cc:	b0800604 	addi	r2,r22,24
1000c8d0:	ad400404 	addi	r21,r21,16
1000c8d4:	003fa906 	br	1000c77c <__alt_data_end+0xf800c77c>
1000c8d8:	a9000417 	ldw	r4,16(r21)
1000c8dc:	90800604 	addi	r2,r18,24
1000c8e0:	a8c00604 	addi	r3,r21,24
1000c8e4:	91000415 	stw	r4,16(r18)
1000c8e8:	a9000517 	ldw	r4,20(r21)
1000c8ec:	91000515 	stw	r4,20(r18)
1000c8f0:	003f0406 	br	1000c504 <__alt_data_end+0xf800c504>
1000c8f4:	a8c00417 	ldw	r3,16(r21)
1000c8f8:	ad400604 	addi	r21,r21,24
1000c8fc:	b0800804 	addi	r2,r22,32
1000c900:	b0c00615 	stw	r3,24(r22)
1000c904:	a8ffff17 	ldw	r3,-4(r21)
1000c908:	b0c00715 	stw	r3,28(r22)
1000c90c:	003f9b06 	br	1000c77c <__alt_data_end+0xf800c77c>
1000c910:	9005883a 	mov	r2,r18
1000c914:	003fc706 	br	1000c834 <__alt_data_end+0xf800c834>
1000c918:	a80b883a 	mov	r5,r21
1000c91c:	9009883a 	mov	r4,r18
1000c920:	000b0d40 	call	1000b0d4 <memmove>
1000c924:	003fc906 	br	1000c84c <__alt_data_end+0xf800c84c>
1000c928:	a8800217 	ldw	r2,8(r21)
1000c92c:	b0800415 	stw	r2,16(r22)
1000c930:	a8800317 	ldw	r2,12(r21)
1000c934:	b0800515 	stw	r2,20(r22)
1000c938:	31000726 	beq	r6,r4,1000c958 <_realloc_r+0x548>
1000c93c:	b0800604 	addi	r2,r22,24
1000c940:	ad400404 	addi	r21,r21,16
1000c944:	003fbb06 	br	1000c834 <__alt_data_end+0xf800c834>
1000c948:	a009883a 	mov	r4,r20
1000c94c:	0011b1c0 	call	10011b1c <__malloc_unlock>
1000c950:	0005883a 	mov	r2,zero
1000c954:	003f0a06 	br	1000c580 <__alt_data_end+0xf800c580>
1000c958:	a8c00417 	ldw	r3,16(r21)
1000c95c:	ad400604 	addi	r21,r21,24
1000c960:	b0800804 	addi	r2,r22,32
1000c964:	b0c00615 	stw	r3,24(r22)
1000c968:	a8ffff17 	ldw	r3,-4(r21)
1000c96c:	b0c00715 	stw	r3,28(r22)
1000c970:	003fb006 	br	1000c834 <__alt_data_end+0xf800c834>

1000c974 <__fpclassifyd>:
1000c974:	00a00034 	movhi	r2,32768
1000c978:	10bfffc4 	addi	r2,r2,-1
1000c97c:	2884703a 	and	r2,r5,r2
1000c980:	10000726 	beq	r2,zero,1000c9a0 <__fpclassifyd+0x2c>
1000c984:	00fffc34 	movhi	r3,65520
1000c988:	019ff834 	movhi	r6,32736
1000c98c:	28c7883a 	add	r3,r5,r3
1000c990:	31bfffc4 	addi	r6,r6,-1
1000c994:	30c00536 	bltu	r6,r3,1000c9ac <__fpclassifyd+0x38>
1000c998:	00800104 	movi	r2,4
1000c99c:	f800283a 	ret
1000c9a0:	2000021e 	bne	r4,zero,1000c9ac <__fpclassifyd+0x38>
1000c9a4:	00800084 	movi	r2,2
1000c9a8:	f800283a 	ret
1000c9ac:	00dffc34 	movhi	r3,32752
1000c9b0:	019ff834 	movhi	r6,32736
1000c9b4:	28cb883a 	add	r5,r5,r3
1000c9b8:	31bfffc4 	addi	r6,r6,-1
1000c9bc:	317ff62e 	bgeu	r6,r5,1000c998 <__alt_data_end+0xf800c998>
1000c9c0:	01400434 	movhi	r5,16
1000c9c4:	297fffc4 	addi	r5,r5,-1
1000c9c8:	28800236 	bltu	r5,r2,1000c9d4 <__fpclassifyd+0x60>
1000c9cc:	008000c4 	movi	r2,3
1000c9d0:	f800283a 	ret
1000c9d4:	10c00226 	beq	r2,r3,1000c9e0 <__fpclassifyd+0x6c>
1000c9d8:	0005883a 	mov	r2,zero
1000c9dc:	f800283a 	ret
1000c9e0:	2005003a 	cmpeq	r2,r4,zero
1000c9e4:	f800283a 	ret

1000c9e8 <_sbrk_r>:
1000c9e8:	defffd04 	addi	sp,sp,-12
1000c9ec:	dc000015 	stw	r16,0(sp)
1000c9f0:	04040074 	movhi	r16,4097
1000c9f4:	dc400115 	stw	r17,4(sp)
1000c9f8:	841faf04 	addi	r16,r16,32444
1000c9fc:	2023883a 	mov	r17,r4
1000ca00:	2809883a 	mov	r4,r5
1000ca04:	dfc00215 	stw	ra,8(sp)
1000ca08:	80000015 	stw	zero,0(r16)
1000ca0c:	0011d040 	call	10011d04 <sbrk>
1000ca10:	00ffffc4 	movi	r3,-1
1000ca14:	10c00526 	beq	r2,r3,1000ca2c <_sbrk_r+0x44>
1000ca18:	dfc00217 	ldw	ra,8(sp)
1000ca1c:	dc400117 	ldw	r17,4(sp)
1000ca20:	dc000017 	ldw	r16,0(sp)
1000ca24:	dec00304 	addi	sp,sp,12
1000ca28:	f800283a 	ret
1000ca2c:	80c00017 	ldw	r3,0(r16)
1000ca30:	183ff926 	beq	r3,zero,1000ca18 <__alt_data_end+0xf800ca18>
1000ca34:	88c00015 	stw	r3,0(r17)
1000ca38:	003ff706 	br	1000ca18 <__alt_data_end+0xf800ca18>

1000ca3c <__sread>:
1000ca3c:	defffe04 	addi	sp,sp,-8
1000ca40:	dc000015 	stw	r16,0(sp)
1000ca44:	2821883a 	mov	r16,r5
1000ca48:	2940038f 	ldh	r5,14(r5)
1000ca4c:	dfc00115 	stw	ra,4(sp)
1000ca50:	000e8f80 	call	1000e8f8 <_read_r>
1000ca54:	10000716 	blt	r2,zero,1000ca74 <__sread+0x38>
1000ca58:	80c01417 	ldw	r3,80(r16)
1000ca5c:	1887883a 	add	r3,r3,r2
1000ca60:	80c01415 	stw	r3,80(r16)
1000ca64:	dfc00117 	ldw	ra,4(sp)
1000ca68:	dc000017 	ldw	r16,0(sp)
1000ca6c:	dec00204 	addi	sp,sp,8
1000ca70:	f800283a 	ret
1000ca74:	80c0030b 	ldhu	r3,12(r16)
1000ca78:	18fbffcc 	andi	r3,r3,61439
1000ca7c:	80c0030d 	sth	r3,12(r16)
1000ca80:	dfc00117 	ldw	ra,4(sp)
1000ca84:	dc000017 	ldw	r16,0(sp)
1000ca88:	dec00204 	addi	sp,sp,8
1000ca8c:	f800283a 	ret

1000ca90 <__seofread>:
1000ca90:	0005883a 	mov	r2,zero
1000ca94:	f800283a 	ret

1000ca98 <__swrite>:
1000ca98:	2880030b 	ldhu	r2,12(r5)
1000ca9c:	defffb04 	addi	sp,sp,-20
1000caa0:	dcc00315 	stw	r19,12(sp)
1000caa4:	dc800215 	stw	r18,8(sp)
1000caa8:	dc400115 	stw	r17,4(sp)
1000caac:	dc000015 	stw	r16,0(sp)
1000cab0:	dfc00415 	stw	ra,16(sp)
1000cab4:	10c0400c 	andi	r3,r2,256
1000cab8:	2821883a 	mov	r16,r5
1000cabc:	2023883a 	mov	r17,r4
1000cac0:	3025883a 	mov	r18,r6
1000cac4:	3827883a 	mov	r19,r7
1000cac8:	18000526 	beq	r3,zero,1000cae0 <__swrite+0x48>
1000cacc:	2940038f 	ldh	r5,14(r5)
1000cad0:	01c00084 	movi	r7,2
1000cad4:	000d883a 	mov	r6,zero
1000cad8:	000e8980 	call	1000e898 <_lseek_r>
1000cadc:	8080030b 	ldhu	r2,12(r16)
1000cae0:	8140038f 	ldh	r5,14(r16)
1000cae4:	10bbffcc 	andi	r2,r2,61439
1000cae8:	980f883a 	mov	r7,r19
1000caec:	900d883a 	mov	r6,r18
1000caf0:	8809883a 	mov	r4,r17
1000caf4:	8080030d 	sth	r2,12(r16)
1000caf8:	dfc00417 	ldw	ra,16(sp)
1000cafc:	dcc00317 	ldw	r19,12(sp)
1000cb00:	dc800217 	ldw	r18,8(sp)
1000cb04:	dc400117 	ldw	r17,4(sp)
1000cb08:	dc000017 	ldw	r16,0(sp)
1000cb0c:	dec00504 	addi	sp,sp,20
1000cb10:	000e34c1 	jmpi	1000e34c <_write_r>

1000cb14 <__sseek>:
1000cb14:	defffe04 	addi	sp,sp,-8
1000cb18:	dc000015 	stw	r16,0(sp)
1000cb1c:	2821883a 	mov	r16,r5
1000cb20:	2940038f 	ldh	r5,14(r5)
1000cb24:	dfc00115 	stw	ra,4(sp)
1000cb28:	000e8980 	call	1000e898 <_lseek_r>
1000cb2c:	00ffffc4 	movi	r3,-1
1000cb30:	10c00826 	beq	r2,r3,1000cb54 <__sseek+0x40>
1000cb34:	80c0030b 	ldhu	r3,12(r16)
1000cb38:	80801415 	stw	r2,80(r16)
1000cb3c:	18c40014 	ori	r3,r3,4096
1000cb40:	80c0030d 	sth	r3,12(r16)
1000cb44:	dfc00117 	ldw	ra,4(sp)
1000cb48:	dc000017 	ldw	r16,0(sp)
1000cb4c:	dec00204 	addi	sp,sp,8
1000cb50:	f800283a 	ret
1000cb54:	80c0030b 	ldhu	r3,12(r16)
1000cb58:	18fbffcc 	andi	r3,r3,61439
1000cb5c:	80c0030d 	sth	r3,12(r16)
1000cb60:	dfc00117 	ldw	ra,4(sp)
1000cb64:	dc000017 	ldw	r16,0(sp)
1000cb68:	dec00204 	addi	sp,sp,8
1000cb6c:	f800283a 	ret

1000cb70 <__sclose>:
1000cb70:	2940038f 	ldh	r5,14(r5)
1000cb74:	000e3ac1 	jmpi	1000e3ac <_close_r>

1000cb78 <strcmp>:
1000cb78:	2144b03a 	or	r2,r4,r5
1000cb7c:	108000cc 	andi	r2,r2,3
1000cb80:	1000171e 	bne	r2,zero,1000cbe0 <strcmp+0x68>
1000cb84:	20800017 	ldw	r2,0(r4)
1000cb88:	28c00017 	ldw	r3,0(r5)
1000cb8c:	10c0141e 	bne	r2,r3,1000cbe0 <strcmp+0x68>
1000cb90:	027fbff4 	movhi	r9,65279
1000cb94:	4a7fbfc4 	addi	r9,r9,-257
1000cb98:	0086303a 	nor	r3,zero,r2
1000cb9c:	02202074 	movhi	r8,32897
1000cba0:	1245883a 	add	r2,r2,r9
1000cba4:	42202004 	addi	r8,r8,-32640
1000cba8:	10c4703a 	and	r2,r2,r3
1000cbac:	1204703a 	and	r2,r2,r8
1000cbb0:	10000226 	beq	r2,zero,1000cbbc <strcmp+0x44>
1000cbb4:	00002306 	br	1000cc44 <strcmp+0xcc>
1000cbb8:	1000221e 	bne	r2,zero,1000cc44 <strcmp+0xcc>
1000cbbc:	21000104 	addi	r4,r4,4
1000cbc0:	20c00017 	ldw	r3,0(r4)
1000cbc4:	29400104 	addi	r5,r5,4
1000cbc8:	29800017 	ldw	r6,0(r5)
1000cbcc:	1a4f883a 	add	r7,r3,r9
1000cbd0:	00c4303a 	nor	r2,zero,r3
1000cbd4:	3884703a 	and	r2,r7,r2
1000cbd8:	1204703a 	and	r2,r2,r8
1000cbdc:	19bff626 	beq	r3,r6,1000cbb8 <__alt_data_end+0xf800cbb8>
1000cbe0:	20800003 	ldbu	r2,0(r4)
1000cbe4:	10c03fcc 	andi	r3,r2,255
1000cbe8:	18c0201c 	xori	r3,r3,128
1000cbec:	18ffe004 	addi	r3,r3,-128
1000cbf0:	18000c26 	beq	r3,zero,1000cc24 <strcmp+0xac>
1000cbf4:	29800007 	ldb	r6,0(r5)
1000cbf8:	19800326 	beq	r3,r6,1000cc08 <strcmp+0x90>
1000cbfc:	00001306 	br	1000cc4c <strcmp+0xd4>
1000cc00:	29800007 	ldb	r6,0(r5)
1000cc04:	11800b1e 	bne	r2,r6,1000cc34 <strcmp+0xbc>
1000cc08:	21000044 	addi	r4,r4,1
1000cc0c:	20c00003 	ldbu	r3,0(r4)
1000cc10:	29400044 	addi	r5,r5,1
1000cc14:	18803fcc 	andi	r2,r3,255
1000cc18:	1080201c 	xori	r2,r2,128
1000cc1c:	10bfe004 	addi	r2,r2,-128
1000cc20:	103ff71e 	bne	r2,zero,1000cc00 <__alt_data_end+0xf800cc00>
1000cc24:	0007883a 	mov	r3,zero
1000cc28:	28800003 	ldbu	r2,0(r5)
1000cc2c:	1885c83a 	sub	r2,r3,r2
1000cc30:	f800283a 	ret
1000cc34:	28800003 	ldbu	r2,0(r5)
1000cc38:	18c03fcc 	andi	r3,r3,255
1000cc3c:	1885c83a 	sub	r2,r3,r2
1000cc40:	f800283a 	ret
1000cc44:	0005883a 	mov	r2,zero
1000cc48:	f800283a 	ret
1000cc4c:	10c03fcc 	andi	r3,r2,255
1000cc50:	003ff506 	br	1000cc28 <__alt_data_end+0xf800cc28>

1000cc54 <__sprint_r.part.0>:
1000cc54:	28801917 	ldw	r2,100(r5)
1000cc58:	defff604 	addi	sp,sp,-40
1000cc5c:	dd400515 	stw	r21,20(sp)
1000cc60:	dfc00915 	stw	ra,36(sp)
1000cc64:	df000815 	stw	fp,32(sp)
1000cc68:	ddc00715 	stw	r23,28(sp)
1000cc6c:	dd800615 	stw	r22,24(sp)
1000cc70:	dd000415 	stw	r20,16(sp)
1000cc74:	dcc00315 	stw	r19,12(sp)
1000cc78:	dc800215 	stw	r18,8(sp)
1000cc7c:	dc400115 	stw	r17,4(sp)
1000cc80:	dc000015 	stw	r16,0(sp)
1000cc84:	1088000c 	andi	r2,r2,8192
1000cc88:	302b883a 	mov	r21,r6
1000cc8c:	10002e26 	beq	r2,zero,1000cd48 <__sprint_r.part.0+0xf4>
1000cc90:	30800217 	ldw	r2,8(r6)
1000cc94:	35800017 	ldw	r22,0(r6)
1000cc98:	10002926 	beq	r2,zero,1000cd40 <__sprint_r.part.0+0xec>
1000cc9c:	2827883a 	mov	r19,r5
1000cca0:	2029883a 	mov	r20,r4
1000cca4:	b5c00104 	addi	r23,r22,4
1000cca8:	04bfffc4 	movi	r18,-1
1000ccac:	bc400017 	ldw	r17,0(r23)
1000ccb0:	b4000017 	ldw	r16,0(r22)
1000ccb4:	0039883a 	mov	fp,zero
1000ccb8:	8822d0ba 	srli	r17,r17,2
1000ccbc:	8800031e 	bne	r17,zero,1000cccc <__sprint_r.part.0+0x78>
1000ccc0:	00001806 	br	1000cd24 <__sprint_r.part.0+0xd0>
1000ccc4:	84000104 	addi	r16,r16,4
1000ccc8:	8f001526 	beq	r17,fp,1000cd20 <__sprint_r.part.0+0xcc>
1000cccc:	81400017 	ldw	r5,0(r16)
1000ccd0:	980d883a 	mov	r6,r19
1000ccd4:	a009883a 	mov	r4,r20
1000ccd8:	000e7440 	call	1000e744 <_fputwc_r>
1000ccdc:	e7000044 	addi	fp,fp,1
1000cce0:	14bff81e 	bne	r2,r18,1000ccc4 <__alt_data_end+0xf800ccc4>
1000cce4:	9005883a 	mov	r2,r18
1000cce8:	a8000215 	stw	zero,8(r21)
1000ccec:	a8000115 	stw	zero,4(r21)
1000ccf0:	dfc00917 	ldw	ra,36(sp)
1000ccf4:	df000817 	ldw	fp,32(sp)
1000ccf8:	ddc00717 	ldw	r23,28(sp)
1000ccfc:	dd800617 	ldw	r22,24(sp)
1000cd00:	dd400517 	ldw	r21,20(sp)
1000cd04:	dd000417 	ldw	r20,16(sp)
1000cd08:	dcc00317 	ldw	r19,12(sp)
1000cd0c:	dc800217 	ldw	r18,8(sp)
1000cd10:	dc400117 	ldw	r17,4(sp)
1000cd14:	dc000017 	ldw	r16,0(sp)
1000cd18:	dec00a04 	addi	sp,sp,40
1000cd1c:	f800283a 	ret
1000cd20:	a8800217 	ldw	r2,8(r21)
1000cd24:	8c63883a 	add	r17,r17,r17
1000cd28:	8c63883a 	add	r17,r17,r17
1000cd2c:	1445c83a 	sub	r2,r2,r17
1000cd30:	a8800215 	stw	r2,8(r21)
1000cd34:	b5800204 	addi	r22,r22,8
1000cd38:	bdc00204 	addi	r23,r23,8
1000cd3c:	103fdb1e 	bne	r2,zero,1000ccac <__alt_data_end+0xf800ccac>
1000cd40:	0005883a 	mov	r2,zero
1000cd44:	003fe806 	br	1000cce8 <__alt_data_end+0xf800cce8>
1000cd48:	0009db40 	call	10009db4 <__sfvwrite_r>
1000cd4c:	003fe606 	br	1000cce8 <__alt_data_end+0xf800cce8>

1000cd50 <__sprint_r>:
1000cd50:	30c00217 	ldw	r3,8(r6)
1000cd54:	18000126 	beq	r3,zero,1000cd5c <__sprint_r+0xc>
1000cd58:	000cc541 	jmpi	1000cc54 <__sprint_r.part.0>
1000cd5c:	30000115 	stw	zero,4(r6)
1000cd60:	0005883a 	mov	r2,zero
1000cd64:	f800283a 	ret

1000cd68 <___vfiprintf_internal_r>:
1000cd68:	deffca04 	addi	sp,sp,-216
1000cd6c:	dd403115 	stw	r21,196(sp)
1000cd70:	dfc03515 	stw	ra,212(sp)
1000cd74:	df003415 	stw	fp,208(sp)
1000cd78:	ddc03315 	stw	r23,204(sp)
1000cd7c:	dd803215 	stw	r22,200(sp)
1000cd80:	dd003015 	stw	r20,192(sp)
1000cd84:	dcc02f15 	stw	r19,188(sp)
1000cd88:	dc802e15 	stw	r18,184(sp)
1000cd8c:	dc402d15 	stw	r17,180(sp)
1000cd90:	dc002c15 	stw	r16,176(sp)
1000cd94:	d9002115 	stw	r4,132(sp)
1000cd98:	d9402015 	stw	r5,128(sp)
1000cd9c:	d9c02215 	stw	r7,136(sp)
1000cda0:	302b883a 	mov	r21,r6
1000cda4:	20000226 	beq	r4,zero,1000cdb0 <___vfiprintf_internal_r+0x48>
1000cda8:	20800e17 	ldw	r2,56(r4)
1000cdac:	1000cf26 	beq	r2,zero,1000d0ec <___vfiprintf_internal_r+0x384>
1000cdb0:	d8c02017 	ldw	r3,128(sp)
1000cdb4:	1880030b 	ldhu	r2,12(r3)
1000cdb8:	10c8000c 	andi	r3,r2,8192
1000cdbc:	1800071e 	bne	r3,zero,1000cddc <___vfiprintf_internal_r+0x74>
1000cdc0:	d9402017 	ldw	r5,128(sp)
1000cdc4:	00f7ffc4 	movi	r3,-8193
1000cdc8:	10880014 	ori	r2,r2,8192
1000cdcc:	29001917 	ldw	r4,100(r5)
1000cdd0:	2880030d 	sth	r2,12(r5)
1000cdd4:	20c6703a 	and	r3,r4,r3
1000cdd8:	28c01915 	stw	r3,100(r5)
1000cddc:	10c0020c 	andi	r3,r2,8
1000cde0:	1800a526 	beq	r3,zero,1000d078 <___vfiprintf_internal_r+0x310>
1000cde4:	d9002017 	ldw	r4,128(sp)
1000cde8:	20c00417 	ldw	r3,16(r4)
1000cdec:	1800a226 	beq	r3,zero,1000d078 <___vfiprintf_internal_r+0x310>
1000cdf0:	1080068c 	andi	r2,r2,26
1000cdf4:	00c00284 	movi	r3,10
1000cdf8:	10c0a826 	beq	r2,r3,1000d09c <___vfiprintf_internal_r+0x334>
1000cdfc:	d9001a04 	addi	r4,sp,104
1000ce00:	d94019c4 	addi	r5,sp,103
1000ce04:	04840074 	movhi	r18,4097
1000ce08:	2145c83a 	sub	r2,r4,r5
1000ce0c:	94920f04 	addi	r18,r18,18492
1000ce10:	d9001e15 	stw	r4,120(sp)
1000ce14:	d9401f15 	stw	r5,124(sp)
1000ce18:	dec01a15 	stw	sp,104(sp)
1000ce1c:	d8001c15 	stw	zero,112(sp)
1000ce20:	d8001b15 	stw	zero,108(sp)
1000ce24:	d811883a 	mov	r8,sp
1000ce28:	d8002615 	stw	zero,152(sp)
1000ce2c:	d8002415 	stw	zero,144(sp)
1000ce30:	d8802815 	stw	r2,160(sp)
1000ce34:	a82d883a 	mov	r22,r21
1000ce38:	b0800007 	ldb	r2,0(r22)
1000ce3c:	10040d26 	beq	r2,zero,1000de74 <___vfiprintf_internal_r+0x110c>
1000ce40:	00c00944 	movi	r3,37
1000ce44:	b029883a 	mov	r20,r22
1000ce48:	10c0021e 	bne	r2,r3,1000ce54 <___vfiprintf_internal_r+0xec>
1000ce4c:	00001606 	br	1000cea8 <___vfiprintf_internal_r+0x140>
1000ce50:	10c00326 	beq	r2,r3,1000ce60 <___vfiprintf_internal_r+0xf8>
1000ce54:	a5000044 	addi	r20,r20,1
1000ce58:	a0800007 	ldb	r2,0(r20)
1000ce5c:	103ffc1e 	bne	r2,zero,1000ce50 <__alt_data_end+0xf800ce50>
1000ce60:	a5a1c83a 	sub	r16,r20,r22
1000ce64:	80001026 	beq	r16,zero,1000cea8 <___vfiprintf_internal_r+0x140>
1000ce68:	d8c01c17 	ldw	r3,112(sp)
1000ce6c:	d8801b17 	ldw	r2,108(sp)
1000ce70:	45800015 	stw	r22,0(r8)
1000ce74:	80c7883a 	add	r3,r16,r3
1000ce78:	10800044 	addi	r2,r2,1
1000ce7c:	44000115 	stw	r16,4(r8)
1000ce80:	d8c01c15 	stw	r3,112(sp)
1000ce84:	d8801b15 	stw	r2,108(sp)
1000ce88:	010001c4 	movi	r4,7
1000ce8c:	2080750e 	bge	r4,r2,1000d064 <___vfiprintf_internal_r+0x2fc>
1000ce90:	1803951e 	bne	r3,zero,1000dce8 <___vfiprintf_internal_r+0xf80>
1000ce94:	d8c02417 	ldw	r3,144(sp)
1000ce98:	d8001b15 	stw	zero,108(sp)
1000ce9c:	d811883a 	mov	r8,sp
1000cea0:	1c07883a 	add	r3,r3,r16
1000cea4:	d8c02415 	stw	r3,144(sp)
1000cea8:	a0800007 	ldb	r2,0(r20)
1000ceac:	1002e026 	beq	r2,zero,1000da30 <___vfiprintf_internal_r+0xcc8>
1000ceb0:	a5800044 	addi	r22,r20,1
1000ceb4:	a0c00047 	ldb	r3,1(r20)
1000ceb8:	d8001d85 	stb	zero,118(sp)
1000cebc:	0027883a 	mov	r19,zero
1000cec0:	d8002305 	stb	zero,140(sp)
1000cec4:	043fffc4 	movi	r16,-1
1000cec8:	d8002515 	stw	zero,148(sp)
1000cecc:	0023883a 	mov	r17,zero
1000ced0:	05001604 	movi	r20,88
1000ced4:	05400244 	movi	r21,9
1000ced8:	402f883a 	mov	r23,r8
1000cedc:	b5800044 	addi	r22,r22,1
1000cee0:	18bff804 	addi	r2,r3,-32
1000cee4:	a0827736 	bltu	r20,r2,1000d8c4 <___vfiprintf_internal_r+0xb5c>
1000cee8:	100490ba 	slli	r2,r2,2
1000ceec:	01040074 	movhi	r4,4097
1000cef0:	2133c004 	addi	r4,r4,-12544
1000cef4:	1105883a 	add	r2,r2,r4
1000cef8:	10800017 	ldw	r2,0(r2)
1000cefc:	1000683a 	jmp	r2
1000cf00:	1000d5c4 	addi	zero,r2,855
1000cf04:	1000d8c4 	addi	zero,r2,867
1000cf08:	1000d8c4 	addi	zero,r2,867
1000cf0c:	1000d5e0 	cmpeqi	zero,r2,855
1000cf10:	1000d8c4 	addi	zero,r2,867
1000cf14:	1000d8c4 	addi	zero,r2,867
1000cf18:	1000d8c4 	addi	zero,r2,867
1000cf1c:	1000d8c4 	addi	zero,r2,867
1000cf20:	1000d8c4 	addi	zero,r2,867
1000cf24:	1000d8c4 	addi	zero,r2,867
1000cf28:	1000d7e8 	cmpgeui	zero,r2,863
1000cf2c:	1000d80c 	andi	zero,r2,864
1000cf30:	1000d8c4 	addi	zero,r2,867
1000cf34:	1000d104 	addi	zero,r2,836
1000cf38:	1000d820 	cmpeqi	zero,r2,864
1000cf3c:	1000d8c4 	addi	zero,r2,867
1000cf40:	1000d5ec 	andhi	zero,r2,855
1000cf44:	1000d5f8 	rdprs	zero,r2,855
1000cf48:	1000d5f8 	rdprs	zero,r2,855
1000cf4c:	1000d5f8 	rdprs	zero,r2,855
1000cf50:	1000d5f8 	rdprs	zero,r2,855
1000cf54:	1000d5f8 	rdprs	zero,r2,855
1000cf58:	1000d5f8 	rdprs	zero,r2,855
1000cf5c:	1000d5f8 	rdprs	zero,r2,855
1000cf60:	1000d5f8 	rdprs	zero,r2,855
1000cf64:	1000d5f8 	rdprs	zero,r2,855
1000cf68:	1000d8c4 	addi	zero,r2,867
1000cf6c:	1000d8c4 	addi	zero,r2,867
1000cf70:	1000d8c4 	addi	zero,r2,867
1000cf74:	1000d8c4 	addi	zero,r2,867
1000cf78:	1000d8c4 	addi	zero,r2,867
1000cf7c:	1000d8c4 	addi	zero,r2,867
1000cf80:	1000d8c4 	addi	zero,r2,867
1000cf84:	1000d8c4 	addi	zero,r2,867
1000cf88:	1000d8c4 	addi	zero,r2,867
1000cf8c:	1000d8c4 	addi	zero,r2,867
1000cf90:	1000d638 	rdprs	zero,r2,856
1000cf94:	1000d8c4 	addi	zero,r2,867
1000cf98:	1000d8c4 	addi	zero,r2,867
1000cf9c:	1000d8c4 	addi	zero,r2,867
1000cfa0:	1000d8c4 	addi	zero,r2,867
1000cfa4:	1000d8c4 	addi	zero,r2,867
1000cfa8:	1000d8c4 	addi	zero,r2,867
1000cfac:	1000d8c4 	addi	zero,r2,867
1000cfb0:	1000d8c4 	addi	zero,r2,867
1000cfb4:	1000d8c4 	addi	zero,r2,867
1000cfb8:	1000d8c4 	addi	zero,r2,867
1000cfbc:	1000d674 	orhi	zero,r2,857
1000cfc0:	1000d8c4 	addi	zero,r2,867
1000cfc4:	1000d8c4 	addi	zero,r2,867
1000cfc8:	1000d8c4 	addi	zero,r2,867
1000cfcc:	1000d8c4 	addi	zero,r2,867
1000cfd0:	1000d8c4 	addi	zero,r2,867
1000cfd4:	1000d6d0 	cmplti	zero,r2,859
1000cfd8:	1000d8c4 	addi	zero,r2,867
1000cfdc:	1000d8c4 	addi	zero,r2,867
1000cfe0:	1000d744 	addi	zero,r2,861
1000cfe4:	1000d8c4 	addi	zero,r2,867
1000cfe8:	1000d8c4 	addi	zero,r2,867
1000cfec:	1000d8c4 	addi	zero,r2,867
1000cff0:	1000d8c4 	addi	zero,r2,867
1000cff4:	1000d8c4 	addi	zero,r2,867
1000cff8:	1000d8c4 	addi	zero,r2,867
1000cffc:	1000d8c4 	addi	zero,r2,867
1000d000:	1000d8c4 	addi	zero,r2,867
1000d004:	1000d8c4 	addi	zero,r2,867
1000d008:	1000d8c4 	addi	zero,r2,867
1000d00c:	1000d4ec 	andhi	zero,r2,851
1000d010:	1000d51c 	xori	zero,r2,852
1000d014:	1000d8c4 	addi	zero,r2,867
1000d018:	1000d8c4 	addi	zero,r2,867
1000d01c:	1000d8c4 	addi	zero,r2,867
1000d020:	1000d86c 	andhi	zero,r2,865
1000d024:	1000d51c 	xori	zero,r2,852
1000d028:	1000d8c4 	addi	zero,r2,867
1000d02c:	1000d8c4 	addi	zero,r2,867
1000d030:	1000d3c4 	addi	zero,r2,847
1000d034:	1000d8c4 	addi	zero,r2,867
1000d038:	1000d3d8 	cmpnei	zero,r2,847
1000d03c:	1000d410 	cmplti	zero,r2,848
1000d040:	1000d110 	cmplti	zero,r2,836
1000d044:	1000d3b8 	rdprs	zero,r2,846
1000d048:	1000d8c4 	addi	zero,r2,867
1000d04c:	1000d784 	addi	zero,r2,862
1000d050:	1000d8c4 	addi	zero,r2,867
1000d054:	1000d7d0 	cmplti	zero,r2,863
1000d058:	1000d8c4 	addi	zero,r2,867
1000d05c:	1000d8c4 	addi	zero,r2,867
1000d060:	1000d494 	ori	zero,r2,850
1000d064:	42000204 	addi	r8,r8,8
1000d068:	d8c02417 	ldw	r3,144(sp)
1000d06c:	1c07883a 	add	r3,r3,r16
1000d070:	d8c02415 	stw	r3,144(sp)
1000d074:	003f8c06 	br	1000cea8 <__alt_data_end+0xf800cea8>
1000d078:	d9402017 	ldw	r5,128(sp)
1000d07c:	d9002117 	ldw	r4,132(sp)
1000d080:	00079240 	call	10007924 <__swsetup_r>
1000d084:	1003c11e 	bne	r2,zero,1000df8c <___vfiprintf_internal_r+0x1224>
1000d088:	d9402017 	ldw	r5,128(sp)
1000d08c:	00c00284 	movi	r3,10
1000d090:	2880030b 	ldhu	r2,12(r5)
1000d094:	1080068c 	andi	r2,r2,26
1000d098:	10ff581e 	bne	r2,r3,1000cdfc <__alt_data_end+0xf800cdfc>
1000d09c:	d8c02017 	ldw	r3,128(sp)
1000d0a0:	1880038f 	ldh	r2,14(r3)
1000d0a4:	103f5516 	blt	r2,zero,1000cdfc <__alt_data_end+0xf800cdfc>
1000d0a8:	d9c02217 	ldw	r7,136(sp)
1000d0ac:	d9002117 	ldw	r4,132(sp)
1000d0b0:	a80d883a 	mov	r6,r21
1000d0b4:	180b883a 	mov	r5,r3
1000d0b8:	000e2900 	call	1000e290 <__sbprintf>
1000d0bc:	dfc03517 	ldw	ra,212(sp)
1000d0c0:	df003417 	ldw	fp,208(sp)
1000d0c4:	ddc03317 	ldw	r23,204(sp)
1000d0c8:	dd803217 	ldw	r22,200(sp)
1000d0cc:	dd403117 	ldw	r21,196(sp)
1000d0d0:	dd003017 	ldw	r20,192(sp)
1000d0d4:	dcc02f17 	ldw	r19,188(sp)
1000d0d8:	dc802e17 	ldw	r18,184(sp)
1000d0dc:	dc402d17 	ldw	r17,180(sp)
1000d0e0:	dc002c17 	ldw	r16,176(sp)
1000d0e4:	dec03604 	addi	sp,sp,216
1000d0e8:	f800283a 	ret
1000d0ec:	00099300 	call	10009930 <__sinit>
1000d0f0:	003f2f06 	br	1000cdb0 <__alt_data_end+0xf800cdb0>
1000d0f4:	d8c02517 	ldw	r3,148(sp)
1000d0f8:	d8802215 	stw	r2,136(sp)
1000d0fc:	00c7c83a 	sub	r3,zero,r3
1000d100:	d8c02515 	stw	r3,148(sp)
1000d104:	8c400114 	ori	r17,r17,4
1000d108:	b0c00007 	ldb	r3,0(r22)
1000d10c:	003f7306 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d110:	00800c04 	movi	r2,48
1000d114:	d9402217 	ldw	r5,136(sp)
1000d118:	d8801d05 	stb	r2,116(sp)
1000d11c:	00801e04 	movi	r2,120
1000d120:	d8801d45 	stb	r2,117(sp)
1000d124:	d8001d85 	stb	zero,118(sp)
1000d128:	b811883a 	mov	r8,r23
1000d12c:	28c00104 	addi	r3,r5,4
1000d130:	2cc00017 	ldw	r19,0(r5)
1000d134:	0029883a 	mov	r20,zero
1000d138:	88800094 	ori	r2,r17,2
1000d13c:	80032516 	blt	r16,zero,1000ddd4 <___vfiprintf_internal_r+0x106c>
1000d140:	00bfdfc4 	movi	r2,-129
1000d144:	88a2703a 	and	r17,r17,r2
1000d148:	d8c02215 	stw	r3,136(sp)
1000d14c:	8c400094 	ori	r17,r17,2
1000d150:	98032a1e 	bne	r19,zero,1000ddfc <___vfiprintf_internal_r+0x1094>
1000d154:	00840074 	movhi	r2,4097
1000d158:	1091af04 	addi	r2,r2,18108
1000d15c:	d8802615 	stw	r2,152(sp)
1000d160:	002b883a 	mov	r21,zero
1000d164:	8001741e 	bne	r16,zero,1000d738 <___vfiprintf_internal_r+0x9d0>
1000d168:	0021883a 	mov	r16,zero
1000d16c:	0029883a 	mov	r20,zero
1000d170:	ddc01a04 	addi	r23,sp,104
1000d174:	8027883a 	mov	r19,r16
1000d178:	8500010e 	bge	r16,r20,1000d180 <___vfiprintf_internal_r+0x418>
1000d17c:	a027883a 	mov	r19,r20
1000d180:	ad403fcc 	andi	r21,r21,255
1000d184:	ad40201c 	xori	r21,r21,128
1000d188:	ad7fe004 	addi	r21,r21,-128
1000d18c:	a8000126 	beq	r21,zero,1000d194 <___vfiprintf_internal_r+0x42c>
1000d190:	9cc00044 	addi	r19,r19,1
1000d194:	89c0008c 	andi	r7,r17,2
1000d198:	38000126 	beq	r7,zero,1000d1a0 <___vfiprintf_internal_r+0x438>
1000d19c:	9cc00084 	addi	r19,r19,2
1000d1a0:	88c0210c 	andi	r3,r17,132
1000d1a4:	1801dd1e 	bne	r3,zero,1000d91c <___vfiprintf_internal_r+0xbb4>
1000d1a8:	d9402517 	ldw	r5,148(sp)
1000d1ac:	2cebc83a 	sub	r21,r5,r19
1000d1b0:	0541da0e 	bge	zero,r21,1000d91c <___vfiprintf_internal_r+0xbb4>
1000d1b4:	07000404 	movi	fp,16
1000d1b8:	d8801c17 	ldw	r2,112(sp)
1000d1bc:	e543be0e 	bge	fp,r21,1000e0b8 <___vfiprintf_internal_r+0x1350>
1000d1c0:	01440074 	movhi	r5,4097
1000d1c4:	29521304 	addi	r5,r5,18508
1000d1c8:	dc002715 	stw	r16,156(sp)
1000d1cc:	d9801b17 	ldw	r6,108(sp)
1000d1d0:	a821883a 	mov	r16,r21
1000d1d4:	d9402315 	stw	r5,140(sp)
1000d1d8:	028001c4 	movi	r10,7
1000d1dc:	d9c02915 	stw	r7,164(sp)
1000d1e0:	182b883a 	mov	r21,r3
1000d1e4:	00000506 	br	1000d1fc <___vfiprintf_internal_r+0x494>
1000d1e8:	31000084 	addi	r4,r6,2
1000d1ec:	42000204 	addi	r8,r8,8
1000d1f0:	180d883a 	mov	r6,r3
1000d1f4:	843ffc04 	addi	r16,r16,-16
1000d1f8:	e4000f0e 	bge	fp,r16,1000d238 <___vfiprintf_internal_r+0x4d0>
1000d1fc:	01040074 	movhi	r4,4097
1000d200:	10800404 	addi	r2,r2,16
1000d204:	30c00044 	addi	r3,r6,1
1000d208:	21121304 	addi	r4,r4,18508
1000d20c:	41000015 	stw	r4,0(r8)
1000d210:	47000115 	stw	fp,4(r8)
1000d214:	d8801c15 	stw	r2,112(sp)
1000d218:	d8c01b15 	stw	r3,108(sp)
1000d21c:	50fff20e 	bge	r10,r3,1000d1e8 <__alt_data_end+0xf800d1e8>
1000d220:	1001b21e 	bne	r2,zero,1000d8ec <___vfiprintf_internal_r+0xb84>
1000d224:	843ffc04 	addi	r16,r16,-16
1000d228:	000d883a 	mov	r6,zero
1000d22c:	01000044 	movi	r4,1
1000d230:	d811883a 	mov	r8,sp
1000d234:	e43ff116 	blt	fp,r16,1000d1fc <__alt_data_end+0xf800d1fc>
1000d238:	a807883a 	mov	r3,r21
1000d23c:	d9c02917 	ldw	r7,164(sp)
1000d240:	802b883a 	mov	r21,r16
1000d244:	dc002717 	ldw	r16,156(sp)
1000d248:	d9402317 	ldw	r5,140(sp)
1000d24c:	a885883a 	add	r2,r21,r2
1000d250:	45400115 	stw	r21,4(r8)
1000d254:	41400015 	stw	r5,0(r8)
1000d258:	d8801c15 	stw	r2,112(sp)
1000d25c:	d9001b15 	stw	r4,108(sp)
1000d260:	014001c4 	movi	r5,7
1000d264:	29026216 	blt	r5,r4,1000dbf0 <___vfiprintf_internal_r+0xe88>
1000d268:	d9801d87 	ldb	r6,118(sp)
1000d26c:	42000204 	addi	r8,r8,8
1000d270:	21400044 	addi	r5,r4,1
1000d274:	3001ae1e 	bne	r6,zero,1000d930 <___vfiprintf_internal_r+0xbc8>
1000d278:	3801bb26 	beq	r7,zero,1000d968 <___vfiprintf_internal_r+0xc00>
1000d27c:	d9001d04 	addi	r4,sp,116
1000d280:	10800084 	addi	r2,r2,2
1000d284:	41000015 	stw	r4,0(r8)
1000d288:	01000084 	movi	r4,2
1000d28c:	41000115 	stw	r4,4(r8)
1000d290:	d8801c15 	stw	r2,112(sp)
1000d294:	d9401b15 	stw	r5,108(sp)
1000d298:	010001c4 	movi	r4,7
1000d29c:	2142680e 	bge	r4,r5,1000dc40 <___vfiprintf_internal_r+0xed8>
1000d2a0:	1002b11e 	bne	r2,zero,1000dd68 <___vfiprintf_internal_r+0x1000>
1000d2a4:	01802004 	movi	r6,128
1000d2a8:	01400044 	movi	r5,1
1000d2ac:	0009883a 	mov	r4,zero
1000d2b0:	d811883a 	mov	r8,sp
1000d2b4:	1981ae1e 	bne	r3,r6,1000d970 <___vfiprintf_internal_r+0xc08>
1000d2b8:	d8c02517 	ldw	r3,148(sp)
1000d2bc:	1cf9c83a 	sub	fp,r3,r19
1000d2c0:	0701ab0e 	bge	zero,fp,1000d970 <___vfiprintf_internal_r+0xc08>
1000d2c4:	05400404 	movi	r21,16
1000d2c8:	af03a90e 	bge	r21,fp,1000e170 <___vfiprintf_internal_r+0x1408>
1000d2cc:	01440074 	movhi	r5,4097
1000d2d0:	29520f04 	addi	r5,r5,18492
1000d2d4:	d9402315 	stw	r5,140(sp)
1000d2d8:	01c001c4 	movi	r7,7
1000d2dc:	00000506 	br	1000d2f4 <___vfiprintf_internal_r+0x58c>
1000d2e0:	21800084 	addi	r6,r4,2
1000d2e4:	42000204 	addi	r8,r8,8
1000d2e8:	1809883a 	mov	r4,r3
1000d2ec:	e73ffc04 	addi	fp,fp,-16
1000d2f0:	af000d0e 	bge	r21,fp,1000d328 <___vfiprintf_internal_r+0x5c0>
1000d2f4:	10800404 	addi	r2,r2,16
1000d2f8:	20c00044 	addi	r3,r4,1
1000d2fc:	44800015 	stw	r18,0(r8)
1000d300:	45400115 	stw	r21,4(r8)
1000d304:	d8801c15 	stw	r2,112(sp)
1000d308:	d8c01b15 	stw	r3,108(sp)
1000d30c:	38fff40e 	bge	r7,r3,1000d2e0 <__alt_data_end+0xf800d2e0>
1000d310:	10022b1e 	bne	r2,zero,1000dbc0 <___vfiprintf_internal_r+0xe58>
1000d314:	e73ffc04 	addi	fp,fp,-16
1000d318:	01800044 	movi	r6,1
1000d31c:	0009883a 	mov	r4,zero
1000d320:	d811883a 	mov	r8,sp
1000d324:	af3ff316 	blt	r21,fp,1000d2f4 <__alt_data_end+0xf800d2f4>
1000d328:	d8c02317 	ldw	r3,140(sp)
1000d32c:	1705883a 	add	r2,r2,fp
1000d330:	47000115 	stw	fp,4(r8)
1000d334:	40c00015 	stw	r3,0(r8)
1000d338:	d8801c15 	stw	r2,112(sp)
1000d33c:	d9801b15 	stw	r6,108(sp)
1000d340:	00c001c4 	movi	r3,7
1000d344:	19829416 	blt	r3,r6,1000dd98 <___vfiprintf_internal_r+0x1030>
1000d348:	8521c83a 	sub	r16,r16,r20
1000d34c:	42000204 	addi	r8,r8,8
1000d350:	31400044 	addi	r5,r6,1
1000d354:	3009883a 	mov	r4,r6
1000d358:	04018716 	blt	zero,r16,1000d978 <___vfiprintf_internal_r+0xc10>
1000d35c:	a085883a 	add	r2,r20,r2
1000d360:	45c00015 	stw	r23,0(r8)
1000d364:	45000115 	stw	r20,4(r8)
1000d368:	d8801c15 	stw	r2,112(sp)
1000d36c:	d9401b15 	stw	r5,108(sp)
1000d370:	00c001c4 	movi	r3,7
1000d374:	1941c20e 	bge	r3,r5,1000da80 <___vfiprintf_internal_r+0xd18>
1000d378:	1002531e 	bne	r2,zero,1000dcc8 <___vfiprintf_internal_r+0xf60>
1000d37c:	d8001b15 	stw	zero,108(sp)
1000d380:	8c40010c 	andi	r17,r17,4
1000d384:	88023226 	beq	r17,zero,1000dc50 <___vfiprintf_internal_r+0xee8>
1000d388:	d9002517 	ldw	r4,148(sp)
1000d38c:	24e3c83a 	sub	r17,r4,r19
1000d390:	04432916 	blt	zero,r17,1000e038 <___vfiprintf_internal_r+0x12d0>
1000d394:	d8802517 	ldw	r2,148(sp)
1000d398:	14c0010e 	bge	r2,r19,1000d3a0 <___vfiprintf_internal_r+0x638>
1000d39c:	9805883a 	mov	r2,r19
1000d3a0:	d8c02417 	ldw	r3,144(sp)
1000d3a4:	1887883a 	add	r3,r3,r2
1000d3a8:	d8c02415 	stw	r3,144(sp)
1000d3ac:	d8001b15 	stw	zero,108(sp)
1000d3b0:	d811883a 	mov	r8,sp
1000d3b4:	003ea006 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d3b8:	8c400814 	ori	r17,r17,32
1000d3bc:	b0c00007 	ldb	r3,0(r22)
1000d3c0:	003ec606 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d3c4:	b0c00007 	ldb	r3,0(r22)
1000d3c8:	00801b04 	movi	r2,108
1000d3cc:	18832026 	beq	r3,r2,1000e050 <___vfiprintf_internal_r+0x12e8>
1000d3d0:	8c400414 	ori	r17,r17,16
1000d3d4:	003ec106 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d3d8:	9cc03fcc 	andi	r19,r19,255
1000d3dc:	b811883a 	mov	r8,r23
1000d3e0:	9803981e 	bne	r19,zero,1000e244 <___vfiprintf_internal_r+0x14dc>
1000d3e4:	8880080c 	andi	r2,r17,32
1000d3e8:	1002be26 	beq	r2,zero,1000dee4 <___vfiprintf_internal_r+0x117c>
1000d3ec:	d9002217 	ldw	r4,136(sp)
1000d3f0:	d9402417 	ldw	r5,144(sp)
1000d3f4:	20800017 	ldw	r2,0(r4)
1000d3f8:	2807d7fa 	srai	r3,r5,31
1000d3fc:	21000104 	addi	r4,r4,4
1000d400:	d9002215 	stw	r4,136(sp)
1000d404:	11400015 	stw	r5,0(r2)
1000d408:	10c00115 	stw	r3,4(r2)
1000d40c:	003e8a06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d410:	9cc03fcc 	andi	r19,r19,255
1000d414:	b811883a 	mov	r8,r23
1000d418:	9803871e 	bne	r19,zero,1000e238 <___vfiprintf_internal_r+0x14d0>
1000d41c:	8880080c 	andi	r2,r17,32
1000d420:	10009a26 	beq	r2,zero,1000d68c <___vfiprintf_internal_r+0x924>
1000d424:	d9002217 	ldw	r4,136(sp)
1000d428:	d8001d85 	stb	zero,118(sp)
1000d42c:	20800204 	addi	r2,r4,8
1000d430:	24c00017 	ldw	r19,0(r4)
1000d434:	25000117 	ldw	r20,4(r4)
1000d438:	8002a416 	blt	r16,zero,1000decc <___vfiprintf_internal_r+0x1164>
1000d43c:	013fdfc4 	movi	r4,-129
1000d440:	9d06b03a 	or	r3,r19,r20
1000d444:	d8802215 	stw	r2,136(sp)
1000d448:	8922703a 	and	r17,r17,r4
1000d44c:	18009b26 	beq	r3,zero,1000d6bc <___vfiprintf_internal_r+0x954>
1000d450:	002b883a 	mov	r21,zero
1000d454:	ddc01a04 	addi	r23,sp,104
1000d458:	9806d0fa 	srli	r3,r19,3
1000d45c:	a008977a 	slli	r4,r20,29
1000d460:	a028d0fa 	srli	r20,r20,3
1000d464:	9cc001cc 	andi	r19,r19,7
1000d468:	98800c04 	addi	r2,r19,48
1000d46c:	bdffffc4 	addi	r23,r23,-1
1000d470:	20e6b03a 	or	r19,r4,r3
1000d474:	b8800005 	stb	r2,0(r23)
1000d478:	9d06b03a 	or	r3,r19,r20
1000d47c:	183ff61e 	bne	r3,zero,1000d458 <__alt_data_end+0xf800d458>
1000d480:	88c0004c 	andi	r3,r17,1
1000d484:	18021f1e 	bne	r3,zero,1000dd04 <___vfiprintf_internal_r+0xf9c>
1000d488:	d9401e17 	ldw	r5,120(sp)
1000d48c:	2de9c83a 	sub	r20,r5,r23
1000d490:	003f3806 	br	1000d174 <__alt_data_end+0xf800d174>
1000d494:	9cc03fcc 	andi	r19,r19,255
1000d498:	b811883a 	mov	r8,r23
1000d49c:	98034f1e 	bne	r19,zero,1000e1dc <___vfiprintf_internal_r+0x1474>
1000d4a0:	00840074 	movhi	r2,4097
1000d4a4:	1091af04 	addi	r2,r2,18108
1000d4a8:	d8802615 	stw	r2,152(sp)
1000d4ac:	8880080c 	andi	r2,r17,32
1000d4b0:	1000ac26 	beq	r2,zero,1000d764 <___vfiprintf_internal_r+0x9fc>
1000d4b4:	d9002217 	ldw	r4,136(sp)
1000d4b8:	24c00017 	ldw	r19,0(r4)
1000d4bc:	25000117 	ldw	r20,4(r4)
1000d4c0:	21000204 	addi	r4,r4,8
1000d4c4:	d9002215 	stw	r4,136(sp)
1000d4c8:	8880004c 	andi	r2,r17,1
1000d4cc:	1001e726 	beq	r2,zero,1000dc6c <___vfiprintf_internal_r+0xf04>
1000d4d0:	9d04b03a 	or	r2,r19,r20
1000d4d4:	10025c1e 	bne	r2,zero,1000de48 <___vfiprintf_internal_r+0x10e0>
1000d4d8:	d8001d85 	stb	zero,118(sp)
1000d4dc:	80024416 	blt	r16,zero,1000ddf0 <___vfiprintf_internal_r+0x1088>
1000d4e0:	00bfdfc4 	movi	r2,-129
1000d4e4:	88a2703a 	and	r17,r17,r2
1000d4e8:	003f1d06 	br	1000d160 <__alt_data_end+0xf800d160>
1000d4ec:	d8c02217 	ldw	r3,136(sp)
1000d4f0:	04c00044 	movi	r19,1
1000d4f4:	b811883a 	mov	r8,r23
1000d4f8:	18800017 	ldw	r2,0(r3)
1000d4fc:	18c00104 	addi	r3,r3,4
1000d500:	d8001d85 	stb	zero,118(sp)
1000d504:	d8801005 	stb	r2,64(sp)
1000d508:	d8c02215 	stw	r3,136(sp)
1000d50c:	9829883a 	mov	r20,r19
1000d510:	ddc01004 	addi	r23,sp,64
1000d514:	0021883a 	mov	r16,zero
1000d518:	003f1e06 	br	1000d194 <__alt_data_end+0xf800d194>
1000d51c:	9cc03fcc 	andi	r19,r19,255
1000d520:	b811883a 	mov	r8,r23
1000d524:	9803331e 	bne	r19,zero,1000e1f4 <___vfiprintf_internal_r+0x148c>
1000d528:	8880080c 	andi	r2,r17,32
1000d52c:	10004826 	beq	r2,zero,1000d650 <___vfiprintf_internal_r+0x8e8>
1000d530:	d9002217 	ldw	r4,136(sp)
1000d534:	20800117 	ldw	r2,4(r4)
1000d538:	24c00017 	ldw	r19,0(r4)
1000d53c:	21000204 	addi	r4,r4,8
1000d540:	d9002215 	stw	r4,136(sp)
1000d544:	1029883a 	mov	r20,r2
1000d548:	10024c16 	blt	r2,zero,1000de7c <___vfiprintf_internal_r+0x1114>
1000d54c:	dd401d83 	ldbu	r21,118(sp)
1000d550:	80007116 	blt	r16,zero,1000d718 <___vfiprintf_internal_r+0x9b0>
1000d554:	00ffdfc4 	movi	r3,-129
1000d558:	9d04b03a 	or	r2,r19,r20
1000d55c:	88e2703a 	and	r17,r17,r3
1000d560:	1000d126 	beq	r2,zero,1000d8a8 <___vfiprintf_internal_r+0xb40>
1000d564:	a0023526 	beq	r20,zero,1000de3c <___vfiprintf_internal_r+0x10d4>
1000d568:	ddc01a04 	addi	r23,sp,104
1000d56c:	4039883a 	mov	fp,r8
1000d570:	9809883a 	mov	r4,r19
1000d574:	a00b883a 	mov	r5,r20
1000d578:	01800284 	movi	r6,10
1000d57c:	000f883a 	mov	r7,zero
1000d580:	000f3a00 	call	1000f3a0 <__umoddi3>
1000d584:	10800c04 	addi	r2,r2,48
1000d588:	bdffffc4 	addi	r23,r23,-1
1000d58c:	9809883a 	mov	r4,r19
1000d590:	a00b883a 	mov	r5,r20
1000d594:	b8800005 	stb	r2,0(r23)
1000d598:	01800284 	movi	r6,10
1000d59c:	000f883a 	mov	r7,zero
1000d5a0:	000eda40 	call	1000eda4 <__udivdi3>
1000d5a4:	1027883a 	mov	r19,r2
1000d5a8:	10c4b03a 	or	r2,r2,r3
1000d5ac:	1829883a 	mov	r20,r3
1000d5b0:	103fef1e 	bne	r2,zero,1000d570 <__alt_data_end+0xf800d570>
1000d5b4:	d9001e17 	ldw	r4,120(sp)
1000d5b8:	e011883a 	mov	r8,fp
1000d5bc:	25e9c83a 	sub	r20,r4,r23
1000d5c0:	003eec06 	br	1000d174 <__alt_data_end+0xf800d174>
1000d5c4:	d8802307 	ldb	r2,140(sp)
1000d5c8:	1002361e 	bne	r2,zero,1000dea4 <___vfiprintf_internal_r+0x113c>
1000d5cc:	00c00804 	movi	r3,32
1000d5d0:	d8c02305 	stb	r3,140(sp)
1000d5d4:	04c00044 	movi	r19,1
1000d5d8:	b0c00007 	ldb	r3,0(r22)
1000d5dc:	003e3f06 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d5e0:	8c400054 	ori	r17,r17,1
1000d5e4:	b0c00007 	ldb	r3,0(r22)
1000d5e8:	003e3c06 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d5ec:	8c402014 	ori	r17,r17,128
1000d5f0:	b0c00007 	ldb	r3,0(r22)
1000d5f4:	003e3906 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d5f8:	dc002715 	stw	r16,156(sp)
1000d5fc:	d8002515 	stw	zero,148(sp)
1000d600:	1f3ff404 	addi	fp,r3,-48
1000d604:	0009883a 	mov	r4,zero
1000d608:	b021883a 	mov	r16,r22
1000d60c:	01400284 	movi	r5,10
1000d610:	00052a00 	call	100052a0 <__mulsi3>
1000d614:	80c00007 	ldb	r3,0(r16)
1000d618:	e089883a 	add	r4,fp,r2
1000d61c:	b5800044 	addi	r22,r22,1
1000d620:	1f3ff404 	addi	fp,r3,-48
1000d624:	b021883a 	mov	r16,r22
1000d628:	af3ff82e 	bgeu	r21,fp,1000d60c <__alt_data_end+0xf800d60c>
1000d62c:	d9002515 	stw	r4,148(sp)
1000d630:	dc002717 	ldw	r16,156(sp)
1000d634:	003e2a06 	br	1000cee0 <__alt_data_end+0xf800cee0>
1000d638:	9cc03fcc 	andi	r19,r19,255
1000d63c:	b811883a 	mov	r8,r23
1000d640:	9802e91e 	bne	r19,zero,1000e1e8 <___vfiprintf_internal_r+0x1480>
1000d644:	8c400414 	ori	r17,r17,16
1000d648:	8880080c 	andi	r2,r17,32
1000d64c:	103fb81e 	bne	r2,zero,1000d530 <__alt_data_end+0xf800d530>
1000d650:	8880040c 	andi	r2,r17,16
1000d654:	10022e26 	beq	r2,zero,1000df10 <___vfiprintf_internal_r+0x11a8>
1000d658:	d9402217 	ldw	r5,136(sp)
1000d65c:	2cc00017 	ldw	r19,0(r5)
1000d660:	29400104 	addi	r5,r5,4
1000d664:	d9402215 	stw	r5,136(sp)
1000d668:	9829d7fa 	srai	r20,r19,31
1000d66c:	a005883a 	mov	r2,r20
1000d670:	003fb506 	br	1000d548 <__alt_data_end+0xf800d548>
1000d674:	9cc03fcc 	andi	r19,r19,255
1000d678:	b811883a 	mov	r8,r23
1000d67c:	9802fa1e 	bne	r19,zero,1000e268 <___vfiprintf_internal_r+0x1500>
1000d680:	8c400414 	ori	r17,r17,16
1000d684:	8880080c 	andi	r2,r17,32
1000d688:	103f661e 	bne	r2,zero,1000d424 <__alt_data_end+0xf800d424>
1000d68c:	8880040c 	andi	r2,r17,16
1000d690:	10020626 	beq	r2,zero,1000deac <___vfiprintf_internal_r+0x1144>
1000d694:	d9402217 	ldw	r5,136(sp)
1000d698:	d8001d85 	stb	zero,118(sp)
1000d69c:	0029883a 	mov	r20,zero
1000d6a0:	28800104 	addi	r2,r5,4
1000d6a4:	2cc00017 	ldw	r19,0(r5)
1000d6a8:	80020816 	blt	r16,zero,1000decc <___vfiprintf_internal_r+0x1164>
1000d6ac:	00ffdfc4 	movi	r3,-129
1000d6b0:	d8802215 	stw	r2,136(sp)
1000d6b4:	88e2703a 	and	r17,r17,r3
1000d6b8:	983f651e 	bne	r19,zero,1000d450 <__alt_data_end+0xf800d450>
1000d6bc:	002b883a 	mov	r21,zero
1000d6c0:	8002cf26 	beq	r16,zero,1000e200 <___vfiprintf_internal_r+0x1498>
1000d6c4:	0027883a 	mov	r19,zero
1000d6c8:	0029883a 	mov	r20,zero
1000d6cc:	003f6106 	br	1000d454 <__alt_data_end+0xf800d454>
1000d6d0:	9cc03fcc 	andi	r19,r19,255
1000d6d4:	b811883a 	mov	r8,r23
1000d6d8:	9802e01e 	bne	r19,zero,1000e25c <___vfiprintf_internal_r+0x14f4>
1000d6dc:	8c400414 	ori	r17,r17,16
1000d6e0:	8880080c 	andi	r2,r17,32
1000d6e4:	1000641e 	bne	r2,zero,1000d878 <___vfiprintf_internal_r+0xb10>
1000d6e8:	8880040c 	andi	r2,r17,16
1000d6ec:	1001c81e 	bne	r2,zero,1000de10 <___vfiprintf_internal_r+0x10a8>
1000d6f0:	8880100c 	andi	r2,r17,64
1000d6f4:	d8001d85 	stb	zero,118(sp)
1000d6f8:	1002281e 	bne	r2,zero,1000df9c <___vfiprintf_internal_r+0x1234>
1000d6fc:	d9002217 	ldw	r4,136(sp)
1000d700:	0029883a 	mov	r20,zero
1000d704:	20800104 	addi	r2,r4,4
1000d708:	24c00017 	ldw	r19,0(r4)
1000d70c:	8001c60e 	bge	r16,zero,1000de28 <___vfiprintf_internal_r+0x10c0>
1000d710:	d8802215 	stw	r2,136(sp)
1000d714:	002b883a 	mov	r21,zero
1000d718:	9d04b03a 	or	r2,r19,r20
1000d71c:	103f911e 	bne	r2,zero,1000d564 <__alt_data_end+0xf800d564>
1000d720:	00800044 	movi	r2,1
1000d724:	10803fcc 	andi	r2,r2,255
1000d728:	00c00044 	movi	r3,1
1000d72c:	10c05f26 	beq	r2,r3,1000d8ac <___vfiprintf_internal_r+0xb44>
1000d730:	00c00084 	movi	r3,2
1000d734:	10ffe31e 	bne	r2,r3,1000d6c4 <__alt_data_end+0xf800d6c4>
1000d738:	0027883a 	mov	r19,zero
1000d73c:	0029883a 	mov	r20,zero
1000d740:	00015106 	br	1000dc88 <___vfiprintf_internal_r+0xf20>
1000d744:	9cc03fcc 	andi	r19,r19,255
1000d748:	b811883a 	mov	r8,r23
1000d74c:	9802c01e 	bne	r19,zero,1000e250 <___vfiprintf_internal_r+0x14e8>
1000d750:	01440074 	movhi	r5,4097
1000d754:	2951aa04 	addi	r5,r5,18088
1000d758:	d9402615 	stw	r5,152(sp)
1000d75c:	8880080c 	andi	r2,r17,32
1000d760:	103f541e 	bne	r2,zero,1000d4b4 <__alt_data_end+0xf800d4b4>
1000d764:	8880040c 	andi	r2,r17,16
1000d768:	1001f226 	beq	r2,zero,1000df34 <___vfiprintf_internal_r+0x11cc>
1000d76c:	d9402217 	ldw	r5,136(sp)
1000d770:	0029883a 	mov	r20,zero
1000d774:	2cc00017 	ldw	r19,0(r5)
1000d778:	29400104 	addi	r5,r5,4
1000d77c:	d9402215 	stw	r5,136(sp)
1000d780:	003f5106 	br	1000d4c8 <__alt_data_end+0xf800d4c8>
1000d784:	d8c02217 	ldw	r3,136(sp)
1000d788:	b811883a 	mov	r8,r23
1000d78c:	d8001d85 	stb	zero,118(sp)
1000d790:	1dc00017 	ldw	r23,0(r3)
1000d794:	1f000104 	addi	fp,r3,4
1000d798:	b8025926 	beq	r23,zero,1000e100 <___vfiprintf_internal_r+0x1398>
1000d79c:	80023316 	blt	r16,zero,1000e06c <___vfiprintf_internal_r+0x1304>
1000d7a0:	800d883a 	mov	r6,r16
1000d7a4:	000b883a 	mov	r5,zero
1000d7a8:	b809883a 	mov	r4,r23
1000d7ac:	da002a15 	stw	r8,168(sp)
1000d7b0:	000aea80 	call	1000aea8 <memchr>
1000d7b4:	da002a17 	ldw	r8,168(sp)
1000d7b8:	10026826 	beq	r2,zero,1000e15c <___vfiprintf_internal_r+0x13f4>
1000d7bc:	15e9c83a 	sub	r20,r2,r23
1000d7c0:	dd401d83 	ldbu	r21,118(sp)
1000d7c4:	df002215 	stw	fp,136(sp)
1000d7c8:	0021883a 	mov	r16,zero
1000d7cc:	003e6906 	br	1000d174 <__alt_data_end+0xf800d174>
1000d7d0:	9cc03fcc 	andi	r19,r19,255
1000d7d4:	b811883a 	mov	r8,r23
1000d7d8:	983fc126 	beq	r19,zero,1000d6e0 <__alt_data_end+0xf800d6e0>
1000d7dc:	d8c02303 	ldbu	r3,140(sp)
1000d7e0:	d8c01d85 	stb	r3,118(sp)
1000d7e4:	003fbe06 	br	1000d6e0 <__alt_data_end+0xf800d6e0>
1000d7e8:	d9002217 	ldw	r4,136(sp)
1000d7ec:	d9402217 	ldw	r5,136(sp)
1000d7f0:	21000017 	ldw	r4,0(r4)
1000d7f4:	28800104 	addi	r2,r5,4
1000d7f8:	d9002515 	stw	r4,148(sp)
1000d7fc:	203e3d16 	blt	r4,zero,1000d0f4 <__alt_data_end+0xf800d0f4>
1000d800:	d8802215 	stw	r2,136(sp)
1000d804:	b0c00007 	ldb	r3,0(r22)
1000d808:	003db406 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d80c:	00c00ac4 	movi	r3,43
1000d810:	d8c02305 	stb	r3,140(sp)
1000d814:	04c00044 	movi	r19,1
1000d818:	b0c00007 	ldb	r3,0(r22)
1000d81c:	003daf06 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d820:	b0c00007 	ldb	r3,0(r22)
1000d824:	01000a84 	movi	r4,42
1000d828:	b4000044 	addi	r16,r22,1
1000d82c:	19025e26 	beq	r3,r4,1000e1a8 <___vfiprintf_internal_r+0x1440>
1000d830:	1f3ff404 	addi	fp,r3,-48
1000d834:	0009883a 	mov	r4,zero
1000d838:	af025236 	bltu	r21,fp,1000e184 <___vfiprintf_internal_r+0x141c>
1000d83c:	01400284 	movi	r5,10
1000d840:	00052a00 	call	100052a0 <__mulsi3>
1000d844:	80c00007 	ldb	r3,0(r16)
1000d848:	1709883a 	add	r4,r2,fp
1000d84c:	85800044 	addi	r22,r16,1
1000d850:	1f3ff404 	addi	fp,r3,-48
1000d854:	b021883a 	mov	r16,r22
1000d858:	af3ff82e 	bgeu	r21,fp,1000d83c <__alt_data_end+0xf800d83c>
1000d85c:	2021883a 	mov	r16,r4
1000d860:	203d9f0e 	bge	r4,zero,1000cee0 <__alt_data_end+0xf800cee0>
1000d864:	043fffc4 	movi	r16,-1
1000d868:	003d9d06 	br	1000cee0 <__alt_data_end+0xf800cee0>
1000d86c:	8c401014 	ori	r17,r17,64
1000d870:	b0c00007 	ldb	r3,0(r22)
1000d874:	003d9906 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d878:	d9002217 	ldw	r4,136(sp)
1000d87c:	d8001d85 	stb	zero,118(sp)
1000d880:	20c00204 	addi	r3,r4,8
1000d884:	24c00017 	ldw	r19,0(r4)
1000d888:	25000117 	ldw	r20,4(r4)
1000d88c:	8001e716 	blt	r16,zero,1000e02c <___vfiprintf_internal_r+0x12c4>
1000d890:	013fdfc4 	movi	r4,-129
1000d894:	9d04b03a 	or	r2,r19,r20
1000d898:	d8c02215 	stw	r3,136(sp)
1000d89c:	8922703a 	and	r17,r17,r4
1000d8a0:	002b883a 	mov	r21,zero
1000d8a4:	103f2f1e 	bne	r2,zero,1000d564 <__alt_data_end+0xf800d564>
1000d8a8:	803e2f26 	beq	r16,zero,1000d168 <__alt_data_end+0xf800d168>
1000d8ac:	0027883a 	mov	r19,zero
1000d8b0:	9cc00c04 	addi	r19,r19,48
1000d8b4:	dcc019c5 	stb	r19,103(sp)
1000d8b8:	dd002817 	ldw	r20,160(sp)
1000d8bc:	ddc019c4 	addi	r23,sp,103
1000d8c0:	003e2c06 	br	1000d174 <__alt_data_end+0xf800d174>
1000d8c4:	9cc03fcc 	andi	r19,r19,255
1000d8c8:	b811883a 	mov	r8,r23
1000d8cc:	9802571e 	bne	r19,zero,1000e22c <___vfiprintf_internal_r+0x14c4>
1000d8d0:	18005726 	beq	r3,zero,1000da30 <___vfiprintf_internal_r+0xcc8>
1000d8d4:	04c00044 	movi	r19,1
1000d8d8:	d8c01005 	stb	r3,64(sp)
1000d8dc:	d8001d85 	stb	zero,118(sp)
1000d8e0:	9829883a 	mov	r20,r19
1000d8e4:	ddc01004 	addi	r23,sp,64
1000d8e8:	003f0a06 	br	1000d514 <__alt_data_end+0xf800d514>
1000d8ec:	d9402017 	ldw	r5,128(sp)
1000d8f0:	d9002117 	ldw	r4,132(sp)
1000d8f4:	d9801a04 	addi	r6,sp,104
1000d8f8:	da802a15 	stw	r10,168(sp)
1000d8fc:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000d900:	da802a17 	ldw	r10,168(sp)
1000d904:	1000501e 	bne	r2,zero,1000da48 <___vfiprintf_internal_r+0xce0>
1000d908:	d9801b17 	ldw	r6,108(sp)
1000d90c:	d8801c17 	ldw	r2,112(sp)
1000d910:	d811883a 	mov	r8,sp
1000d914:	31000044 	addi	r4,r6,1
1000d918:	003e3606 	br	1000d1f4 <__alt_data_end+0xf800d1f4>
1000d91c:	d9001b17 	ldw	r4,108(sp)
1000d920:	d8801c17 	ldw	r2,112(sp)
1000d924:	21400044 	addi	r5,r4,1
1000d928:	d9801d87 	ldb	r6,118(sp)
1000d92c:	303e5226 	beq	r6,zero,1000d278 <__alt_data_end+0xf800d278>
1000d930:	01800044 	movi	r6,1
1000d934:	d9001d84 	addi	r4,sp,118
1000d938:	1185883a 	add	r2,r2,r6
1000d93c:	41000015 	stw	r4,0(r8)
1000d940:	41800115 	stw	r6,4(r8)
1000d944:	d8801c15 	stw	r2,112(sp)
1000d948:	d9401b15 	stw	r5,108(sp)
1000d94c:	010001c4 	movi	r4,7
1000d950:	2140b00e 	bge	r4,r5,1000dc14 <___vfiprintf_internal_r+0xeac>
1000d954:	1000f61e 	bne	r2,zero,1000dd30 <___vfiprintf_internal_r+0xfc8>
1000d958:	3800b31e 	bne	r7,zero,1000dc28 <___vfiprintf_internal_r+0xec0>
1000d95c:	0009883a 	mov	r4,zero
1000d960:	300b883a 	mov	r5,r6
1000d964:	d811883a 	mov	r8,sp
1000d968:	01802004 	movi	r6,128
1000d96c:	19be5226 	beq	r3,r6,1000d2b8 <__alt_data_end+0xf800d2b8>
1000d970:	8521c83a 	sub	r16,r16,r20
1000d974:	043e790e 	bge	zero,r16,1000d35c <__alt_data_end+0xf800d35c>
1000d978:	05400404 	movi	r21,16
1000d97c:	ac01b00e 	bge	r21,r16,1000e040 <___vfiprintf_internal_r+0x12d8>
1000d980:	01440074 	movhi	r5,4097
1000d984:	29520f04 	addi	r5,r5,18492
1000d988:	d9402315 	stw	r5,140(sp)
1000d98c:	070001c4 	movi	fp,7
1000d990:	00000506 	br	1000d9a8 <___vfiprintf_internal_r+0xc40>
1000d994:	21400084 	addi	r5,r4,2
1000d998:	42000204 	addi	r8,r8,8
1000d99c:	1809883a 	mov	r4,r3
1000d9a0:	843ffc04 	addi	r16,r16,-16
1000d9a4:	ac000d0e 	bge	r21,r16,1000d9dc <___vfiprintf_internal_r+0xc74>
1000d9a8:	10800404 	addi	r2,r2,16
1000d9ac:	20c00044 	addi	r3,r4,1
1000d9b0:	44800015 	stw	r18,0(r8)
1000d9b4:	45400115 	stw	r21,4(r8)
1000d9b8:	d8801c15 	stw	r2,112(sp)
1000d9bc:	d8c01b15 	stw	r3,108(sp)
1000d9c0:	e0fff40e 	bge	fp,r3,1000d994 <__alt_data_end+0xf800d994>
1000d9c4:	1000101e 	bne	r2,zero,1000da08 <___vfiprintf_internal_r+0xca0>
1000d9c8:	843ffc04 	addi	r16,r16,-16
1000d9cc:	01400044 	movi	r5,1
1000d9d0:	0009883a 	mov	r4,zero
1000d9d4:	d811883a 	mov	r8,sp
1000d9d8:	ac3ff316 	blt	r21,r16,1000d9a8 <__alt_data_end+0xf800d9a8>
1000d9dc:	d8c02317 	ldw	r3,140(sp)
1000d9e0:	1405883a 	add	r2,r2,r16
1000d9e4:	44000115 	stw	r16,4(r8)
1000d9e8:	40c00015 	stw	r3,0(r8)
1000d9ec:	d8801c15 	stw	r2,112(sp)
1000d9f0:	d9401b15 	stw	r5,108(sp)
1000d9f4:	00c001c4 	movi	r3,7
1000d9f8:	19401916 	blt	r3,r5,1000da60 <___vfiprintf_internal_r+0xcf8>
1000d9fc:	42000204 	addi	r8,r8,8
1000da00:	29400044 	addi	r5,r5,1
1000da04:	003e5506 	br	1000d35c <__alt_data_end+0xf800d35c>
1000da08:	d9402017 	ldw	r5,128(sp)
1000da0c:	d9002117 	ldw	r4,132(sp)
1000da10:	d9801a04 	addi	r6,sp,104
1000da14:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000da18:	10000b1e 	bne	r2,zero,1000da48 <___vfiprintf_internal_r+0xce0>
1000da1c:	d9001b17 	ldw	r4,108(sp)
1000da20:	d8801c17 	ldw	r2,112(sp)
1000da24:	d811883a 	mov	r8,sp
1000da28:	21400044 	addi	r5,r4,1
1000da2c:	003fdc06 	br	1000d9a0 <__alt_data_end+0xf800d9a0>
1000da30:	d8801c17 	ldw	r2,112(sp)
1000da34:	10000426 	beq	r2,zero,1000da48 <___vfiprintf_internal_r+0xce0>
1000da38:	d9402017 	ldw	r5,128(sp)
1000da3c:	d9002117 	ldw	r4,132(sp)
1000da40:	d9801a04 	addi	r6,sp,104
1000da44:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000da48:	d9402017 	ldw	r5,128(sp)
1000da4c:	2880030b 	ldhu	r2,12(r5)
1000da50:	1080100c 	andi	r2,r2,64
1000da54:	10014d1e 	bne	r2,zero,1000df8c <___vfiprintf_internal_r+0x1224>
1000da58:	d8802417 	ldw	r2,144(sp)
1000da5c:	003d9706 	br	1000d0bc <__alt_data_end+0xf800d0bc>
1000da60:	1000d21e 	bne	r2,zero,1000ddac <___vfiprintf_internal_r+0x1044>
1000da64:	00c00044 	movi	r3,1
1000da68:	a005883a 	mov	r2,r20
1000da6c:	ddc00015 	stw	r23,0(sp)
1000da70:	dd000115 	stw	r20,4(sp)
1000da74:	dd001c15 	stw	r20,112(sp)
1000da78:	d8c01b15 	stw	r3,108(sp)
1000da7c:	d811883a 	mov	r8,sp
1000da80:	42000204 	addi	r8,r8,8
1000da84:	8c40010c 	andi	r17,r17,4
1000da88:	88004026 	beq	r17,zero,1000db8c <___vfiprintf_internal_r+0xe24>
1000da8c:	d9002517 	ldw	r4,148(sp)
1000da90:	24e3c83a 	sub	r17,r4,r19
1000da94:	04403d0e 	bge	zero,r17,1000db8c <___vfiprintf_internal_r+0xe24>
1000da98:	04000404 	movi	r16,16
1000da9c:	8441a90e 	bge	r16,r17,1000e144 <___vfiprintf_internal_r+0x13dc>
1000daa0:	00c40074 	movhi	r3,4097
1000daa4:	18d21304 	addi	r3,r3,18508
1000daa8:	d9001b17 	ldw	r4,108(sp)
1000daac:	d8c02315 	stw	r3,140(sp)
1000dab0:	050001c4 	movi	r20,7
1000dab4:	dd402117 	ldw	r21,132(sp)
1000dab8:	ddc02017 	ldw	r23,128(sp)
1000dabc:	00000506 	br	1000dad4 <___vfiprintf_internal_r+0xd6c>
1000dac0:	21400084 	addi	r5,r4,2
1000dac4:	42000204 	addi	r8,r8,8
1000dac8:	1809883a 	mov	r4,r3
1000dacc:	8c7ffc04 	addi	r17,r17,-16
1000dad0:	84400f0e 	bge	r16,r17,1000db10 <___vfiprintf_internal_r+0xda8>
1000dad4:	01440074 	movhi	r5,4097
1000dad8:	10800404 	addi	r2,r2,16
1000dadc:	20c00044 	addi	r3,r4,1
1000dae0:	29521304 	addi	r5,r5,18508
1000dae4:	41400015 	stw	r5,0(r8)
1000dae8:	44000115 	stw	r16,4(r8)
1000daec:	d8801c15 	stw	r2,112(sp)
1000daf0:	d8c01b15 	stw	r3,108(sp)
1000daf4:	a0fff20e 	bge	r20,r3,1000dac0 <__alt_data_end+0xf800dac0>
1000daf8:	1000141e 	bne	r2,zero,1000db4c <___vfiprintf_internal_r+0xde4>
1000dafc:	8c7ffc04 	addi	r17,r17,-16
1000db00:	01400044 	movi	r5,1
1000db04:	0009883a 	mov	r4,zero
1000db08:	d811883a 	mov	r8,sp
1000db0c:	847ff116 	blt	r16,r17,1000dad4 <__alt_data_end+0xf800dad4>
1000db10:	d8c02317 	ldw	r3,140(sp)
1000db14:	1445883a 	add	r2,r2,r17
1000db18:	44400115 	stw	r17,4(r8)
1000db1c:	40c00015 	stw	r3,0(r8)
1000db20:	d8801c15 	stw	r2,112(sp)
1000db24:	d9401b15 	stw	r5,108(sp)
1000db28:	00c001c4 	movi	r3,7
1000db2c:	1940170e 	bge	r3,r5,1000db8c <___vfiprintf_internal_r+0xe24>
1000db30:	1000101e 	bne	r2,zero,1000db74 <___vfiprintf_internal_r+0xe0c>
1000db34:	d8802517 	ldw	r2,148(sp)
1000db38:	14c11616 	blt	r2,r19,1000df94 <___vfiprintf_internal_r+0x122c>
1000db3c:	d9002417 	ldw	r4,144(sp)
1000db40:	2089883a 	add	r4,r4,r2
1000db44:	d9002415 	stw	r4,144(sp)
1000db48:	003e1806 	br	1000d3ac <__alt_data_end+0xf800d3ac>
1000db4c:	d9801a04 	addi	r6,sp,104
1000db50:	b80b883a 	mov	r5,r23
1000db54:	a809883a 	mov	r4,r21
1000db58:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000db5c:	103fba1e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000db60:	d9001b17 	ldw	r4,108(sp)
1000db64:	d8801c17 	ldw	r2,112(sp)
1000db68:	d811883a 	mov	r8,sp
1000db6c:	21400044 	addi	r5,r4,1
1000db70:	003fd606 	br	1000dacc <__alt_data_end+0xf800dacc>
1000db74:	d9402017 	ldw	r5,128(sp)
1000db78:	d9002117 	ldw	r4,132(sp)
1000db7c:	d9801a04 	addi	r6,sp,104
1000db80:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000db84:	103fb01e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000db88:	d8801c17 	ldw	r2,112(sp)
1000db8c:	d8c02517 	ldw	r3,148(sp)
1000db90:	1cc0010e 	bge	r3,r19,1000db98 <___vfiprintf_internal_r+0xe30>
1000db94:	9807883a 	mov	r3,r19
1000db98:	d9002417 	ldw	r4,144(sp)
1000db9c:	20c9883a 	add	r4,r4,r3
1000dba0:	d9002415 	stw	r4,144(sp)
1000dba4:	103e0126 	beq	r2,zero,1000d3ac <__alt_data_end+0xf800d3ac>
1000dba8:	d9402017 	ldw	r5,128(sp)
1000dbac:	d9002117 	ldw	r4,132(sp)
1000dbb0:	d9801a04 	addi	r6,sp,104
1000dbb4:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000dbb8:	103dfc26 	beq	r2,zero,1000d3ac <__alt_data_end+0xf800d3ac>
1000dbbc:	003fa206 	br	1000da48 <__alt_data_end+0xf800da48>
1000dbc0:	d9402017 	ldw	r5,128(sp)
1000dbc4:	d9002117 	ldw	r4,132(sp)
1000dbc8:	d9801a04 	addi	r6,sp,104
1000dbcc:	d9c02b15 	stw	r7,172(sp)
1000dbd0:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000dbd4:	d9c02b17 	ldw	r7,172(sp)
1000dbd8:	103f9b1e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000dbdc:	d9001b17 	ldw	r4,108(sp)
1000dbe0:	d8801c17 	ldw	r2,112(sp)
1000dbe4:	d811883a 	mov	r8,sp
1000dbe8:	21800044 	addi	r6,r4,1
1000dbec:	003dbf06 	br	1000d2ec <__alt_data_end+0xf800d2ec>
1000dbf0:	1000d81e 	bne	r2,zero,1000df54 <___vfiprintf_internal_r+0x11ec>
1000dbf4:	d9001d87 	ldb	r4,118(sp)
1000dbf8:	20000a26 	beq	r4,zero,1000dc24 <___vfiprintf_internal_r+0xebc>
1000dbfc:	00800044 	movi	r2,1
1000dc00:	d9001d84 	addi	r4,sp,118
1000dc04:	100b883a 	mov	r5,r2
1000dc08:	d9000015 	stw	r4,0(sp)
1000dc0c:	d8800115 	stw	r2,4(sp)
1000dc10:	d811883a 	mov	r8,sp
1000dc14:	2809883a 	mov	r4,r5
1000dc18:	42000204 	addi	r8,r8,8
1000dc1c:	29400044 	addi	r5,r5,1
1000dc20:	003d9506 	br	1000d278 <__alt_data_end+0xf800d278>
1000dc24:	3800fd26 	beq	r7,zero,1000e01c <___vfiprintf_internal_r+0x12b4>
1000dc28:	00800084 	movi	r2,2
1000dc2c:	d9001d04 	addi	r4,sp,116
1000dc30:	d9000015 	stw	r4,0(sp)
1000dc34:	d8800115 	stw	r2,4(sp)
1000dc38:	01400044 	movi	r5,1
1000dc3c:	d811883a 	mov	r8,sp
1000dc40:	2809883a 	mov	r4,r5
1000dc44:	42000204 	addi	r8,r8,8
1000dc48:	29400044 	addi	r5,r5,1
1000dc4c:	003f4606 	br	1000d968 <__alt_data_end+0xf800d968>
1000dc50:	d8802517 	ldw	r2,148(sp)
1000dc54:	14c0010e 	bge	r2,r19,1000dc5c <___vfiprintf_internal_r+0xef4>
1000dc58:	9805883a 	mov	r2,r19
1000dc5c:	d9402417 	ldw	r5,144(sp)
1000dc60:	288b883a 	add	r5,r5,r2
1000dc64:	d9402415 	stw	r5,144(sp)
1000dc68:	003dd006 	br	1000d3ac <__alt_data_end+0xf800d3ac>
1000dc6c:	d8001d85 	stb	zero,118(sp)
1000dc70:	80005d16 	blt	r16,zero,1000dde8 <___vfiprintf_internal_r+0x1080>
1000dc74:	00ffdfc4 	movi	r3,-129
1000dc78:	9d04b03a 	or	r2,r19,r20
1000dc7c:	88e2703a 	and	r17,r17,r3
1000dc80:	103d3726 	beq	r2,zero,1000d160 <__alt_data_end+0xf800d160>
1000dc84:	002b883a 	mov	r21,zero
1000dc88:	d9002617 	ldw	r4,152(sp)
1000dc8c:	ddc01a04 	addi	r23,sp,104
1000dc90:	988003cc 	andi	r2,r19,15
1000dc94:	a006973a 	slli	r3,r20,28
1000dc98:	2085883a 	add	r2,r4,r2
1000dc9c:	9826d13a 	srli	r19,r19,4
1000dca0:	10800003 	ldbu	r2,0(r2)
1000dca4:	a028d13a 	srli	r20,r20,4
1000dca8:	bdffffc4 	addi	r23,r23,-1
1000dcac:	1ce6b03a 	or	r19,r3,r19
1000dcb0:	b8800005 	stb	r2,0(r23)
1000dcb4:	9d04b03a 	or	r2,r19,r20
1000dcb8:	103ff51e 	bne	r2,zero,1000dc90 <__alt_data_end+0xf800dc90>
1000dcbc:	d8801e17 	ldw	r2,120(sp)
1000dcc0:	15e9c83a 	sub	r20,r2,r23
1000dcc4:	003d2b06 	br	1000d174 <__alt_data_end+0xf800d174>
1000dcc8:	d9402017 	ldw	r5,128(sp)
1000dccc:	d9002117 	ldw	r4,132(sp)
1000dcd0:	d9801a04 	addi	r6,sp,104
1000dcd4:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000dcd8:	103f5b1e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000dcdc:	d8801c17 	ldw	r2,112(sp)
1000dce0:	d811883a 	mov	r8,sp
1000dce4:	003f6706 	br	1000da84 <__alt_data_end+0xf800da84>
1000dce8:	d9402017 	ldw	r5,128(sp)
1000dcec:	d9002117 	ldw	r4,132(sp)
1000dcf0:	d9801a04 	addi	r6,sp,104
1000dcf4:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000dcf8:	103f531e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000dcfc:	d811883a 	mov	r8,sp
1000dd00:	003cd906 	br	1000d068 <__alt_data_end+0xf800d068>
1000dd04:	10803fcc 	andi	r2,r2,255
1000dd08:	1080201c 	xori	r2,r2,128
1000dd0c:	10bfe004 	addi	r2,r2,-128
1000dd10:	00c00c04 	movi	r3,48
1000dd14:	10ffe926 	beq	r2,r3,1000dcbc <__alt_data_end+0xf800dcbc>
1000dd18:	b8ffffc5 	stb	r3,-1(r23)
1000dd1c:	d8c01e17 	ldw	r3,120(sp)
1000dd20:	b8bfffc4 	addi	r2,r23,-1
1000dd24:	102f883a 	mov	r23,r2
1000dd28:	18a9c83a 	sub	r20,r3,r2
1000dd2c:	003d1106 	br	1000d174 <__alt_data_end+0xf800d174>
1000dd30:	d9402017 	ldw	r5,128(sp)
1000dd34:	d9002117 	ldw	r4,132(sp)
1000dd38:	d9801a04 	addi	r6,sp,104
1000dd3c:	d8c02a15 	stw	r3,168(sp)
1000dd40:	d9c02b15 	stw	r7,172(sp)
1000dd44:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000dd48:	d8c02a17 	ldw	r3,168(sp)
1000dd4c:	d9c02b17 	ldw	r7,172(sp)
1000dd50:	103f3d1e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000dd54:	d9001b17 	ldw	r4,108(sp)
1000dd58:	d8801c17 	ldw	r2,112(sp)
1000dd5c:	d811883a 	mov	r8,sp
1000dd60:	21400044 	addi	r5,r4,1
1000dd64:	003d4406 	br	1000d278 <__alt_data_end+0xf800d278>
1000dd68:	d9402017 	ldw	r5,128(sp)
1000dd6c:	d9002117 	ldw	r4,132(sp)
1000dd70:	d9801a04 	addi	r6,sp,104
1000dd74:	d8c02a15 	stw	r3,168(sp)
1000dd78:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000dd7c:	d8c02a17 	ldw	r3,168(sp)
1000dd80:	103f311e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000dd84:	d9001b17 	ldw	r4,108(sp)
1000dd88:	d8801c17 	ldw	r2,112(sp)
1000dd8c:	d811883a 	mov	r8,sp
1000dd90:	21400044 	addi	r5,r4,1
1000dd94:	003ef406 	br	1000d968 <__alt_data_end+0xf800d968>
1000dd98:	1000bd1e 	bne	r2,zero,1000e090 <___vfiprintf_internal_r+0x1328>
1000dd9c:	01400044 	movi	r5,1
1000dda0:	0009883a 	mov	r4,zero
1000dda4:	d811883a 	mov	r8,sp
1000dda8:	003ef106 	br	1000d970 <__alt_data_end+0xf800d970>
1000ddac:	d9402017 	ldw	r5,128(sp)
1000ddb0:	d9002117 	ldw	r4,132(sp)
1000ddb4:	d9801a04 	addi	r6,sp,104
1000ddb8:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000ddbc:	103f221e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000ddc0:	d9401b17 	ldw	r5,108(sp)
1000ddc4:	d8801c17 	ldw	r2,112(sp)
1000ddc8:	d811883a 	mov	r8,sp
1000ddcc:	29400044 	addi	r5,r5,1
1000ddd0:	003d6206 	br	1000d35c <__alt_data_end+0xf800d35c>
1000ddd4:	01440074 	movhi	r5,4097
1000ddd8:	2951af04 	addi	r5,r5,18108
1000dddc:	d9402615 	stw	r5,152(sp)
1000dde0:	d8c02215 	stw	r3,136(sp)
1000dde4:	1023883a 	mov	r17,r2
1000dde8:	9d04b03a 	or	r2,r19,r20
1000ddec:	103fa51e 	bne	r2,zero,1000dc84 <__alt_data_end+0xf800dc84>
1000ddf0:	002b883a 	mov	r21,zero
1000ddf4:	00800084 	movi	r2,2
1000ddf8:	003e4a06 	br	1000d724 <__alt_data_end+0xf800d724>
1000ddfc:	01440074 	movhi	r5,4097
1000de00:	2951af04 	addi	r5,r5,18108
1000de04:	002b883a 	mov	r21,zero
1000de08:	d9402615 	stw	r5,152(sp)
1000de0c:	003f9e06 	br	1000dc88 <__alt_data_end+0xf800dc88>
1000de10:	d9402217 	ldw	r5,136(sp)
1000de14:	d8001d85 	stb	zero,118(sp)
1000de18:	0029883a 	mov	r20,zero
1000de1c:	28800104 	addi	r2,r5,4
1000de20:	2cc00017 	ldw	r19,0(r5)
1000de24:	803e3a16 	blt	r16,zero,1000d710 <__alt_data_end+0xf800d710>
1000de28:	00ffdfc4 	movi	r3,-129
1000de2c:	d8802215 	stw	r2,136(sp)
1000de30:	88e2703a 	and	r17,r17,r3
1000de34:	002b883a 	mov	r21,zero
1000de38:	983e9b26 	beq	r19,zero,1000d8a8 <__alt_data_end+0xf800d8a8>
1000de3c:	00800244 	movi	r2,9
1000de40:	14fdc936 	bltu	r2,r19,1000d568 <__alt_data_end+0xf800d568>
1000de44:	003e9a06 	br	1000d8b0 <__alt_data_end+0xf800d8b0>
1000de48:	00800c04 	movi	r2,48
1000de4c:	d8c01d45 	stb	r3,117(sp)
1000de50:	d8801d05 	stb	r2,116(sp)
1000de54:	d8001d85 	stb	zero,118(sp)
1000de58:	88c00094 	ori	r3,r17,2
1000de5c:	80009c16 	blt	r16,zero,1000e0d0 <___vfiprintf_internal_r+0x1368>
1000de60:	00bfdfc4 	movi	r2,-129
1000de64:	88a2703a 	and	r17,r17,r2
1000de68:	8c400094 	ori	r17,r17,2
1000de6c:	002b883a 	mov	r21,zero
1000de70:	003f8506 	br	1000dc88 <__alt_data_end+0xf800dc88>
1000de74:	b029883a 	mov	r20,r22
1000de78:	003c0b06 	br	1000cea8 <__alt_data_end+0xf800cea8>
1000de7c:	04e7c83a 	sub	r19,zero,r19
1000de80:	05400b44 	movi	r21,45
1000de84:	9804c03a 	cmpne	r2,r19,zero
1000de88:	0529c83a 	sub	r20,zero,r20
1000de8c:	dd401d85 	stb	r21,118(sp)
1000de90:	a0a9c83a 	sub	r20,r20,r2
1000de94:	80009716 	blt	r16,zero,1000e0f4 <___vfiprintf_internal_r+0x138c>
1000de98:	00bfdfc4 	movi	r2,-129
1000de9c:	88a2703a 	and	r17,r17,r2
1000dea0:	003db006 	br	1000d564 <__alt_data_end+0xf800d564>
1000dea4:	b0c00007 	ldb	r3,0(r22)
1000dea8:	003c0c06 	br	1000cedc <__alt_data_end+0xf800cedc>
1000deac:	8880100c 	andi	r2,r17,64
1000deb0:	d8001d85 	stb	zero,118(sp)
1000deb4:	1000461e 	bne	r2,zero,1000dfd0 <___vfiprintf_internal_r+0x1268>
1000deb8:	d9002217 	ldw	r4,136(sp)
1000debc:	0029883a 	mov	r20,zero
1000dec0:	20800104 	addi	r2,r4,4
1000dec4:	24c00017 	ldw	r19,0(r4)
1000dec8:	803df80e 	bge	r16,zero,1000d6ac <__alt_data_end+0xf800d6ac>
1000decc:	9d06b03a 	or	r3,r19,r20
1000ded0:	d8802215 	stw	r2,136(sp)
1000ded4:	183d5e1e 	bne	r3,zero,1000d450 <__alt_data_end+0xf800d450>
1000ded8:	002b883a 	mov	r21,zero
1000dedc:	0005883a 	mov	r2,zero
1000dee0:	003e1006 	br	1000d724 <__alt_data_end+0xf800d724>
1000dee4:	8880040c 	andi	r2,r17,16
1000dee8:	1000321e 	bne	r2,zero,1000dfb4 <___vfiprintf_internal_r+0x124c>
1000deec:	8c40100c 	andi	r17,r17,64
1000def0:	88008d26 	beq	r17,zero,1000e128 <___vfiprintf_internal_r+0x13c0>
1000def4:	d9402217 	ldw	r5,136(sp)
1000def8:	d8c02417 	ldw	r3,144(sp)
1000defc:	28800017 	ldw	r2,0(r5)
1000df00:	29400104 	addi	r5,r5,4
1000df04:	d9402215 	stw	r5,136(sp)
1000df08:	10c0000d 	sth	r3,0(r2)
1000df0c:	003bca06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000df10:	8880100c 	andi	r2,r17,64
1000df14:	10003a26 	beq	r2,zero,1000e000 <___vfiprintf_internal_r+0x1298>
1000df18:	d8802217 	ldw	r2,136(sp)
1000df1c:	14c0000f 	ldh	r19,0(r2)
1000df20:	10800104 	addi	r2,r2,4
1000df24:	d8802215 	stw	r2,136(sp)
1000df28:	9829d7fa 	srai	r20,r19,31
1000df2c:	a005883a 	mov	r2,r20
1000df30:	003d8506 	br	1000d548 <__alt_data_end+0xf800d548>
1000df34:	8880100c 	andi	r2,r17,64
1000df38:	10002b26 	beq	r2,zero,1000dfe8 <___vfiprintf_internal_r+0x1280>
1000df3c:	d8802217 	ldw	r2,136(sp)
1000df40:	0029883a 	mov	r20,zero
1000df44:	14c0000b 	ldhu	r19,0(r2)
1000df48:	10800104 	addi	r2,r2,4
1000df4c:	d8802215 	stw	r2,136(sp)
1000df50:	003d5d06 	br	1000d4c8 <__alt_data_end+0xf800d4c8>
1000df54:	d9402017 	ldw	r5,128(sp)
1000df58:	d9002117 	ldw	r4,132(sp)
1000df5c:	d9801a04 	addi	r6,sp,104
1000df60:	d8c02a15 	stw	r3,168(sp)
1000df64:	d9c02b15 	stw	r7,172(sp)
1000df68:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000df6c:	d8c02a17 	ldw	r3,168(sp)
1000df70:	d9c02b17 	ldw	r7,172(sp)
1000df74:	103eb41e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000df78:	d9001b17 	ldw	r4,108(sp)
1000df7c:	d8801c17 	ldw	r2,112(sp)
1000df80:	d811883a 	mov	r8,sp
1000df84:	21400044 	addi	r5,r4,1
1000df88:	003e6706 	br	1000d928 <__alt_data_end+0xf800d928>
1000df8c:	00bfffc4 	movi	r2,-1
1000df90:	003c4a06 	br	1000d0bc <__alt_data_end+0xf800d0bc>
1000df94:	9805883a 	mov	r2,r19
1000df98:	003ee806 	br	1000db3c <__alt_data_end+0xf800db3c>
1000df9c:	d8c02217 	ldw	r3,136(sp)
1000dfa0:	0029883a 	mov	r20,zero
1000dfa4:	18800104 	addi	r2,r3,4
1000dfa8:	1cc0000b 	ldhu	r19,0(r3)
1000dfac:	803f9e0e 	bge	r16,zero,1000de28 <__alt_data_end+0xf800de28>
1000dfb0:	003dd706 	br	1000d710 <__alt_data_end+0xf800d710>
1000dfb4:	d8c02217 	ldw	r3,136(sp)
1000dfb8:	d9002417 	ldw	r4,144(sp)
1000dfbc:	18800017 	ldw	r2,0(r3)
1000dfc0:	18c00104 	addi	r3,r3,4
1000dfc4:	d8c02215 	stw	r3,136(sp)
1000dfc8:	11000015 	stw	r4,0(r2)
1000dfcc:	003b9a06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000dfd0:	d8c02217 	ldw	r3,136(sp)
1000dfd4:	0029883a 	mov	r20,zero
1000dfd8:	18800104 	addi	r2,r3,4
1000dfdc:	1cc0000b 	ldhu	r19,0(r3)
1000dfe0:	803db20e 	bge	r16,zero,1000d6ac <__alt_data_end+0xf800d6ac>
1000dfe4:	003fb906 	br	1000decc <__alt_data_end+0xf800decc>
1000dfe8:	d9002217 	ldw	r4,136(sp)
1000dfec:	0029883a 	mov	r20,zero
1000dff0:	24c00017 	ldw	r19,0(r4)
1000dff4:	21000104 	addi	r4,r4,4
1000dff8:	d9002215 	stw	r4,136(sp)
1000dffc:	003d3206 	br	1000d4c8 <__alt_data_end+0xf800d4c8>
1000e000:	d8c02217 	ldw	r3,136(sp)
1000e004:	1cc00017 	ldw	r19,0(r3)
1000e008:	18c00104 	addi	r3,r3,4
1000e00c:	d8c02215 	stw	r3,136(sp)
1000e010:	9829d7fa 	srai	r20,r19,31
1000e014:	a005883a 	mov	r2,r20
1000e018:	003d4b06 	br	1000d548 <__alt_data_end+0xf800d548>
1000e01c:	0009883a 	mov	r4,zero
1000e020:	01400044 	movi	r5,1
1000e024:	d811883a 	mov	r8,sp
1000e028:	003e4f06 	br	1000d968 <__alt_data_end+0xf800d968>
1000e02c:	d8c02215 	stw	r3,136(sp)
1000e030:	002b883a 	mov	r21,zero
1000e034:	003db806 	br	1000d718 <__alt_data_end+0xf800d718>
1000e038:	d811883a 	mov	r8,sp
1000e03c:	003e9606 	br	1000da98 <__alt_data_end+0xf800da98>
1000e040:	01040074 	movhi	r4,4097
1000e044:	21120f04 	addi	r4,r4,18492
1000e048:	d9002315 	stw	r4,140(sp)
1000e04c:	003e6306 	br	1000d9dc <__alt_data_end+0xf800d9dc>
1000e050:	b0c00043 	ldbu	r3,1(r22)
1000e054:	8c400814 	ori	r17,r17,32
1000e058:	b5800044 	addi	r22,r22,1
1000e05c:	18c03fcc 	andi	r3,r3,255
1000e060:	18c0201c 	xori	r3,r3,128
1000e064:	18ffe004 	addi	r3,r3,-128
1000e068:	003b9c06 	br	1000cedc <__alt_data_end+0xf800cedc>
1000e06c:	b809883a 	mov	r4,r23
1000e070:	da002a15 	stw	r8,168(sp)
1000e074:	00054d00 	call	100054d0 <strlen>
1000e078:	1029883a 	mov	r20,r2
1000e07c:	dd401d83 	ldbu	r21,118(sp)
1000e080:	df002215 	stw	fp,136(sp)
1000e084:	0021883a 	mov	r16,zero
1000e088:	da002a17 	ldw	r8,168(sp)
1000e08c:	003c3906 	br	1000d174 <__alt_data_end+0xf800d174>
1000e090:	d9402017 	ldw	r5,128(sp)
1000e094:	d9002117 	ldw	r4,132(sp)
1000e098:	d9801a04 	addi	r6,sp,104
1000e09c:	000cc540 	call	1000cc54 <__sprint_r.part.0>
1000e0a0:	103e691e 	bne	r2,zero,1000da48 <__alt_data_end+0xf800da48>
1000e0a4:	d9001b17 	ldw	r4,108(sp)
1000e0a8:	d8801c17 	ldw	r2,112(sp)
1000e0ac:	d811883a 	mov	r8,sp
1000e0b0:	21400044 	addi	r5,r4,1
1000e0b4:	003e2e06 	br	1000d970 <__alt_data_end+0xf800d970>
1000e0b8:	01040074 	movhi	r4,4097
1000e0bc:	21121304 	addi	r4,r4,18508
1000e0c0:	d9002315 	stw	r4,140(sp)
1000e0c4:	d9001b17 	ldw	r4,108(sp)
1000e0c8:	21000044 	addi	r4,r4,1
1000e0cc:	003c5e06 	br	1000d248 <__alt_data_end+0xf800d248>
1000e0d0:	002b883a 	mov	r21,zero
1000e0d4:	00800084 	movi	r2,2
1000e0d8:	10803fcc 	andi	r2,r2,255
1000e0dc:	01000044 	movi	r4,1
1000e0e0:	11002b26 	beq	r2,r4,1000e190 <___vfiprintf_internal_r+0x1428>
1000e0e4:	01000084 	movi	r4,2
1000e0e8:	11002b1e 	bne	r2,r4,1000e198 <___vfiprintf_internal_r+0x1430>
1000e0ec:	1823883a 	mov	r17,r3
1000e0f0:	003ee506 	br	1000dc88 <__alt_data_end+0xf800dc88>
1000e0f4:	8807883a 	mov	r3,r17
1000e0f8:	00800044 	movi	r2,1
1000e0fc:	003ff606 	br	1000e0d8 <__alt_data_end+0xf800e0d8>
1000e100:	00800184 	movi	r2,6
1000e104:	1400012e 	bgeu	r2,r16,1000e10c <___vfiprintf_internal_r+0x13a4>
1000e108:	1021883a 	mov	r16,r2
1000e10c:	8029883a 	mov	r20,r16
1000e110:	8027883a 	mov	r19,r16
1000e114:	80002216 	blt	r16,zero,1000e1a0 <___vfiprintf_internal_r+0x1438>
1000e118:	05c40074 	movhi	r23,4097
1000e11c:	df002215 	stw	fp,136(sp)
1000e120:	bdd1b404 	addi	r23,r23,18128
1000e124:	003cfb06 	br	1000d514 <__alt_data_end+0xf800d514>
1000e128:	d9002217 	ldw	r4,136(sp)
1000e12c:	d9402417 	ldw	r5,144(sp)
1000e130:	20800017 	ldw	r2,0(r4)
1000e134:	21000104 	addi	r4,r4,4
1000e138:	d9002215 	stw	r4,136(sp)
1000e13c:	11400015 	stw	r5,0(r2)
1000e140:	003b3d06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000e144:	01440074 	movhi	r5,4097
1000e148:	29521304 	addi	r5,r5,18508
1000e14c:	d9402315 	stw	r5,140(sp)
1000e150:	d9401b17 	ldw	r5,108(sp)
1000e154:	29400044 	addi	r5,r5,1
1000e158:	003e6d06 	br	1000db10 <__alt_data_end+0xf800db10>
1000e15c:	8029883a 	mov	r20,r16
1000e160:	dd401d83 	ldbu	r21,118(sp)
1000e164:	df002215 	stw	fp,136(sp)
1000e168:	0021883a 	mov	r16,zero
1000e16c:	003c0106 	br	1000d174 <__alt_data_end+0xf800d174>
1000e170:	00c40074 	movhi	r3,4097
1000e174:	18d20f04 	addi	r3,r3,18492
1000e178:	d8c02315 	stw	r3,140(sp)
1000e17c:	280d883a 	mov	r6,r5
1000e180:	003c6906 	br	1000d328 <__alt_data_end+0xf800d328>
1000e184:	802d883a 	mov	r22,r16
1000e188:	0021883a 	mov	r16,zero
1000e18c:	003b5406 	br	1000cee0 <__alt_data_end+0xf800cee0>
1000e190:	1823883a 	mov	r17,r3
1000e194:	003cf306 	br	1000d564 <__alt_data_end+0xf800d564>
1000e198:	1823883a 	mov	r17,r3
1000e19c:	003cad06 	br	1000d454 <__alt_data_end+0xf800d454>
1000e1a0:	0027883a 	mov	r19,zero
1000e1a4:	003fdc06 	br	1000e118 <__alt_data_end+0xf800e118>
1000e1a8:	d9402217 	ldw	r5,136(sp)
1000e1ac:	8005883a 	mov	r2,r16
1000e1b0:	b0c00043 	ldbu	r3,1(r22)
1000e1b4:	2c000017 	ldw	r16,0(r5)
1000e1b8:	29000104 	addi	r4,r5,4
1000e1bc:	d9002215 	stw	r4,136(sp)
1000e1c0:	102d883a 	mov	r22,r2
1000e1c4:	803fa50e 	bge	r16,zero,1000e05c <__alt_data_end+0xf800e05c>
1000e1c8:	18c03fcc 	andi	r3,r3,255
1000e1cc:	18c0201c 	xori	r3,r3,128
1000e1d0:	043fffc4 	movi	r16,-1
1000e1d4:	18ffe004 	addi	r3,r3,-128
1000e1d8:	003b4006 	br	1000cedc <__alt_data_end+0xf800cedc>
1000e1dc:	d9402303 	ldbu	r5,140(sp)
1000e1e0:	d9401d85 	stb	r5,118(sp)
1000e1e4:	003cae06 	br	1000d4a0 <__alt_data_end+0xf800d4a0>
1000e1e8:	d8c02303 	ldbu	r3,140(sp)
1000e1ec:	d8c01d85 	stb	r3,118(sp)
1000e1f0:	003d1406 	br	1000d644 <__alt_data_end+0xf800d644>
1000e1f4:	d8c02303 	ldbu	r3,140(sp)
1000e1f8:	d8c01d85 	stb	r3,118(sp)
1000e1fc:	003cca06 	br	1000d528 <__alt_data_end+0xf800d528>
1000e200:	8880004c 	andi	r2,r17,1
1000e204:	002b883a 	mov	r21,zero
1000e208:	10000526 	beq	r2,zero,1000e220 <___vfiprintf_internal_r+0x14b8>
1000e20c:	00800c04 	movi	r2,48
1000e210:	d88019c5 	stb	r2,103(sp)
1000e214:	dd002817 	ldw	r20,160(sp)
1000e218:	ddc019c4 	addi	r23,sp,103
1000e21c:	003bd506 	br	1000d174 <__alt_data_end+0xf800d174>
1000e220:	0029883a 	mov	r20,zero
1000e224:	ddc01a04 	addi	r23,sp,104
1000e228:	003bd206 	br	1000d174 <__alt_data_end+0xf800d174>
1000e22c:	d9002303 	ldbu	r4,140(sp)
1000e230:	d9001d85 	stb	r4,118(sp)
1000e234:	003da606 	br	1000d8d0 <__alt_data_end+0xf800d8d0>
1000e238:	d8c02303 	ldbu	r3,140(sp)
1000e23c:	d8c01d85 	stb	r3,118(sp)
1000e240:	003c7606 	br	1000d41c <__alt_data_end+0xf800d41c>
1000e244:	d8c02303 	ldbu	r3,140(sp)
1000e248:	d8c01d85 	stb	r3,118(sp)
1000e24c:	003c6506 	br	1000d3e4 <__alt_data_end+0xf800d3e4>
1000e250:	d9002303 	ldbu	r4,140(sp)
1000e254:	d9001d85 	stb	r4,118(sp)
1000e258:	003d3d06 	br	1000d750 <__alt_data_end+0xf800d750>
1000e25c:	d8c02303 	ldbu	r3,140(sp)
1000e260:	d8c01d85 	stb	r3,118(sp)
1000e264:	003d1d06 	br	1000d6dc <__alt_data_end+0xf800d6dc>
1000e268:	d8c02303 	ldbu	r3,140(sp)
1000e26c:	d8c01d85 	stb	r3,118(sp)
1000e270:	003d0306 	br	1000d680 <__alt_data_end+0xf800d680>

1000e274 <__vfiprintf_internal>:
1000e274:	00840074 	movhi	r2,4097
1000e278:	1098d104 	addi	r2,r2,25412
1000e27c:	300f883a 	mov	r7,r6
1000e280:	280d883a 	mov	r6,r5
1000e284:	200b883a 	mov	r5,r4
1000e288:	11000017 	ldw	r4,0(r2)
1000e28c:	000cd681 	jmpi	1000cd68 <___vfiprintf_internal_r>

1000e290 <__sbprintf>:
1000e290:	2880030b 	ldhu	r2,12(r5)
1000e294:	2ac01917 	ldw	r11,100(r5)
1000e298:	2a80038b 	ldhu	r10,14(r5)
1000e29c:	2a400717 	ldw	r9,28(r5)
1000e2a0:	2a000917 	ldw	r8,36(r5)
1000e2a4:	defee204 	addi	sp,sp,-1144
1000e2a8:	00c10004 	movi	r3,1024
1000e2ac:	dc011a15 	stw	r16,1128(sp)
1000e2b0:	10bfff4c 	andi	r2,r2,65533
1000e2b4:	2821883a 	mov	r16,r5
1000e2b8:	d8cb883a 	add	r5,sp,r3
1000e2bc:	dc811c15 	stw	r18,1136(sp)
1000e2c0:	dc411b15 	stw	r17,1132(sp)
1000e2c4:	dfc11d15 	stw	ra,1140(sp)
1000e2c8:	2025883a 	mov	r18,r4
1000e2cc:	d881030d 	sth	r2,1036(sp)
1000e2d0:	dac11915 	stw	r11,1124(sp)
1000e2d4:	da81038d 	sth	r10,1038(sp)
1000e2d8:	da410715 	stw	r9,1052(sp)
1000e2dc:	da010915 	stw	r8,1060(sp)
1000e2e0:	dec10015 	stw	sp,1024(sp)
1000e2e4:	dec10415 	stw	sp,1040(sp)
1000e2e8:	d8c10215 	stw	r3,1032(sp)
1000e2ec:	d8c10515 	stw	r3,1044(sp)
1000e2f0:	d8010615 	stw	zero,1048(sp)
1000e2f4:	000cd680 	call	1000cd68 <___vfiprintf_internal_r>
1000e2f8:	1023883a 	mov	r17,r2
1000e2fc:	10000416 	blt	r2,zero,1000e310 <__sbprintf+0x80>
1000e300:	d9410004 	addi	r5,sp,1024
1000e304:	9009883a 	mov	r4,r18
1000e308:	00095440 	call	10009544 <_fflush_r>
1000e30c:	10000d1e 	bne	r2,zero,1000e344 <__sbprintf+0xb4>
1000e310:	d881030b 	ldhu	r2,1036(sp)
1000e314:	1080100c 	andi	r2,r2,64
1000e318:	10000326 	beq	r2,zero,1000e328 <__sbprintf+0x98>
1000e31c:	8080030b 	ldhu	r2,12(r16)
1000e320:	10801014 	ori	r2,r2,64
1000e324:	8080030d 	sth	r2,12(r16)
1000e328:	8805883a 	mov	r2,r17
1000e32c:	dfc11d17 	ldw	ra,1140(sp)
1000e330:	dc811c17 	ldw	r18,1136(sp)
1000e334:	dc411b17 	ldw	r17,1132(sp)
1000e338:	dc011a17 	ldw	r16,1128(sp)
1000e33c:	dec11e04 	addi	sp,sp,1144
1000e340:	f800283a 	ret
1000e344:	047fffc4 	movi	r17,-1
1000e348:	003ff106 	br	1000e310 <__alt_data_end+0xf800e310>

1000e34c <_write_r>:
1000e34c:	defffd04 	addi	sp,sp,-12
1000e350:	2805883a 	mov	r2,r5
1000e354:	dc000015 	stw	r16,0(sp)
1000e358:	04040074 	movhi	r16,4097
1000e35c:	dc400115 	stw	r17,4(sp)
1000e360:	300b883a 	mov	r5,r6
1000e364:	841faf04 	addi	r16,r16,32444
1000e368:	2023883a 	mov	r17,r4
1000e36c:	380d883a 	mov	r6,r7
1000e370:	1009883a 	mov	r4,r2
1000e374:	dfc00215 	stw	ra,8(sp)
1000e378:	80000015 	stw	zero,0(r16)
1000e37c:	0011ed40 	call	10011ed4 <write>
1000e380:	00ffffc4 	movi	r3,-1
1000e384:	10c00526 	beq	r2,r3,1000e39c <_write_r+0x50>
1000e388:	dfc00217 	ldw	ra,8(sp)
1000e38c:	dc400117 	ldw	r17,4(sp)
1000e390:	dc000017 	ldw	r16,0(sp)
1000e394:	dec00304 	addi	sp,sp,12
1000e398:	f800283a 	ret
1000e39c:	80c00017 	ldw	r3,0(r16)
1000e3a0:	183ff926 	beq	r3,zero,1000e388 <__alt_data_end+0xf800e388>
1000e3a4:	88c00015 	stw	r3,0(r17)
1000e3a8:	003ff706 	br	1000e388 <__alt_data_end+0xf800e388>

1000e3ac <_close_r>:
1000e3ac:	defffd04 	addi	sp,sp,-12
1000e3b0:	dc000015 	stw	r16,0(sp)
1000e3b4:	04040074 	movhi	r16,4097
1000e3b8:	dc400115 	stw	r17,4(sp)
1000e3bc:	841faf04 	addi	r16,r16,32444
1000e3c0:	2023883a 	mov	r17,r4
1000e3c4:	2809883a 	mov	r4,r5
1000e3c8:	dfc00215 	stw	ra,8(sp)
1000e3cc:	80000015 	stw	zero,0(r16)
1000e3d0:	00115980 	call	10011598 <close>
1000e3d4:	00ffffc4 	movi	r3,-1
1000e3d8:	10c00526 	beq	r2,r3,1000e3f0 <_close_r+0x44>
1000e3dc:	dfc00217 	ldw	ra,8(sp)
1000e3e0:	dc400117 	ldw	r17,4(sp)
1000e3e4:	dc000017 	ldw	r16,0(sp)
1000e3e8:	dec00304 	addi	sp,sp,12
1000e3ec:	f800283a 	ret
1000e3f0:	80c00017 	ldw	r3,0(r16)
1000e3f4:	183ff926 	beq	r3,zero,1000e3dc <__alt_data_end+0xf800e3dc>
1000e3f8:	88c00015 	stw	r3,0(r17)
1000e3fc:	003ff706 	br	1000e3dc <__alt_data_end+0xf800e3dc>

1000e400 <_calloc_r>:
1000e400:	defffe04 	addi	sp,sp,-8
1000e404:	2805883a 	mov	r2,r5
1000e408:	dc000015 	stw	r16,0(sp)
1000e40c:	300b883a 	mov	r5,r6
1000e410:	2021883a 	mov	r16,r4
1000e414:	1009883a 	mov	r4,r2
1000e418:	dfc00115 	stw	ra,4(sp)
1000e41c:	00052a00 	call	100052a0 <__mulsi3>
1000e420:	100b883a 	mov	r5,r2
1000e424:	8009883a 	mov	r4,r16
1000e428:	000a69c0 	call	1000a69c <_malloc_r>
1000e42c:	10002926 	beq	r2,zero,1000e4d4 <_calloc_r+0xd4>
1000e430:	11bfff17 	ldw	r6,-4(r2)
1000e434:	1021883a 	mov	r16,r2
1000e438:	00bfff04 	movi	r2,-4
1000e43c:	308c703a 	and	r6,r6,r2
1000e440:	00c00904 	movi	r3,36
1000e444:	308d883a 	add	r6,r6,r2
1000e448:	19801636 	bltu	r3,r6,1000e4a4 <_calloc_r+0xa4>
1000e44c:	008004c4 	movi	r2,19
1000e450:	11800b2e 	bgeu	r2,r6,1000e480 <_calloc_r+0x80>
1000e454:	80000015 	stw	zero,0(r16)
1000e458:	80000115 	stw	zero,4(r16)
1000e45c:	008006c4 	movi	r2,27
1000e460:	11801a2e 	bgeu	r2,r6,1000e4cc <_calloc_r+0xcc>
1000e464:	80000215 	stw	zero,8(r16)
1000e468:	80000315 	stw	zero,12(r16)
1000e46c:	30c0151e 	bne	r6,r3,1000e4c4 <_calloc_r+0xc4>
1000e470:	80000415 	stw	zero,16(r16)
1000e474:	80800604 	addi	r2,r16,24
1000e478:	80000515 	stw	zero,20(r16)
1000e47c:	00000106 	br	1000e484 <_calloc_r+0x84>
1000e480:	8005883a 	mov	r2,r16
1000e484:	10000015 	stw	zero,0(r2)
1000e488:	10000115 	stw	zero,4(r2)
1000e48c:	10000215 	stw	zero,8(r2)
1000e490:	8005883a 	mov	r2,r16
1000e494:	dfc00117 	ldw	ra,4(sp)
1000e498:	dc000017 	ldw	r16,0(sp)
1000e49c:	dec00204 	addi	sp,sp,8
1000e4a0:	f800283a 	ret
1000e4a4:	000b883a 	mov	r5,zero
1000e4a8:	8009883a 	mov	r4,r16
1000e4ac:	000b2300 	call	1000b230 <memset>
1000e4b0:	8005883a 	mov	r2,r16
1000e4b4:	dfc00117 	ldw	ra,4(sp)
1000e4b8:	dc000017 	ldw	r16,0(sp)
1000e4bc:	dec00204 	addi	sp,sp,8
1000e4c0:	f800283a 	ret
1000e4c4:	80800404 	addi	r2,r16,16
1000e4c8:	003fee06 	br	1000e484 <__alt_data_end+0xf800e484>
1000e4cc:	80800204 	addi	r2,r16,8
1000e4d0:	003fec06 	br	1000e484 <__alt_data_end+0xf800e484>
1000e4d4:	0005883a 	mov	r2,zero
1000e4d8:	003fee06 	br	1000e494 <__alt_data_end+0xf800e494>

1000e4dc <_fclose_r>:
1000e4dc:	28003926 	beq	r5,zero,1000e5c4 <_fclose_r+0xe8>
1000e4e0:	defffc04 	addi	sp,sp,-16
1000e4e4:	dc400115 	stw	r17,4(sp)
1000e4e8:	dc000015 	stw	r16,0(sp)
1000e4ec:	dfc00315 	stw	ra,12(sp)
1000e4f0:	dc800215 	stw	r18,8(sp)
1000e4f4:	2023883a 	mov	r17,r4
1000e4f8:	2821883a 	mov	r16,r5
1000e4fc:	20000226 	beq	r4,zero,1000e508 <_fclose_r+0x2c>
1000e500:	20800e17 	ldw	r2,56(r4)
1000e504:	10002726 	beq	r2,zero,1000e5a4 <_fclose_r+0xc8>
1000e508:	8080030f 	ldh	r2,12(r16)
1000e50c:	1000071e 	bne	r2,zero,1000e52c <_fclose_r+0x50>
1000e510:	0005883a 	mov	r2,zero
1000e514:	dfc00317 	ldw	ra,12(sp)
1000e518:	dc800217 	ldw	r18,8(sp)
1000e51c:	dc400117 	ldw	r17,4(sp)
1000e520:	dc000017 	ldw	r16,0(sp)
1000e524:	dec00404 	addi	sp,sp,16
1000e528:	f800283a 	ret
1000e52c:	800b883a 	mov	r5,r16
1000e530:	8809883a 	mov	r4,r17
1000e534:	00093280 	call	10009328 <__sflush_r>
1000e538:	1025883a 	mov	r18,r2
1000e53c:	80800b17 	ldw	r2,44(r16)
1000e540:	10000426 	beq	r2,zero,1000e554 <_fclose_r+0x78>
1000e544:	81400717 	ldw	r5,28(r16)
1000e548:	8809883a 	mov	r4,r17
1000e54c:	103ee83a 	callr	r2
1000e550:	10001616 	blt	r2,zero,1000e5ac <_fclose_r+0xd0>
1000e554:	8080030b 	ldhu	r2,12(r16)
1000e558:	1080200c 	andi	r2,r2,128
1000e55c:	1000151e 	bne	r2,zero,1000e5b4 <_fclose_r+0xd8>
1000e560:	81400c17 	ldw	r5,48(r16)
1000e564:	28000526 	beq	r5,zero,1000e57c <_fclose_r+0xa0>
1000e568:	80801004 	addi	r2,r16,64
1000e56c:	28800226 	beq	r5,r2,1000e578 <_fclose_r+0x9c>
1000e570:	8809883a 	mov	r4,r17
1000e574:	0009aa40 	call	10009aa4 <_free_r>
1000e578:	80000c15 	stw	zero,48(r16)
1000e57c:	81401117 	ldw	r5,68(r16)
1000e580:	28000326 	beq	r5,zero,1000e590 <_fclose_r+0xb4>
1000e584:	8809883a 	mov	r4,r17
1000e588:	0009aa40 	call	10009aa4 <_free_r>
1000e58c:	80001115 	stw	zero,68(r16)
1000e590:	00099400 	call	10009940 <__sfp_lock_acquire>
1000e594:	8000030d 	sth	zero,12(r16)
1000e598:	00099440 	call	10009944 <__sfp_lock_release>
1000e59c:	9005883a 	mov	r2,r18
1000e5a0:	003fdc06 	br	1000e514 <__alt_data_end+0xf800e514>
1000e5a4:	00099300 	call	10009930 <__sinit>
1000e5a8:	003fd706 	br	1000e508 <__alt_data_end+0xf800e508>
1000e5ac:	04bfffc4 	movi	r18,-1
1000e5b0:	003fe806 	br	1000e554 <__alt_data_end+0xf800e554>
1000e5b4:	81400417 	ldw	r5,16(r16)
1000e5b8:	8809883a 	mov	r4,r17
1000e5bc:	0009aa40 	call	10009aa4 <_free_r>
1000e5c0:	003fe706 	br	1000e560 <__alt_data_end+0xf800e560>
1000e5c4:	0005883a 	mov	r2,zero
1000e5c8:	f800283a 	ret

1000e5cc <fclose>:
1000e5cc:	00840074 	movhi	r2,4097
1000e5d0:	1098d104 	addi	r2,r2,25412
1000e5d4:	200b883a 	mov	r5,r4
1000e5d8:	11000017 	ldw	r4,0(r2)
1000e5dc:	000e4dc1 	jmpi	1000e4dc <_fclose_r>

1000e5e0 <__fputwc>:
1000e5e0:	defff804 	addi	sp,sp,-32
1000e5e4:	dcc00415 	stw	r19,16(sp)
1000e5e8:	dc800315 	stw	r18,12(sp)
1000e5ec:	dc000115 	stw	r16,4(sp)
1000e5f0:	dfc00715 	stw	ra,28(sp)
1000e5f4:	dd400615 	stw	r21,24(sp)
1000e5f8:	dd000515 	stw	r20,20(sp)
1000e5fc:	dc400215 	stw	r17,8(sp)
1000e600:	2027883a 	mov	r19,r4
1000e604:	2825883a 	mov	r18,r5
1000e608:	3021883a 	mov	r16,r6
1000e60c:	000a48c0 	call	1000a48c <__locale_mb_cur_max>
1000e610:	00c00044 	movi	r3,1
1000e614:	10c03e26 	beq	r2,r3,1000e710 <__fputwc+0x130>
1000e618:	81c01704 	addi	r7,r16,92
1000e61c:	900d883a 	mov	r6,r18
1000e620:	d80b883a 	mov	r5,sp
1000e624:	9809883a 	mov	r4,r19
1000e628:	000eab00 	call	1000eab0 <_wcrtomb_r>
1000e62c:	1029883a 	mov	r20,r2
1000e630:	00bfffc4 	movi	r2,-1
1000e634:	a0802026 	beq	r20,r2,1000e6b8 <__fputwc+0xd8>
1000e638:	d9400003 	ldbu	r5,0(sp)
1000e63c:	a0001c26 	beq	r20,zero,1000e6b0 <__fputwc+0xd0>
1000e640:	0023883a 	mov	r17,zero
1000e644:	05400284 	movi	r21,10
1000e648:	00000906 	br	1000e670 <__fputwc+0x90>
1000e64c:	80800017 	ldw	r2,0(r16)
1000e650:	11400005 	stb	r5,0(r2)
1000e654:	80c00017 	ldw	r3,0(r16)
1000e658:	18c00044 	addi	r3,r3,1
1000e65c:	80c00015 	stw	r3,0(r16)
1000e660:	8c400044 	addi	r17,r17,1
1000e664:	dc45883a 	add	r2,sp,r17
1000e668:	8d00112e 	bgeu	r17,r20,1000e6b0 <__fputwc+0xd0>
1000e66c:	11400003 	ldbu	r5,0(r2)
1000e670:	80c00217 	ldw	r3,8(r16)
1000e674:	18ffffc4 	addi	r3,r3,-1
1000e678:	80c00215 	stw	r3,8(r16)
1000e67c:	183ff30e 	bge	r3,zero,1000e64c <__alt_data_end+0xf800e64c>
1000e680:	80800617 	ldw	r2,24(r16)
1000e684:	18801916 	blt	r3,r2,1000e6ec <__fputwc+0x10c>
1000e688:	80800017 	ldw	r2,0(r16)
1000e68c:	11400005 	stb	r5,0(r2)
1000e690:	80800017 	ldw	r2,0(r16)
1000e694:	10c00003 	ldbu	r3,0(r2)
1000e698:	10800044 	addi	r2,r2,1
1000e69c:	1d402326 	beq	r3,r21,1000e72c <__fputwc+0x14c>
1000e6a0:	80800015 	stw	r2,0(r16)
1000e6a4:	8c400044 	addi	r17,r17,1
1000e6a8:	dc45883a 	add	r2,sp,r17
1000e6ac:	8d3fef36 	bltu	r17,r20,1000e66c <__alt_data_end+0xf800e66c>
1000e6b0:	9005883a 	mov	r2,r18
1000e6b4:	00000406 	br	1000e6c8 <__fputwc+0xe8>
1000e6b8:	80c0030b 	ldhu	r3,12(r16)
1000e6bc:	a005883a 	mov	r2,r20
1000e6c0:	18c01014 	ori	r3,r3,64
1000e6c4:	80c0030d 	sth	r3,12(r16)
1000e6c8:	dfc00717 	ldw	ra,28(sp)
1000e6cc:	dd400617 	ldw	r21,24(sp)
1000e6d0:	dd000517 	ldw	r20,20(sp)
1000e6d4:	dcc00417 	ldw	r19,16(sp)
1000e6d8:	dc800317 	ldw	r18,12(sp)
1000e6dc:	dc400217 	ldw	r17,8(sp)
1000e6e0:	dc000117 	ldw	r16,4(sp)
1000e6e4:	dec00804 	addi	sp,sp,32
1000e6e8:	f800283a 	ret
1000e6ec:	800d883a 	mov	r6,r16
1000e6f0:	29403fcc 	andi	r5,r5,255
1000e6f4:	9809883a 	mov	r4,r19
1000e6f8:	000e9580 	call	1000e958 <__swbuf_r>
1000e6fc:	10bfffe0 	cmpeqi	r2,r2,-1
1000e700:	10803fcc 	andi	r2,r2,255
1000e704:	103fd626 	beq	r2,zero,1000e660 <__alt_data_end+0xf800e660>
1000e708:	00bfffc4 	movi	r2,-1
1000e70c:	003fee06 	br	1000e6c8 <__alt_data_end+0xf800e6c8>
1000e710:	90ffffc4 	addi	r3,r18,-1
1000e714:	01003f84 	movi	r4,254
1000e718:	20ffbf36 	bltu	r4,r3,1000e618 <__alt_data_end+0xf800e618>
1000e71c:	900b883a 	mov	r5,r18
1000e720:	dc800005 	stb	r18,0(sp)
1000e724:	1029883a 	mov	r20,r2
1000e728:	003fc506 	br	1000e640 <__alt_data_end+0xf800e640>
1000e72c:	800d883a 	mov	r6,r16
1000e730:	a80b883a 	mov	r5,r21
1000e734:	9809883a 	mov	r4,r19
1000e738:	000e9580 	call	1000e958 <__swbuf_r>
1000e73c:	10bfffe0 	cmpeqi	r2,r2,-1
1000e740:	003fef06 	br	1000e700 <__alt_data_end+0xf800e700>

1000e744 <_fputwc_r>:
1000e744:	3080030b 	ldhu	r2,12(r6)
1000e748:	10c8000c 	andi	r3,r2,8192
1000e74c:	1800051e 	bne	r3,zero,1000e764 <_fputwc_r+0x20>
1000e750:	30c01917 	ldw	r3,100(r6)
1000e754:	10880014 	ori	r2,r2,8192
1000e758:	3080030d 	sth	r2,12(r6)
1000e75c:	18880014 	ori	r2,r3,8192
1000e760:	30801915 	stw	r2,100(r6)
1000e764:	000e5e01 	jmpi	1000e5e0 <__fputwc>

1000e768 <fputwc>:
1000e768:	00840074 	movhi	r2,4097
1000e76c:	defffc04 	addi	sp,sp,-16
1000e770:	1098d104 	addi	r2,r2,25412
1000e774:	dc000115 	stw	r16,4(sp)
1000e778:	14000017 	ldw	r16,0(r2)
1000e77c:	dc400215 	stw	r17,8(sp)
1000e780:	dfc00315 	stw	ra,12(sp)
1000e784:	2023883a 	mov	r17,r4
1000e788:	80000226 	beq	r16,zero,1000e794 <fputwc+0x2c>
1000e78c:	80800e17 	ldw	r2,56(r16)
1000e790:	10001026 	beq	r2,zero,1000e7d4 <fputwc+0x6c>
1000e794:	2880030b 	ldhu	r2,12(r5)
1000e798:	10c8000c 	andi	r3,r2,8192
1000e79c:	1800051e 	bne	r3,zero,1000e7b4 <fputwc+0x4c>
1000e7a0:	28c01917 	ldw	r3,100(r5)
1000e7a4:	10880014 	ori	r2,r2,8192
1000e7a8:	2880030d 	sth	r2,12(r5)
1000e7ac:	18880014 	ori	r2,r3,8192
1000e7b0:	28801915 	stw	r2,100(r5)
1000e7b4:	280d883a 	mov	r6,r5
1000e7b8:	8009883a 	mov	r4,r16
1000e7bc:	880b883a 	mov	r5,r17
1000e7c0:	dfc00317 	ldw	ra,12(sp)
1000e7c4:	dc400217 	ldw	r17,8(sp)
1000e7c8:	dc000117 	ldw	r16,4(sp)
1000e7cc:	dec00404 	addi	sp,sp,16
1000e7d0:	000e5e01 	jmpi	1000e5e0 <__fputwc>
1000e7d4:	8009883a 	mov	r4,r16
1000e7d8:	d9400015 	stw	r5,0(sp)
1000e7dc:	00099300 	call	10009930 <__sinit>
1000e7e0:	d9400017 	ldw	r5,0(sp)
1000e7e4:	003feb06 	br	1000e794 <__alt_data_end+0xf800e794>

1000e7e8 <_fstat_r>:
1000e7e8:	defffd04 	addi	sp,sp,-12
1000e7ec:	2805883a 	mov	r2,r5
1000e7f0:	dc000015 	stw	r16,0(sp)
1000e7f4:	04040074 	movhi	r16,4097
1000e7f8:	dc400115 	stw	r17,4(sp)
1000e7fc:	841faf04 	addi	r16,r16,32444
1000e800:	2023883a 	mov	r17,r4
1000e804:	300b883a 	mov	r5,r6
1000e808:	1009883a 	mov	r4,r2
1000e80c:	dfc00215 	stw	ra,8(sp)
1000e810:	80000015 	stw	zero,0(r16)
1000e814:	00116d80 	call	100116d8 <fstat>
1000e818:	00ffffc4 	movi	r3,-1
1000e81c:	10c00526 	beq	r2,r3,1000e834 <_fstat_r+0x4c>
1000e820:	dfc00217 	ldw	ra,8(sp)
1000e824:	dc400117 	ldw	r17,4(sp)
1000e828:	dc000017 	ldw	r16,0(sp)
1000e82c:	dec00304 	addi	sp,sp,12
1000e830:	f800283a 	ret
1000e834:	80c00017 	ldw	r3,0(r16)
1000e838:	183ff926 	beq	r3,zero,1000e820 <__alt_data_end+0xf800e820>
1000e83c:	88c00015 	stw	r3,0(r17)
1000e840:	003ff706 	br	1000e820 <__alt_data_end+0xf800e820>

1000e844 <_isatty_r>:
1000e844:	defffd04 	addi	sp,sp,-12
1000e848:	dc000015 	stw	r16,0(sp)
1000e84c:	04040074 	movhi	r16,4097
1000e850:	dc400115 	stw	r17,4(sp)
1000e854:	841faf04 	addi	r16,r16,32444
1000e858:	2023883a 	mov	r17,r4
1000e85c:	2809883a 	mov	r4,r5
1000e860:	dfc00215 	stw	ra,8(sp)
1000e864:	80000015 	stw	zero,0(r16)
1000e868:	00117cc0 	call	100117cc <isatty>
1000e86c:	00ffffc4 	movi	r3,-1
1000e870:	10c00526 	beq	r2,r3,1000e888 <_isatty_r+0x44>
1000e874:	dfc00217 	ldw	ra,8(sp)
1000e878:	dc400117 	ldw	r17,4(sp)
1000e87c:	dc000017 	ldw	r16,0(sp)
1000e880:	dec00304 	addi	sp,sp,12
1000e884:	f800283a 	ret
1000e888:	80c00017 	ldw	r3,0(r16)
1000e88c:	183ff926 	beq	r3,zero,1000e874 <__alt_data_end+0xf800e874>
1000e890:	88c00015 	stw	r3,0(r17)
1000e894:	003ff706 	br	1000e874 <__alt_data_end+0xf800e874>

1000e898 <_lseek_r>:
1000e898:	defffd04 	addi	sp,sp,-12
1000e89c:	2805883a 	mov	r2,r5
1000e8a0:	dc000015 	stw	r16,0(sp)
1000e8a4:	04040074 	movhi	r16,4097
1000e8a8:	dc400115 	stw	r17,4(sp)
1000e8ac:	300b883a 	mov	r5,r6
1000e8b0:	841faf04 	addi	r16,r16,32444
1000e8b4:	2023883a 	mov	r17,r4
1000e8b8:	380d883a 	mov	r6,r7
1000e8bc:	1009883a 	mov	r4,r2
1000e8c0:	dfc00215 	stw	ra,8(sp)
1000e8c4:	80000015 	stw	zero,0(r16)
1000e8c8:	00119a00 	call	100119a0 <lseek>
1000e8cc:	00ffffc4 	movi	r3,-1
1000e8d0:	10c00526 	beq	r2,r3,1000e8e8 <_lseek_r+0x50>
1000e8d4:	dfc00217 	ldw	ra,8(sp)
1000e8d8:	dc400117 	ldw	r17,4(sp)
1000e8dc:	dc000017 	ldw	r16,0(sp)
1000e8e0:	dec00304 	addi	sp,sp,12
1000e8e4:	f800283a 	ret
1000e8e8:	80c00017 	ldw	r3,0(r16)
1000e8ec:	183ff926 	beq	r3,zero,1000e8d4 <__alt_data_end+0xf800e8d4>
1000e8f0:	88c00015 	stw	r3,0(r17)
1000e8f4:	003ff706 	br	1000e8d4 <__alt_data_end+0xf800e8d4>

1000e8f8 <_read_r>:
1000e8f8:	defffd04 	addi	sp,sp,-12
1000e8fc:	2805883a 	mov	r2,r5
1000e900:	dc000015 	stw	r16,0(sp)
1000e904:	04040074 	movhi	r16,4097
1000e908:	dc400115 	stw	r17,4(sp)
1000e90c:	300b883a 	mov	r5,r6
1000e910:	841faf04 	addi	r16,r16,32444
1000e914:	2023883a 	mov	r17,r4
1000e918:	380d883a 	mov	r6,r7
1000e91c:	1009883a 	mov	r4,r2
1000e920:	dfc00215 	stw	ra,8(sp)
1000e924:	80000015 	stw	zero,0(r16)
1000e928:	0011b7c0 	call	10011b7c <read>
1000e92c:	00ffffc4 	movi	r3,-1
1000e930:	10c00526 	beq	r2,r3,1000e948 <_read_r+0x50>
1000e934:	dfc00217 	ldw	ra,8(sp)
1000e938:	dc400117 	ldw	r17,4(sp)
1000e93c:	dc000017 	ldw	r16,0(sp)
1000e940:	dec00304 	addi	sp,sp,12
1000e944:	f800283a 	ret
1000e948:	80c00017 	ldw	r3,0(r16)
1000e94c:	183ff926 	beq	r3,zero,1000e934 <__alt_data_end+0xf800e934>
1000e950:	88c00015 	stw	r3,0(r17)
1000e954:	003ff706 	br	1000e934 <__alt_data_end+0xf800e934>

1000e958 <__swbuf_r>:
1000e958:	defffb04 	addi	sp,sp,-20
1000e95c:	dcc00315 	stw	r19,12(sp)
1000e960:	dc800215 	stw	r18,8(sp)
1000e964:	dc000015 	stw	r16,0(sp)
1000e968:	dfc00415 	stw	ra,16(sp)
1000e96c:	dc400115 	stw	r17,4(sp)
1000e970:	2025883a 	mov	r18,r4
1000e974:	2827883a 	mov	r19,r5
1000e978:	3021883a 	mov	r16,r6
1000e97c:	20000226 	beq	r4,zero,1000e988 <__swbuf_r+0x30>
1000e980:	20800e17 	ldw	r2,56(r4)
1000e984:	10004226 	beq	r2,zero,1000ea90 <__swbuf_r+0x138>
1000e988:	80800617 	ldw	r2,24(r16)
1000e98c:	8100030b 	ldhu	r4,12(r16)
1000e990:	80800215 	stw	r2,8(r16)
1000e994:	2080020c 	andi	r2,r4,8
1000e998:	10003626 	beq	r2,zero,1000ea74 <__swbuf_r+0x11c>
1000e99c:	80c00417 	ldw	r3,16(r16)
1000e9a0:	18003426 	beq	r3,zero,1000ea74 <__swbuf_r+0x11c>
1000e9a4:	2088000c 	andi	r2,r4,8192
1000e9a8:	9c403fcc 	andi	r17,r19,255
1000e9ac:	10001a26 	beq	r2,zero,1000ea18 <__swbuf_r+0xc0>
1000e9b0:	80800017 	ldw	r2,0(r16)
1000e9b4:	81000517 	ldw	r4,20(r16)
1000e9b8:	10c7c83a 	sub	r3,r2,r3
1000e9bc:	1900200e 	bge	r3,r4,1000ea40 <__swbuf_r+0xe8>
1000e9c0:	18c00044 	addi	r3,r3,1
1000e9c4:	81000217 	ldw	r4,8(r16)
1000e9c8:	11400044 	addi	r5,r2,1
1000e9cc:	81400015 	stw	r5,0(r16)
1000e9d0:	213fffc4 	addi	r4,r4,-1
1000e9d4:	81000215 	stw	r4,8(r16)
1000e9d8:	14c00005 	stb	r19,0(r2)
1000e9dc:	80800517 	ldw	r2,20(r16)
1000e9e0:	10c01e26 	beq	r2,r3,1000ea5c <__swbuf_r+0x104>
1000e9e4:	8080030b 	ldhu	r2,12(r16)
1000e9e8:	1080004c 	andi	r2,r2,1
1000e9ec:	10000226 	beq	r2,zero,1000e9f8 <__swbuf_r+0xa0>
1000e9f0:	00800284 	movi	r2,10
1000e9f4:	88801926 	beq	r17,r2,1000ea5c <__swbuf_r+0x104>
1000e9f8:	8805883a 	mov	r2,r17
1000e9fc:	dfc00417 	ldw	ra,16(sp)
1000ea00:	dcc00317 	ldw	r19,12(sp)
1000ea04:	dc800217 	ldw	r18,8(sp)
1000ea08:	dc400117 	ldw	r17,4(sp)
1000ea0c:	dc000017 	ldw	r16,0(sp)
1000ea10:	dec00504 	addi	sp,sp,20
1000ea14:	f800283a 	ret
1000ea18:	81401917 	ldw	r5,100(r16)
1000ea1c:	00b7ffc4 	movi	r2,-8193
1000ea20:	21080014 	ori	r4,r4,8192
1000ea24:	2884703a 	and	r2,r5,r2
1000ea28:	80801915 	stw	r2,100(r16)
1000ea2c:	80800017 	ldw	r2,0(r16)
1000ea30:	8100030d 	sth	r4,12(r16)
1000ea34:	81000517 	ldw	r4,20(r16)
1000ea38:	10c7c83a 	sub	r3,r2,r3
1000ea3c:	193fe016 	blt	r3,r4,1000e9c0 <__alt_data_end+0xf800e9c0>
1000ea40:	800b883a 	mov	r5,r16
1000ea44:	9009883a 	mov	r4,r18
1000ea48:	00095440 	call	10009544 <_fflush_r>
1000ea4c:	1000071e 	bne	r2,zero,1000ea6c <__swbuf_r+0x114>
1000ea50:	80800017 	ldw	r2,0(r16)
1000ea54:	00c00044 	movi	r3,1
1000ea58:	003fda06 	br	1000e9c4 <__alt_data_end+0xf800e9c4>
1000ea5c:	800b883a 	mov	r5,r16
1000ea60:	9009883a 	mov	r4,r18
1000ea64:	00095440 	call	10009544 <_fflush_r>
1000ea68:	103fe326 	beq	r2,zero,1000e9f8 <__alt_data_end+0xf800e9f8>
1000ea6c:	00bfffc4 	movi	r2,-1
1000ea70:	003fe206 	br	1000e9fc <__alt_data_end+0xf800e9fc>
1000ea74:	800b883a 	mov	r5,r16
1000ea78:	9009883a 	mov	r4,r18
1000ea7c:	00079240 	call	10007924 <__swsetup_r>
1000ea80:	103ffa1e 	bne	r2,zero,1000ea6c <__alt_data_end+0xf800ea6c>
1000ea84:	8100030b 	ldhu	r4,12(r16)
1000ea88:	80c00417 	ldw	r3,16(r16)
1000ea8c:	003fc506 	br	1000e9a4 <__alt_data_end+0xf800e9a4>
1000ea90:	00099300 	call	10009930 <__sinit>
1000ea94:	003fbc06 	br	1000e988 <__alt_data_end+0xf800e988>

1000ea98 <__swbuf>:
1000ea98:	00840074 	movhi	r2,4097
1000ea9c:	1098d104 	addi	r2,r2,25412
1000eaa0:	280d883a 	mov	r6,r5
1000eaa4:	200b883a 	mov	r5,r4
1000eaa8:	11000017 	ldw	r4,0(r2)
1000eaac:	000e9581 	jmpi	1000e958 <__swbuf_r>

1000eab0 <_wcrtomb_r>:
1000eab0:	defff604 	addi	sp,sp,-40
1000eab4:	00840074 	movhi	r2,4097
1000eab8:	dc800815 	stw	r18,32(sp)
1000eabc:	dc400715 	stw	r17,28(sp)
1000eac0:	dc000615 	stw	r16,24(sp)
1000eac4:	1098d504 	addi	r2,r2,25428
1000eac8:	dfc00915 	stw	ra,36(sp)
1000eacc:	2021883a 	mov	r16,r4
1000ead0:	3823883a 	mov	r17,r7
1000ead4:	14800017 	ldw	r18,0(r2)
1000ead8:	28001426 	beq	r5,zero,1000eb2c <_wcrtomb_r+0x7c>
1000eadc:	d9400415 	stw	r5,16(sp)
1000eae0:	d9800515 	stw	r6,20(sp)
1000eae4:	000a4800 	call	1000a480 <__locale_charset>
1000eae8:	d9800517 	ldw	r6,20(sp)
1000eaec:	d9400417 	ldw	r5,16(sp)
1000eaf0:	100f883a 	mov	r7,r2
1000eaf4:	dc400015 	stw	r17,0(sp)
1000eaf8:	8009883a 	mov	r4,r16
1000eafc:	903ee83a 	callr	r18
1000eb00:	00ffffc4 	movi	r3,-1
1000eb04:	10c0031e 	bne	r2,r3,1000eb14 <_wcrtomb_r+0x64>
1000eb08:	88000015 	stw	zero,0(r17)
1000eb0c:	00c02284 	movi	r3,138
1000eb10:	80c00015 	stw	r3,0(r16)
1000eb14:	dfc00917 	ldw	ra,36(sp)
1000eb18:	dc800817 	ldw	r18,32(sp)
1000eb1c:	dc400717 	ldw	r17,28(sp)
1000eb20:	dc000617 	ldw	r16,24(sp)
1000eb24:	dec00a04 	addi	sp,sp,40
1000eb28:	f800283a 	ret
1000eb2c:	000a4800 	call	1000a480 <__locale_charset>
1000eb30:	100f883a 	mov	r7,r2
1000eb34:	dc400015 	stw	r17,0(sp)
1000eb38:	000d883a 	mov	r6,zero
1000eb3c:	d9400104 	addi	r5,sp,4
1000eb40:	8009883a 	mov	r4,r16
1000eb44:	903ee83a 	callr	r18
1000eb48:	003fed06 	br	1000eb00 <__alt_data_end+0xf800eb00>

1000eb4c <wcrtomb>:
1000eb4c:	defff604 	addi	sp,sp,-40
1000eb50:	00840074 	movhi	r2,4097
1000eb54:	dc800615 	stw	r18,24(sp)
1000eb58:	dc400515 	stw	r17,20(sp)
1000eb5c:	1098d104 	addi	r2,r2,25412
1000eb60:	dfc00915 	stw	ra,36(sp)
1000eb64:	dd000815 	stw	r20,32(sp)
1000eb68:	dcc00715 	stw	r19,28(sp)
1000eb6c:	dc000415 	stw	r16,16(sp)
1000eb70:	3025883a 	mov	r18,r6
1000eb74:	14400017 	ldw	r17,0(r2)
1000eb78:	20001926 	beq	r4,zero,1000ebe0 <wcrtomb+0x94>
1000eb7c:	00840074 	movhi	r2,4097
1000eb80:	1098d504 	addi	r2,r2,25428
1000eb84:	15000017 	ldw	r20,0(r2)
1000eb88:	2021883a 	mov	r16,r4
1000eb8c:	2827883a 	mov	r19,r5
1000eb90:	000a4800 	call	1000a480 <__locale_charset>
1000eb94:	100f883a 	mov	r7,r2
1000eb98:	dc800015 	stw	r18,0(sp)
1000eb9c:	980d883a 	mov	r6,r19
1000eba0:	800b883a 	mov	r5,r16
1000eba4:	8809883a 	mov	r4,r17
1000eba8:	a03ee83a 	callr	r20
1000ebac:	00ffffc4 	movi	r3,-1
1000ebb0:	10c0031e 	bne	r2,r3,1000ebc0 <wcrtomb+0x74>
1000ebb4:	90000015 	stw	zero,0(r18)
1000ebb8:	00c02284 	movi	r3,138
1000ebbc:	88c00015 	stw	r3,0(r17)
1000ebc0:	dfc00917 	ldw	ra,36(sp)
1000ebc4:	dd000817 	ldw	r20,32(sp)
1000ebc8:	dcc00717 	ldw	r19,28(sp)
1000ebcc:	dc800617 	ldw	r18,24(sp)
1000ebd0:	dc400517 	ldw	r17,20(sp)
1000ebd4:	dc000417 	ldw	r16,16(sp)
1000ebd8:	dec00a04 	addi	sp,sp,40
1000ebdc:	f800283a 	ret
1000ebe0:	00840074 	movhi	r2,4097
1000ebe4:	1098d504 	addi	r2,r2,25428
1000ebe8:	14000017 	ldw	r16,0(r2)
1000ebec:	000a4800 	call	1000a480 <__locale_charset>
1000ebf0:	100f883a 	mov	r7,r2
1000ebf4:	dc800015 	stw	r18,0(sp)
1000ebf8:	000d883a 	mov	r6,zero
1000ebfc:	d9400104 	addi	r5,sp,4
1000ec00:	8809883a 	mov	r4,r17
1000ec04:	803ee83a 	callr	r16
1000ec08:	003fe806 	br	1000ebac <__alt_data_end+0xf800ebac>

1000ec0c <__ascii_wctomb>:
1000ec0c:	28000526 	beq	r5,zero,1000ec24 <__ascii_wctomb+0x18>
1000ec10:	00803fc4 	movi	r2,255
1000ec14:	11800536 	bltu	r2,r6,1000ec2c <__ascii_wctomb+0x20>
1000ec18:	29800005 	stb	r6,0(r5)
1000ec1c:	00800044 	movi	r2,1
1000ec20:	f800283a 	ret
1000ec24:	0005883a 	mov	r2,zero
1000ec28:	f800283a 	ret
1000ec2c:	00802284 	movi	r2,138
1000ec30:	20800015 	stw	r2,0(r4)
1000ec34:	00bfffc4 	movi	r2,-1
1000ec38:	f800283a 	ret

1000ec3c <_wctomb_r>:
1000ec3c:	00840074 	movhi	r2,4097
1000ec40:	defff904 	addi	sp,sp,-28
1000ec44:	1098d504 	addi	r2,r2,25428
1000ec48:	dfc00615 	stw	ra,24(sp)
1000ec4c:	dc400515 	stw	r17,20(sp)
1000ec50:	dc000415 	stw	r16,16(sp)
1000ec54:	3823883a 	mov	r17,r7
1000ec58:	14000017 	ldw	r16,0(r2)
1000ec5c:	d9000115 	stw	r4,4(sp)
1000ec60:	d9400215 	stw	r5,8(sp)
1000ec64:	d9800315 	stw	r6,12(sp)
1000ec68:	000a4800 	call	1000a480 <__locale_charset>
1000ec6c:	d9800317 	ldw	r6,12(sp)
1000ec70:	d9400217 	ldw	r5,8(sp)
1000ec74:	d9000117 	ldw	r4,4(sp)
1000ec78:	100f883a 	mov	r7,r2
1000ec7c:	dc400015 	stw	r17,0(sp)
1000ec80:	803ee83a 	callr	r16
1000ec84:	dfc00617 	ldw	ra,24(sp)
1000ec88:	dc400517 	ldw	r17,20(sp)
1000ec8c:	dc000417 	ldw	r16,16(sp)
1000ec90:	dec00704 	addi	sp,sp,28
1000ec94:	f800283a 	ret

1000ec98 <__muldi3>:
1000ec98:	defff604 	addi	sp,sp,-40
1000ec9c:	dd800615 	stw	r22,24(sp)
1000eca0:	dd400515 	stw	r21,20(sp)
1000eca4:	dc400115 	stw	r17,4(sp)
1000eca8:	357fffcc 	andi	r21,r6,65535
1000ecac:	2022d43a 	srli	r17,r4,16
1000ecb0:	25bfffcc 	andi	r22,r4,65535
1000ecb4:	dcc00315 	stw	r19,12(sp)
1000ecb8:	dc800215 	stw	r18,8(sp)
1000ecbc:	2027883a 	mov	r19,r4
1000ecc0:	2825883a 	mov	r18,r5
1000ecc4:	b009883a 	mov	r4,r22
1000ecc8:	a80b883a 	mov	r5,r21
1000eccc:	dfc00915 	stw	ra,36(sp)
1000ecd0:	df000815 	stw	fp,32(sp)
1000ecd4:	ddc00715 	stw	r23,28(sp)
1000ecd8:	3839883a 	mov	fp,r7
1000ecdc:	302ed43a 	srli	r23,r6,16
1000ece0:	dd000415 	stw	r20,16(sp)
1000ece4:	dc000015 	stw	r16,0(sp)
1000ece8:	3029883a 	mov	r20,r6
1000ecec:	00052a00 	call	100052a0 <__mulsi3>
1000ecf0:	a80b883a 	mov	r5,r21
1000ecf4:	8809883a 	mov	r4,r17
1000ecf8:	1021883a 	mov	r16,r2
1000ecfc:	00052a00 	call	100052a0 <__mulsi3>
1000ed00:	8809883a 	mov	r4,r17
1000ed04:	b80b883a 	mov	r5,r23
1000ed08:	102b883a 	mov	r21,r2
1000ed0c:	00052a00 	call	100052a0 <__mulsi3>
1000ed10:	b80b883a 	mov	r5,r23
1000ed14:	b009883a 	mov	r4,r22
1000ed18:	1023883a 	mov	r17,r2
1000ed1c:	00052a00 	call	100052a0 <__mulsi3>
1000ed20:	8006d43a 	srli	r3,r16,16
1000ed24:	1545883a 	add	r2,r2,r21
1000ed28:	1885883a 	add	r2,r3,r2
1000ed2c:	1540022e 	bgeu	r2,r21,1000ed38 <__muldi3+0xa0>
1000ed30:	00c00074 	movhi	r3,1
1000ed34:	88e3883a 	add	r17,r17,r3
1000ed38:	1006d43a 	srli	r3,r2,16
1000ed3c:	1004943a 	slli	r2,r2,16
1000ed40:	e00b883a 	mov	r5,fp
1000ed44:	9809883a 	mov	r4,r19
1000ed48:	843fffcc 	andi	r16,r16,65535
1000ed4c:	1c63883a 	add	r17,r3,r17
1000ed50:	1421883a 	add	r16,r2,r16
1000ed54:	00052a00 	call	100052a0 <__mulsi3>
1000ed58:	900b883a 	mov	r5,r18
1000ed5c:	a009883a 	mov	r4,r20
1000ed60:	1027883a 	mov	r19,r2
1000ed64:	00052a00 	call	100052a0 <__mulsi3>
1000ed68:	9885883a 	add	r2,r19,r2
1000ed6c:	1447883a 	add	r3,r2,r17
1000ed70:	8005883a 	mov	r2,r16
1000ed74:	dfc00917 	ldw	ra,36(sp)
1000ed78:	df000817 	ldw	fp,32(sp)
1000ed7c:	ddc00717 	ldw	r23,28(sp)
1000ed80:	dd800617 	ldw	r22,24(sp)
1000ed84:	dd400517 	ldw	r21,20(sp)
1000ed88:	dd000417 	ldw	r20,16(sp)
1000ed8c:	dcc00317 	ldw	r19,12(sp)
1000ed90:	dc800217 	ldw	r18,8(sp)
1000ed94:	dc400117 	ldw	r17,4(sp)
1000ed98:	dc000017 	ldw	r16,0(sp)
1000ed9c:	dec00a04 	addi	sp,sp,40
1000eda0:	f800283a 	ret

1000eda4 <__udivdi3>:
1000eda4:	defff404 	addi	sp,sp,-48
1000eda8:	dcc00515 	stw	r19,20(sp)
1000edac:	dc000215 	stw	r16,8(sp)
1000edb0:	dfc00b15 	stw	ra,44(sp)
1000edb4:	df000a15 	stw	fp,40(sp)
1000edb8:	ddc00915 	stw	r23,36(sp)
1000edbc:	dd800815 	stw	r22,32(sp)
1000edc0:	dd400715 	stw	r21,28(sp)
1000edc4:	dd000615 	stw	r20,24(sp)
1000edc8:	dc800415 	stw	r18,16(sp)
1000edcc:	dc400315 	stw	r17,12(sp)
1000edd0:	2027883a 	mov	r19,r4
1000edd4:	2821883a 	mov	r16,r5
1000edd8:	3800461e 	bne	r7,zero,1000eef4 <__udivdi3+0x150>
1000eddc:	3023883a 	mov	r17,r6
1000ede0:	2025883a 	mov	r18,r4
1000ede4:	2980572e 	bgeu	r5,r6,1000ef44 <__udivdi3+0x1a0>
1000ede8:	00bfffd4 	movui	r2,65535
1000edec:	282d883a 	mov	r22,r5
1000edf0:	1180b236 	bltu	r2,r6,1000f0bc <__udivdi3+0x318>
1000edf4:	00803fc4 	movi	r2,255
1000edf8:	1185803a 	cmpltu	r2,r2,r6
1000edfc:	100490fa 	slli	r2,r2,3
1000ee00:	3086d83a 	srl	r3,r6,r2
1000ee04:	01040074 	movhi	r4,4097
1000ee08:	21116404 	addi	r4,r4,17808
1000ee0c:	20c7883a 	add	r3,r4,r3
1000ee10:	18c00003 	ldbu	r3,0(r3)
1000ee14:	1885883a 	add	r2,r3,r2
1000ee18:	00c00804 	movi	r3,32
1000ee1c:	1887c83a 	sub	r3,r3,r2
1000ee20:	18000526 	beq	r3,zero,1000ee38 <__udivdi3+0x94>
1000ee24:	80e0983a 	sll	r16,r16,r3
1000ee28:	9884d83a 	srl	r2,r19,r2
1000ee2c:	30e2983a 	sll	r17,r6,r3
1000ee30:	98e4983a 	sll	r18,r19,r3
1000ee34:	142cb03a 	or	r22,r2,r16
1000ee38:	882ad43a 	srli	r21,r17,16
1000ee3c:	b009883a 	mov	r4,r22
1000ee40:	8d3fffcc 	andi	r20,r17,65535
1000ee44:	a80b883a 	mov	r5,r21
1000ee48:	000459c0 	call	1000459c <__umodsi3>
1000ee4c:	b009883a 	mov	r4,r22
1000ee50:	a80b883a 	mov	r5,r21
1000ee54:	1027883a 	mov	r19,r2
1000ee58:	00045380 	call	10004538 <__udivsi3>
1000ee5c:	100b883a 	mov	r5,r2
1000ee60:	a009883a 	mov	r4,r20
1000ee64:	102d883a 	mov	r22,r2
1000ee68:	00052a00 	call	100052a0 <__mulsi3>
1000ee6c:	9826943a 	slli	r19,r19,16
1000ee70:	9006d43a 	srli	r3,r18,16
1000ee74:	1cc6b03a 	or	r3,r3,r19
1000ee78:	1880052e 	bgeu	r3,r2,1000ee90 <__udivdi3+0xec>
1000ee7c:	1c47883a 	add	r3,r3,r17
1000ee80:	b13fffc4 	addi	r4,r22,-1
1000ee84:	1c400136 	bltu	r3,r17,1000ee8c <__udivdi3+0xe8>
1000ee88:	18814236 	bltu	r3,r2,1000f394 <__udivdi3+0x5f0>
1000ee8c:	202d883a 	mov	r22,r4
1000ee90:	18a1c83a 	sub	r16,r3,r2
1000ee94:	8009883a 	mov	r4,r16
1000ee98:	a80b883a 	mov	r5,r21
1000ee9c:	000459c0 	call	1000459c <__umodsi3>
1000eea0:	1027883a 	mov	r19,r2
1000eea4:	8009883a 	mov	r4,r16
1000eea8:	a80b883a 	mov	r5,r21
1000eeac:	9826943a 	slli	r19,r19,16
1000eeb0:	00045380 	call	10004538 <__udivsi3>
1000eeb4:	100b883a 	mov	r5,r2
1000eeb8:	a009883a 	mov	r4,r20
1000eebc:	94bfffcc 	andi	r18,r18,65535
1000eec0:	1021883a 	mov	r16,r2
1000eec4:	94e4b03a 	or	r18,r18,r19
1000eec8:	00052a00 	call	100052a0 <__mulsi3>
1000eecc:	9080052e 	bgeu	r18,r2,1000eee4 <__udivdi3+0x140>
1000eed0:	8ca5883a 	add	r18,r17,r18
1000eed4:	80ffffc4 	addi	r3,r16,-1
1000eed8:	94410c36 	bltu	r18,r17,1000f30c <__udivdi3+0x568>
1000eedc:	90810b2e 	bgeu	r18,r2,1000f30c <__udivdi3+0x568>
1000eee0:	843fff84 	addi	r16,r16,-2
1000eee4:	b004943a 	slli	r2,r22,16
1000eee8:	0007883a 	mov	r3,zero
1000eeec:	1404b03a 	or	r2,r2,r16
1000eef0:	00005e06 	br	1000f06c <__udivdi3+0x2c8>
1000eef4:	29c05b36 	bltu	r5,r7,1000f064 <__udivdi3+0x2c0>
1000eef8:	00bfffd4 	movui	r2,65535
1000eefc:	11c0672e 	bgeu	r2,r7,1000f09c <__udivdi3+0x2f8>
1000ef00:	00804034 	movhi	r2,256
1000ef04:	10bfffc4 	addi	r2,r2,-1
1000ef08:	11c10a36 	bltu	r2,r7,1000f334 <__udivdi3+0x590>
1000ef0c:	00800404 	movi	r2,16
1000ef10:	3886d83a 	srl	r3,r7,r2
1000ef14:	01040074 	movhi	r4,4097
1000ef18:	21116404 	addi	r4,r4,17808
1000ef1c:	20c7883a 	add	r3,r4,r3
1000ef20:	18c00003 	ldbu	r3,0(r3)
1000ef24:	05c00804 	movi	r23,32
1000ef28:	1885883a 	add	r2,r3,r2
1000ef2c:	b8afc83a 	sub	r23,r23,r2
1000ef30:	b800671e 	bne	r23,zero,1000f0d0 <__udivdi3+0x32c>
1000ef34:	3c010536 	bltu	r7,r16,1000f34c <__udivdi3+0x5a8>
1000ef38:	9985403a 	cmpgeu	r2,r19,r6
1000ef3c:	0007883a 	mov	r3,zero
1000ef40:	00004a06 	br	1000f06c <__udivdi3+0x2c8>
1000ef44:	3000041e 	bne	r6,zero,1000ef58 <__udivdi3+0x1b4>
1000ef48:	000b883a 	mov	r5,zero
1000ef4c:	01000044 	movi	r4,1
1000ef50:	00045380 	call	10004538 <__udivsi3>
1000ef54:	1023883a 	mov	r17,r2
1000ef58:	00bfffd4 	movui	r2,65535
1000ef5c:	1440532e 	bgeu	r2,r17,1000f0ac <__udivdi3+0x308>
1000ef60:	00804034 	movhi	r2,256
1000ef64:	10bfffc4 	addi	r2,r2,-1
1000ef68:	1440f436 	bltu	r2,r17,1000f33c <__udivdi3+0x598>
1000ef6c:	00800404 	movi	r2,16
1000ef70:	8886d83a 	srl	r3,r17,r2
1000ef74:	01040074 	movhi	r4,4097
1000ef78:	21116404 	addi	r4,r4,17808
1000ef7c:	20c7883a 	add	r3,r4,r3
1000ef80:	18c00003 	ldbu	r3,0(r3)
1000ef84:	1885883a 	add	r2,r3,r2
1000ef88:	00c00804 	movi	r3,32
1000ef8c:	1887c83a 	sub	r3,r3,r2
1000ef90:	1800a51e 	bne	r3,zero,1000f228 <__udivdi3+0x484>
1000ef94:	882ad43a 	srli	r21,r17,16
1000ef98:	8461c83a 	sub	r16,r16,r17
1000ef9c:	8d3fffcc 	andi	r20,r17,65535
1000efa0:	00c00044 	movi	r3,1
1000efa4:	a80b883a 	mov	r5,r21
1000efa8:	8009883a 	mov	r4,r16
1000efac:	d8c00115 	stw	r3,4(sp)
1000efb0:	000459c0 	call	1000459c <__umodsi3>
1000efb4:	a80b883a 	mov	r5,r21
1000efb8:	8009883a 	mov	r4,r16
1000efbc:	1027883a 	mov	r19,r2
1000efc0:	00045380 	call	10004538 <__udivsi3>
1000efc4:	a00b883a 	mov	r5,r20
1000efc8:	1009883a 	mov	r4,r2
1000efcc:	102d883a 	mov	r22,r2
1000efd0:	00052a00 	call	100052a0 <__mulsi3>
1000efd4:	9826943a 	slli	r19,r19,16
1000efd8:	900ed43a 	srli	r7,r18,16
1000efdc:	d8c00117 	ldw	r3,4(sp)
1000efe0:	3cceb03a 	or	r7,r7,r19
1000efe4:	3880052e 	bgeu	r7,r2,1000effc <__udivdi3+0x258>
1000efe8:	3c4f883a 	add	r7,r7,r17
1000efec:	b13fffc4 	addi	r4,r22,-1
1000eff0:	3c400136 	bltu	r7,r17,1000eff8 <__udivdi3+0x254>
1000eff4:	3880e436 	bltu	r7,r2,1000f388 <__udivdi3+0x5e4>
1000eff8:	202d883a 	mov	r22,r4
1000effc:	38a1c83a 	sub	r16,r7,r2
1000f000:	8009883a 	mov	r4,r16
1000f004:	a80b883a 	mov	r5,r21
1000f008:	d8c00115 	stw	r3,4(sp)
1000f00c:	000459c0 	call	1000459c <__umodsi3>
1000f010:	1027883a 	mov	r19,r2
1000f014:	8009883a 	mov	r4,r16
1000f018:	a80b883a 	mov	r5,r21
1000f01c:	9826943a 	slli	r19,r19,16
1000f020:	00045380 	call	10004538 <__udivsi3>
1000f024:	a00b883a 	mov	r5,r20
1000f028:	1009883a 	mov	r4,r2
1000f02c:	94bfffcc 	andi	r18,r18,65535
1000f030:	1021883a 	mov	r16,r2
1000f034:	94e4b03a 	or	r18,r18,r19
1000f038:	00052a00 	call	100052a0 <__mulsi3>
1000f03c:	d8c00117 	ldw	r3,4(sp)
1000f040:	9080052e 	bgeu	r18,r2,1000f058 <__udivdi3+0x2b4>
1000f044:	8ca5883a 	add	r18,r17,r18
1000f048:	813fffc4 	addi	r4,r16,-1
1000f04c:	9440ad36 	bltu	r18,r17,1000f304 <__udivdi3+0x560>
1000f050:	9080ac2e 	bgeu	r18,r2,1000f304 <__udivdi3+0x560>
1000f054:	843fff84 	addi	r16,r16,-2
1000f058:	b004943a 	slli	r2,r22,16
1000f05c:	1404b03a 	or	r2,r2,r16
1000f060:	00000206 	br	1000f06c <__udivdi3+0x2c8>
1000f064:	0007883a 	mov	r3,zero
1000f068:	0005883a 	mov	r2,zero
1000f06c:	dfc00b17 	ldw	ra,44(sp)
1000f070:	df000a17 	ldw	fp,40(sp)
1000f074:	ddc00917 	ldw	r23,36(sp)
1000f078:	dd800817 	ldw	r22,32(sp)
1000f07c:	dd400717 	ldw	r21,28(sp)
1000f080:	dd000617 	ldw	r20,24(sp)
1000f084:	dcc00517 	ldw	r19,20(sp)
1000f088:	dc800417 	ldw	r18,16(sp)
1000f08c:	dc400317 	ldw	r17,12(sp)
1000f090:	dc000217 	ldw	r16,8(sp)
1000f094:	dec00c04 	addi	sp,sp,48
1000f098:	f800283a 	ret
1000f09c:	00803fc4 	movi	r2,255
1000f0a0:	11c5803a 	cmpltu	r2,r2,r7
1000f0a4:	100490fa 	slli	r2,r2,3
1000f0a8:	003f9906 	br	1000ef10 <__alt_data_end+0xf800ef10>
1000f0ac:	00803fc4 	movi	r2,255
1000f0b0:	1445803a 	cmpltu	r2,r2,r17
1000f0b4:	100490fa 	slli	r2,r2,3
1000f0b8:	003fad06 	br	1000ef70 <__alt_data_end+0xf800ef70>
1000f0bc:	00804034 	movhi	r2,256
1000f0c0:	10bfffc4 	addi	r2,r2,-1
1000f0c4:	11809f36 	bltu	r2,r6,1000f344 <__udivdi3+0x5a0>
1000f0c8:	00800404 	movi	r2,16
1000f0cc:	003f4c06 	br	1000ee00 <__alt_data_end+0xf800ee00>
1000f0d0:	3dce983a 	sll	r7,r7,r23
1000f0d4:	30b8d83a 	srl	fp,r6,r2
1000f0d8:	80a2d83a 	srl	r17,r16,r2
1000f0dc:	35cc983a 	sll	r6,r6,r23
1000f0e0:	3f38b03a 	or	fp,r7,fp
1000f0e4:	e024d43a 	srli	r18,fp,16
1000f0e8:	9884d83a 	srl	r2,r19,r2
1000f0ec:	85e0983a 	sll	r16,r16,r23
1000f0f0:	8809883a 	mov	r4,r17
1000f0f4:	900b883a 	mov	r5,r18
1000f0f8:	d9800015 	stw	r6,0(sp)
1000f0fc:	1420b03a 	or	r16,r2,r16
1000f100:	000459c0 	call	1000459c <__umodsi3>
1000f104:	900b883a 	mov	r5,r18
1000f108:	8809883a 	mov	r4,r17
1000f10c:	1029883a 	mov	r20,r2
1000f110:	e5bfffcc 	andi	r22,fp,65535
1000f114:	00045380 	call	10004538 <__udivsi3>
1000f118:	100b883a 	mov	r5,r2
1000f11c:	b009883a 	mov	r4,r22
1000f120:	102b883a 	mov	r21,r2
1000f124:	00052a00 	call	100052a0 <__mulsi3>
1000f128:	a028943a 	slli	r20,r20,16
1000f12c:	8006d43a 	srli	r3,r16,16
1000f130:	1d06b03a 	or	r3,r3,r20
1000f134:	1880042e 	bgeu	r3,r2,1000f148 <__udivdi3+0x3a4>
1000f138:	1f07883a 	add	r3,r3,fp
1000f13c:	a93fffc4 	addi	r4,r21,-1
1000f140:	1f00892e 	bgeu	r3,fp,1000f368 <__udivdi3+0x5c4>
1000f144:	202b883a 	mov	r21,r4
1000f148:	18a3c83a 	sub	r17,r3,r2
1000f14c:	8809883a 	mov	r4,r17
1000f150:	900b883a 	mov	r5,r18
1000f154:	000459c0 	call	1000459c <__umodsi3>
1000f158:	1029883a 	mov	r20,r2
1000f15c:	8809883a 	mov	r4,r17
1000f160:	900b883a 	mov	r5,r18
1000f164:	a028943a 	slli	r20,r20,16
1000f168:	00045380 	call	10004538 <__udivsi3>
1000f16c:	100b883a 	mov	r5,r2
1000f170:	b009883a 	mov	r4,r22
1000f174:	843fffcc 	andi	r16,r16,65535
1000f178:	1023883a 	mov	r17,r2
1000f17c:	8520b03a 	or	r16,r16,r20
1000f180:	00052a00 	call	100052a0 <__mulsi3>
1000f184:	8080042e 	bgeu	r16,r2,1000f198 <__udivdi3+0x3f4>
1000f188:	8721883a 	add	r16,r16,fp
1000f18c:	88ffffc4 	addi	r3,r17,-1
1000f190:	8700712e 	bgeu	r16,fp,1000f358 <__udivdi3+0x5b4>
1000f194:	1823883a 	mov	r17,r3
1000f198:	a80e943a 	slli	r7,r21,16
1000f19c:	d8c00017 	ldw	r3,0(sp)
1000f1a0:	80a1c83a 	sub	r16,r16,r2
1000f1a4:	3c64b03a 	or	r18,r7,r17
1000f1a8:	1d3fffcc 	andi	r20,r3,65535
1000f1ac:	9022d43a 	srli	r17,r18,16
1000f1b0:	95bfffcc 	andi	r22,r18,65535
1000f1b4:	a00b883a 	mov	r5,r20
1000f1b8:	b009883a 	mov	r4,r22
1000f1bc:	182ad43a 	srli	r21,r3,16
1000f1c0:	00052a00 	call	100052a0 <__mulsi3>
1000f1c4:	a00b883a 	mov	r5,r20
1000f1c8:	8809883a 	mov	r4,r17
1000f1cc:	1039883a 	mov	fp,r2
1000f1d0:	00052a00 	call	100052a0 <__mulsi3>
1000f1d4:	8809883a 	mov	r4,r17
1000f1d8:	a80b883a 	mov	r5,r21
1000f1dc:	1029883a 	mov	r20,r2
1000f1e0:	00052a00 	call	100052a0 <__mulsi3>
1000f1e4:	a80b883a 	mov	r5,r21
1000f1e8:	b009883a 	mov	r4,r22
1000f1ec:	1023883a 	mov	r17,r2
1000f1f0:	00052a00 	call	100052a0 <__mulsi3>
1000f1f4:	e006d43a 	srli	r3,fp,16
1000f1f8:	1505883a 	add	r2,r2,r20
1000f1fc:	1887883a 	add	r3,r3,r2
1000f200:	1d00022e 	bgeu	r3,r20,1000f20c <__udivdi3+0x468>
1000f204:	00800074 	movhi	r2,1
1000f208:	88a3883a 	add	r17,r17,r2
1000f20c:	1804d43a 	srli	r2,r3,16
1000f210:	1463883a 	add	r17,r2,r17
1000f214:	84404436 	bltu	r16,r17,1000f328 <__udivdi3+0x584>
1000f218:	84403e26 	beq	r16,r17,1000f314 <__udivdi3+0x570>
1000f21c:	9005883a 	mov	r2,r18
1000f220:	0007883a 	mov	r3,zero
1000f224:	003f9106 	br	1000f06c <__alt_data_end+0xf800f06c>
1000f228:	88e2983a 	sll	r17,r17,r3
1000f22c:	80aed83a 	srl	r23,r16,r2
1000f230:	80e0983a 	sll	r16,r16,r3
1000f234:	882ad43a 	srli	r21,r17,16
1000f238:	9884d83a 	srl	r2,r19,r2
1000f23c:	b809883a 	mov	r4,r23
1000f240:	a80b883a 	mov	r5,r21
1000f244:	98e4983a 	sll	r18,r19,r3
1000f248:	142cb03a 	or	r22,r2,r16
1000f24c:	000459c0 	call	1000459c <__umodsi3>
1000f250:	b809883a 	mov	r4,r23
1000f254:	a80b883a 	mov	r5,r21
1000f258:	1027883a 	mov	r19,r2
1000f25c:	8d3fffcc 	andi	r20,r17,65535
1000f260:	00045380 	call	10004538 <__udivsi3>
1000f264:	a009883a 	mov	r4,r20
1000f268:	100b883a 	mov	r5,r2
1000f26c:	102f883a 	mov	r23,r2
1000f270:	00052a00 	call	100052a0 <__mulsi3>
1000f274:	9826943a 	slli	r19,r19,16
1000f278:	b008d43a 	srli	r4,r22,16
1000f27c:	24c8b03a 	or	r4,r4,r19
1000f280:	2080062e 	bgeu	r4,r2,1000f29c <__udivdi3+0x4f8>
1000f284:	2449883a 	add	r4,r4,r17
1000f288:	b8ffffc4 	addi	r3,r23,-1
1000f28c:	24403c36 	bltu	r4,r17,1000f380 <__udivdi3+0x5dc>
1000f290:	20803b2e 	bgeu	r4,r2,1000f380 <__udivdi3+0x5dc>
1000f294:	bdffff84 	addi	r23,r23,-2
1000f298:	2449883a 	add	r4,r4,r17
1000f29c:	20a1c83a 	sub	r16,r4,r2
1000f2a0:	a80b883a 	mov	r5,r21
1000f2a4:	8009883a 	mov	r4,r16
1000f2a8:	000459c0 	call	1000459c <__umodsi3>
1000f2ac:	a80b883a 	mov	r5,r21
1000f2b0:	8009883a 	mov	r4,r16
1000f2b4:	1027883a 	mov	r19,r2
1000f2b8:	00045380 	call	10004538 <__udivsi3>
1000f2bc:	a009883a 	mov	r4,r20
1000f2c0:	100b883a 	mov	r5,r2
1000f2c4:	9826943a 	slli	r19,r19,16
1000f2c8:	1039883a 	mov	fp,r2
1000f2cc:	00052a00 	call	100052a0 <__mulsi3>
1000f2d0:	b13fffcc 	andi	r4,r22,65535
1000f2d4:	24c8b03a 	or	r4,r4,r19
1000f2d8:	2080062e 	bgeu	r4,r2,1000f2f4 <__udivdi3+0x550>
1000f2dc:	2449883a 	add	r4,r4,r17
1000f2e0:	e0ffffc4 	addi	r3,fp,-1
1000f2e4:	24402436 	bltu	r4,r17,1000f378 <__udivdi3+0x5d4>
1000f2e8:	2080232e 	bgeu	r4,r2,1000f378 <__udivdi3+0x5d4>
1000f2ec:	e73fff84 	addi	fp,fp,-2
1000f2f0:	2449883a 	add	r4,r4,r17
1000f2f4:	b82e943a 	slli	r23,r23,16
1000f2f8:	20a1c83a 	sub	r16,r4,r2
1000f2fc:	bf06b03a 	or	r3,r23,fp
1000f300:	003f2806 	br	1000efa4 <__alt_data_end+0xf800efa4>
1000f304:	2021883a 	mov	r16,r4
1000f308:	003f5306 	br	1000f058 <__alt_data_end+0xf800f058>
1000f30c:	1821883a 	mov	r16,r3
1000f310:	003ef406 	br	1000eee4 <__alt_data_end+0xf800eee4>
1000f314:	1806943a 	slli	r3,r3,16
1000f318:	9de6983a 	sll	r19,r19,r23
1000f31c:	e73fffcc 	andi	fp,fp,65535
1000f320:	1f07883a 	add	r3,r3,fp
1000f324:	98ffbd2e 	bgeu	r19,r3,1000f21c <__alt_data_end+0xf800f21c>
1000f328:	90bfffc4 	addi	r2,r18,-1
1000f32c:	0007883a 	mov	r3,zero
1000f330:	003f4e06 	br	1000f06c <__alt_data_end+0xf800f06c>
1000f334:	00800604 	movi	r2,24
1000f338:	003ef506 	br	1000ef10 <__alt_data_end+0xf800ef10>
1000f33c:	00800604 	movi	r2,24
1000f340:	003f0b06 	br	1000ef70 <__alt_data_end+0xf800ef70>
1000f344:	00800604 	movi	r2,24
1000f348:	003ead06 	br	1000ee00 <__alt_data_end+0xf800ee00>
1000f34c:	0007883a 	mov	r3,zero
1000f350:	00800044 	movi	r2,1
1000f354:	003f4506 	br	1000f06c <__alt_data_end+0xf800f06c>
1000f358:	80bf8e2e 	bgeu	r16,r2,1000f194 <__alt_data_end+0xf800f194>
1000f35c:	8c7fff84 	addi	r17,r17,-2
1000f360:	8721883a 	add	r16,r16,fp
1000f364:	003f8c06 	br	1000f198 <__alt_data_end+0xf800f198>
1000f368:	18bf762e 	bgeu	r3,r2,1000f144 <__alt_data_end+0xf800f144>
1000f36c:	ad7fff84 	addi	r21,r21,-2
1000f370:	1f07883a 	add	r3,r3,fp
1000f374:	003f7406 	br	1000f148 <__alt_data_end+0xf800f148>
1000f378:	1839883a 	mov	fp,r3
1000f37c:	003fdd06 	br	1000f2f4 <__alt_data_end+0xf800f2f4>
1000f380:	182f883a 	mov	r23,r3
1000f384:	003fc506 	br	1000f29c <__alt_data_end+0xf800f29c>
1000f388:	b5bfff84 	addi	r22,r22,-2
1000f38c:	3c4f883a 	add	r7,r7,r17
1000f390:	003f1a06 	br	1000effc <__alt_data_end+0xf800effc>
1000f394:	b5bfff84 	addi	r22,r22,-2
1000f398:	1c47883a 	add	r3,r3,r17
1000f39c:	003ebc06 	br	1000ee90 <__alt_data_end+0xf800ee90>

1000f3a0 <__umoddi3>:
1000f3a0:	defff304 	addi	sp,sp,-52
1000f3a4:	df000b15 	stw	fp,44(sp)
1000f3a8:	dc400415 	stw	r17,16(sp)
1000f3ac:	dc000315 	stw	r16,12(sp)
1000f3b0:	dfc00c15 	stw	ra,48(sp)
1000f3b4:	ddc00a15 	stw	r23,40(sp)
1000f3b8:	dd800915 	stw	r22,36(sp)
1000f3bc:	dd400815 	stw	r21,32(sp)
1000f3c0:	dd000715 	stw	r20,28(sp)
1000f3c4:	dcc00615 	stw	r19,24(sp)
1000f3c8:	dc800515 	stw	r18,20(sp)
1000f3cc:	2021883a 	mov	r16,r4
1000f3d0:	2823883a 	mov	r17,r5
1000f3d4:	2839883a 	mov	fp,r5
1000f3d8:	3800401e 	bne	r7,zero,1000f4dc <__umoddi3+0x13c>
1000f3dc:	3027883a 	mov	r19,r6
1000f3e0:	2029883a 	mov	r20,r4
1000f3e4:	2980552e 	bgeu	r5,r6,1000f53c <__umoddi3+0x19c>
1000f3e8:	00bfffd4 	movui	r2,65535
1000f3ec:	1180a236 	bltu	r2,r6,1000f678 <__umoddi3+0x2d8>
1000f3f0:	01003fc4 	movi	r4,255
1000f3f4:	2189803a 	cmpltu	r4,r4,r6
1000f3f8:	200890fa 	slli	r4,r4,3
1000f3fc:	3104d83a 	srl	r2,r6,r4
1000f400:	00c40074 	movhi	r3,4097
1000f404:	18d16404 	addi	r3,r3,17808
1000f408:	1885883a 	add	r2,r3,r2
1000f40c:	10c00003 	ldbu	r3,0(r2)
1000f410:	00800804 	movi	r2,32
1000f414:	1909883a 	add	r4,r3,r4
1000f418:	1125c83a 	sub	r18,r2,r4
1000f41c:	90000526 	beq	r18,zero,1000f434 <__umoddi3+0x94>
1000f420:	8ca2983a 	sll	r17,r17,r18
1000f424:	8108d83a 	srl	r4,r16,r4
1000f428:	34a6983a 	sll	r19,r6,r18
1000f42c:	84a8983a 	sll	r20,r16,r18
1000f430:	2478b03a 	or	fp,r4,r17
1000f434:	982cd43a 	srli	r22,r19,16
1000f438:	e009883a 	mov	r4,fp
1000f43c:	9dffffcc 	andi	r23,r19,65535
1000f440:	b00b883a 	mov	r5,r22
1000f444:	000459c0 	call	1000459c <__umodsi3>
1000f448:	b00b883a 	mov	r5,r22
1000f44c:	e009883a 	mov	r4,fp
1000f450:	102b883a 	mov	r21,r2
1000f454:	00045380 	call	10004538 <__udivsi3>
1000f458:	100b883a 	mov	r5,r2
1000f45c:	b809883a 	mov	r4,r23
1000f460:	00052a00 	call	100052a0 <__mulsi3>
1000f464:	a82a943a 	slli	r21,r21,16
1000f468:	a006d43a 	srli	r3,r20,16
1000f46c:	1d46b03a 	or	r3,r3,r21
1000f470:	1880032e 	bgeu	r3,r2,1000f480 <__umoddi3+0xe0>
1000f474:	1cc7883a 	add	r3,r3,r19
1000f478:	1cc00136 	bltu	r3,r19,1000f480 <__umoddi3+0xe0>
1000f47c:	18813136 	bltu	r3,r2,1000f944 <__umoddi3+0x5a4>
1000f480:	18a1c83a 	sub	r16,r3,r2
1000f484:	b00b883a 	mov	r5,r22
1000f488:	8009883a 	mov	r4,r16
1000f48c:	000459c0 	call	1000459c <__umodsi3>
1000f490:	b00b883a 	mov	r5,r22
1000f494:	8009883a 	mov	r4,r16
1000f498:	1023883a 	mov	r17,r2
1000f49c:	00045380 	call	10004538 <__udivsi3>
1000f4a0:	100b883a 	mov	r5,r2
1000f4a4:	b809883a 	mov	r4,r23
1000f4a8:	8822943a 	slli	r17,r17,16
1000f4ac:	00052a00 	call	100052a0 <__mulsi3>
1000f4b0:	a0ffffcc 	andi	r3,r20,65535
1000f4b4:	1c46b03a 	or	r3,r3,r17
1000f4b8:	1880042e 	bgeu	r3,r2,1000f4cc <__umoddi3+0x12c>
1000f4bc:	1cc7883a 	add	r3,r3,r19
1000f4c0:	1cc00236 	bltu	r3,r19,1000f4cc <__umoddi3+0x12c>
1000f4c4:	1880012e 	bgeu	r3,r2,1000f4cc <__umoddi3+0x12c>
1000f4c8:	1cc7883a 	add	r3,r3,r19
1000f4cc:	1885c83a 	sub	r2,r3,r2
1000f4d0:	1484d83a 	srl	r2,r2,r18
1000f4d4:	0007883a 	mov	r3,zero
1000f4d8:	00005306 	br	1000f628 <__umoddi3+0x288>
1000f4dc:	29c05036 	bltu	r5,r7,1000f620 <__umoddi3+0x280>
1000f4e0:	00bfffd4 	movui	r2,65535
1000f4e4:	11c05c2e 	bgeu	r2,r7,1000f658 <__umoddi3+0x2b8>
1000f4e8:	00804034 	movhi	r2,256
1000f4ec:	10bfffc4 	addi	r2,r2,-1
1000f4f0:	11c10636 	bltu	r2,r7,1000f90c <__umoddi3+0x56c>
1000f4f4:	01000404 	movi	r4,16
1000f4f8:	3904d83a 	srl	r2,r7,r4
1000f4fc:	00c40074 	movhi	r3,4097
1000f500:	18d16404 	addi	r3,r3,17808
1000f504:	1885883a 	add	r2,r3,r2
1000f508:	14c00003 	ldbu	r19,0(r2)
1000f50c:	00c00804 	movi	r3,32
1000f510:	9927883a 	add	r19,r19,r4
1000f514:	1ce9c83a 	sub	r20,r3,r19
1000f518:	a0005c1e 	bne	r20,zero,1000f68c <__umoddi3+0x2ec>
1000f51c:	3c400136 	bltu	r7,r17,1000f524 <__umoddi3+0x184>
1000f520:	81810a36 	bltu	r16,r6,1000f94c <__umoddi3+0x5ac>
1000f524:	8185c83a 	sub	r2,r16,r6
1000f528:	89e3c83a 	sub	r17,r17,r7
1000f52c:	8089803a 	cmpltu	r4,r16,r2
1000f530:	8939c83a 	sub	fp,r17,r4
1000f534:	e007883a 	mov	r3,fp
1000f538:	00003b06 	br	1000f628 <__umoddi3+0x288>
1000f53c:	3000041e 	bne	r6,zero,1000f550 <__umoddi3+0x1b0>
1000f540:	000b883a 	mov	r5,zero
1000f544:	01000044 	movi	r4,1
1000f548:	00045380 	call	10004538 <__udivsi3>
1000f54c:	1027883a 	mov	r19,r2
1000f550:	00bfffd4 	movui	r2,65535
1000f554:	14c0442e 	bgeu	r2,r19,1000f668 <__umoddi3+0x2c8>
1000f558:	00804034 	movhi	r2,256
1000f55c:	10bfffc4 	addi	r2,r2,-1
1000f560:	14c0ec36 	bltu	r2,r19,1000f914 <__umoddi3+0x574>
1000f564:	00800404 	movi	r2,16
1000f568:	9886d83a 	srl	r3,r19,r2
1000f56c:	01040074 	movhi	r4,4097
1000f570:	21116404 	addi	r4,r4,17808
1000f574:	20c7883a 	add	r3,r4,r3
1000f578:	18c00003 	ldbu	r3,0(r3)
1000f57c:	1887883a 	add	r3,r3,r2
1000f580:	00800804 	movi	r2,32
1000f584:	10e5c83a 	sub	r18,r2,r3
1000f588:	9000ab1e 	bne	r18,zero,1000f838 <__umoddi3+0x498>
1000f58c:	982cd43a 	srli	r22,r19,16
1000f590:	8ce3c83a 	sub	r17,r17,r19
1000f594:	9dffffcc 	andi	r23,r19,65535
1000f598:	b00b883a 	mov	r5,r22
1000f59c:	8809883a 	mov	r4,r17
1000f5a0:	000459c0 	call	1000459c <__umodsi3>
1000f5a4:	b00b883a 	mov	r5,r22
1000f5a8:	8809883a 	mov	r4,r17
1000f5ac:	102b883a 	mov	r21,r2
1000f5b0:	00045380 	call	10004538 <__udivsi3>
1000f5b4:	b80b883a 	mov	r5,r23
1000f5b8:	1009883a 	mov	r4,r2
1000f5bc:	00052a00 	call	100052a0 <__mulsi3>
1000f5c0:	a82a943a 	slli	r21,r21,16
1000f5c4:	a006d43a 	srli	r3,r20,16
1000f5c8:	1d46b03a 	or	r3,r3,r21
1000f5cc:	1880042e 	bgeu	r3,r2,1000f5e0 <__umoddi3+0x240>
1000f5d0:	1cc7883a 	add	r3,r3,r19
1000f5d4:	1cc00236 	bltu	r3,r19,1000f5e0 <__umoddi3+0x240>
1000f5d8:	1880012e 	bgeu	r3,r2,1000f5e0 <__umoddi3+0x240>
1000f5dc:	1cc7883a 	add	r3,r3,r19
1000f5e0:	18a1c83a 	sub	r16,r3,r2
1000f5e4:	b00b883a 	mov	r5,r22
1000f5e8:	8009883a 	mov	r4,r16
1000f5ec:	000459c0 	call	1000459c <__umodsi3>
1000f5f0:	1023883a 	mov	r17,r2
1000f5f4:	b00b883a 	mov	r5,r22
1000f5f8:	8009883a 	mov	r4,r16
1000f5fc:	00045380 	call	10004538 <__udivsi3>
1000f600:	8822943a 	slli	r17,r17,16
1000f604:	b80b883a 	mov	r5,r23
1000f608:	1009883a 	mov	r4,r2
1000f60c:	00052a00 	call	100052a0 <__mulsi3>
1000f610:	a53fffcc 	andi	r20,r20,65535
1000f614:	a446b03a 	or	r3,r20,r17
1000f618:	18bfac2e 	bgeu	r3,r2,1000f4cc <__alt_data_end+0xf800f4cc>
1000f61c:	003fa706 	br	1000f4bc <__alt_data_end+0xf800f4bc>
1000f620:	2005883a 	mov	r2,r4
1000f624:	2807883a 	mov	r3,r5
1000f628:	dfc00c17 	ldw	ra,48(sp)
1000f62c:	df000b17 	ldw	fp,44(sp)
1000f630:	ddc00a17 	ldw	r23,40(sp)
1000f634:	dd800917 	ldw	r22,36(sp)
1000f638:	dd400817 	ldw	r21,32(sp)
1000f63c:	dd000717 	ldw	r20,28(sp)
1000f640:	dcc00617 	ldw	r19,24(sp)
1000f644:	dc800517 	ldw	r18,20(sp)
1000f648:	dc400417 	ldw	r17,16(sp)
1000f64c:	dc000317 	ldw	r16,12(sp)
1000f650:	dec00d04 	addi	sp,sp,52
1000f654:	f800283a 	ret
1000f658:	04c03fc4 	movi	r19,255
1000f65c:	99c9803a 	cmpltu	r4,r19,r7
1000f660:	200890fa 	slli	r4,r4,3
1000f664:	003fa406 	br	1000f4f8 <__alt_data_end+0xf800f4f8>
1000f668:	00803fc4 	movi	r2,255
1000f66c:	14c5803a 	cmpltu	r2,r2,r19
1000f670:	100490fa 	slli	r2,r2,3
1000f674:	003fbc06 	br	1000f568 <__alt_data_end+0xf800f568>
1000f678:	00804034 	movhi	r2,256
1000f67c:	10bfffc4 	addi	r2,r2,-1
1000f680:	1180a636 	bltu	r2,r6,1000f91c <__umoddi3+0x57c>
1000f684:	01000404 	movi	r4,16
1000f688:	003f5c06 	br	1000f3fc <__alt_data_end+0xf800f3fc>
1000f68c:	3d0e983a 	sll	r7,r7,r20
1000f690:	34ead83a 	srl	r21,r6,r19
1000f694:	8cc6d83a 	srl	r3,r17,r19
1000f698:	8d10983a 	sll	r8,r17,r20
1000f69c:	3d6ab03a 	or	r21,r7,r21
1000f6a0:	a82cd43a 	srli	r22,r21,16
1000f6a4:	84e2d83a 	srl	r17,r16,r19
1000f6a8:	1809883a 	mov	r4,r3
1000f6ac:	b00b883a 	mov	r5,r22
1000f6b0:	8a22b03a 	or	r17,r17,r8
1000f6b4:	3524983a 	sll	r18,r6,r20
1000f6b8:	dc400015 	stw	r17,0(sp)
1000f6bc:	d8c00115 	stw	r3,4(sp)
1000f6c0:	000459c0 	call	1000459c <__umodsi3>
1000f6c4:	d8c00117 	ldw	r3,4(sp)
1000f6c8:	b00b883a 	mov	r5,r22
1000f6cc:	1039883a 	mov	fp,r2
1000f6d0:	1809883a 	mov	r4,r3
1000f6d4:	00045380 	call	10004538 <__udivsi3>
1000f6d8:	adffffcc 	andi	r23,r21,65535
1000f6dc:	100b883a 	mov	r5,r2
1000f6e0:	b809883a 	mov	r4,r23
1000f6e4:	1023883a 	mov	r17,r2
1000f6e8:	00052a00 	call	100052a0 <__mulsi3>
1000f6ec:	d9400017 	ldw	r5,0(sp)
1000f6f0:	e008943a 	slli	r4,fp,16
1000f6f4:	8520983a 	sll	r16,r16,r20
1000f6f8:	2806d43a 	srli	r3,r5,16
1000f6fc:	1906b03a 	or	r3,r3,r4
1000f700:	1880042e 	bgeu	r3,r2,1000f714 <__umoddi3+0x374>
1000f704:	1d47883a 	add	r3,r3,r21
1000f708:	893fffc4 	addi	r4,r17,-1
1000f70c:	1d40892e 	bgeu	r3,r21,1000f934 <__umoddi3+0x594>
1000f710:	2023883a 	mov	r17,r4
1000f714:	18b9c83a 	sub	fp,r3,r2
1000f718:	b00b883a 	mov	r5,r22
1000f71c:	e009883a 	mov	r4,fp
1000f720:	000459c0 	call	1000459c <__umodsi3>
1000f724:	b00b883a 	mov	r5,r22
1000f728:	e009883a 	mov	r4,fp
1000f72c:	d8800215 	stw	r2,8(sp)
1000f730:	00045380 	call	10004538 <__udivsi3>
1000f734:	100b883a 	mov	r5,r2
1000f738:	b809883a 	mov	r4,r23
1000f73c:	102d883a 	mov	r22,r2
1000f740:	00052a00 	call	100052a0 <__mulsi3>
1000f744:	d9800217 	ldw	r6,8(sp)
1000f748:	d8c00017 	ldw	r3,0(sp)
1000f74c:	300c943a 	slli	r6,r6,16
1000f750:	1a3fffcc 	andi	r8,r3,65535
1000f754:	4190b03a 	or	r8,r8,r6
1000f758:	4080042e 	bgeu	r8,r2,1000f76c <__umoddi3+0x3cc>
1000f75c:	4551883a 	add	r8,r8,r21
1000f760:	b0ffffc4 	addi	r3,r22,-1
1000f764:	45406f2e 	bgeu	r8,r21,1000f924 <__umoddi3+0x584>
1000f768:	182d883a 	mov	r22,r3
1000f76c:	880e943a 	slli	r7,r17,16
1000f770:	9006d43a 	srli	r3,r18,16
1000f774:	91bfffcc 	andi	r6,r18,65535
1000f778:	3dacb03a 	or	r22,r7,r22
1000f77c:	b02ed43a 	srli	r23,r22,16
1000f780:	b5bfffcc 	andi	r22,r22,65535
1000f784:	300b883a 	mov	r5,r6
1000f788:	b009883a 	mov	r4,r22
1000f78c:	40a3c83a 	sub	r17,r8,r2
1000f790:	d8c00115 	stw	r3,4(sp)
1000f794:	d9800215 	stw	r6,8(sp)
1000f798:	00052a00 	call	100052a0 <__mulsi3>
1000f79c:	d9800217 	ldw	r6,8(sp)
1000f7a0:	b809883a 	mov	r4,r23
1000f7a4:	1039883a 	mov	fp,r2
1000f7a8:	300b883a 	mov	r5,r6
1000f7ac:	00052a00 	call	100052a0 <__mulsi3>
1000f7b0:	d8c00117 	ldw	r3,4(sp)
1000f7b4:	b809883a 	mov	r4,r23
1000f7b8:	d8800215 	stw	r2,8(sp)
1000f7bc:	180b883a 	mov	r5,r3
1000f7c0:	00052a00 	call	100052a0 <__mulsi3>
1000f7c4:	d8c00117 	ldw	r3,4(sp)
1000f7c8:	b009883a 	mov	r4,r22
1000f7cc:	102f883a 	mov	r23,r2
1000f7d0:	180b883a 	mov	r5,r3
1000f7d4:	00052a00 	call	100052a0 <__mulsi3>
1000f7d8:	d9800217 	ldw	r6,8(sp)
1000f7dc:	e006d43a 	srli	r3,fp,16
1000f7e0:	1185883a 	add	r2,r2,r6
1000f7e4:	1885883a 	add	r2,r3,r2
1000f7e8:	1180022e 	bgeu	r2,r6,1000f7f4 <__umoddi3+0x454>
1000f7ec:	00c00074 	movhi	r3,1
1000f7f0:	b8ef883a 	add	r23,r23,r3
1000f7f4:	1006d43a 	srli	r3,r2,16
1000f7f8:	1004943a 	slli	r2,r2,16
1000f7fc:	e73fffcc 	andi	fp,fp,65535
1000f800:	1dc7883a 	add	r3,r3,r23
1000f804:	1739883a 	add	fp,r2,fp
1000f808:	88c03a36 	bltu	r17,r3,1000f8f4 <__umoddi3+0x554>
1000f80c:	88c05126 	beq	r17,r3,1000f954 <__umoddi3+0x5b4>
1000f810:	88c9c83a 	sub	r4,r17,r3
1000f814:	e00f883a 	mov	r7,fp
1000f818:	81cfc83a 	sub	r7,r16,r7
1000f81c:	81c7803a 	cmpltu	r3,r16,r7
1000f820:	20c7c83a 	sub	r3,r4,r3
1000f824:	1cc4983a 	sll	r2,r3,r19
1000f828:	3d0ed83a 	srl	r7,r7,r20
1000f82c:	1d06d83a 	srl	r3,r3,r20
1000f830:	11c4b03a 	or	r2,r2,r7
1000f834:	003f7c06 	br	1000f628 <__alt_data_end+0xf800f628>
1000f838:	9ca6983a 	sll	r19,r19,r18
1000f83c:	88f8d83a 	srl	fp,r17,r3
1000f840:	80c4d83a 	srl	r2,r16,r3
1000f844:	982cd43a 	srli	r22,r19,16
1000f848:	8ca2983a 	sll	r17,r17,r18
1000f84c:	e009883a 	mov	r4,fp
1000f850:	b00b883a 	mov	r5,r22
1000f854:	146ab03a 	or	r21,r2,r17
1000f858:	000459c0 	call	1000459c <__umodsi3>
1000f85c:	b00b883a 	mov	r5,r22
1000f860:	e009883a 	mov	r4,fp
1000f864:	1029883a 	mov	r20,r2
1000f868:	9dffffcc 	andi	r23,r19,65535
1000f86c:	00045380 	call	10004538 <__udivsi3>
1000f870:	b809883a 	mov	r4,r23
1000f874:	100b883a 	mov	r5,r2
1000f878:	00052a00 	call	100052a0 <__mulsi3>
1000f87c:	a008943a 	slli	r4,r20,16
1000f880:	a806d43a 	srli	r3,r21,16
1000f884:	84a8983a 	sll	r20,r16,r18
1000f888:	1906b03a 	or	r3,r3,r4
1000f88c:	1880042e 	bgeu	r3,r2,1000f8a0 <__umoddi3+0x500>
1000f890:	1cc7883a 	add	r3,r3,r19
1000f894:	1cc00236 	bltu	r3,r19,1000f8a0 <__umoddi3+0x500>
1000f898:	1880012e 	bgeu	r3,r2,1000f8a0 <__umoddi3+0x500>
1000f89c:	1cc7883a 	add	r3,r3,r19
1000f8a0:	18a3c83a 	sub	r17,r3,r2
1000f8a4:	b00b883a 	mov	r5,r22
1000f8a8:	8809883a 	mov	r4,r17
1000f8ac:	000459c0 	call	1000459c <__umodsi3>
1000f8b0:	b00b883a 	mov	r5,r22
1000f8b4:	8809883a 	mov	r4,r17
1000f8b8:	1021883a 	mov	r16,r2
1000f8bc:	00045380 	call	10004538 <__udivsi3>
1000f8c0:	100b883a 	mov	r5,r2
1000f8c4:	b809883a 	mov	r4,r23
1000f8c8:	8020943a 	slli	r16,r16,16
1000f8cc:	00052a00 	call	100052a0 <__mulsi3>
1000f8d0:	a8ffffcc 	andi	r3,r21,65535
1000f8d4:	1c06b03a 	or	r3,r3,r16
1000f8d8:	1880042e 	bgeu	r3,r2,1000f8ec <__umoddi3+0x54c>
1000f8dc:	1cc7883a 	add	r3,r3,r19
1000f8e0:	1cc00236 	bltu	r3,r19,1000f8ec <__umoddi3+0x54c>
1000f8e4:	1880012e 	bgeu	r3,r2,1000f8ec <__umoddi3+0x54c>
1000f8e8:	1cc7883a 	add	r3,r3,r19
1000f8ec:	18a3c83a 	sub	r17,r3,r2
1000f8f0:	003f2906 	br	1000f598 <__alt_data_end+0xf800f598>
1000f8f4:	e48fc83a 	sub	r7,fp,r18
1000f8f8:	1d49c83a 	sub	r4,r3,r21
1000f8fc:	e1f9803a 	cmpltu	fp,fp,r7
1000f900:	2739c83a 	sub	fp,r4,fp
1000f904:	8f09c83a 	sub	r4,r17,fp
1000f908:	003fc306 	br	1000f818 <__alt_data_end+0xf800f818>
1000f90c:	01000604 	movi	r4,24
1000f910:	003ef906 	br	1000f4f8 <__alt_data_end+0xf800f4f8>
1000f914:	00800604 	movi	r2,24
1000f918:	003f1306 	br	1000f568 <__alt_data_end+0xf800f568>
1000f91c:	01000604 	movi	r4,24
1000f920:	003eb606 	br	1000f3fc <__alt_data_end+0xf800f3fc>
1000f924:	40bf902e 	bgeu	r8,r2,1000f768 <__alt_data_end+0xf800f768>
1000f928:	b5bfff84 	addi	r22,r22,-2
1000f92c:	4551883a 	add	r8,r8,r21
1000f930:	003f8e06 	br	1000f76c <__alt_data_end+0xf800f76c>
1000f934:	18bf762e 	bgeu	r3,r2,1000f710 <__alt_data_end+0xf800f710>
1000f938:	8c7fff84 	addi	r17,r17,-2
1000f93c:	1d47883a 	add	r3,r3,r21
1000f940:	003f7406 	br	1000f714 <__alt_data_end+0xf800f714>
1000f944:	1cc7883a 	add	r3,r3,r19
1000f948:	003ecd06 	br	1000f480 <__alt_data_end+0xf800f480>
1000f94c:	8005883a 	mov	r2,r16
1000f950:	003ef806 	br	1000f534 <__alt_data_end+0xf800f534>
1000f954:	873fe736 	bltu	r16,fp,1000f8f4 <__alt_data_end+0xf800f8f4>
1000f958:	e00f883a 	mov	r7,fp
1000f95c:	0009883a 	mov	r4,zero
1000f960:	003fad06 	br	1000f818 <__alt_data_end+0xf800f818>

1000f964 <__adddf3>:
1000f964:	02c00434 	movhi	r11,16
1000f968:	5affffc4 	addi	r11,r11,-1
1000f96c:	2806d7fa 	srli	r3,r5,31
1000f970:	2ad4703a 	and	r10,r5,r11
1000f974:	3ad2703a 	and	r9,r7,r11
1000f978:	3804d53a 	srli	r2,r7,20
1000f97c:	3018d77a 	srli	r12,r6,29
1000f980:	280ad53a 	srli	r5,r5,20
1000f984:	501490fa 	slli	r10,r10,3
1000f988:	2010d77a 	srli	r8,r4,29
1000f98c:	481290fa 	slli	r9,r9,3
1000f990:	380ed7fa 	srli	r7,r7,31
1000f994:	defffb04 	addi	sp,sp,-20
1000f998:	dc800215 	stw	r18,8(sp)
1000f99c:	dc400115 	stw	r17,4(sp)
1000f9a0:	dc000015 	stw	r16,0(sp)
1000f9a4:	dfc00415 	stw	ra,16(sp)
1000f9a8:	dcc00315 	stw	r19,12(sp)
1000f9ac:	1c803fcc 	andi	r18,r3,255
1000f9b0:	2c01ffcc 	andi	r16,r5,2047
1000f9b4:	5210b03a 	or	r8,r10,r8
1000f9b8:	202290fa 	slli	r17,r4,3
1000f9bc:	1081ffcc 	andi	r2,r2,2047
1000f9c0:	4b12b03a 	or	r9,r9,r12
1000f9c4:	300c90fa 	slli	r6,r6,3
1000f9c8:	91c07526 	beq	r18,r7,1000fba0 <__adddf3+0x23c>
1000f9cc:	8087c83a 	sub	r3,r16,r2
1000f9d0:	00c0ab0e 	bge	zero,r3,1000fc80 <__adddf3+0x31c>
1000f9d4:	10002a1e 	bne	r2,zero,1000fa80 <__adddf3+0x11c>
1000f9d8:	4984b03a 	or	r2,r9,r6
1000f9dc:	1000961e 	bne	r2,zero,1000fc38 <__adddf3+0x2d4>
1000f9e0:	888001cc 	andi	r2,r17,7
1000f9e4:	10000726 	beq	r2,zero,1000fa04 <__adddf3+0xa0>
1000f9e8:	888003cc 	andi	r2,r17,15
1000f9ec:	00c00104 	movi	r3,4
1000f9f0:	10c00426 	beq	r2,r3,1000fa04 <__adddf3+0xa0>
1000f9f4:	88c7883a 	add	r3,r17,r3
1000f9f8:	1c63803a 	cmpltu	r17,r3,r17
1000f9fc:	4451883a 	add	r8,r8,r17
1000fa00:	1823883a 	mov	r17,r3
1000fa04:	4080202c 	andhi	r2,r8,128
1000fa08:	10005926 	beq	r2,zero,1000fb70 <__adddf3+0x20c>
1000fa0c:	84000044 	addi	r16,r16,1
1000fa10:	0081ffc4 	movi	r2,2047
1000fa14:	8080ba26 	beq	r16,r2,1000fd00 <__adddf3+0x39c>
1000fa18:	00bfe034 	movhi	r2,65408
1000fa1c:	10bfffc4 	addi	r2,r2,-1
1000fa20:	4090703a 	and	r8,r8,r2
1000fa24:	4004977a 	slli	r2,r8,29
1000fa28:	4010927a 	slli	r8,r8,9
1000fa2c:	8822d0fa 	srli	r17,r17,3
1000fa30:	8401ffcc 	andi	r16,r16,2047
1000fa34:	4010d33a 	srli	r8,r8,12
1000fa38:	9007883a 	mov	r3,r18
1000fa3c:	1444b03a 	or	r2,r2,r17
1000fa40:	8401ffcc 	andi	r16,r16,2047
1000fa44:	8020953a 	slli	r16,r16,20
1000fa48:	18c03fcc 	andi	r3,r3,255
1000fa4c:	01000434 	movhi	r4,16
1000fa50:	213fffc4 	addi	r4,r4,-1
1000fa54:	180697fa 	slli	r3,r3,31
1000fa58:	4110703a 	and	r8,r8,r4
1000fa5c:	4410b03a 	or	r8,r8,r16
1000fa60:	40c6b03a 	or	r3,r8,r3
1000fa64:	dfc00417 	ldw	ra,16(sp)
1000fa68:	dcc00317 	ldw	r19,12(sp)
1000fa6c:	dc800217 	ldw	r18,8(sp)
1000fa70:	dc400117 	ldw	r17,4(sp)
1000fa74:	dc000017 	ldw	r16,0(sp)
1000fa78:	dec00504 	addi	sp,sp,20
1000fa7c:	f800283a 	ret
1000fa80:	0081ffc4 	movi	r2,2047
1000fa84:	80bfd626 	beq	r16,r2,1000f9e0 <__alt_data_end+0xf800f9e0>
1000fa88:	4a402034 	orhi	r9,r9,128
1000fa8c:	00800e04 	movi	r2,56
1000fa90:	10c09f16 	blt	r2,r3,1000fd10 <__adddf3+0x3ac>
1000fa94:	008007c4 	movi	r2,31
1000fa98:	10c0c216 	blt	r2,r3,1000fda4 <__adddf3+0x440>
1000fa9c:	00800804 	movi	r2,32
1000faa0:	10c5c83a 	sub	r2,r2,r3
1000faa4:	488a983a 	sll	r5,r9,r2
1000faa8:	30c8d83a 	srl	r4,r6,r3
1000faac:	3084983a 	sll	r2,r6,r2
1000fab0:	48c6d83a 	srl	r3,r9,r3
1000fab4:	290cb03a 	or	r6,r5,r4
1000fab8:	1004c03a 	cmpne	r2,r2,zero
1000fabc:	308cb03a 	or	r6,r6,r2
1000fac0:	898dc83a 	sub	r6,r17,r6
1000fac4:	89a3803a 	cmpltu	r17,r17,r6
1000fac8:	40d1c83a 	sub	r8,r8,r3
1000facc:	4451c83a 	sub	r8,r8,r17
1000fad0:	3023883a 	mov	r17,r6
1000fad4:	4080202c 	andhi	r2,r8,128
1000fad8:	10002326 	beq	r2,zero,1000fb68 <__adddf3+0x204>
1000fadc:	04c02034 	movhi	r19,128
1000fae0:	9cffffc4 	addi	r19,r19,-1
1000fae4:	44e6703a 	and	r19,r8,r19
1000fae8:	98007626 	beq	r19,zero,1000fcc4 <__adddf3+0x360>
1000faec:	9809883a 	mov	r4,r19
1000faf0:	000523c0 	call	1000523c <__clzsi2>
1000faf4:	10fffe04 	addi	r3,r2,-8
1000faf8:	010007c4 	movi	r4,31
1000fafc:	20c07716 	blt	r4,r3,1000fcdc <__adddf3+0x378>
1000fb00:	00800804 	movi	r2,32
1000fb04:	10c5c83a 	sub	r2,r2,r3
1000fb08:	8884d83a 	srl	r2,r17,r2
1000fb0c:	98d0983a 	sll	r8,r19,r3
1000fb10:	88e2983a 	sll	r17,r17,r3
1000fb14:	1204b03a 	or	r2,r2,r8
1000fb18:	1c007416 	blt	r3,r16,1000fcec <__adddf3+0x388>
1000fb1c:	1c21c83a 	sub	r16,r3,r16
1000fb20:	82000044 	addi	r8,r16,1
1000fb24:	00c007c4 	movi	r3,31
1000fb28:	1a009116 	blt	r3,r8,1000fd70 <__adddf3+0x40c>
1000fb2c:	00c00804 	movi	r3,32
1000fb30:	1a07c83a 	sub	r3,r3,r8
1000fb34:	8a08d83a 	srl	r4,r17,r8
1000fb38:	88e2983a 	sll	r17,r17,r3
1000fb3c:	10c6983a 	sll	r3,r2,r3
1000fb40:	1210d83a 	srl	r8,r2,r8
1000fb44:	8804c03a 	cmpne	r2,r17,zero
1000fb48:	1906b03a 	or	r3,r3,r4
1000fb4c:	18a2b03a 	or	r17,r3,r2
1000fb50:	0021883a 	mov	r16,zero
1000fb54:	003fa206 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000fb58:	1890b03a 	or	r8,r3,r2
1000fb5c:	40017d26 	beq	r8,zero,10010154 <__adddf3+0x7f0>
1000fb60:	1011883a 	mov	r8,r2
1000fb64:	1823883a 	mov	r17,r3
1000fb68:	888001cc 	andi	r2,r17,7
1000fb6c:	103f9e1e 	bne	r2,zero,1000f9e8 <__alt_data_end+0xf800f9e8>
1000fb70:	4004977a 	slli	r2,r8,29
1000fb74:	8822d0fa 	srli	r17,r17,3
1000fb78:	4010d0fa 	srli	r8,r8,3
1000fb7c:	9007883a 	mov	r3,r18
1000fb80:	1444b03a 	or	r2,r2,r17
1000fb84:	0101ffc4 	movi	r4,2047
1000fb88:	81002426 	beq	r16,r4,1000fc1c <__adddf3+0x2b8>
1000fb8c:	8120703a 	and	r16,r16,r4
1000fb90:	01000434 	movhi	r4,16
1000fb94:	213fffc4 	addi	r4,r4,-1
1000fb98:	4110703a 	and	r8,r8,r4
1000fb9c:	003fa806 	br	1000fa40 <__alt_data_end+0xf800fa40>
1000fba0:	8089c83a 	sub	r4,r16,r2
1000fba4:	01005e0e 	bge	zero,r4,1000fd20 <__adddf3+0x3bc>
1000fba8:	10002b26 	beq	r2,zero,1000fc58 <__adddf3+0x2f4>
1000fbac:	0081ffc4 	movi	r2,2047
1000fbb0:	80bf8b26 	beq	r16,r2,1000f9e0 <__alt_data_end+0xf800f9e0>
1000fbb4:	4a402034 	orhi	r9,r9,128
1000fbb8:	00800e04 	movi	r2,56
1000fbbc:	1100a40e 	bge	r2,r4,1000fe50 <__adddf3+0x4ec>
1000fbc0:	498cb03a 	or	r6,r9,r6
1000fbc4:	300ac03a 	cmpne	r5,r6,zero
1000fbc8:	0013883a 	mov	r9,zero
1000fbcc:	2c4b883a 	add	r5,r5,r17
1000fbd0:	2c63803a 	cmpltu	r17,r5,r17
1000fbd4:	4a11883a 	add	r8,r9,r8
1000fbd8:	8a11883a 	add	r8,r17,r8
1000fbdc:	2823883a 	mov	r17,r5
1000fbe0:	4080202c 	andhi	r2,r8,128
1000fbe4:	103fe026 	beq	r2,zero,1000fb68 <__alt_data_end+0xf800fb68>
1000fbe8:	84000044 	addi	r16,r16,1
1000fbec:	0081ffc4 	movi	r2,2047
1000fbf0:	8080d226 	beq	r16,r2,1000ff3c <__adddf3+0x5d8>
1000fbf4:	00bfe034 	movhi	r2,65408
1000fbf8:	10bfffc4 	addi	r2,r2,-1
1000fbfc:	4090703a 	and	r8,r8,r2
1000fc00:	880ad07a 	srli	r5,r17,1
1000fc04:	400897fa 	slli	r4,r8,31
1000fc08:	88c0004c 	andi	r3,r17,1
1000fc0c:	28e2b03a 	or	r17,r5,r3
1000fc10:	4010d07a 	srli	r8,r8,1
1000fc14:	2462b03a 	or	r17,r4,r17
1000fc18:	003f7106 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000fc1c:	4088b03a 	or	r4,r8,r2
1000fc20:	20014526 	beq	r4,zero,10010138 <__adddf3+0x7d4>
1000fc24:	01000434 	movhi	r4,16
1000fc28:	42000234 	orhi	r8,r8,8
1000fc2c:	213fffc4 	addi	r4,r4,-1
1000fc30:	4110703a 	and	r8,r8,r4
1000fc34:	003f8206 	br	1000fa40 <__alt_data_end+0xf800fa40>
1000fc38:	18ffffc4 	addi	r3,r3,-1
1000fc3c:	1800491e 	bne	r3,zero,1000fd64 <__adddf3+0x400>
1000fc40:	898bc83a 	sub	r5,r17,r6
1000fc44:	8963803a 	cmpltu	r17,r17,r5
1000fc48:	4251c83a 	sub	r8,r8,r9
1000fc4c:	4451c83a 	sub	r8,r8,r17
1000fc50:	2823883a 	mov	r17,r5
1000fc54:	003f9f06 	br	1000fad4 <__alt_data_end+0xf800fad4>
1000fc58:	4984b03a 	or	r2,r9,r6
1000fc5c:	103f6026 	beq	r2,zero,1000f9e0 <__alt_data_end+0xf800f9e0>
1000fc60:	213fffc4 	addi	r4,r4,-1
1000fc64:	2000931e 	bne	r4,zero,1000feb4 <__adddf3+0x550>
1000fc68:	898d883a 	add	r6,r17,r6
1000fc6c:	3463803a 	cmpltu	r17,r6,r17
1000fc70:	4251883a 	add	r8,r8,r9
1000fc74:	8a11883a 	add	r8,r17,r8
1000fc78:	3023883a 	mov	r17,r6
1000fc7c:	003fd806 	br	1000fbe0 <__alt_data_end+0xf800fbe0>
1000fc80:	1800541e 	bne	r3,zero,1000fdd4 <__adddf3+0x470>
1000fc84:	80800044 	addi	r2,r16,1
1000fc88:	1081ffcc 	andi	r2,r2,2047
1000fc8c:	00c00044 	movi	r3,1
1000fc90:	1880a00e 	bge	r3,r2,1000ff14 <__adddf3+0x5b0>
1000fc94:	8989c83a 	sub	r4,r17,r6
1000fc98:	8905803a 	cmpltu	r2,r17,r4
1000fc9c:	4267c83a 	sub	r19,r8,r9
1000fca0:	98a7c83a 	sub	r19,r19,r2
1000fca4:	9880202c 	andhi	r2,r19,128
1000fca8:	10006326 	beq	r2,zero,1000fe38 <__adddf3+0x4d4>
1000fcac:	3463c83a 	sub	r17,r6,r17
1000fcb0:	4a07c83a 	sub	r3,r9,r8
1000fcb4:	344d803a 	cmpltu	r6,r6,r17
1000fcb8:	19a7c83a 	sub	r19,r3,r6
1000fcbc:	3825883a 	mov	r18,r7
1000fcc0:	983f8a1e 	bne	r19,zero,1000faec <__alt_data_end+0xf800faec>
1000fcc4:	8809883a 	mov	r4,r17
1000fcc8:	000523c0 	call	1000523c <__clzsi2>
1000fccc:	10800804 	addi	r2,r2,32
1000fcd0:	10fffe04 	addi	r3,r2,-8
1000fcd4:	010007c4 	movi	r4,31
1000fcd8:	20ff890e 	bge	r4,r3,1000fb00 <__alt_data_end+0xf800fb00>
1000fcdc:	10bff604 	addi	r2,r2,-40
1000fce0:	8884983a 	sll	r2,r17,r2
1000fce4:	0023883a 	mov	r17,zero
1000fce8:	1c3f8c0e 	bge	r3,r16,1000fb1c <__alt_data_end+0xf800fb1c>
1000fcec:	023fe034 	movhi	r8,65408
1000fcf0:	423fffc4 	addi	r8,r8,-1
1000fcf4:	80e1c83a 	sub	r16,r16,r3
1000fcf8:	1210703a 	and	r8,r2,r8
1000fcfc:	003f3806 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000fd00:	9007883a 	mov	r3,r18
1000fd04:	0011883a 	mov	r8,zero
1000fd08:	0005883a 	mov	r2,zero
1000fd0c:	003f4c06 	br	1000fa40 <__alt_data_end+0xf800fa40>
1000fd10:	498cb03a 	or	r6,r9,r6
1000fd14:	300cc03a 	cmpne	r6,r6,zero
1000fd18:	0007883a 	mov	r3,zero
1000fd1c:	003f6806 	br	1000fac0 <__alt_data_end+0xf800fac0>
1000fd20:	20009c1e 	bne	r4,zero,1000ff94 <__adddf3+0x630>
1000fd24:	80800044 	addi	r2,r16,1
1000fd28:	1141ffcc 	andi	r5,r2,2047
1000fd2c:	01000044 	movi	r4,1
1000fd30:	2140670e 	bge	r4,r5,1000fed0 <__adddf3+0x56c>
1000fd34:	0101ffc4 	movi	r4,2047
1000fd38:	11007f26 	beq	r2,r4,1000ff38 <__adddf3+0x5d4>
1000fd3c:	898d883a 	add	r6,r17,r6
1000fd40:	4247883a 	add	r3,r8,r9
1000fd44:	3451803a 	cmpltu	r8,r6,r17
1000fd48:	40d1883a 	add	r8,r8,r3
1000fd4c:	402297fa 	slli	r17,r8,31
1000fd50:	300cd07a 	srli	r6,r6,1
1000fd54:	4010d07a 	srli	r8,r8,1
1000fd58:	1021883a 	mov	r16,r2
1000fd5c:	89a2b03a 	or	r17,r17,r6
1000fd60:	003f1f06 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000fd64:	0081ffc4 	movi	r2,2047
1000fd68:	80bf481e 	bne	r16,r2,1000fa8c <__alt_data_end+0xf800fa8c>
1000fd6c:	003f1c06 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000fd70:	843ff844 	addi	r16,r16,-31
1000fd74:	01000804 	movi	r4,32
1000fd78:	1406d83a 	srl	r3,r2,r16
1000fd7c:	41005026 	beq	r8,r4,1000fec0 <__adddf3+0x55c>
1000fd80:	01001004 	movi	r4,64
1000fd84:	2211c83a 	sub	r8,r4,r8
1000fd88:	1204983a 	sll	r2,r2,r8
1000fd8c:	88a2b03a 	or	r17,r17,r2
1000fd90:	8822c03a 	cmpne	r17,r17,zero
1000fd94:	1c62b03a 	or	r17,r3,r17
1000fd98:	0011883a 	mov	r8,zero
1000fd9c:	0021883a 	mov	r16,zero
1000fda0:	003f7106 	br	1000fb68 <__alt_data_end+0xf800fb68>
1000fda4:	193ff804 	addi	r4,r3,-32
1000fda8:	00800804 	movi	r2,32
1000fdac:	4908d83a 	srl	r4,r9,r4
1000fdb0:	18804526 	beq	r3,r2,1000fec8 <__adddf3+0x564>
1000fdb4:	00801004 	movi	r2,64
1000fdb8:	10c5c83a 	sub	r2,r2,r3
1000fdbc:	4886983a 	sll	r3,r9,r2
1000fdc0:	198cb03a 	or	r6,r3,r6
1000fdc4:	300cc03a 	cmpne	r6,r6,zero
1000fdc8:	218cb03a 	or	r6,r4,r6
1000fdcc:	0007883a 	mov	r3,zero
1000fdd0:	003f3b06 	br	1000fac0 <__alt_data_end+0xf800fac0>
1000fdd4:	80002a26 	beq	r16,zero,1000fe80 <__adddf3+0x51c>
1000fdd8:	0101ffc4 	movi	r4,2047
1000fddc:	11006826 	beq	r2,r4,1000ff80 <__adddf3+0x61c>
1000fde0:	00c7c83a 	sub	r3,zero,r3
1000fde4:	42002034 	orhi	r8,r8,128
1000fde8:	01000e04 	movi	r4,56
1000fdec:	20c07c16 	blt	r4,r3,1000ffe0 <__adddf3+0x67c>
1000fdf0:	010007c4 	movi	r4,31
1000fdf4:	20c0da16 	blt	r4,r3,10010160 <__adddf3+0x7fc>
1000fdf8:	01000804 	movi	r4,32
1000fdfc:	20c9c83a 	sub	r4,r4,r3
1000fe00:	4114983a 	sll	r10,r8,r4
1000fe04:	88cad83a 	srl	r5,r17,r3
1000fe08:	8908983a 	sll	r4,r17,r4
1000fe0c:	40c6d83a 	srl	r3,r8,r3
1000fe10:	5162b03a 	or	r17,r10,r5
1000fe14:	2008c03a 	cmpne	r4,r4,zero
1000fe18:	8922b03a 	or	r17,r17,r4
1000fe1c:	3463c83a 	sub	r17,r6,r17
1000fe20:	48c7c83a 	sub	r3,r9,r3
1000fe24:	344d803a 	cmpltu	r6,r6,r17
1000fe28:	1991c83a 	sub	r8,r3,r6
1000fe2c:	1021883a 	mov	r16,r2
1000fe30:	3825883a 	mov	r18,r7
1000fe34:	003f2706 	br	1000fad4 <__alt_data_end+0xf800fad4>
1000fe38:	24d0b03a 	or	r8,r4,r19
1000fe3c:	40001b1e 	bne	r8,zero,1000feac <__adddf3+0x548>
1000fe40:	0005883a 	mov	r2,zero
1000fe44:	0007883a 	mov	r3,zero
1000fe48:	0021883a 	mov	r16,zero
1000fe4c:	003f4d06 	br	1000fb84 <__alt_data_end+0xf800fb84>
1000fe50:	008007c4 	movi	r2,31
1000fe54:	11003c16 	blt	r2,r4,1000ff48 <__adddf3+0x5e4>
1000fe58:	00800804 	movi	r2,32
1000fe5c:	1105c83a 	sub	r2,r2,r4
1000fe60:	488e983a 	sll	r7,r9,r2
1000fe64:	310ad83a 	srl	r5,r6,r4
1000fe68:	3084983a 	sll	r2,r6,r2
1000fe6c:	4912d83a 	srl	r9,r9,r4
1000fe70:	394ab03a 	or	r5,r7,r5
1000fe74:	1004c03a 	cmpne	r2,r2,zero
1000fe78:	288ab03a 	or	r5,r5,r2
1000fe7c:	003f5306 	br	1000fbcc <__alt_data_end+0xf800fbcc>
1000fe80:	4448b03a 	or	r4,r8,r17
1000fe84:	20003e26 	beq	r4,zero,1000ff80 <__adddf3+0x61c>
1000fe88:	00c6303a 	nor	r3,zero,r3
1000fe8c:	18003a1e 	bne	r3,zero,1000ff78 <__adddf3+0x614>
1000fe90:	3463c83a 	sub	r17,r6,r17
1000fe94:	4a07c83a 	sub	r3,r9,r8
1000fe98:	344d803a 	cmpltu	r6,r6,r17
1000fe9c:	1991c83a 	sub	r8,r3,r6
1000fea0:	1021883a 	mov	r16,r2
1000fea4:	3825883a 	mov	r18,r7
1000fea8:	003f0a06 	br	1000fad4 <__alt_data_end+0xf800fad4>
1000feac:	2023883a 	mov	r17,r4
1000feb0:	003f0d06 	br	1000fae8 <__alt_data_end+0xf800fae8>
1000feb4:	0081ffc4 	movi	r2,2047
1000feb8:	80bf3f1e 	bne	r16,r2,1000fbb8 <__alt_data_end+0xf800fbb8>
1000febc:	003ec806 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000fec0:	0005883a 	mov	r2,zero
1000fec4:	003fb106 	br	1000fd8c <__alt_data_end+0xf800fd8c>
1000fec8:	0007883a 	mov	r3,zero
1000fecc:	003fbc06 	br	1000fdc0 <__alt_data_end+0xf800fdc0>
1000fed0:	4444b03a 	or	r2,r8,r17
1000fed4:	8000871e 	bne	r16,zero,100100f4 <__adddf3+0x790>
1000fed8:	1000ba26 	beq	r2,zero,100101c4 <__adddf3+0x860>
1000fedc:	4984b03a 	or	r2,r9,r6
1000fee0:	103ebf26 	beq	r2,zero,1000f9e0 <__alt_data_end+0xf800f9e0>
1000fee4:	8985883a 	add	r2,r17,r6
1000fee8:	4247883a 	add	r3,r8,r9
1000feec:	1451803a 	cmpltu	r8,r2,r17
1000fef0:	40d1883a 	add	r8,r8,r3
1000fef4:	40c0202c 	andhi	r3,r8,128
1000fef8:	1023883a 	mov	r17,r2
1000fefc:	183f1a26 	beq	r3,zero,1000fb68 <__alt_data_end+0xf800fb68>
1000ff00:	00bfe034 	movhi	r2,65408
1000ff04:	10bfffc4 	addi	r2,r2,-1
1000ff08:	2021883a 	mov	r16,r4
1000ff0c:	4090703a 	and	r8,r8,r2
1000ff10:	003eb306 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000ff14:	4444b03a 	or	r2,r8,r17
1000ff18:	8000291e 	bne	r16,zero,1000ffc0 <__adddf3+0x65c>
1000ff1c:	10004b1e 	bne	r2,zero,1001004c <__adddf3+0x6e8>
1000ff20:	4990b03a 	or	r8,r9,r6
1000ff24:	40008b26 	beq	r8,zero,10010154 <__adddf3+0x7f0>
1000ff28:	4811883a 	mov	r8,r9
1000ff2c:	3023883a 	mov	r17,r6
1000ff30:	3825883a 	mov	r18,r7
1000ff34:	003eaa06 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000ff38:	1021883a 	mov	r16,r2
1000ff3c:	0011883a 	mov	r8,zero
1000ff40:	0005883a 	mov	r2,zero
1000ff44:	003f0f06 	br	1000fb84 <__alt_data_end+0xf800fb84>
1000ff48:	217ff804 	addi	r5,r4,-32
1000ff4c:	00800804 	movi	r2,32
1000ff50:	494ad83a 	srl	r5,r9,r5
1000ff54:	20807d26 	beq	r4,r2,1001014c <__adddf3+0x7e8>
1000ff58:	00801004 	movi	r2,64
1000ff5c:	1109c83a 	sub	r4,r2,r4
1000ff60:	4912983a 	sll	r9,r9,r4
1000ff64:	498cb03a 	or	r6,r9,r6
1000ff68:	300cc03a 	cmpne	r6,r6,zero
1000ff6c:	298ab03a 	or	r5,r5,r6
1000ff70:	0013883a 	mov	r9,zero
1000ff74:	003f1506 	br	1000fbcc <__alt_data_end+0xf800fbcc>
1000ff78:	0101ffc4 	movi	r4,2047
1000ff7c:	113f9a1e 	bne	r2,r4,1000fde8 <__alt_data_end+0xf800fde8>
1000ff80:	4811883a 	mov	r8,r9
1000ff84:	3023883a 	mov	r17,r6
1000ff88:	1021883a 	mov	r16,r2
1000ff8c:	3825883a 	mov	r18,r7
1000ff90:	003e9306 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000ff94:	8000161e 	bne	r16,zero,1000fff0 <__adddf3+0x68c>
1000ff98:	444ab03a 	or	r5,r8,r17
1000ff9c:	28005126 	beq	r5,zero,100100e4 <__adddf3+0x780>
1000ffa0:	0108303a 	nor	r4,zero,r4
1000ffa4:	20004d1e 	bne	r4,zero,100100dc <__adddf3+0x778>
1000ffa8:	89a3883a 	add	r17,r17,r6
1000ffac:	4253883a 	add	r9,r8,r9
1000ffb0:	898d803a 	cmpltu	r6,r17,r6
1000ffb4:	3251883a 	add	r8,r6,r9
1000ffb8:	1021883a 	mov	r16,r2
1000ffbc:	003f0806 	br	1000fbe0 <__alt_data_end+0xf800fbe0>
1000ffc0:	1000301e 	bne	r2,zero,10010084 <__adddf3+0x720>
1000ffc4:	4984b03a 	or	r2,r9,r6
1000ffc8:	10007126 	beq	r2,zero,10010190 <__adddf3+0x82c>
1000ffcc:	4811883a 	mov	r8,r9
1000ffd0:	3023883a 	mov	r17,r6
1000ffd4:	3825883a 	mov	r18,r7
1000ffd8:	0401ffc4 	movi	r16,2047
1000ffdc:	003e8006 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1000ffe0:	4462b03a 	or	r17,r8,r17
1000ffe4:	8822c03a 	cmpne	r17,r17,zero
1000ffe8:	0007883a 	mov	r3,zero
1000ffec:	003f8b06 	br	1000fe1c <__alt_data_end+0xf800fe1c>
1000fff0:	0141ffc4 	movi	r5,2047
1000fff4:	11403b26 	beq	r2,r5,100100e4 <__adddf3+0x780>
1000fff8:	0109c83a 	sub	r4,zero,r4
1000fffc:	42002034 	orhi	r8,r8,128
10010000:	01400e04 	movi	r5,56
10010004:	29006716 	blt	r5,r4,100101a4 <__adddf3+0x840>
10010008:	014007c4 	movi	r5,31
1001000c:	29007016 	blt	r5,r4,100101d0 <__adddf3+0x86c>
10010010:	01400804 	movi	r5,32
10010014:	290bc83a 	sub	r5,r5,r4
10010018:	4154983a 	sll	r10,r8,r5
1001001c:	890ed83a 	srl	r7,r17,r4
10010020:	894a983a 	sll	r5,r17,r5
10010024:	4108d83a 	srl	r4,r8,r4
10010028:	51e2b03a 	or	r17,r10,r7
1001002c:	280ac03a 	cmpne	r5,r5,zero
10010030:	8962b03a 	or	r17,r17,r5
10010034:	89a3883a 	add	r17,r17,r6
10010038:	2253883a 	add	r9,r4,r9
1001003c:	898d803a 	cmpltu	r6,r17,r6
10010040:	3251883a 	add	r8,r6,r9
10010044:	1021883a 	mov	r16,r2
10010048:	003ee506 	br	1000fbe0 <__alt_data_end+0xf800fbe0>
1001004c:	4984b03a 	or	r2,r9,r6
10010050:	103e6326 	beq	r2,zero,1000f9e0 <__alt_data_end+0xf800f9e0>
10010054:	8987c83a 	sub	r3,r17,r6
10010058:	88c9803a 	cmpltu	r4,r17,r3
1001005c:	4245c83a 	sub	r2,r8,r9
10010060:	1105c83a 	sub	r2,r2,r4
10010064:	1100202c 	andhi	r4,r2,128
10010068:	203ebb26 	beq	r4,zero,1000fb58 <__alt_data_end+0xf800fb58>
1001006c:	3463c83a 	sub	r17,r6,r17
10010070:	4a07c83a 	sub	r3,r9,r8
10010074:	344d803a 	cmpltu	r6,r6,r17
10010078:	1991c83a 	sub	r8,r3,r6
1001007c:	3825883a 	mov	r18,r7
10010080:	003e5706 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
10010084:	4984b03a 	or	r2,r9,r6
10010088:	10002e26 	beq	r2,zero,10010144 <__adddf3+0x7e0>
1001008c:	4004d0fa 	srli	r2,r8,3
10010090:	8822d0fa 	srli	r17,r17,3
10010094:	4010977a 	slli	r8,r8,29
10010098:	10c0022c 	andhi	r3,r2,8
1001009c:	4462b03a 	or	r17,r8,r17
100100a0:	18000826 	beq	r3,zero,100100c4 <__adddf3+0x760>
100100a4:	4808d0fa 	srli	r4,r9,3
100100a8:	20c0022c 	andhi	r3,r4,8
100100ac:	1800051e 	bne	r3,zero,100100c4 <__adddf3+0x760>
100100b0:	300cd0fa 	srli	r6,r6,3
100100b4:	4806977a 	slli	r3,r9,29
100100b8:	2005883a 	mov	r2,r4
100100bc:	3825883a 	mov	r18,r7
100100c0:	19a2b03a 	or	r17,r3,r6
100100c4:	8810d77a 	srli	r8,r17,29
100100c8:	100490fa 	slli	r2,r2,3
100100cc:	882290fa 	slli	r17,r17,3
100100d0:	0401ffc4 	movi	r16,2047
100100d4:	4090b03a 	or	r8,r8,r2
100100d8:	003e4106 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
100100dc:	0141ffc4 	movi	r5,2047
100100e0:	117fc71e 	bne	r2,r5,10010000 <__alt_data_end+0xf8010000>
100100e4:	4811883a 	mov	r8,r9
100100e8:	3023883a 	mov	r17,r6
100100ec:	1021883a 	mov	r16,r2
100100f0:	003e3b06 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
100100f4:	10002f26 	beq	r2,zero,100101b4 <__adddf3+0x850>
100100f8:	4984b03a 	or	r2,r9,r6
100100fc:	10001126 	beq	r2,zero,10010144 <__adddf3+0x7e0>
10010100:	4004d0fa 	srli	r2,r8,3
10010104:	8822d0fa 	srli	r17,r17,3
10010108:	4010977a 	slli	r8,r8,29
1001010c:	10c0022c 	andhi	r3,r2,8
10010110:	4462b03a 	or	r17,r8,r17
10010114:	183feb26 	beq	r3,zero,100100c4 <__alt_data_end+0xf80100c4>
10010118:	4808d0fa 	srli	r4,r9,3
1001011c:	20c0022c 	andhi	r3,r4,8
10010120:	183fe81e 	bne	r3,zero,100100c4 <__alt_data_end+0xf80100c4>
10010124:	300cd0fa 	srli	r6,r6,3
10010128:	4806977a 	slli	r3,r9,29
1001012c:	2005883a 	mov	r2,r4
10010130:	19a2b03a 	or	r17,r3,r6
10010134:	003fe306 	br	100100c4 <__alt_data_end+0xf80100c4>
10010138:	0011883a 	mov	r8,zero
1001013c:	0005883a 	mov	r2,zero
10010140:	003e3f06 	br	1000fa40 <__alt_data_end+0xf800fa40>
10010144:	0401ffc4 	movi	r16,2047
10010148:	003e2506 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
1001014c:	0013883a 	mov	r9,zero
10010150:	003f8406 	br	1000ff64 <__alt_data_end+0xf800ff64>
10010154:	0005883a 	mov	r2,zero
10010158:	0007883a 	mov	r3,zero
1001015c:	003e8906 	br	1000fb84 <__alt_data_end+0xf800fb84>
10010160:	197ff804 	addi	r5,r3,-32
10010164:	01000804 	movi	r4,32
10010168:	414ad83a 	srl	r5,r8,r5
1001016c:	19002426 	beq	r3,r4,10010200 <__adddf3+0x89c>
10010170:	01001004 	movi	r4,64
10010174:	20c7c83a 	sub	r3,r4,r3
10010178:	40c6983a 	sll	r3,r8,r3
1001017c:	1c46b03a 	or	r3,r3,r17
10010180:	1806c03a 	cmpne	r3,r3,zero
10010184:	28e2b03a 	or	r17,r5,r3
10010188:	0007883a 	mov	r3,zero
1001018c:	003f2306 	br	1000fe1c <__alt_data_end+0xf800fe1c>
10010190:	0007883a 	mov	r3,zero
10010194:	5811883a 	mov	r8,r11
10010198:	00bfffc4 	movi	r2,-1
1001019c:	0401ffc4 	movi	r16,2047
100101a0:	003e7806 	br	1000fb84 <__alt_data_end+0xf800fb84>
100101a4:	4462b03a 	or	r17,r8,r17
100101a8:	8822c03a 	cmpne	r17,r17,zero
100101ac:	0009883a 	mov	r4,zero
100101b0:	003fa006 	br	10010034 <__alt_data_end+0xf8010034>
100101b4:	4811883a 	mov	r8,r9
100101b8:	3023883a 	mov	r17,r6
100101bc:	0401ffc4 	movi	r16,2047
100101c0:	003e0706 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
100101c4:	4811883a 	mov	r8,r9
100101c8:	3023883a 	mov	r17,r6
100101cc:	003e0406 	br	1000f9e0 <__alt_data_end+0xf800f9e0>
100101d0:	21fff804 	addi	r7,r4,-32
100101d4:	01400804 	movi	r5,32
100101d8:	41ced83a 	srl	r7,r8,r7
100101dc:	21400a26 	beq	r4,r5,10010208 <__adddf3+0x8a4>
100101e0:	01401004 	movi	r5,64
100101e4:	2909c83a 	sub	r4,r5,r4
100101e8:	4108983a 	sll	r4,r8,r4
100101ec:	2448b03a 	or	r4,r4,r17
100101f0:	2008c03a 	cmpne	r4,r4,zero
100101f4:	3922b03a 	or	r17,r7,r4
100101f8:	0009883a 	mov	r4,zero
100101fc:	003f8d06 	br	10010034 <__alt_data_end+0xf8010034>
10010200:	0007883a 	mov	r3,zero
10010204:	003fdd06 	br	1001017c <__alt_data_end+0xf801017c>
10010208:	0009883a 	mov	r4,zero
1001020c:	003ff706 	br	100101ec <__alt_data_end+0xf80101ec>

10010210 <__eqdf2>:
10010210:	2804d53a 	srli	r2,r5,20
10010214:	3806d53a 	srli	r3,r7,20
10010218:	02000434 	movhi	r8,16
1001021c:	423fffc4 	addi	r8,r8,-1
10010220:	1081ffcc 	andi	r2,r2,2047
10010224:	0281ffc4 	movi	r10,2047
10010228:	2a12703a 	and	r9,r5,r8
1001022c:	18c1ffcc 	andi	r3,r3,2047
10010230:	3a10703a 	and	r8,r7,r8
10010234:	280ad7fa 	srli	r5,r5,31
10010238:	380ed7fa 	srli	r7,r7,31
1001023c:	12801026 	beq	r2,r10,10010280 <__eqdf2+0x70>
10010240:	0281ffc4 	movi	r10,2047
10010244:	1a800a26 	beq	r3,r10,10010270 <__eqdf2+0x60>
10010248:	10c00226 	beq	r2,r3,10010254 <__eqdf2+0x44>
1001024c:	00800044 	movi	r2,1
10010250:	f800283a 	ret
10010254:	4a3ffd1e 	bne	r9,r8,1001024c <__alt_data_end+0xf801024c>
10010258:	21bffc1e 	bne	r4,r6,1001024c <__alt_data_end+0xf801024c>
1001025c:	29c00c26 	beq	r5,r7,10010290 <__eqdf2+0x80>
10010260:	103ffa1e 	bne	r2,zero,1001024c <__alt_data_end+0xf801024c>
10010264:	2244b03a 	or	r2,r4,r9
10010268:	1004c03a 	cmpne	r2,r2,zero
1001026c:	f800283a 	ret
10010270:	3214b03a 	or	r10,r6,r8
10010274:	503ff426 	beq	r10,zero,10010248 <__alt_data_end+0xf8010248>
10010278:	00800044 	movi	r2,1
1001027c:	f800283a 	ret
10010280:	2254b03a 	or	r10,r4,r9
10010284:	503fee26 	beq	r10,zero,10010240 <__alt_data_end+0xf8010240>
10010288:	00800044 	movi	r2,1
1001028c:	f800283a 	ret
10010290:	0005883a 	mov	r2,zero
10010294:	f800283a 	ret

10010298 <__gedf2>:
10010298:	2804d53a 	srli	r2,r5,20
1001029c:	3806d53a 	srli	r3,r7,20
100102a0:	02000434 	movhi	r8,16
100102a4:	423fffc4 	addi	r8,r8,-1
100102a8:	1081ffcc 	andi	r2,r2,2047
100102ac:	0241ffc4 	movi	r9,2047
100102b0:	2a14703a 	and	r10,r5,r8
100102b4:	18c1ffcc 	andi	r3,r3,2047
100102b8:	3a10703a 	and	r8,r7,r8
100102bc:	280ad7fa 	srli	r5,r5,31
100102c0:	380ed7fa 	srli	r7,r7,31
100102c4:	12401d26 	beq	r2,r9,1001033c <__gedf2+0xa4>
100102c8:	0241ffc4 	movi	r9,2047
100102cc:	1a401226 	beq	r3,r9,10010318 <__gedf2+0x80>
100102d0:	1000081e 	bne	r2,zero,100102f4 <__gedf2+0x5c>
100102d4:	2296b03a 	or	r11,r4,r10
100102d8:	5813003a 	cmpeq	r9,r11,zero
100102dc:	1800091e 	bne	r3,zero,10010304 <__gedf2+0x6c>
100102e0:	3218b03a 	or	r12,r6,r8
100102e4:	6000071e 	bne	r12,zero,10010304 <__gedf2+0x6c>
100102e8:	0005883a 	mov	r2,zero
100102ec:	5800101e 	bne	r11,zero,10010330 <__gedf2+0x98>
100102f0:	f800283a 	ret
100102f4:	18000c1e 	bne	r3,zero,10010328 <__gedf2+0x90>
100102f8:	3212b03a 	or	r9,r6,r8
100102fc:	48000c26 	beq	r9,zero,10010330 <__gedf2+0x98>
10010300:	0013883a 	mov	r9,zero
10010304:	39c03fcc 	andi	r7,r7,255
10010308:	48000826 	beq	r9,zero,1001032c <__gedf2+0x94>
1001030c:	38000926 	beq	r7,zero,10010334 <__gedf2+0x9c>
10010310:	00800044 	movi	r2,1
10010314:	f800283a 	ret
10010318:	3212b03a 	or	r9,r6,r8
1001031c:	483fec26 	beq	r9,zero,100102d0 <__alt_data_end+0xf80102d0>
10010320:	00bfff84 	movi	r2,-2
10010324:	f800283a 	ret
10010328:	39c03fcc 	andi	r7,r7,255
1001032c:	29c00626 	beq	r5,r7,10010348 <__gedf2+0xb0>
10010330:	283ff726 	beq	r5,zero,10010310 <__alt_data_end+0xf8010310>
10010334:	00bfffc4 	movi	r2,-1
10010338:	f800283a 	ret
1001033c:	2292b03a 	or	r9,r4,r10
10010340:	483fe126 	beq	r9,zero,100102c8 <__alt_data_end+0xf80102c8>
10010344:	003ff606 	br	10010320 <__alt_data_end+0xf8010320>
10010348:	18bff916 	blt	r3,r2,10010330 <__alt_data_end+0xf8010330>
1001034c:	10c00316 	blt	r2,r3,1001035c <__gedf2+0xc4>
10010350:	42bff736 	bltu	r8,r10,10010330 <__alt_data_end+0xf8010330>
10010354:	52000326 	beq	r10,r8,10010364 <__gedf2+0xcc>
10010358:	5200042e 	bgeu	r10,r8,1001036c <__gedf2+0xd4>
1001035c:	283fec1e 	bne	r5,zero,10010310 <__alt_data_end+0xf8010310>
10010360:	003ff406 	br	10010334 <__alt_data_end+0xf8010334>
10010364:	313ff236 	bltu	r6,r4,10010330 <__alt_data_end+0xf8010330>
10010368:	21bffc36 	bltu	r4,r6,1001035c <__alt_data_end+0xf801035c>
1001036c:	0005883a 	mov	r2,zero
10010370:	f800283a 	ret

10010374 <__muldf3>:
10010374:	deffee04 	addi	sp,sp,-72
10010378:	dd000c15 	stw	r20,48(sp)
1001037c:	2828d53a 	srli	r20,r5,20
10010380:	ddc00f15 	stw	r23,60(sp)
10010384:	282ed7fa 	srli	r23,r5,31
10010388:	dc000815 	stw	r16,32(sp)
1001038c:	04000434 	movhi	r16,16
10010390:	dcc00b15 	stw	r19,44(sp)
10010394:	843fffc4 	addi	r16,r16,-1
10010398:	dfc01115 	stw	ra,68(sp)
1001039c:	df001015 	stw	fp,64(sp)
100103a0:	dd800e15 	stw	r22,56(sp)
100103a4:	dd400d15 	stw	r21,52(sp)
100103a8:	dc800a15 	stw	r18,40(sp)
100103ac:	dc400915 	stw	r17,36(sp)
100103b0:	a501ffcc 	andi	r20,r20,2047
100103b4:	2c20703a 	and	r16,r5,r16
100103b8:	b827883a 	mov	r19,r23
100103bc:	ba403fcc 	andi	r9,r23,255
100103c0:	a0006026 	beq	r20,zero,10010544 <__muldf3+0x1d0>
100103c4:	0081ffc4 	movi	r2,2047
100103c8:	202d883a 	mov	r22,r4
100103cc:	a0803626 	beq	r20,r2,100104a8 <__muldf3+0x134>
100103d0:	84000434 	orhi	r16,r16,16
100103d4:	200ad77a 	srli	r5,r4,29
100103d8:	800490fa 	slli	r2,r16,3
100103dc:	202c90fa 	slli	r22,r4,3
100103e0:	a53f0044 	addi	r20,r20,-1023
100103e4:	28a0b03a 	or	r16,r5,r2
100103e8:	002b883a 	mov	r21,zero
100103ec:	000b883a 	mov	r5,zero
100103f0:	3804d53a 	srli	r2,r7,20
100103f4:	3838d7fa 	srli	fp,r7,31
100103f8:	04400434 	movhi	r17,16
100103fc:	8c7fffc4 	addi	r17,r17,-1
10010400:	1081ffcc 	andi	r2,r2,2047
10010404:	3025883a 	mov	r18,r6
10010408:	3c62703a 	and	r17,r7,r17
1001040c:	e2803fcc 	andi	r10,fp,255
10010410:	10006d26 	beq	r2,zero,100105c8 <__muldf3+0x254>
10010414:	00c1ffc4 	movi	r3,2047
10010418:	10c06526 	beq	r2,r3,100105b0 <__muldf3+0x23c>
1001041c:	8c400434 	orhi	r17,r17,16
10010420:	300ed77a 	srli	r7,r6,29
10010424:	880690fa 	slli	r3,r17,3
10010428:	302490fa 	slli	r18,r6,3
1001042c:	10bf0044 	addi	r2,r2,-1023
10010430:	38e2b03a 	or	r17,r7,r3
10010434:	000f883a 	mov	r7,zero
10010438:	a087883a 	add	r3,r20,r2
1001043c:	010003c4 	movi	r4,15
10010440:	3d44b03a 	or	r2,r7,r21
10010444:	e5ccf03a 	xor	r6,fp,r23
10010448:	1a000044 	addi	r8,r3,1
1001044c:	20809b36 	bltu	r4,r2,100106bc <__muldf3+0x348>
10010450:	100490ba 	slli	r2,r2,2
10010454:	01040074 	movhi	r4,4097
10010458:	21011a04 	addi	r4,r4,1128
1001045c:	1105883a 	add	r2,r2,r4
10010460:	10800017 	ldw	r2,0(r2)
10010464:	1000683a 	jmp	r2
10010468:	100106bc 	xorhi	zero,r2,1050
1001046c:	100104c8 	cmpgei	zero,r2,1043
10010470:	100104c8 	cmpgei	zero,r2,1043
10010474:	100104c4 	addi	zero,r2,1043
10010478:	10010698 	cmpnei	zero,r2,1050
1001047c:	10010698 	cmpnei	zero,r2,1050
10010480:	10010680 	call	11001068 <_gp+0xfe2d2c>
10010484:	100104c4 	addi	zero,r2,1043
10010488:	10010698 	cmpnei	zero,r2,1050
1001048c:	10010680 	call	11001068 <_gp+0xfe2d2c>
10010490:	10010698 	cmpnei	zero,r2,1050
10010494:	100104c4 	addi	zero,r2,1043
10010498:	100106a8 	cmpgeui	zero,r2,1050
1001049c:	100106a8 	cmpgeui	zero,r2,1050
100104a0:	100106a8 	cmpgeui	zero,r2,1050
100104a4:	10010a08 	cmpgei	zero,r2,1064
100104a8:	2404b03a 	or	r2,r4,r16
100104ac:	1000711e 	bne	r2,zero,10010674 <__muldf3+0x300>
100104b0:	05400204 	movi	r21,8
100104b4:	0021883a 	mov	r16,zero
100104b8:	002d883a 	mov	r22,zero
100104bc:	01400084 	movi	r5,2
100104c0:	003fcb06 	br	100103f0 <__alt_data_end+0xf80103f0>
100104c4:	500d883a 	mov	r6,r10
100104c8:	00800084 	movi	r2,2
100104cc:	38805926 	beq	r7,r2,10010634 <__muldf3+0x2c0>
100104d0:	008000c4 	movi	r2,3
100104d4:	3881bb26 	beq	r7,r2,10010bc4 <__muldf3+0x850>
100104d8:	00800044 	movi	r2,1
100104dc:	3881961e 	bne	r7,r2,10010b38 <__muldf3+0x7c4>
100104e0:	3027883a 	mov	r19,r6
100104e4:	0005883a 	mov	r2,zero
100104e8:	0021883a 	mov	r16,zero
100104ec:	002d883a 	mov	r22,zero
100104f0:	1004953a 	slli	r2,r2,20
100104f4:	98c03fcc 	andi	r3,r19,255
100104f8:	04400434 	movhi	r17,16
100104fc:	8c7fffc4 	addi	r17,r17,-1
10010500:	180697fa 	slli	r3,r3,31
10010504:	8460703a 	and	r16,r16,r17
10010508:	80a0b03a 	or	r16,r16,r2
1001050c:	80c6b03a 	or	r3,r16,r3
10010510:	b005883a 	mov	r2,r22
10010514:	dfc01117 	ldw	ra,68(sp)
10010518:	df001017 	ldw	fp,64(sp)
1001051c:	ddc00f17 	ldw	r23,60(sp)
10010520:	dd800e17 	ldw	r22,56(sp)
10010524:	dd400d17 	ldw	r21,52(sp)
10010528:	dd000c17 	ldw	r20,48(sp)
1001052c:	dcc00b17 	ldw	r19,44(sp)
10010530:	dc800a17 	ldw	r18,40(sp)
10010534:	dc400917 	ldw	r17,36(sp)
10010538:	dc000817 	ldw	r16,32(sp)
1001053c:	dec01204 	addi	sp,sp,72
10010540:	f800283a 	ret
10010544:	2404b03a 	or	r2,r4,r16
10010548:	202b883a 	mov	r21,r4
1001054c:	10004426 	beq	r2,zero,10010660 <__muldf3+0x2ec>
10010550:	80015126 	beq	r16,zero,10010a98 <__muldf3+0x724>
10010554:	8009883a 	mov	r4,r16
10010558:	d9800715 	stw	r6,28(sp)
1001055c:	d9c00215 	stw	r7,8(sp)
10010560:	da400415 	stw	r9,16(sp)
10010564:	000523c0 	call	1000523c <__clzsi2>
10010568:	d9800717 	ldw	r6,28(sp)
1001056c:	d9c00217 	ldw	r7,8(sp)
10010570:	da400417 	ldw	r9,16(sp)
10010574:	113ffd44 	addi	r4,r2,-11
10010578:	00c00704 	movi	r3,28
1001057c:	19014216 	blt	r3,r4,10010a88 <__muldf3+0x714>
10010580:	00c00744 	movi	r3,29
10010584:	15bffe04 	addi	r22,r2,-8
10010588:	1907c83a 	sub	r3,r3,r4
1001058c:	85a0983a 	sll	r16,r16,r22
10010590:	a8c6d83a 	srl	r3,r21,r3
10010594:	adac983a 	sll	r22,r21,r22
10010598:	1c20b03a 	or	r16,r3,r16
1001059c:	1080fcc4 	addi	r2,r2,1011
100105a0:	00a9c83a 	sub	r20,zero,r2
100105a4:	002b883a 	mov	r21,zero
100105a8:	000b883a 	mov	r5,zero
100105ac:	003f9006 	br	100103f0 <__alt_data_end+0xf80103f0>
100105b0:	3446b03a 	or	r3,r6,r17
100105b4:	1800281e 	bne	r3,zero,10010658 <__muldf3+0x2e4>
100105b8:	0023883a 	mov	r17,zero
100105bc:	0025883a 	mov	r18,zero
100105c0:	01c00084 	movi	r7,2
100105c4:	003f9c06 	br	10010438 <__alt_data_end+0xf8010438>
100105c8:	3446b03a 	or	r3,r6,r17
100105cc:	18001e26 	beq	r3,zero,10010648 <__muldf3+0x2d4>
100105d0:	88012126 	beq	r17,zero,10010a58 <__muldf3+0x6e4>
100105d4:	8809883a 	mov	r4,r17
100105d8:	d9400215 	stw	r5,8(sp)
100105dc:	d9800715 	stw	r6,28(sp)
100105e0:	da400415 	stw	r9,16(sp)
100105e4:	da800315 	stw	r10,12(sp)
100105e8:	000523c0 	call	1000523c <__clzsi2>
100105ec:	d9400217 	ldw	r5,8(sp)
100105f0:	d9800717 	ldw	r6,28(sp)
100105f4:	da400417 	ldw	r9,16(sp)
100105f8:	da800317 	ldw	r10,12(sp)
100105fc:	113ffd44 	addi	r4,r2,-11
10010600:	00c00704 	movi	r3,28
10010604:	19011016 	blt	r3,r4,10010a48 <__muldf3+0x6d4>
10010608:	00c00744 	movi	r3,29
1001060c:	14bffe04 	addi	r18,r2,-8
10010610:	1907c83a 	sub	r3,r3,r4
10010614:	8ca2983a 	sll	r17,r17,r18
10010618:	30c6d83a 	srl	r3,r6,r3
1001061c:	34a4983a 	sll	r18,r6,r18
10010620:	1c62b03a 	or	r17,r3,r17
10010624:	1080fcc4 	addi	r2,r2,1011
10010628:	0085c83a 	sub	r2,zero,r2
1001062c:	000f883a 	mov	r7,zero
10010630:	003f8106 	br	10010438 <__alt_data_end+0xf8010438>
10010634:	3027883a 	mov	r19,r6
10010638:	0081ffc4 	movi	r2,2047
1001063c:	0021883a 	mov	r16,zero
10010640:	002d883a 	mov	r22,zero
10010644:	003faa06 	br	100104f0 <__alt_data_end+0xf80104f0>
10010648:	0023883a 	mov	r17,zero
1001064c:	0025883a 	mov	r18,zero
10010650:	01c00044 	movi	r7,1
10010654:	003f7806 	br	10010438 <__alt_data_end+0xf8010438>
10010658:	01c000c4 	movi	r7,3
1001065c:	003f7606 	br	10010438 <__alt_data_end+0xf8010438>
10010660:	05400104 	movi	r21,4
10010664:	0021883a 	mov	r16,zero
10010668:	002d883a 	mov	r22,zero
1001066c:	01400044 	movi	r5,1
10010670:	003f5f06 	br	100103f0 <__alt_data_end+0xf80103f0>
10010674:	05400304 	movi	r21,12
10010678:	014000c4 	movi	r5,3
1001067c:	003f5c06 	br	100103f0 <__alt_data_end+0xf80103f0>
10010680:	04000434 	movhi	r16,16
10010684:	0027883a 	mov	r19,zero
10010688:	843fffc4 	addi	r16,r16,-1
1001068c:	05bfffc4 	movi	r22,-1
10010690:	0081ffc4 	movi	r2,2047
10010694:	003f9606 	br	100104f0 <__alt_data_end+0xf80104f0>
10010698:	8023883a 	mov	r17,r16
1001069c:	b025883a 	mov	r18,r22
100106a0:	280f883a 	mov	r7,r5
100106a4:	003f8806 	br	100104c8 <__alt_data_end+0xf80104c8>
100106a8:	8023883a 	mov	r17,r16
100106ac:	b025883a 	mov	r18,r22
100106b0:	480d883a 	mov	r6,r9
100106b4:	280f883a 	mov	r7,r5
100106b8:	003f8306 	br	100104c8 <__alt_data_end+0xf80104c8>
100106bc:	b026d43a 	srli	r19,r22,16
100106c0:	902ed43a 	srli	r23,r18,16
100106c4:	b5bfffcc 	andi	r22,r22,65535
100106c8:	94bfffcc 	andi	r18,r18,65535
100106cc:	b00b883a 	mov	r5,r22
100106d0:	9009883a 	mov	r4,r18
100106d4:	d8c00515 	stw	r3,20(sp)
100106d8:	d9800715 	stw	r6,28(sp)
100106dc:	da000615 	stw	r8,24(sp)
100106e0:	00052a00 	call	100052a0 <__mulsi3>
100106e4:	980b883a 	mov	r5,r19
100106e8:	9009883a 	mov	r4,r18
100106ec:	1029883a 	mov	r20,r2
100106f0:	00052a00 	call	100052a0 <__mulsi3>
100106f4:	b80b883a 	mov	r5,r23
100106f8:	9809883a 	mov	r4,r19
100106fc:	102b883a 	mov	r21,r2
10010700:	00052a00 	call	100052a0 <__mulsi3>
10010704:	b809883a 	mov	r4,r23
10010708:	b00b883a 	mov	r5,r22
1001070c:	1039883a 	mov	fp,r2
10010710:	00052a00 	call	100052a0 <__mulsi3>
10010714:	a008d43a 	srli	r4,r20,16
10010718:	1545883a 	add	r2,r2,r21
1001071c:	d8c00517 	ldw	r3,20(sp)
10010720:	2085883a 	add	r2,r4,r2
10010724:	d9800717 	ldw	r6,28(sp)
10010728:	da000617 	ldw	r8,24(sp)
1001072c:	1540022e 	bgeu	r2,r21,10010738 <__muldf3+0x3c4>
10010730:	01000074 	movhi	r4,1
10010734:	e139883a 	add	fp,fp,r4
10010738:	100e943a 	slli	r7,r2,16
1001073c:	1004d43a 	srli	r2,r2,16
10010740:	882ad43a 	srli	r21,r17,16
10010744:	a53fffcc 	andi	r20,r20,65535
10010748:	8c7fffcc 	andi	r17,r17,65535
1001074c:	3d29883a 	add	r20,r7,r20
10010750:	b00b883a 	mov	r5,r22
10010754:	8809883a 	mov	r4,r17
10010758:	d8c00515 	stw	r3,20(sp)
1001075c:	d9800715 	stw	r6,28(sp)
10010760:	da000615 	stw	r8,24(sp)
10010764:	dd000115 	stw	r20,4(sp)
10010768:	d8800015 	stw	r2,0(sp)
1001076c:	00052a00 	call	100052a0 <__mulsi3>
10010770:	980b883a 	mov	r5,r19
10010774:	8809883a 	mov	r4,r17
10010778:	d8800215 	stw	r2,8(sp)
1001077c:	00052a00 	call	100052a0 <__mulsi3>
10010780:	9809883a 	mov	r4,r19
10010784:	a80b883a 	mov	r5,r21
10010788:	1029883a 	mov	r20,r2
1001078c:	00052a00 	call	100052a0 <__mulsi3>
10010790:	b00b883a 	mov	r5,r22
10010794:	a809883a 	mov	r4,r21
10010798:	d8800415 	stw	r2,16(sp)
1001079c:	00052a00 	call	100052a0 <__mulsi3>
100107a0:	d9c00217 	ldw	r7,8(sp)
100107a4:	1505883a 	add	r2,r2,r20
100107a8:	d8c00517 	ldw	r3,20(sp)
100107ac:	3826d43a 	srli	r19,r7,16
100107b0:	d9800717 	ldw	r6,28(sp)
100107b4:	da000617 	ldw	r8,24(sp)
100107b8:	9885883a 	add	r2,r19,r2
100107bc:	da400417 	ldw	r9,16(sp)
100107c0:	1500022e 	bgeu	r2,r20,100107cc <__muldf3+0x458>
100107c4:	01000074 	movhi	r4,1
100107c8:	4913883a 	add	r9,r9,r4
100107cc:	1028d43a 	srli	r20,r2,16
100107d0:	1004943a 	slli	r2,r2,16
100107d4:	802cd43a 	srli	r22,r16,16
100107d8:	843fffcc 	andi	r16,r16,65535
100107dc:	3cffffcc 	andi	r19,r7,65535
100107e0:	9009883a 	mov	r4,r18
100107e4:	800b883a 	mov	r5,r16
100107e8:	a269883a 	add	r20,r20,r9
100107ec:	d8c00515 	stw	r3,20(sp)
100107f0:	d9800715 	stw	r6,28(sp)
100107f4:	da000615 	stw	r8,24(sp)
100107f8:	14e7883a 	add	r19,r2,r19
100107fc:	00052a00 	call	100052a0 <__mulsi3>
10010800:	9009883a 	mov	r4,r18
10010804:	b00b883a 	mov	r5,r22
10010808:	d8800315 	stw	r2,12(sp)
1001080c:	00052a00 	call	100052a0 <__mulsi3>
10010810:	b809883a 	mov	r4,r23
10010814:	b00b883a 	mov	r5,r22
10010818:	d8800215 	stw	r2,8(sp)
1001081c:	00052a00 	call	100052a0 <__mulsi3>
10010820:	b80b883a 	mov	r5,r23
10010824:	8009883a 	mov	r4,r16
10010828:	d8800415 	stw	r2,16(sp)
1001082c:	00052a00 	call	100052a0 <__mulsi3>
10010830:	da800317 	ldw	r10,12(sp)
10010834:	d9c00217 	ldw	r7,8(sp)
10010838:	d9000017 	ldw	r4,0(sp)
1001083c:	502ed43a 	srli	r23,r10,16
10010840:	11c5883a 	add	r2,r2,r7
10010844:	24e5883a 	add	r18,r4,r19
10010848:	b885883a 	add	r2,r23,r2
1001084c:	d8c00517 	ldw	r3,20(sp)
10010850:	d9800717 	ldw	r6,28(sp)
10010854:	da000617 	ldw	r8,24(sp)
10010858:	da400417 	ldw	r9,16(sp)
1001085c:	11c0022e 	bgeu	r2,r7,10010868 <__muldf3+0x4f4>
10010860:	01000074 	movhi	r4,1
10010864:	4913883a 	add	r9,r9,r4
10010868:	100ed43a 	srli	r7,r2,16
1001086c:	1004943a 	slli	r2,r2,16
10010870:	55ffffcc 	andi	r23,r10,65535
10010874:	3a53883a 	add	r9,r7,r9
10010878:	8809883a 	mov	r4,r17
1001087c:	800b883a 	mov	r5,r16
10010880:	d8c00515 	stw	r3,20(sp)
10010884:	d9800715 	stw	r6,28(sp)
10010888:	da000615 	stw	r8,24(sp)
1001088c:	da400415 	stw	r9,16(sp)
10010890:	15ef883a 	add	r23,r2,r23
10010894:	00052a00 	call	100052a0 <__mulsi3>
10010898:	8809883a 	mov	r4,r17
1001089c:	b00b883a 	mov	r5,r22
100108a0:	d8800215 	stw	r2,8(sp)
100108a4:	00052a00 	call	100052a0 <__mulsi3>
100108a8:	b00b883a 	mov	r5,r22
100108ac:	a809883a 	mov	r4,r21
100108b0:	d8800315 	stw	r2,12(sp)
100108b4:	00052a00 	call	100052a0 <__mulsi3>
100108b8:	8009883a 	mov	r4,r16
100108bc:	a80b883a 	mov	r5,r21
100108c0:	1023883a 	mov	r17,r2
100108c4:	00052a00 	call	100052a0 <__mulsi3>
100108c8:	d9c00217 	ldw	r7,8(sp)
100108cc:	da800317 	ldw	r10,12(sp)
100108d0:	d8c00517 	ldw	r3,20(sp)
100108d4:	3808d43a 	srli	r4,r7,16
100108d8:	1285883a 	add	r2,r2,r10
100108dc:	d9800717 	ldw	r6,28(sp)
100108e0:	2085883a 	add	r2,r4,r2
100108e4:	da000617 	ldw	r8,24(sp)
100108e8:	da400417 	ldw	r9,16(sp)
100108ec:	1280022e 	bgeu	r2,r10,100108f8 <__muldf3+0x584>
100108f0:	01000074 	movhi	r4,1
100108f4:	8923883a 	add	r17,r17,r4
100108f8:	1008943a 	slli	r4,r2,16
100108fc:	39ffffcc 	andi	r7,r7,65535
10010900:	e4b9883a 	add	fp,fp,r18
10010904:	21cf883a 	add	r7,r4,r7
10010908:	e4e7803a 	cmpltu	r19,fp,r19
1001090c:	3d0f883a 	add	r7,r7,r20
10010910:	bf39883a 	add	fp,r23,fp
10010914:	99c9883a 	add	r4,r19,r7
10010918:	e5ef803a 	cmpltu	r23,fp,r23
1001091c:	490b883a 	add	r5,r9,r4
10010920:	1004d43a 	srli	r2,r2,16
10010924:	b965883a 	add	r18,r23,r5
10010928:	24c9803a 	cmpltu	r4,r4,r19
1001092c:	3d29803a 	cmpltu	r20,r7,r20
10010930:	a128b03a 	or	r20,r20,r4
10010934:	95ef803a 	cmpltu	r23,r18,r23
10010938:	2a53803a 	cmpltu	r9,r5,r9
1001093c:	a0a9883a 	add	r20,r20,r2
10010940:	4deeb03a 	or	r23,r9,r23
10010944:	a5ef883a 	add	r23,r20,r23
10010948:	bc63883a 	add	r17,r23,r17
1001094c:	e004927a 	slli	r2,fp,9
10010950:	d9000117 	ldw	r4,4(sp)
10010954:	882e927a 	slli	r23,r17,9
10010958:	9022d5fa 	srli	r17,r18,23
1001095c:	e038d5fa 	srli	fp,fp,23
10010960:	1104b03a 	or	r2,r2,r4
10010964:	9024927a 	slli	r18,r18,9
10010968:	1004c03a 	cmpne	r2,r2,zero
1001096c:	bc62b03a 	or	r17,r23,r17
10010970:	1738b03a 	or	fp,r2,fp
10010974:	8880402c 	andhi	r2,r17,256
10010978:	e4a4b03a 	or	r18,fp,r18
1001097c:	10000726 	beq	r2,zero,1001099c <__muldf3+0x628>
10010980:	9006d07a 	srli	r3,r18,1
10010984:	880497fa 	slli	r2,r17,31
10010988:	9480004c 	andi	r18,r18,1
1001098c:	8822d07a 	srli	r17,r17,1
10010990:	1ca4b03a 	or	r18,r3,r18
10010994:	14a4b03a 	or	r18,r2,r18
10010998:	4007883a 	mov	r3,r8
1001099c:	1880ffc4 	addi	r2,r3,1023
100109a0:	0080460e 	bge	zero,r2,10010abc <__muldf3+0x748>
100109a4:	910001cc 	andi	r4,r18,7
100109a8:	20000726 	beq	r4,zero,100109c8 <__muldf3+0x654>
100109ac:	910003cc 	andi	r4,r18,15
100109b0:	01400104 	movi	r5,4
100109b4:	21400426 	beq	r4,r5,100109c8 <__muldf3+0x654>
100109b8:	9149883a 	add	r4,r18,r5
100109bc:	24a5803a 	cmpltu	r18,r4,r18
100109c0:	8ca3883a 	add	r17,r17,r18
100109c4:	2025883a 	mov	r18,r4
100109c8:	8900402c 	andhi	r4,r17,256
100109cc:	20000426 	beq	r4,zero,100109e0 <__muldf3+0x66c>
100109d0:	18810004 	addi	r2,r3,1024
100109d4:	00ffc034 	movhi	r3,65280
100109d8:	18ffffc4 	addi	r3,r3,-1
100109dc:	88e2703a 	and	r17,r17,r3
100109e0:	00c1ff84 	movi	r3,2046
100109e4:	18bf1316 	blt	r3,r2,10010634 <__alt_data_end+0xf8010634>
100109e8:	882c977a 	slli	r22,r17,29
100109ec:	9024d0fa 	srli	r18,r18,3
100109f0:	8822927a 	slli	r17,r17,9
100109f4:	1081ffcc 	andi	r2,r2,2047
100109f8:	b4acb03a 	or	r22,r22,r18
100109fc:	8820d33a 	srli	r16,r17,12
10010a00:	3027883a 	mov	r19,r6
10010a04:	003eba06 	br	100104f0 <__alt_data_end+0xf80104f0>
10010a08:	8080022c 	andhi	r2,r16,8
10010a0c:	10000926 	beq	r2,zero,10010a34 <__muldf3+0x6c0>
10010a10:	8880022c 	andhi	r2,r17,8
10010a14:	1000071e 	bne	r2,zero,10010a34 <__muldf3+0x6c0>
10010a18:	00800434 	movhi	r2,16
10010a1c:	8c000234 	orhi	r16,r17,8
10010a20:	10bfffc4 	addi	r2,r2,-1
10010a24:	e027883a 	mov	r19,fp
10010a28:	80a0703a 	and	r16,r16,r2
10010a2c:	902d883a 	mov	r22,r18
10010a30:	003f1706 	br	10010690 <__alt_data_end+0xf8010690>
10010a34:	00800434 	movhi	r2,16
10010a38:	84000234 	orhi	r16,r16,8
10010a3c:	10bfffc4 	addi	r2,r2,-1
10010a40:	80a0703a 	and	r16,r16,r2
10010a44:	003f1206 	br	10010690 <__alt_data_end+0xf8010690>
10010a48:	147ff604 	addi	r17,r2,-40
10010a4c:	3462983a 	sll	r17,r6,r17
10010a50:	0025883a 	mov	r18,zero
10010a54:	003ef306 	br	10010624 <__alt_data_end+0xf8010624>
10010a58:	3009883a 	mov	r4,r6
10010a5c:	d9400215 	stw	r5,8(sp)
10010a60:	d9800715 	stw	r6,28(sp)
10010a64:	da400415 	stw	r9,16(sp)
10010a68:	da800315 	stw	r10,12(sp)
10010a6c:	000523c0 	call	1000523c <__clzsi2>
10010a70:	10800804 	addi	r2,r2,32
10010a74:	da800317 	ldw	r10,12(sp)
10010a78:	da400417 	ldw	r9,16(sp)
10010a7c:	d9800717 	ldw	r6,28(sp)
10010a80:	d9400217 	ldw	r5,8(sp)
10010a84:	003edd06 	br	100105fc <__alt_data_end+0xf80105fc>
10010a88:	143ff604 	addi	r16,r2,-40
10010a8c:	ac20983a 	sll	r16,r21,r16
10010a90:	002d883a 	mov	r22,zero
10010a94:	003ec106 	br	1001059c <__alt_data_end+0xf801059c>
10010a98:	d9800715 	stw	r6,28(sp)
10010a9c:	d9c00215 	stw	r7,8(sp)
10010aa0:	da400415 	stw	r9,16(sp)
10010aa4:	000523c0 	call	1000523c <__clzsi2>
10010aa8:	10800804 	addi	r2,r2,32
10010aac:	da400417 	ldw	r9,16(sp)
10010ab0:	d9c00217 	ldw	r7,8(sp)
10010ab4:	d9800717 	ldw	r6,28(sp)
10010ab8:	003eae06 	br	10010574 <__alt_data_end+0xf8010574>
10010abc:	00c00044 	movi	r3,1
10010ac0:	1887c83a 	sub	r3,r3,r2
10010ac4:	01000e04 	movi	r4,56
10010ac8:	20fe8516 	blt	r4,r3,100104e0 <__alt_data_end+0xf80104e0>
10010acc:	010007c4 	movi	r4,31
10010ad0:	20c01b16 	blt	r4,r3,10010b40 <__muldf3+0x7cc>
10010ad4:	00800804 	movi	r2,32
10010ad8:	10c5c83a 	sub	r2,r2,r3
10010adc:	888a983a 	sll	r5,r17,r2
10010ae0:	90c8d83a 	srl	r4,r18,r3
10010ae4:	9084983a 	sll	r2,r18,r2
10010ae8:	88e2d83a 	srl	r17,r17,r3
10010aec:	2906b03a 	or	r3,r5,r4
10010af0:	1004c03a 	cmpne	r2,r2,zero
10010af4:	1886b03a 	or	r3,r3,r2
10010af8:	188001cc 	andi	r2,r3,7
10010afc:	10000726 	beq	r2,zero,10010b1c <__muldf3+0x7a8>
10010b00:	188003cc 	andi	r2,r3,15
10010b04:	01000104 	movi	r4,4
10010b08:	11000426 	beq	r2,r4,10010b1c <__muldf3+0x7a8>
10010b0c:	1805883a 	mov	r2,r3
10010b10:	10c00104 	addi	r3,r2,4
10010b14:	1885803a 	cmpltu	r2,r3,r2
10010b18:	88a3883a 	add	r17,r17,r2
10010b1c:	8880202c 	andhi	r2,r17,128
10010b20:	10001c26 	beq	r2,zero,10010b94 <__muldf3+0x820>
10010b24:	3027883a 	mov	r19,r6
10010b28:	00800044 	movi	r2,1
10010b2c:	0021883a 	mov	r16,zero
10010b30:	002d883a 	mov	r22,zero
10010b34:	003e6e06 	br	100104f0 <__alt_data_end+0xf80104f0>
10010b38:	4007883a 	mov	r3,r8
10010b3c:	003f9706 	br	1001099c <__alt_data_end+0xf801099c>
10010b40:	017ff844 	movi	r5,-31
10010b44:	2885c83a 	sub	r2,r5,r2
10010b48:	888ad83a 	srl	r5,r17,r2
10010b4c:	00800804 	movi	r2,32
10010b50:	18801a26 	beq	r3,r2,10010bbc <__muldf3+0x848>
10010b54:	01001004 	movi	r4,64
10010b58:	20c7c83a 	sub	r3,r4,r3
10010b5c:	88e2983a 	sll	r17,r17,r3
10010b60:	8ca4b03a 	or	r18,r17,r18
10010b64:	9004c03a 	cmpne	r2,r18,zero
10010b68:	2884b03a 	or	r2,r5,r2
10010b6c:	144001cc 	andi	r17,r2,7
10010b70:	88000d1e 	bne	r17,zero,10010ba8 <__muldf3+0x834>
10010b74:	0021883a 	mov	r16,zero
10010b78:	102cd0fa 	srli	r22,r2,3
10010b7c:	3027883a 	mov	r19,r6
10010b80:	0005883a 	mov	r2,zero
10010b84:	b46cb03a 	or	r22,r22,r17
10010b88:	003e5906 	br	100104f0 <__alt_data_end+0xf80104f0>
10010b8c:	1007883a 	mov	r3,r2
10010b90:	0023883a 	mov	r17,zero
10010b94:	8820927a 	slli	r16,r17,9
10010b98:	1805883a 	mov	r2,r3
10010b9c:	8822977a 	slli	r17,r17,29
10010ba0:	8020d33a 	srli	r16,r16,12
10010ba4:	003ff406 	br	10010b78 <__alt_data_end+0xf8010b78>
10010ba8:	10c003cc 	andi	r3,r2,15
10010bac:	01000104 	movi	r4,4
10010bb0:	193ff626 	beq	r3,r4,10010b8c <__alt_data_end+0xf8010b8c>
10010bb4:	0023883a 	mov	r17,zero
10010bb8:	003fd506 	br	10010b10 <__alt_data_end+0xf8010b10>
10010bbc:	0023883a 	mov	r17,zero
10010bc0:	003fe706 	br	10010b60 <__alt_data_end+0xf8010b60>
10010bc4:	00800434 	movhi	r2,16
10010bc8:	8c000234 	orhi	r16,r17,8
10010bcc:	10bfffc4 	addi	r2,r2,-1
10010bd0:	3027883a 	mov	r19,r6
10010bd4:	80a0703a 	and	r16,r16,r2
10010bd8:	902d883a 	mov	r22,r18
10010bdc:	003eac06 	br	10010690 <__alt_data_end+0xf8010690>

10010be0 <__subdf3>:
10010be0:	02000434 	movhi	r8,16
10010be4:	423fffc4 	addi	r8,r8,-1
10010be8:	defffb04 	addi	sp,sp,-20
10010bec:	2a14703a 	and	r10,r5,r8
10010bf0:	3812d53a 	srli	r9,r7,20
10010bf4:	3a10703a 	and	r8,r7,r8
10010bf8:	2006d77a 	srli	r3,r4,29
10010bfc:	3004d77a 	srli	r2,r6,29
10010c00:	dc000015 	stw	r16,0(sp)
10010c04:	501490fa 	slli	r10,r10,3
10010c08:	2820d53a 	srli	r16,r5,20
10010c0c:	401090fa 	slli	r8,r8,3
10010c10:	dc800215 	stw	r18,8(sp)
10010c14:	dc400115 	stw	r17,4(sp)
10010c18:	dfc00415 	stw	ra,16(sp)
10010c1c:	202290fa 	slli	r17,r4,3
10010c20:	dcc00315 	stw	r19,12(sp)
10010c24:	4a41ffcc 	andi	r9,r9,2047
10010c28:	0101ffc4 	movi	r4,2047
10010c2c:	2824d7fa 	srli	r18,r5,31
10010c30:	8401ffcc 	andi	r16,r16,2047
10010c34:	50c6b03a 	or	r3,r10,r3
10010c38:	380ed7fa 	srli	r7,r7,31
10010c3c:	408ab03a 	or	r5,r8,r2
10010c40:	300c90fa 	slli	r6,r6,3
10010c44:	49009626 	beq	r9,r4,10010ea0 <__subdf3+0x2c0>
10010c48:	39c0005c 	xori	r7,r7,1
10010c4c:	8245c83a 	sub	r2,r16,r9
10010c50:	3c807426 	beq	r7,r18,10010e24 <__subdf3+0x244>
10010c54:	0080af0e 	bge	zero,r2,10010f14 <__subdf3+0x334>
10010c58:	48002a1e 	bne	r9,zero,10010d04 <__subdf3+0x124>
10010c5c:	2988b03a 	or	r4,r5,r6
10010c60:	20009a1e 	bne	r4,zero,10010ecc <__subdf3+0x2ec>
10010c64:	888001cc 	andi	r2,r17,7
10010c68:	10000726 	beq	r2,zero,10010c88 <__subdf3+0xa8>
10010c6c:	888003cc 	andi	r2,r17,15
10010c70:	01000104 	movi	r4,4
10010c74:	11000426 	beq	r2,r4,10010c88 <__subdf3+0xa8>
10010c78:	890b883a 	add	r5,r17,r4
10010c7c:	2c63803a 	cmpltu	r17,r5,r17
10010c80:	1c47883a 	add	r3,r3,r17
10010c84:	2823883a 	mov	r17,r5
10010c88:	1880202c 	andhi	r2,r3,128
10010c8c:	10005926 	beq	r2,zero,10010df4 <__subdf3+0x214>
10010c90:	84000044 	addi	r16,r16,1
10010c94:	0081ffc4 	movi	r2,2047
10010c98:	8080be26 	beq	r16,r2,10010f94 <__subdf3+0x3b4>
10010c9c:	017fe034 	movhi	r5,65408
10010ca0:	297fffc4 	addi	r5,r5,-1
10010ca4:	1946703a 	and	r3,r3,r5
10010ca8:	1804977a 	slli	r2,r3,29
10010cac:	1806927a 	slli	r3,r3,9
10010cb0:	8822d0fa 	srli	r17,r17,3
10010cb4:	8401ffcc 	andi	r16,r16,2047
10010cb8:	180ad33a 	srli	r5,r3,12
10010cbc:	9100004c 	andi	r4,r18,1
10010cc0:	1444b03a 	or	r2,r2,r17
10010cc4:	80c1ffcc 	andi	r3,r16,2047
10010cc8:	1820953a 	slli	r16,r3,20
10010ccc:	20c03fcc 	andi	r3,r4,255
10010cd0:	180897fa 	slli	r4,r3,31
10010cd4:	00c00434 	movhi	r3,16
10010cd8:	18ffffc4 	addi	r3,r3,-1
10010cdc:	28c6703a 	and	r3,r5,r3
10010ce0:	1c06b03a 	or	r3,r3,r16
10010ce4:	1906b03a 	or	r3,r3,r4
10010ce8:	dfc00417 	ldw	ra,16(sp)
10010cec:	dcc00317 	ldw	r19,12(sp)
10010cf0:	dc800217 	ldw	r18,8(sp)
10010cf4:	dc400117 	ldw	r17,4(sp)
10010cf8:	dc000017 	ldw	r16,0(sp)
10010cfc:	dec00504 	addi	sp,sp,20
10010d00:	f800283a 	ret
10010d04:	0101ffc4 	movi	r4,2047
10010d08:	813fd626 	beq	r16,r4,10010c64 <__alt_data_end+0xf8010c64>
10010d0c:	29402034 	orhi	r5,r5,128
10010d10:	01000e04 	movi	r4,56
10010d14:	2080a316 	blt	r4,r2,10010fa4 <__subdf3+0x3c4>
10010d18:	010007c4 	movi	r4,31
10010d1c:	2080c616 	blt	r4,r2,10011038 <__subdf3+0x458>
10010d20:	01000804 	movi	r4,32
10010d24:	2089c83a 	sub	r4,r4,r2
10010d28:	2910983a 	sll	r8,r5,r4
10010d2c:	308ed83a 	srl	r7,r6,r2
10010d30:	3108983a 	sll	r4,r6,r4
10010d34:	2884d83a 	srl	r2,r5,r2
10010d38:	41ccb03a 	or	r6,r8,r7
10010d3c:	2008c03a 	cmpne	r4,r4,zero
10010d40:	310cb03a 	or	r6,r6,r4
10010d44:	898dc83a 	sub	r6,r17,r6
10010d48:	89a3803a 	cmpltu	r17,r17,r6
10010d4c:	1887c83a 	sub	r3,r3,r2
10010d50:	1c47c83a 	sub	r3,r3,r17
10010d54:	3023883a 	mov	r17,r6
10010d58:	1880202c 	andhi	r2,r3,128
10010d5c:	10002326 	beq	r2,zero,10010dec <__subdf3+0x20c>
10010d60:	04c02034 	movhi	r19,128
10010d64:	9cffffc4 	addi	r19,r19,-1
10010d68:	1ce6703a 	and	r19,r3,r19
10010d6c:	98007a26 	beq	r19,zero,10010f58 <__subdf3+0x378>
10010d70:	9809883a 	mov	r4,r19
10010d74:	000523c0 	call	1000523c <__clzsi2>
10010d78:	113ffe04 	addi	r4,r2,-8
10010d7c:	00c007c4 	movi	r3,31
10010d80:	19007b16 	blt	r3,r4,10010f70 <__subdf3+0x390>
10010d84:	00800804 	movi	r2,32
10010d88:	1105c83a 	sub	r2,r2,r4
10010d8c:	8884d83a 	srl	r2,r17,r2
10010d90:	9906983a 	sll	r3,r19,r4
10010d94:	8922983a 	sll	r17,r17,r4
10010d98:	10c4b03a 	or	r2,r2,r3
10010d9c:	24007816 	blt	r4,r16,10010f80 <__subdf3+0x3a0>
10010da0:	2421c83a 	sub	r16,r4,r16
10010da4:	80c00044 	addi	r3,r16,1
10010da8:	010007c4 	movi	r4,31
10010dac:	20c09516 	blt	r4,r3,10011004 <__subdf3+0x424>
10010db0:	01400804 	movi	r5,32
10010db4:	28cbc83a 	sub	r5,r5,r3
10010db8:	88c8d83a 	srl	r4,r17,r3
10010dbc:	8962983a 	sll	r17,r17,r5
10010dc0:	114a983a 	sll	r5,r2,r5
10010dc4:	10c6d83a 	srl	r3,r2,r3
10010dc8:	8804c03a 	cmpne	r2,r17,zero
10010dcc:	290ab03a 	or	r5,r5,r4
10010dd0:	28a2b03a 	or	r17,r5,r2
10010dd4:	0021883a 	mov	r16,zero
10010dd8:	003fa206 	br	10010c64 <__alt_data_end+0xf8010c64>
10010ddc:	2090b03a 	or	r8,r4,r2
10010de0:	40018e26 	beq	r8,zero,1001141c <__subdf3+0x83c>
10010de4:	1007883a 	mov	r3,r2
10010de8:	2023883a 	mov	r17,r4
10010dec:	888001cc 	andi	r2,r17,7
10010df0:	103f9e1e 	bne	r2,zero,10010c6c <__alt_data_end+0xf8010c6c>
10010df4:	1804977a 	slli	r2,r3,29
10010df8:	8822d0fa 	srli	r17,r17,3
10010dfc:	1810d0fa 	srli	r8,r3,3
10010e00:	9100004c 	andi	r4,r18,1
10010e04:	1444b03a 	or	r2,r2,r17
10010e08:	00c1ffc4 	movi	r3,2047
10010e0c:	80c02826 	beq	r16,r3,10010eb0 <__subdf3+0x2d0>
10010e10:	01400434 	movhi	r5,16
10010e14:	297fffc4 	addi	r5,r5,-1
10010e18:	80e0703a 	and	r16,r16,r3
10010e1c:	414a703a 	and	r5,r8,r5
10010e20:	003fa806 	br	10010cc4 <__alt_data_end+0xf8010cc4>
10010e24:	0080630e 	bge	zero,r2,10010fb4 <__subdf3+0x3d4>
10010e28:	48003026 	beq	r9,zero,10010eec <__subdf3+0x30c>
10010e2c:	0101ffc4 	movi	r4,2047
10010e30:	813f8c26 	beq	r16,r4,10010c64 <__alt_data_end+0xf8010c64>
10010e34:	29402034 	orhi	r5,r5,128
10010e38:	01000e04 	movi	r4,56
10010e3c:	2080a90e 	bge	r4,r2,100110e4 <__subdf3+0x504>
10010e40:	298cb03a 	or	r6,r5,r6
10010e44:	3012c03a 	cmpne	r9,r6,zero
10010e48:	0005883a 	mov	r2,zero
10010e4c:	4c53883a 	add	r9,r9,r17
10010e50:	4c63803a 	cmpltu	r17,r9,r17
10010e54:	10c7883a 	add	r3,r2,r3
10010e58:	88c7883a 	add	r3,r17,r3
10010e5c:	4823883a 	mov	r17,r9
10010e60:	1880202c 	andhi	r2,r3,128
10010e64:	1000d026 	beq	r2,zero,100111a8 <__subdf3+0x5c8>
10010e68:	84000044 	addi	r16,r16,1
10010e6c:	0081ffc4 	movi	r2,2047
10010e70:	8080fe26 	beq	r16,r2,1001126c <__subdf3+0x68c>
10010e74:	00bfe034 	movhi	r2,65408
10010e78:	10bfffc4 	addi	r2,r2,-1
10010e7c:	1886703a 	and	r3,r3,r2
10010e80:	880ad07a 	srli	r5,r17,1
10010e84:	180497fa 	slli	r2,r3,31
10010e88:	8900004c 	andi	r4,r17,1
10010e8c:	2922b03a 	or	r17,r5,r4
10010e90:	1806d07a 	srli	r3,r3,1
10010e94:	1462b03a 	or	r17,r2,r17
10010e98:	3825883a 	mov	r18,r7
10010e9c:	003f7106 	br	10010c64 <__alt_data_end+0xf8010c64>
10010ea0:	2984b03a 	or	r2,r5,r6
10010ea4:	103f6826 	beq	r2,zero,10010c48 <__alt_data_end+0xf8010c48>
10010ea8:	39c03fcc 	andi	r7,r7,255
10010eac:	003f6706 	br	10010c4c <__alt_data_end+0xf8010c4c>
10010eb0:	4086b03a 	or	r3,r8,r2
10010eb4:	18015226 	beq	r3,zero,10011400 <__subdf3+0x820>
10010eb8:	00c00434 	movhi	r3,16
10010ebc:	41400234 	orhi	r5,r8,8
10010ec0:	18ffffc4 	addi	r3,r3,-1
10010ec4:	28ca703a 	and	r5,r5,r3
10010ec8:	003f7e06 	br	10010cc4 <__alt_data_end+0xf8010cc4>
10010ecc:	10bfffc4 	addi	r2,r2,-1
10010ed0:	1000491e 	bne	r2,zero,10010ff8 <__subdf3+0x418>
10010ed4:	898fc83a 	sub	r7,r17,r6
10010ed8:	89e3803a 	cmpltu	r17,r17,r7
10010edc:	1947c83a 	sub	r3,r3,r5
10010ee0:	1c47c83a 	sub	r3,r3,r17
10010ee4:	3823883a 	mov	r17,r7
10010ee8:	003f9b06 	br	10010d58 <__alt_data_end+0xf8010d58>
10010eec:	2988b03a 	or	r4,r5,r6
10010ef0:	203f5c26 	beq	r4,zero,10010c64 <__alt_data_end+0xf8010c64>
10010ef4:	10bfffc4 	addi	r2,r2,-1
10010ef8:	1000931e 	bne	r2,zero,10011148 <__subdf3+0x568>
10010efc:	898d883a 	add	r6,r17,r6
10010f00:	3463803a 	cmpltu	r17,r6,r17
10010f04:	1947883a 	add	r3,r3,r5
10010f08:	88c7883a 	add	r3,r17,r3
10010f0c:	3023883a 	mov	r17,r6
10010f10:	003fd306 	br	10010e60 <__alt_data_end+0xf8010e60>
10010f14:	1000541e 	bne	r2,zero,10011068 <__subdf3+0x488>
10010f18:	80800044 	addi	r2,r16,1
10010f1c:	1081ffcc 	andi	r2,r2,2047
10010f20:	01000044 	movi	r4,1
10010f24:	2080a20e 	bge	r4,r2,100111b0 <__subdf3+0x5d0>
10010f28:	8989c83a 	sub	r4,r17,r6
10010f2c:	8905803a 	cmpltu	r2,r17,r4
10010f30:	1967c83a 	sub	r19,r3,r5
10010f34:	98a7c83a 	sub	r19,r19,r2
10010f38:	9880202c 	andhi	r2,r19,128
10010f3c:	10006326 	beq	r2,zero,100110cc <__subdf3+0x4ec>
10010f40:	3463c83a 	sub	r17,r6,r17
10010f44:	28c7c83a 	sub	r3,r5,r3
10010f48:	344d803a 	cmpltu	r6,r6,r17
10010f4c:	19a7c83a 	sub	r19,r3,r6
10010f50:	3825883a 	mov	r18,r7
10010f54:	983f861e 	bne	r19,zero,10010d70 <__alt_data_end+0xf8010d70>
10010f58:	8809883a 	mov	r4,r17
10010f5c:	000523c0 	call	1000523c <__clzsi2>
10010f60:	10800804 	addi	r2,r2,32
10010f64:	113ffe04 	addi	r4,r2,-8
10010f68:	00c007c4 	movi	r3,31
10010f6c:	193f850e 	bge	r3,r4,10010d84 <__alt_data_end+0xf8010d84>
10010f70:	10bff604 	addi	r2,r2,-40
10010f74:	8884983a 	sll	r2,r17,r2
10010f78:	0023883a 	mov	r17,zero
10010f7c:	243f880e 	bge	r4,r16,10010da0 <__alt_data_end+0xf8010da0>
10010f80:	00ffe034 	movhi	r3,65408
10010f84:	18ffffc4 	addi	r3,r3,-1
10010f88:	8121c83a 	sub	r16,r16,r4
10010f8c:	10c6703a 	and	r3,r2,r3
10010f90:	003f3406 	br	10010c64 <__alt_data_end+0xf8010c64>
10010f94:	9100004c 	andi	r4,r18,1
10010f98:	000b883a 	mov	r5,zero
10010f9c:	0005883a 	mov	r2,zero
10010fa0:	003f4806 	br	10010cc4 <__alt_data_end+0xf8010cc4>
10010fa4:	298cb03a 	or	r6,r5,r6
10010fa8:	300cc03a 	cmpne	r6,r6,zero
10010fac:	0005883a 	mov	r2,zero
10010fb0:	003f6406 	br	10010d44 <__alt_data_end+0xf8010d44>
10010fb4:	10009a1e 	bne	r2,zero,10011220 <__subdf3+0x640>
10010fb8:	82400044 	addi	r9,r16,1
10010fbc:	4881ffcc 	andi	r2,r9,2047
10010fc0:	02800044 	movi	r10,1
10010fc4:	5080670e 	bge	r10,r2,10011164 <__subdf3+0x584>
10010fc8:	0081ffc4 	movi	r2,2047
10010fcc:	4880af26 	beq	r9,r2,1001128c <__subdf3+0x6ac>
10010fd0:	898d883a 	add	r6,r17,r6
10010fd4:	1945883a 	add	r2,r3,r5
10010fd8:	3447803a 	cmpltu	r3,r6,r17
10010fdc:	1887883a 	add	r3,r3,r2
10010fe0:	182297fa 	slli	r17,r3,31
10010fe4:	300cd07a 	srli	r6,r6,1
10010fe8:	1806d07a 	srli	r3,r3,1
10010fec:	4821883a 	mov	r16,r9
10010ff0:	89a2b03a 	or	r17,r17,r6
10010ff4:	003f1b06 	br	10010c64 <__alt_data_end+0xf8010c64>
10010ff8:	0101ffc4 	movi	r4,2047
10010ffc:	813f441e 	bne	r16,r4,10010d10 <__alt_data_end+0xf8010d10>
10011000:	003f1806 	br	10010c64 <__alt_data_end+0xf8010c64>
10011004:	843ff844 	addi	r16,r16,-31
10011008:	01400804 	movi	r5,32
1001100c:	1408d83a 	srl	r4,r2,r16
10011010:	19405026 	beq	r3,r5,10011154 <__subdf3+0x574>
10011014:	01401004 	movi	r5,64
10011018:	28c7c83a 	sub	r3,r5,r3
1001101c:	10c4983a 	sll	r2,r2,r3
10011020:	88a2b03a 	or	r17,r17,r2
10011024:	8822c03a 	cmpne	r17,r17,zero
10011028:	2462b03a 	or	r17,r4,r17
1001102c:	0007883a 	mov	r3,zero
10011030:	0021883a 	mov	r16,zero
10011034:	003f6d06 	br	10010dec <__alt_data_end+0xf8010dec>
10011038:	11fff804 	addi	r7,r2,-32
1001103c:	01000804 	movi	r4,32
10011040:	29ced83a 	srl	r7,r5,r7
10011044:	11004526 	beq	r2,r4,1001115c <__subdf3+0x57c>
10011048:	01001004 	movi	r4,64
1001104c:	2089c83a 	sub	r4,r4,r2
10011050:	2904983a 	sll	r2,r5,r4
10011054:	118cb03a 	or	r6,r2,r6
10011058:	300cc03a 	cmpne	r6,r6,zero
1001105c:	398cb03a 	or	r6,r7,r6
10011060:	0005883a 	mov	r2,zero
10011064:	003f3706 	br	10010d44 <__alt_data_end+0xf8010d44>
10011068:	80002a26 	beq	r16,zero,10011114 <__subdf3+0x534>
1001106c:	0101ffc4 	movi	r4,2047
10011070:	49006626 	beq	r9,r4,1001120c <__subdf3+0x62c>
10011074:	0085c83a 	sub	r2,zero,r2
10011078:	18c02034 	orhi	r3,r3,128
1001107c:	01000e04 	movi	r4,56
10011080:	20807e16 	blt	r4,r2,1001127c <__subdf3+0x69c>
10011084:	010007c4 	movi	r4,31
10011088:	2080e716 	blt	r4,r2,10011428 <__subdf3+0x848>
1001108c:	01000804 	movi	r4,32
10011090:	2089c83a 	sub	r4,r4,r2
10011094:	1914983a 	sll	r10,r3,r4
10011098:	8890d83a 	srl	r8,r17,r2
1001109c:	8908983a 	sll	r4,r17,r4
100110a0:	1884d83a 	srl	r2,r3,r2
100110a4:	5222b03a 	or	r17,r10,r8
100110a8:	2006c03a 	cmpne	r3,r4,zero
100110ac:	88e2b03a 	or	r17,r17,r3
100110b0:	3463c83a 	sub	r17,r6,r17
100110b4:	2885c83a 	sub	r2,r5,r2
100110b8:	344d803a 	cmpltu	r6,r6,r17
100110bc:	1187c83a 	sub	r3,r2,r6
100110c0:	4821883a 	mov	r16,r9
100110c4:	3825883a 	mov	r18,r7
100110c8:	003f2306 	br	10010d58 <__alt_data_end+0xf8010d58>
100110cc:	24d0b03a 	or	r8,r4,r19
100110d0:	40001b1e 	bne	r8,zero,10011140 <__subdf3+0x560>
100110d4:	0005883a 	mov	r2,zero
100110d8:	0009883a 	mov	r4,zero
100110dc:	0021883a 	mov	r16,zero
100110e0:	003f4906 	br	10010e08 <__alt_data_end+0xf8010e08>
100110e4:	010007c4 	movi	r4,31
100110e8:	20803a16 	blt	r4,r2,100111d4 <__subdf3+0x5f4>
100110ec:	01000804 	movi	r4,32
100110f0:	2089c83a 	sub	r4,r4,r2
100110f4:	2912983a 	sll	r9,r5,r4
100110f8:	3090d83a 	srl	r8,r6,r2
100110fc:	3108983a 	sll	r4,r6,r4
10011100:	2884d83a 	srl	r2,r5,r2
10011104:	4a12b03a 	or	r9,r9,r8
10011108:	2008c03a 	cmpne	r4,r4,zero
1001110c:	4912b03a 	or	r9,r9,r4
10011110:	003f4e06 	br	10010e4c <__alt_data_end+0xf8010e4c>
10011114:	1c48b03a 	or	r4,r3,r17
10011118:	20003c26 	beq	r4,zero,1001120c <__subdf3+0x62c>
1001111c:	0084303a 	nor	r2,zero,r2
10011120:	1000381e 	bne	r2,zero,10011204 <__subdf3+0x624>
10011124:	3463c83a 	sub	r17,r6,r17
10011128:	28c5c83a 	sub	r2,r5,r3
1001112c:	344d803a 	cmpltu	r6,r6,r17
10011130:	1187c83a 	sub	r3,r2,r6
10011134:	4821883a 	mov	r16,r9
10011138:	3825883a 	mov	r18,r7
1001113c:	003f0606 	br	10010d58 <__alt_data_end+0xf8010d58>
10011140:	2023883a 	mov	r17,r4
10011144:	003f0906 	br	10010d6c <__alt_data_end+0xf8010d6c>
10011148:	0101ffc4 	movi	r4,2047
1001114c:	813f3a1e 	bne	r16,r4,10010e38 <__alt_data_end+0xf8010e38>
10011150:	003ec406 	br	10010c64 <__alt_data_end+0xf8010c64>
10011154:	0005883a 	mov	r2,zero
10011158:	003fb106 	br	10011020 <__alt_data_end+0xf8011020>
1001115c:	0005883a 	mov	r2,zero
10011160:	003fbc06 	br	10011054 <__alt_data_end+0xf8011054>
10011164:	1c44b03a 	or	r2,r3,r17
10011168:	80008e1e 	bne	r16,zero,100113a4 <__subdf3+0x7c4>
1001116c:	1000c826 	beq	r2,zero,10011490 <__subdf3+0x8b0>
10011170:	2984b03a 	or	r2,r5,r6
10011174:	103ebb26 	beq	r2,zero,10010c64 <__alt_data_end+0xf8010c64>
10011178:	8989883a 	add	r4,r17,r6
1001117c:	1945883a 	add	r2,r3,r5
10011180:	2447803a 	cmpltu	r3,r4,r17
10011184:	1887883a 	add	r3,r3,r2
10011188:	1880202c 	andhi	r2,r3,128
1001118c:	2023883a 	mov	r17,r4
10011190:	103f1626 	beq	r2,zero,10010dec <__alt_data_end+0xf8010dec>
10011194:	00bfe034 	movhi	r2,65408
10011198:	10bfffc4 	addi	r2,r2,-1
1001119c:	5021883a 	mov	r16,r10
100111a0:	1886703a 	and	r3,r3,r2
100111a4:	003eaf06 	br	10010c64 <__alt_data_end+0xf8010c64>
100111a8:	3825883a 	mov	r18,r7
100111ac:	003f0f06 	br	10010dec <__alt_data_end+0xf8010dec>
100111b0:	1c44b03a 	or	r2,r3,r17
100111b4:	8000251e 	bne	r16,zero,1001124c <__subdf3+0x66c>
100111b8:	1000661e 	bne	r2,zero,10011354 <__subdf3+0x774>
100111bc:	2990b03a 	or	r8,r5,r6
100111c0:	40009626 	beq	r8,zero,1001141c <__subdf3+0x83c>
100111c4:	2807883a 	mov	r3,r5
100111c8:	3023883a 	mov	r17,r6
100111cc:	3825883a 	mov	r18,r7
100111d0:	003ea406 	br	10010c64 <__alt_data_end+0xf8010c64>
100111d4:	127ff804 	addi	r9,r2,-32
100111d8:	01000804 	movi	r4,32
100111dc:	2a52d83a 	srl	r9,r5,r9
100111e0:	11008c26 	beq	r2,r4,10011414 <__subdf3+0x834>
100111e4:	01001004 	movi	r4,64
100111e8:	2085c83a 	sub	r2,r4,r2
100111ec:	2884983a 	sll	r2,r5,r2
100111f0:	118cb03a 	or	r6,r2,r6
100111f4:	300cc03a 	cmpne	r6,r6,zero
100111f8:	4992b03a 	or	r9,r9,r6
100111fc:	0005883a 	mov	r2,zero
10011200:	003f1206 	br	10010e4c <__alt_data_end+0xf8010e4c>
10011204:	0101ffc4 	movi	r4,2047
10011208:	493f9c1e 	bne	r9,r4,1001107c <__alt_data_end+0xf801107c>
1001120c:	2807883a 	mov	r3,r5
10011210:	3023883a 	mov	r17,r6
10011214:	4821883a 	mov	r16,r9
10011218:	3825883a 	mov	r18,r7
1001121c:	003e9106 	br	10010c64 <__alt_data_end+0xf8010c64>
10011220:	80001f1e 	bne	r16,zero,100112a0 <__subdf3+0x6c0>
10011224:	1c48b03a 	or	r4,r3,r17
10011228:	20005a26 	beq	r4,zero,10011394 <__subdf3+0x7b4>
1001122c:	0084303a 	nor	r2,zero,r2
10011230:	1000561e 	bne	r2,zero,1001138c <__subdf3+0x7ac>
10011234:	89a3883a 	add	r17,r17,r6
10011238:	1945883a 	add	r2,r3,r5
1001123c:	898d803a 	cmpltu	r6,r17,r6
10011240:	3087883a 	add	r3,r6,r2
10011244:	4821883a 	mov	r16,r9
10011248:	003f0506 	br	10010e60 <__alt_data_end+0xf8010e60>
1001124c:	10002b1e 	bne	r2,zero,100112fc <__subdf3+0x71c>
10011250:	2984b03a 	or	r2,r5,r6
10011254:	10008026 	beq	r2,zero,10011458 <__subdf3+0x878>
10011258:	2807883a 	mov	r3,r5
1001125c:	3023883a 	mov	r17,r6
10011260:	3825883a 	mov	r18,r7
10011264:	0401ffc4 	movi	r16,2047
10011268:	003e7e06 	br	10010c64 <__alt_data_end+0xf8010c64>
1001126c:	3809883a 	mov	r4,r7
10011270:	0011883a 	mov	r8,zero
10011274:	0005883a 	mov	r2,zero
10011278:	003ee306 	br	10010e08 <__alt_data_end+0xf8010e08>
1001127c:	1c62b03a 	or	r17,r3,r17
10011280:	8822c03a 	cmpne	r17,r17,zero
10011284:	0005883a 	mov	r2,zero
10011288:	003f8906 	br	100110b0 <__alt_data_end+0xf80110b0>
1001128c:	3809883a 	mov	r4,r7
10011290:	4821883a 	mov	r16,r9
10011294:	0011883a 	mov	r8,zero
10011298:	0005883a 	mov	r2,zero
1001129c:	003eda06 	br	10010e08 <__alt_data_end+0xf8010e08>
100112a0:	0101ffc4 	movi	r4,2047
100112a4:	49003b26 	beq	r9,r4,10011394 <__subdf3+0x7b4>
100112a8:	0085c83a 	sub	r2,zero,r2
100112ac:	18c02034 	orhi	r3,r3,128
100112b0:	01000e04 	movi	r4,56
100112b4:	20806e16 	blt	r4,r2,10011470 <__subdf3+0x890>
100112b8:	010007c4 	movi	r4,31
100112bc:	20807716 	blt	r4,r2,1001149c <__subdf3+0x8bc>
100112c0:	01000804 	movi	r4,32
100112c4:	2089c83a 	sub	r4,r4,r2
100112c8:	1914983a 	sll	r10,r3,r4
100112cc:	8890d83a 	srl	r8,r17,r2
100112d0:	8908983a 	sll	r4,r17,r4
100112d4:	1884d83a 	srl	r2,r3,r2
100112d8:	5222b03a 	or	r17,r10,r8
100112dc:	2006c03a 	cmpne	r3,r4,zero
100112e0:	88e2b03a 	or	r17,r17,r3
100112e4:	89a3883a 	add	r17,r17,r6
100112e8:	1145883a 	add	r2,r2,r5
100112ec:	898d803a 	cmpltu	r6,r17,r6
100112f0:	3087883a 	add	r3,r6,r2
100112f4:	4821883a 	mov	r16,r9
100112f8:	003ed906 	br	10010e60 <__alt_data_end+0xf8010e60>
100112fc:	2984b03a 	or	r2,r5,r6
10011300:	10004226 	beq	r2,zero,1001140c <__subdf3+0x82c>
10011304:	1808d0fa 	srli	r4,r3,3
10011308:	8822d0fa 	srli	r17,r17,3
1001130c:	1806977a 	slli	r3,r3,29
10011310:	2080022c 	andhi	r2,r4,8
10011314:	1c62b03a 	or	r17,r3,r17
10011318:	10000826 	beq	r2,zero,1001133c <__subdf3+0x75c>
1001131c:	2812d0fa 	srli	r9,r5,3
10011320:	4880022c 	andhi	r2,r9,8
10011324:	1000051e 	bne	r2,zero,1001133c <__subdf3+0x75c>
10011328:	300cd0fa 	srli	r6,r6,3
1001132c:	2804977a 	slli	r2,r5,29
10011330:	4809883a 	mov	r4,r9
10011334:	3825883a 	mov	r18,r7
10011338:	11a2b03a 	or	r17,r2,r6
1001133c:	8806d77a 	srli	r3,r17,29
10011340:	200890fa 	slli	r4,r4,3
10011344:	882290fa 	slli	r17,r17,3
10011348:	0401ffc4 	movi	r16,2047
1001134c:	1906b03a 	or	r3,r3,r4
10011350:	003e4406 	br	10010c64 <__alt_data_end+0xf8010c64>
10011354:	2984b03a 	or	r2,r5,r6
10011358:	103e4226 	beq	r2,zero,10010c64 <__alt_data_end+0xf8010c64>
1001135c:	8989c83a 	sub	r4,r17,r6
10011360:	8911803a 	cmpltu	r8,r17,r4
10011364:	1945c83a 	sub	r2,r3,r5
10011368:	1205c83a 	sub	r2,r2,r8
1001136c:	1200202c 	andhi	r8,r2,128
10011370:	403e9a26 	beq	r8,zero,10010ddc <__alt_data_end+0xf8010ddc>
10011374:	3463c83a 	sub	r17,r6,r17
10011378:	28c5c83a 	sub	r2,r5,r3
1001137c:	344d803a 	cmpltu	r6,r6,r17
10011380:	1187c83a 	sub	r3,r2,r6
10011384:	3825883a 	mov	r18,r7
10011388:	003e3606 	br	10010c64 <__alt_data_end+0xf8010c64>
1001138c:	0101ffc4 	movi	r4,2047
10011390:	493fc71e 	bne	r9,r4,100112b0 <__alt_data_end+0xf80112b0>
10011394:	2807883a 	mov	r3,r5
10011398:	3023883a 	mov	r17,r6
1001139c:	4821883a 	mov	r16,r9
100113a0:	003e3006 	br	10010c64 <__alt_data_end+0xf8010c64>
100113a4:	10003626 	beq	r2,zero,10011480 <__subdf3+0x8a0>
100113a8:	2984b03a 	or	r2,r5,r6
100113ac:	10001726 	beq	r2,zero,1001140c <__subdf3+0x82c>
100113b0:	1808d0fa 	srli	r4,r3,3
100113b4:	8822d0fa 	srli	r17,r17,3
100113b8:	1806977a 	slli	r3,r3,29
100113bc:	2080022c 	andhi	r2,r4,8
100113c0:	1c62b03a 	or	r17,r3,r17
100113c4:	10000726 	beq	r2,zero,100113e4 <__subdf3+0x804>
100113c8:	2812d0fa 	srli	r9,r5,3
100113cc:	4880022c 	andhi	r2,r9,8
100113d0:	1000041e 	bne	r2,zero,100113e4 <__subdf3+0x804>
100113d4:	300cd0fa 	srli	r6,r6,3
100113d8:	2804977a 	slli	r2,r5,29
100113dc:	4809883a 	mov	r4,r9
100113e0:	11a2b03a 	or	r17,r2,r6
100113e4:	8806d77a 	srli	r3,r17,29
100113e8:	200890fa 	slli	r4,r4,3
100113ec:	882290fa 	slli	r17,r17,3
100113f0:	3825883a 	mov	r18,r7
100113f4:	1906b03a 	or	r3,r3,r4
100113f8:	0401ffc4 	movi	r16,2047
100113fc:	003e1906 	br	10010c64 <__alt_data_end+0xf8010c64>
10011400:	000b883a 	mov	r5,zero
10011404:	0005883a 	mov	r2,zero
10011408:	003e2e06 	br	10010cc4 <__alt_data_end+0xf8010cc4>
1001140c:	0401ffc4 	movi	r16,2047
10011410:	003e1406 	br	10010c64 <__alt_data_end+0xf8010c64>
10011414:	0005883a 	mov	r2,zero
10011418:	003f7506 	br	100111f0 <__alt_data_end+0xf80111f0>
1001141c:	0005883a 	mov	r2,zero
10011420:	0009883a 	mov	r4,zero
10011424:	003e7806 	br	10010e08 <__alt_data_end+0xf8010e08>
10011428:	123ff804 	addi	r8,r2,-32
1001142c:	01000804 	movi	r4,32
10011430:	1a10d83a 	srl	r8,r3,r8
10011434:	11002526 	beq	r2,r4,100114cc <__subdf3+0x8ec>
10011438:	01001004 	movi	r4,64
1001143c:	2085c83a 	sub	r2,r4,r2
10011440:	1884983a 	sll	r2,r3,r2
10011444:	1444b03a 	or	r2,r2,r17
10011448:	1004c03a 	cmpne	r2,r2,zero
1001144c:	40a2b03a 	or	r17,r8,r2
10011450:	0005883a 	mov	r2,zero
10011454:	003f1606 	br	100110b0 <__alt_data_end+0xf80110b0>
10011458:	02000434 	movhi	r8,16
1001145c:	0009883a 	mov	r4,zero
10011460:	423fffc4 	addi	r8,r8,-1
10011464:	00bfffc4 	movi	r2,-1
10011468:	0401ffc4 	movi	r16,2047
1001146c:	003e6606 	br	10010e08 <__alt_data_end+0xf8010e08>
10011470:	1c62b03a 	or	r17,r3,r17
10011474:	8822c03a 	cmpne	r17,r17,zero
10011478:	0005883a 	mov	r2,zero
1001147c:	003f9906 	br	100112e4 <__alt_data_end+0xf80112e4>
10011480:	2807883a 	mov	r3,r5
10011484:	3023883a 	mov	r17,r6
10011488:	0401ffc4 	movi	r16,2047
1001148c:	003df506 	br	10010c64 <__alt_data_end+0xf8010c64>
10011490:	2807883a 	mov	r3,r5
10011494:	3023883a 	mov	r17,r6
10011498:	003df206 	br	10010c64 <__alt_data_end+0xf8010c64>
1001149c:	123ff804 	addi	r8,r2,-32
100114a0:	01000804 	movi	r4,32
100114a4:	1a10d83a 	srl	r8,r3,r8
100114a8:	11000a26 	beq	r2,r4,100114d4 <__subdf3+0x8f4>
100114ac:	01001004 	movi	r4,64
100114b0:	2085c83a 	sub	r2,r4,r2
100114b4:	1884983a 	sll	r2,r3,r2
100114b8:	1444b03a 	or	r2,r2,r17
100114bc:	1004c03a 	cmpne	r2,r2,zero
100114c0:	40a2b03a 	or	r17,r8,r2
100114c4:	0005883a 	mov	r2,zero
100114c8:	003f8606 	br	100112e4 <__alt_data_end+0xf80112e4>
100114cc:	0005883a 	mov	r2,zero
100114d0:	003fdc06 	br	10011444 <__alt_data_end+0xf8011444>
100114d4:	0005883a 	mov	r2,zero
100114d8:	003ff706 	br	100114b8 <__alt_data_end+0xf80114b8>

100114dc <__fixdfsi>:
100114dc:	280cd53a 	srli	r6,r5,20
100114e0:	00c00434 	movhi	r3,16
100114e4:	18ffffc4 	addi	r3,r3,-1
100114e8:	3181ffcc 	andi	r6,r6,2047
100114ec:	01c0ff84 	movi	r7,1022
100114f0:	28c6703a 	and	r3,r5,r3
100114f4:	280ad7fa 	srli	r5,r5,31
100114f8:	3980120e 	bge	r7,r6,10011544 <__fixdfsi+0x68>
100114fc:	00810744 	movi	r2,1053
10011500:	11800c16 	blt	r2,r6,10011534 <__fixdfsi+0x58>
10011504:	00810cc4 	movi	r2,1075
10011508:	1185c83a 	sub	r2,r2,r6
1001150c:	01c007c4 	movi	r7,31
10011510:	18c00434 	orhi	r3,r3,16
10011514:	38800d16 	blt	r7,r2,1001154c <__fixdfsi+0x70>
10011518:	31befb44 	addi	r6,r6,-1043
1001151c:	2084d83a 	srl	r2,r4,r2
10011520:	1986983a 	sll	r3,r3,r6
10011524:	1884b03a 	or	r2,r3,r2
10011528:	28000726 	beq	r5,zero,10011548 <__fixdfsi+0x6c>
1001152c:	0085c83a 	sub	r2,zero,r2
10011530:	f800283a 	ret
10011534:	00a00034 	movhi	r2,32768
10011538:	10bfffc4 	addi	r2,r2,-1
1001153c:	2885883a 	add	r2,r5,r2
10011540:	f800283a 	ret
10011544:	0005883a 	mov	r2,zero
10011548:	f800283a 	ret
1001154c:	008104c4 	movi	r2,1043
10011550:	1185c83a 	sub	r2,r2,r6
10011554:	1884d83a 	srl	r2,r3,r2
10011558:	003ff306 	br	10011528 <__alt_data_end+0xf8011528>

1001155c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001155c:	defffe04 	addi	sp,sp,-8
10011560:	dfc00115 	stw	ra,4(sp)
10011564:	df000015 	stw	fp,0(sp)
10011568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001156c:	d0a00c17 	ldw	r2,-32720(gp)
10011570:	10000326 	beq	r2,zero,10011580 <alt_get_errno+0x24>
10011574:	d0a00c17 	ldw	r2,-32720(gp)
10011578:	103ee83a 	callr	r2
1001157c:	00000106 	br	10011584 <alt_get_errno+0x28>
10011580:	d0a6e004 	addi	r2,gp,-25728
}
10011584:	e037883a 	mov	sp,fp
10011588:	dfc00117 	ldw	ra,4(sp)
1001158c:	df000017 	ldw	fp,0(sp)
10011590:	dec00204 	addi	sp,sp,8
10011594:	f800283a 	ret

10011598 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10011598:	defffb04 	addi	sp,sp,-20
1001159c:	dfc00415 	stw	ra,16(sp)
100115a0:	df000315 	stw	fp,12(sp)
100115a4:	df000304 	addi	fp,sp,12
100115a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100115ac:	e0bfff17 	ldw	r2,-4(fp)
100115b0:	10000816 	blt	r2,zero,100115d4 <close+0x3c>
100115b4:	01400304 	movi	r5,12
100115b8:	e13fff17 	ldw	r4,-4(fp)
100115bc:	00052a00 	call	100052a0 <__mulsi3>
100115c0:	1007883a 	mov	r3,r2
100115c4:	00840074 	movhi	r2,4097
100115c8:	10945704 	addi	r2,r2,20828
100115cc:	1885883a 	add	r2,r3,r2
100115d0:	00000106 	br	100115d8 <close+0x40>
100115d4:	0005883a 	mov	r2,zero
100115d8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100115dc:	e0bffd17 	ldw	r2,-12(fp)
100115e0:	10001926 	beq	r2,zero,10011648 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100115e4:	e0bffd17 	ldw	r2,-12(fp)
100115e8:	10800017 	ldw	r2,0(r2)
100115ec:	10800417 	ldw	r2,16(r2)
100115f0:	10000626 	beq	r2,zero,1001160c <close+0x74>
100115f4:	e0bffd17 	ldw	r2,-12(fp)
100115f8:	10800017 	ldw	r2,0(r2)
100115fc:	10800417 	ldw	r2,16(r2)
10011600:	e13ffd17 	ldw	r4,-12(fp)
10011604:	103ee83a 	callr	r2
10011608:	00000106 	br	10011610 <close+0x78>
1001160c:	0005883a 	mov	r2,zero
10011610:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011614:	e13fff17 	ldw	r4,-4(fp)
10011618:	0011c800 	call	10011c80 <alt_release_fd>
    if (rval < 0)
1001161c:	e0bffe17 	ldw	r2,-8(fp)
10011620:	1000070e 	bge	r2,zero,10011640 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011624:	001155c0 	call	1001155c <alt_get_errno>
10011628:	1007883a 	mov	r3,r2
1001162c:	e0bffe17 	ldw	r2,-8(fp)
10011630:	0085c83a 	sub	r2,zero,r2
10011634:	18800015 	stw	r2,0(r3)
      return -1;
10011638:	00bfffc4 	movi	r2,-1
1001163c:	00000706 	br	1001165c <close+0xc4>
    }
    return 0;
10011640:	0005883a 	mov	r2,zero
10011644:	00000506 	br	1001165c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011648:	001155c0 	call	1001155c <alt_get_errno>
1001164c:	1007883a 	mov	r3,r2
10011650:	00801444 	movi	r2,81
10011654:	18800015 	stw	r2,0(r3)
    return -1;
10011658:	00bfffc4 	movi	r2,-1
  }
}
1001165c:	e037883a 	mov	sp,fp
10011660:	dfc00117 	ldw	ra,4(sp)
10011664:	df000017 	ldw	fp,0(sp)
10011668:	dec00204 	addi	sp,sp,8
1001166c:	f800283a 	ret

10011670 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011670:	defffc04 	addi	sp,sp,-16
10011674:	df000315 	stw	fp,12(sp)
10011678:	df000304 	addi	fp,sp,12
1001167c:	e13ffd15 	stw	r4,-12(fp)
10011680:	e17ffe15 	stw	r5,-8(fp)
10011684:	e1bfff15 	stw	r6,-4(fp)
  return len;
10011688:	e0bfff17 	ldw	r2,-4(fp)
}
1001168c:	e037883a 	mov	sp,fp
10011690:	df000017 	ldw	fp,0(sp)
10011694:	dec00104 	addi	sp,sp,4
10011698:	f800283a 	ret

1001169c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001169c:	defffe04 	addi	sp,sp,-8
100116a0:	dfc00115 	stw	ra,4(sp)
100116a4:	df000015 	stw	fp,0(sp)
100116a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100116ac:	d0a00c17 	ldw	r2,-32720(gp)
100116b0:	10000326 	beq	r2,zero,100116c0 <alt_get_errno+0x24>
100116b4:	d0a00c17 	ldw	r2,-32720(gp)
100116b8:	103ee83a 	callr	r2
100116bc:	00000106 	br	100116c4 <alt_get_errno+0x28>
100116c0:	d0a6e004 	addi	r2,gp,-25728
}
100116c4:	e037883a 	mov	sp,fp
100116c8:	dfc00117 	ldw	ra,4(sp)
100116cc:	df000017 	ldw	fp,0(sp)
100116d0:	dec00204 	addi	sp,sp,8
100116d4:	f800283a 	ret

100116d8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100116d8:	defffb04 	addi	sp,sp,-20
100116dc:	dfc00415 	stw	ra,16(sp)
100116e0:	df000315 	stw	fp,12(sp)
100116e4:	df000304 	addi	fp,sp,12
100116e8:	e13ffe15 	stw	r4,-8(fp)
100116ec:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100116f0:	e0bffe17 	ldw	r2,-8(fp)
100116f4:	10000816 	blt	r2,zero,10011718 <fstat+0x40>
100116f8:	01400304 	movi	r5,12
100116fc:	e13ffe17 	ldw	r4,-8(fp)
10011700:	00052a00 	call	100052a0 <__mulsi3>
10011704:	1007883a 	mov	r3,r2
10011708:	00840074 	movhi	r2,4097
1001170c:	10945704 	addi	r2,r2,20828
10011710:	1885883a 	add	r2,r3,r2
10011714:	00000106 	br	1001171c <fstat+0x44>
10011718:	0005883a 	mov	r2,zero
1001171c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011720:	e0bffd17 	ldw	r2,-12(fp)
10011724:	10001026 	beq	r2,zero,10011768 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10011728:	e0bffd17 	ldw	r2,-12(fp)
1001172c:	10800017 	ldw	r2,0(r2)
10011730:	10800817 	ldw	r2,32(r2)
10011734:	10000726 	beq	r2,zero,10011754 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10011738:	e0bffd17 	ldw	r2,-12(fp)
1001173c:	10800017 	ldw	r2,0(r2)
10011740:	10800817 	ldw	r2,32(r2)
10011744:	e17fff17 	ldw	r5,-4(fp)
10011748:	e13ffd17 	ldw	r4,-12(fp)
1001174c:	103ee83a 	callr	r2
10011750:	00000a06 	br	1001177c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011754:	e0bfff17 	ldw	r2,-4(fp)
10011758:	00c80004 	movi	r3,8192
1001175c:	10c00115 	stw	r3,4(r2)
      return 0;
10011760:	0005883a 	mov	r2,zero
10011764:	00000506 	br	1001177c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011768:	001169c0 	call	1001169c <alt_get_errno>
1001176c:	1007883a 	mov	r3,r2
10011770:	00801444 	movi	r2,81
10011774:	18800015 	stw	r2,0(r3)
    return -1;
10011778:	00bfffc4 	movi	r2,-1
  }
}
1001177c:	e037883a 	mov	sp,fp
10011780:	dfc00117 	ldw	ra,4(sp)
10011784:	df000017 	ldw	fp,0(sp)
10011788:	dec00204 	addi	sp,sp,8
1001178c:	f800283a 	ret

10011790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011790:	defffe04 	addi	sp,sp,-8
10011794:	dfc00115 	stw	ra,4(sp)
10011798:	df000015 	stw	fp,0(sp)
1001179c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100117a0:	d0a00c17 	ldw	r2,-32720(gp)
100117a4:	10000326 	beq	r2,zero,100117b4 <alt_get_errno+0x24>
100117a8:	d0a00c17 	ldw	r2,-32720(gp)
100117ac:	103ee83a 	callr	r2
100117b0:	00000106 	br	100117b8 <alt_get_errno+0x28>
100117b4:	d0a6e004 	addi	r2,gp,-25728
}
100117b8:	e037883a 	mov	sp,fp
100117bc:	dfc00117 	ldw	ra,4(sp)
100117c0:	df000017 	ldw	fp,0(sp)
100117c4:	dec00204 	addi	sp,sp,8
100117c8:	f800283a 	ret

100117cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100117cc:	deffed04 	addi	sp,sp,-76
100117d0:	dfc01215 	stw	ra,72(sp)
100117d4:	df001115 	stw	fp,68(sp)
100117d8:	df001104 	addi	fp,sp,68
100117dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100117e0:	e0bfff17 	ldw	r2,-4(fp)
100117e4:	10000816 	blt	r2,zero,10011808 <isatty+0x3c>
100117e8:	01400304 	movi	r5,12
100117ec:	e13fff17 	ldw	r4,-4(fp)
100117f0:	00052a00 	call	100052a0 <__mulsi3>
100117f4:	1007883a 	mov	r3,r2
100117f8:	00840074 	movhi	r2,4097
100117fc:	10945704 	addi	r2,r2,20828
10011800:	1885883a 	add	r2,r3,r2
10011804:	00000106 	br	1001180c <isatty+0x40>
10011808:	0005883a 	mov	r2,zero
1001180c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10011810:	e0bfef17 	ldw	r2,-68(fp)
10011814:	10000e26 	beq	r2,zero,10011850 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10011818:	e0bfef17 	ldw	r2,-68(fp)
1001181c:	10800017 	ldw	r2,0(r2)
10011820:	10800817 	ldw	r2,32(r2)
10011824:	1000021e 	bne	r2,zero,10011830 <isatty+0x64>
    {
      return 1;
10011828:	00800044 	movi	r2,1
1001182c:	00000d06 	br	10011864 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10011830:	e0bff004 	addi	r2,fp,-64
10011834:	100b883a 	mov	r5,r2
10011838:	e13fff17 	ldw	r4,-4(fp)
1001183c:	00116d80 	call	100116d8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10011840:	e0bff117 	ldw	r2,-60(fp)
10011844:	10880020 	cmpeqi	r2,r2,8192
10011848:	10803fcc 	andi	r2,r2,255
1001184c:	00000506 	br	10011864 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011850:	00117900 	call	10011790 <alt_get_errno>
10011854:	1007883a 	mov	r3,r2
10011858:	00801444 	movi	r2,81
1001185c:	18800015 	stw	r2,0(r3)
    return 0;
10011860:	0005883a 	mov	r2,zero
  }
}
10011864:	e037883a 	mov	sp,fp
10011868:	dfc00117 	ldw	ra,4(sp)
1001186c:	df000017 	ldw	fp,0(sp)
10011870:	dec00204 	addi	sp,sp,8
10011874:	f800283a 	ret

10011878 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10011878:	defffc04 	addi	sp,sp,-16
1001187c:	df000315 	stw	fp,12(sp)
10011880:	df000304 	addi	fp,sp,12
10011884:	e13ffd15 	stw	r4,-12(fp)
10011888:	e17ffe15 	stw	r5,-8(fp)
1001188c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10011890:	e0fffe17 	ldw	r3,-8(fp)
10011894:	e0bffd17 	ldw	r2,-12(fp)
10011898:	18800c26 	beq	r3,r2,100118cc <alt_load_section+0x54>
  {
    while( to != end )
1001189c:	00000806 	br	100118c0 <alt_load_section+0x48>
    {
      *to++ = *from++;
100118a0:	e0bffe17 	ldw	r2,-8(fp)
100118a4:	10c00104 	addi	r3,r2,4
100118a8:	e0fffe15 	stw	r3,-8(fp)
100118ac:	e0fffd17 	ldw	r3,-12(fp)
100118b0:	19000104 	addi	r4,r3,4
100118b4:	e13ffd15 	stw	r4,-12(fp)
100118b8:	18c00017 	ldw	r3,0(r3)
100118bc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100118c0:	e0fffe17 	ldw	r3,-8(fp)
100118c4:	e0bfff17 	ldw	r2,-4(fp)
100118c8:	18bff51e 	bne	r3,r2,100118a0 <__alt_data_end+0xf80118a0>
    {
      *to++ = *from++;
    }
  }
}
100118cc:	0001883a 	nop
100118d0:	e037883a 	mov	sp,fp
100118d4:	df000017 	ldw	fp,0(sp)
100118d8:	dec00104 	addi	sp,sp,4
100118dc:	f800283a 	ret

100118e0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100118e0:	defffe04 	addi	sp,sp,-8
100118e4:	dfc00115 	stw	ra,4(sp)
100118e8:	df000015 	stw	fp,0(sp)
100118ec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100118f0:	01840074 	movhi	r6,4097
100118f4:	3198e004 	addi	r6,r6,25472
100118f8:	01440074 	movhi	r5,4097
100118fc:	29522404 	addi	r5,r5,18576
10011900:	01040074 	movhi	r4,4097
10011904:	2118e004 	addi	r4,r4,25472
10011908:	00118780 	call	10011878 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1001190c:	01840034 	movhi	r6,4096
10011910:	31808c04 	addi	r6,r6,560
10011914:	01440034 	movhi	r5,4096
10011918:	29400804 	addi	r5,r5,32
1001191c:	01040034 	movhi	r4,4096
10011920:	21000804 	addi	r4,r4,32
10011924:	00118780 	call	10011878 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10011928:	01840074 	movhi	r6,4097
1001192c:	31922404 	addi	r6,r6,18576
10011930:	01440074 	movhi	r5,4097
10011934:	294f8c04 	addi	r5,r5,15920
10011938:	01040074 	movhi	r4,4097
1001193c:	210f8c04 	addi	r4,r4,15920
10011940:	00118780 	call	10011878 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10011944:	0012d780 	call	10012d78 <alt_dcache_flush_all>
  alt_icache_flush_all();
10011948:	0012f380 	call	10012f38 <alt_icache_flush_all>
}
1001194c:	0001883a 	nop
10011950:	e037883a 	mov	sp,fp
10011954:	dfc00117 	ldw	ra,4(sp)
10011958:	df000017 	ldw	fp,0(sp)
1001195c:	dec00204 	addi	sp,sp,8
10011960:	f800283a 	ret

10011964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011964:	defffe04 	addi	sp,sp,-8
10011968:	dfc00115 	stw	ra,4(sp)
1001196c:	df000015 	stw	fp,0(sp)
10011970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011974:	d0a00c17 	ldw	r2,-32720(gp)
10011978:	10000326 	beq	r2,zero,10011988 <alt_get_errno+0x24>
1001197c:	d0a00c17 	ldw	r2,-32720(gp)
10011980:	103ee83a 	callr	r2
10011984:	00000106 	br	1001198c <alt_get_errno+0x28>
10011988:	d0a6e004 	addi	r2,gp,-25728
}
1001198c:	e037883a 	mov	sp,fp
10011990:	dfc00117 	ldw	ra,4(sp)
10011994:	df000017 	ldw	fp,0(sp)
10011998:	dec00204 	addi	sp,sp,8
1001199c:	f800283a 	ret

100119a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100119a0:	defff904 	addi	sp,sp,-28
100119a4:	dfc00615 	stw	ra,24(sp)
100119a8:	df000515 	stw	fp,20(sp)
100119ac:	df000504 	addi	fp,sp,20
100119b0:	e13ffd15 	stw	r4,-12(fp)
100119b4:	e17ffe15 	stw	r5,-8(fp)
100119b8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100119bc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100119c0:	e0bffd17 	ldw	r2,-12(fp)
100119c4:	10000816 	blt	r2,zero,100119e8 <lseek+0x48>
100119c8:	01400304 	movi	r5,12
100119cc:	e13ffd17 	ldw	r4,-12(fp)
100119d0:	00052a00 	call	100052a0 <__mulsi3>
100119d4:	1007883a 	mov	r3,r2
100119d8:	00840074 	movhi	r2,4097
100119dc:	10945704 	addi	r2,r2,20828
100119e0:	1885883a 	add	r2,r3,r2
100119e4:	00000106 	br	100119ec <lseek+0x4c>
100119e8:	0005883a 	mov	r2,zero
100119ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100119f0:	e0bffc17 	ldw	r2,-16(fp)
100119f4:	10001026 	beq	r2,zero,10011a38 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100119f8:	e0bffc17 	ldw	r2,-16(fp)
100119fc:	10800017 	ldw	r2,0(r2)
10011a00:	10800717 	ldw	r2,28(r2)
10011a04:	10000926 	beq	r2,zero,10011a2c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10011a08:	e0bffc17 	ldw	r2,-16(fp)
10011a0c:	10800017 	ldw	r2,0(r2)
10011a10:	10800717 	ldw	r2,28(r2)
10011a14:	e1bfff17 	ldw	r6,-4(fp)
10011a18:	e17ffe17 	ldw	r5,-8(fp)
10011a1c:	e13ffc17 	ldw	r4,-16(fp)
10011a20:	103ee83a 	callr	r2
10011a24:	e0bffb15 	stw	r2,-20(fp)
10011a28:	00000506 	br	10011a40 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10011a2c:	00bfde84 	movi	r2,-134
10011a30:	e0bffb15 	stw	r2,-20(fp)
10011a34:	00000206 	br	10011a40 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10011a38:	00bfebc4 	movi	r2,-81
10011a3c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10011a40:	e0bffb17 	ldw	r2,-20(fp)
10011a44:	1000070e 	bge	r2,zero,10011a64 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10011a48:	00119640 	call	10011964 <alt_get_errno>
10011a4c:	1007883a 	mov	r3,r2
10011a50:	e0bffb17 	ldw	r2,-20(fp)
10011a54:	0085c83a 	sub	r2,zero,r2
10011a58:	18800015 	stw	r2,0(r3)
    rc = -1;
10011a5c:	00bfffc4 	movi	r2,-1
10011a60:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10011a64:	e0bffb17 	ldw	r2,-20(fp)
}
10011a68:	e037883a 	mov	sp,fp
10011a6c:	dfc00117 	ldw	ra,4(sp)
10011a70:	df000017 	ldw	fp,0(sp)
10011a74:	dec00204 	addi	sp,sp,8
10011a78:	f800283a 	ret

10011a7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10011a7c:	defffd04 	addi	sp,sp,-12
10011a80:	dfc00215 	stw	ra,8(sp)
10011a84:	df000115 	stw	fp,4(sp)
10011a88:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10011a8c:	0009883a 	mov	r4,zero
10011a90:	00120080 	call	10012008 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10011a94:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10011a98:	00120400 	call	10012040 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10011a9c:	01840074 	movhi	r6,4097
10011aa0:	31921a04 	addi	r6,r6,18536
10011aa4:	01440074 	movhi	r5,4097
10011aa8:	29521a04 	addi	r5,r5,18536
10011aac:	01040074 	movhi	r4,4097
10011ab0:	21121a04 	addi	r4,r4,18536
10011ab4:	00132dc0 	call	100132dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10011ab8:	0012e780 	call	10012e78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10011abc:	01040074 	movhi	r4,4097
10011ac0:	210bb604 	addi	r4,r4,11992
10011ac4:	0013a9c0 	call	10013a9c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10011ac8:	d0a6e117 	ldw	r2,-25724(gp)
10011acc:	d0e6e217 	ldw	r3,-25720(gp)
10011ad0:	d126e317 	ldw	r4,-25716(gp)
10011ad4:	200d883a 	mov	r6,r4
10011ad8:	180b883a 	mov	r5,r3
10011adc:	1009883a 	mov	r4,r2
10011ae0:	0000f580 	call	10000f58 <main>
10011ae4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10011ae8:	01000044 	movi	r4,1
10011aec:	00115980 	call	10011598 <close>
  exit (result);
10011af0:	e13fff17 	ldw	r4,-4(fp)
10011af4:	0013ab00 	call	10013ab0 <exit>

10011af8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10011af8:	defffe04 	addi	sp,sp,-8
10011afc:	df000115 	stw	fp,4(sp)
10011b00:	df000104 	addi	fp,sp,4
10011b04:	e13fff15 	stw	r4,-4(fp)
}
10011b08:	0001883a 	nop
10011b0c:	e037883a 	mov	sp,fp
10011b10:	df000017 	ldw	fp,0(sp)
10011b14:	dec00104 	addi	sp,sp,4
10011b18:	f800283a 	ret

10011b1c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10011b1c:	defffe04 	addi	sp,sp,-8
10011b20:	df000115 	stw	fp,4(sp)
10011b24:	df000104 	addi	fp,sp,4
10011b28:	e13fff15 	stw	r4,-4(fp)
}
10011b2c:	0001883a 	nop
10011b30:	e037883a 	mov	sp,fp
10011b34:	df000017 	ldw	fp,0(sp)
10011b38:	dec00104 	addi	sp,sp,4
10011b3c:	f800283a 	ret

10011b40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011b40:	defffe04 	addi	sp,sp,-8
10011b44:	dfc00115 	stw	ra,4(sp)
10011b48:	df000015 	stw	fp,0(sp)
10011b4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011b50:	d0a00c17 	ldw	r2,-32720(gp)
10011b54:	10000326 	beq	r2,zero,10011b64 <alt_get_errno+0x24>
10011b58:	d0a00c17 	ldw	r2,-32720(gp)
10011b5c:	103ee83a 	callr	r2
10011b60:	00000106 	br	10011b68 <alt_get_errno+0x28>
10011b64:	d0a6e004 	addi	r2,gp,-25728
}
10011b68:	e037883a 	mov	sp,fp
10011b6c:	dfc00117 	ldw	ra,4(sp)
10011b70:	df000017 	ldw	fp,0(sp)
10011b74:	dec00204 	addi	sp,sp,8
10011b78:	f800283a 	ret

10011b7c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10011b7c:	defff904 	addi	sp,sp,-28
10011b80:	dfc00615 	stw	ra,24(sp)
10011b84:	df000515 	stw	fp,20(sp)
10011b88:	df000504 	addi	fp,sp,20
10011b8c:	e13ffd15 	stw	r4,-12(fp)
10011b90:	e17ffe15 	stw	r5,-8(fp)
10011b94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011b98:	e0bffd17 	ldw	r2,-12(fp)
10011b9c:	10000816 	blt	r2,zero,10011bc0 <read+0x44>
10011ba0:	01400304 	movi	r5,12
10011ba4:	e13ffd17 	ldw	r4,-12(fp)
10011ba8:	00052a00 	call	100052a0 <__mulsi3>
10011bac:	1007883a 	mov	r3,r2
10011bb0:	00840074 	movhi	r2,4097
10011bb4:	10945704 	addi	r2,r2,20828
10011bb8:	1885883a 	add	r2,r3,r2
10011bbc:	00000106 	br	10011bc4 <read+0x48>
10011bc0:	0005883a 	mov	r2,zero
10011bc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011bc8:	e0bffb17 	ldw	r2,-20(fp)
10011bcc:	10002226 	beq	r2,zero,10011c58 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10011bd0:	e0bffb17 	ldw	r2,-20(fp)
10011bd4:	10800217 	ldw	r2,8(r2)
10011bd8:	108000cc 	andi	r2,r2,3
10011bdc:	10800060 	cmpeqi	r2,r2,1
10011be0:	1000181e 	bne	r2,zero,10011c44 <read+0xc8>
        (fd->dev->read))
10011be4:	e0bffb17 	ldw	r2,-20(fp)
10011be8:	10800017 	ldw	r2,0(r2)
10011bec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10011bf0:	10001426 	beq	r2,zero,10011c44 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10011bf4:	e0bffb17 	ldw	r2,-20(fp)
10011bf8:	10800017 	ldw	r2,0(r2)
10011bfc:	10800517 	ldw	r2,20(r2)
10011c00:	e0ffff17 	ldw	r3,-4(fp)
10011c04:	180d883a 	mov	r6,r3
10011c08:	e17ffe17 	ldw	r5,-8(fp)
10011c0c:	e13ffb17 	ldw	r4,-20(fp)
10011c10:	103ee83a 	callr	r2
10011c14:	e0bffc15 	stw	r2,-16(fp)
10011c18:	e0bffc17 	ldw	r2,-16(fp)
10011c1c:	1000070e 	bge	r2,zero,10011c3c <read+0xc0>
        {
          ALT_ERRNO = -rval;
10011c20:	0011b400 	call	10011b40 <alt_get_errno>
10011c24:	1007883a 	mov	r3,r2
10011c28:	e0bffc17 	ldw	r2,-16(fp)
10011c2c:	0085c83a 	sub	r2,zero,r2
10011c30:	18800015 	stw	r2,0(r3)
          return -1;
10011c34:	00bfffc4 	movi	r2,-1
10011c38:	00000c06 	br	10011c6c <read+0xf0>
        }
        return rval;
10011c3c:	e0bffc17 	ldw	r2,-16(fp)
10011c40:	00000a06 	br	10011c6c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10011c44:	0011b400 	call	10011b40 <alt_get_errno>
10011c48:	1007883a 	mov	r3,r2
10011c4c:	00800344 	movi	r2,13
10011c50:	18800015 	stw	r2,0(r3)
10011c54:	00000406 	br	10011c68 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10011c58:	0011b400 	call	10011b40 <alt_get_errno>
10011c5c:	1007883a 	mov	r3,r2
10011c60:	00801444 	movi	r2,81
10011c64:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011c68:	00bfffc4 	movi	r2,-1
}
10011c6c:	e037883a 	mov	sp,fp
10011c70:	dfc00117 	ldw	ra,4(sp)
10011c74:	df000017 	ldw	fp,0(sp)
10011c78:	dec00204 	addi	sp,sp,8
10011c7c:	f800283a 	ret

10011c80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10011c80:	defffc04 	addi	sp,sp,-16
10011c84:	dfc00315 	stw	ra,12(sp)
10011c88:	df000215 	stw	fp,8(sp)
10011c8c:	dc000115 	stw	r16,4(sp)
10011c90:	df000204 	addi	fp,sp,8
10011c94:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10011c98:	e0bffe17 	ldw	r2,-8(fp)
10011c9c:	108000d0 	cmplti	r2,r2,3
10011ca0:	1000111e 	bne	r2,zero,10011ce8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10011ca4:	04040074 	movhi	r16,4097
10011ca8:	84145704 	addi	r16,r16,20828
10011cac:	e0bffe17 	ldw	r2,-8(fp)
10011cb0:	01400304 	movi	r5,12
10011cb4:	1009883a 	mov	r4,r2
10011cb8:	00052a00 	call	100052a0 <__mulsi3>
10011cbc:	8085883a 	add	r2,r16,r2
10011cc0:	10800204 	addi	r2,r2,8
10011cc4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10011cc8:	04040074 	movhi	r16,4097
10011ccc:	84145704 	addi	r16,r16,20828
10011cd0:	e0bffe17 	ldw	r2,-8(fp)
10011cd4:	01400304 	movi	r5,12
10011cd8:	1009883a 	mov	r4,r2
10011cdc:	00052a00 	call	100052a0 <__mulsi3>
10011ce0:	8085883a 	add	r2,r16,r2
10011ce4:	10000015 	stw	zero,0(r2)
  }
}
10011ce8:	0001883a 	nop
10011cec:	e6ffff04 	addi	sp,fp,-4
10011cf0:	dfc00217 	ldw	ra,8(sp)
10011cf4:	df000117 	ldw	fp,4(sp)
10011cf8:	dc000017 	ldw	r16,0(sp)
10011cfc:	dec00304 	addi	sp,sp,12
10011d00:	f800283a 	ret

10011d04 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10011d04:	defff904 	addi	sp,sp,-28
10011d08:	df000615 	stw	fp,24(sp)
10011d0c:	df000604 	addi	fp,sp,24
10011d10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d14:	0005303a 	rdctl	r2,status
10011d18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011d1c:	e0fffe17 	ldw	r3,-8(fp)
10011d20:	00bfff84 	movi	r2,-2
10011d24:	1884703a 	and	r2,r3,r2
10011d28:	1001703a 	wrctl	status,r2
  
  return context;
10011d2c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10011d30:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10011d34:	d0a00d17 	ldw	r2,-32716(gp)
10011d38:	10c000c4 	addi	r3,r2,3
10011d3c:	00bfff04 	movi	r2,-4
10011d40:	1884703a 	and	r2,r3,r2
10011d44:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10011d48:	d0e00d17 	ldw	r3,-32716(gp)
10011d4c:	e0bfff17 	ldw	r2,-4(fp)
10011d50:	1887883a 	add	r3,r3,r2
10011d54:	00860034 	movhi	r2,6144
10011d58:	10800004 	addi	r2,r2,0
10011d5c:	10c0062e 	bgeu	r2,r3,10011d78 <sbrk+0x74>
10011d60:	e0bffb17 	ldw	r2,-20(fp)
10011d64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011d68:	e0bffa17 	ldw	r2,-24(fp)
10011d6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10011d70:	00bfffc4 	movi	r2,-1
10011d74:	00000b06 	br	10011da4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10011d78:	d0a00d17 	ldw	r2,-32716(gp)
10011d7c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10011d80:	d0e00d17 	ldw	r3,-32716(gp)
10011d84:	e0bfff17 	ldw	r2,-4(fp)
10011d88:	1885883a 	add	r2,r3,r2
10011d8c:	d0a00d15 	stw	r2,-32716(gp)
10011d90:	e0bffb17 	ldw	r2,-20(fp)
10011d94:	e0bffc15 	stw	r2,-16(fp)
10011d98:	e0bffc17 	ldw	r2,-16(fp)
10011d9c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10011da0:	e0bffd17 	ldw	r2,-12(fp)
} 
10011da4:	e037883a 	mov	sp,fp
10011da8:	df000017 	ldw	fp,0(sp)
10011dac:	dec00104 	addi	sp,sp,4
10011db0:	f800283a 	ret

10011db4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011db4:	defffe04 	addi	sp,sp,-8
10011db8:	dfc00115 	stw	ra,4(sp)
10011dbc:	df000015 	stw	fp,0(sp)
10011dc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011dc4:	d0a00c17 	ldw	r2,-32720(gp)
10011dc8:	10000326 	beq	r2,zero,10011dd8 <alt_get_errno+0x24>
10011dcc:	d0a00c17 	ldw	r2,-32720(gp)
10011dd0:	103ee83a 	callr	r2
10011dd4:	00000106 	br	10011ddc <alt_get_errno+0x28>
10011dd8:	d0a6e004 	addi	r2,gp,-25728
}
10011ddc:	e037883a 	mov	sp,fp
10011de0:	dfc00117 	ldw	ra,4(sp)
10011de4:	df000017 	ldw	fp,0(sp)
10011de8:	dec00204 	addi	sp,sp,8
10011dec:	f800283a 	ret

10011df0 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
10011df0:	defffc04 	addi	sp,sp,-16
10011df4:	dfc00315 	stw	ra,12(sp)
10011df8:	df000215 	stw	fp,8(sp)
10011dfc:	df000204 	addi	fp,sp,8
10011e00:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011e04:	d0a6e617 	ldw	r2,-25704(gp)
  clock_t ticks = alt_nticks(); 
10011e08:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10011e0c:	d0a6e517 	ldw	r2,-25708(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
10011e10:	1000061e 	bne	r2,zero,10011e2c <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
10011e14:	0011db40 	call	10011db4 <alt_get_errno>
10011e18:	1007883a 	mov	r3,r2
10011e1c:	00801604 	movi	r2,88
10011e20:	18800015 	stw	r2,0(r3)
    return 0;
10011e24:	0005883a 	mov	r2,zero
10011e28:	00000a06 	br	10011e54 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
10011e2c:	e0bfff17 	ldw	r2,-4(fp)
10011e30:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
10011e34:	e0bfff17 	ldw	r2,-4(fp)
10011e38:	e0fffe17 	ldw	r3,-8(fp)
10011e3c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
10011e40:	e0bfff17 	ldw	r2,-4(fp)
10011e44:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
10011e48:	e0bfff17 	ldw	r2,-4(fp)
10011e4c:	10000315 	stw	zero,12(r2)

  return ticks;
10011e50:	e0bffe17 	ldw	r2,-8(fp)
}
10011e54:	e037883a 	mov	sp,fp
10011e58:	dfc00117 	ldw	ra,4(sp)
10011e5c:	df000017 	ldw	fp,0(sp)
10011e60:	dec00204 	addi	sp,sp,8
10011e64:	f800283a 	ret

10011e68 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10011e68:	defffd04 	addi	sp,sp,-12
10011e6c:	dfc00215 	stw	ra,8(sp)
10011e70:	df000115 	stw	fp,4(sp)
10011e74:	df000104 	addi	fp,sp,4
10011e78:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10011e7c:	e13fff17 	ldw	r4,-4(fp)
10011e80:	0012c200 	call	10012c20 <alt_busy_sleep>
}
10011e84:	e037883a 	mov	sp,fp
10011e88:	dfc00117 	ldw	ra,4(sp)
10011e8c:	df000017 	ldw	fp,0(sp)
10011e90:	dec00204 	addi	sp,sp,8
10011e94:	f800283a 	ret

10011e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011e98:	defffe04 	addi	sp,sp,-8
10011e9c:	dfc00115 	stw	ra,4(sp)
10011ea0:	df000015 	stw	fp,0(sp)
10011ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011ea8:	d0a00c17 	ldw	r2,-32720(gp)
10011eac:	10000326 	beq	r2,zero,10011ebc <alt_get_errno+0x24>
10011eb0:	d0a00c17 	ldw	r2,-32720(gp)
10011eb4:	103ee83a 	callr	r2
10011eb8:	00000106 	br	10011ec0 <alt_get_errno+0x28>
10011ebc:	d0a6e004 	addi	r2,gp,-25728
}
10011ec0:	e037883a 	mov	sp,fp
10011ec4:	dfc00117 	ldw	ra,4(sp)
10011ec8:	df000017 	ldw	fp,0(sp)
10011ecc:	dec00204 	addi	sp,sp,8
10011ed0:	f800283a 	ret

10011ed4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10011ed4:	defff904 	addi	sp,sp,-28
10011ed8:	dfc00615 	stw	ra,24(sp)
10011edc:	df000515 	stw	fp,20(sp)
10011ee0:	df000504 	addi	fp,sp,20
10011ee4:	e13ffd15 	stw	r4,-12(fp)
10011ee8:	e17ffe15 	stw	r5,-8(fp)
10011eec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011ef0:	e0bffd17 	ldw	r2,-12(fp)
10011ef4:	10000816 	blt	r2,zero,10011f18 <write+0x44>
10011ef8:	01400304 	movi	r5,12
10011efc:	e13ffd17 	ldw	r4,-12(fp)
10011f00:	00052a00 	call	100052a0 <__mulsi3>
10011f04:	1007883a 	mov	r3,r2
10011f08:	00840074 	movhi	r2,4097
10011f0c:	10945704 	addi	r2,r2,20828
10011f10:	1885883a 	add	r2,r3,r2
10011f14:	00000106 	br	10011f1c <write+0x48>
10011f18:	0005883a 	mov	r2,zero
10011f1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011f20:	e0bffb17 	ldw	r2,-20(fp)
10011f24:	10002126 	beq	r2,zero,10011fac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10011f28:	e0bffb17 	ldw	r2,-20(fp)
10011f2c:	10800217 	ldw	r2,8(r2)
10011f30:	108000cc 	andi	r2,r2,3
10011f34:	10001826 	beq	r2,zero,10011f98 <write+0xc4>
10011f38:	e0bffb17 	ldw	r2,-20(fp)
10011f3c:	10800017 	ldw	r2,0(r2)
10011f40:	10800617 	ldw	r2,24(r2)
10011f44:	10001426 	beq	r2,zero,10011f98 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10011f48:	e0bffb17 	ldw	r2,-20(fp)
10011f4c:	10800017 	ldw	r2,0(r2)
10011f50:	10800617 	ldw	r2,24(r2)
10011f54:	e0ffff17 	ldw	r3,-4(fp)
10011f58:	180d883a 	mov	r6,r3
10011f5c:	e17ffe17 	ldw	r5,-8(fp)
10011f60:	e13ffb17 	ldw	r4,-20(fp)
10011f64:	103ee83a 	callr	r2
10011f68:	e0bffc15 	stw	r2,-16(fp)
10011f6c:	e0bffc17 	ldw	r2,-16(fp)
10011f70:	1000070e 	bge	r2,zero,10011f90 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10011f74:	0011e980 	call	10011e98 <alt_get_errno>
10011f78:	1007883a 	mov	r3,r2
10011f7c:	e0bffc17 	ldw	r2,-16(fp)
10011f80:	0085c83a 	sub	r2,zero,r2
10011f84:	18800015 	stw	r2,0(r3)
        return -1;
10011f88:	00bfffc4 	movi	r2,-1
10011f8c:	00000c06 	br	10011fc0 <write+0xec>
      }
      return rval;
10011f90:	e0bffc17 	ldw	r2,-16(fp)
10011f94:	00000a06 	br	10011fc0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10011f98:	0011e980 	call	10011e98 <alt_get_errno>
10011f9c:	1007883a 	mov	r3,r2
10011fa0:	00800344 	movi	r2,13
10011fa4:	18800015 	stw	r2,0(r3)
10011fa8:	00000406 	br	10011fbc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10011fac:	0011e980 	call	10011e98 <alt_get_errno>
10011fb0:	1007883a 	mov	r3,r2
10011fb4:	00801444 	movi	r2,81
10011fb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011fbc:	00bfffc4 	movi	r2,-1
}
10011fc0:	e037883a 	mov	sp,fp
10011fc4:	dfc00117 	ldw	ra,4(sp)
10011fc8:	df000017 	ldw	fp,0(sp)
10011fcc:	dec00204 	addi	sp,sp,8
10011fd0:	f800283a 	ret

10011fd4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10011fd4:	defffd04 	addi	sp,sp,-12
10011fd8:	dfc00215 	stw	ra,8(sp)
10011fdc:	df000115 	stw	fp,4(sp)
10011fe0:	df000104 	addi	fp,sp,4
10011fe4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10011fe8:	d1600904 	addi	r5,gp,-32732
10011fec:	e13fff17 	ldw	r4,-4(fp)
10011ff0:	0012dd40 	call	10012dd4 <alt_dev_llist_insert>
}
10011ff4:	e037883a 	mov	sp,fp
10011ff8:	dfc00117 	ldw	ra,4(sp)
10011ffc:	df000017 	ldw	fp,0(sp)
10012000:	dec00204 	addi	sp,sp,8
10012004:	f800283a 	ret

10012008 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10012008:	defffd04 	addi	sp,sp,-12
1001200c:	dfc00215 	stw	ra,8(sp)
10012010:	df000115 	stw	fp,4(sp)
10012014:	df000104 	addi	fp,sp,4
10012018:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1001201c:	00137800 	call	10013780 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10012020:	00800044 	movi	r2,1
10012024:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10012028:	0001883a 	nop
1001202c:	e037883a 	mov	sp,fp
10012030:	dfc00117 	ldw	ra,4(sp)
10012034:	df000017 	ldw	fp,0(sp)
10012038:	dec00204 	addi	sp,sp,8
1001203c:	f800283a 	ret

10012040 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10012040:	defffe04 	addi	sp,sp,-8
10012044:	dfc00115 	stw	ra,4(sp)
10012048:	df000015 	stw	fp,0(sp)
1001204c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10012050:	01800144 	movi	r6,5
10012054:	000b883a 	mov	r5,zero
10012058:	01040074 	movhi	r4,4097
1001205c:	2114c104 	addi	r4,r4,21252
10012060:	00121f00 	call	100121f0 <altera_avalon_jtag_uart_init>
10012064:	01040074 	movhi	r4,4097
10012068:	2114b704 	addi	r4,r4,21212
1001206c:	0011fd40 	call	10011fd4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10012070:	0001883a 	nop
}
10012074:	0001883a 	nop
10012078:	e037883a 	mov	sp,fp
1001207c:	dfc00117 	ldw	ra,4(sp)
10012080:	df000017 	ldw	fp,0(sp)
10012084:	dec00204 	addi	sp,sp,8
10012088:	f800283a 	ret

1001208c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001208c:	defffa04 	addi	sp,sp,-24
10012090:	dfc00515 	stw	ra,20(sp)
10012094:	df000415 	stw	fp,16(sp)
10012098:	df000404 	addi	fp,sp,16
1001209c:	e13ffd15 	stw	r4,-12(fp)
100120a0:	e17ffe15 	stw	r5,-8(fp)
100120a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100120a8:	e0bffd17 	ldw	r2,-12(fp)
100120ac:	10800017 	ldw	r2,0(r2)
100120b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100120b4:	e0bffc17 	ldw	r2,-16(fp)
100120b8:	10c00a04 	addi	r3,r2,40
100120bc:	e0bffd17 	ldw	r2,-12(fp)
100120c0:	10800217 	ldw	r2,8(r2)
100120c4:	100f883a 	mov	r7,r2
100120c8:	e1bfff17 	ldw	r6,-4(fp)
100120cc:	e17ffe17 	ldw	r5,-8(fp)
100120d0:	1809883a 	mov	r4,r3
100120d4:	00126b40 	call	100126b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100120d8:	e037883a 	mov	sp,fp
100120dc:	dfc00117 	ldw	ra,4(sp)
100120e0:	df000017 	ldw	fp,0(sp)
100120e4:	dec00204 	addi	sp,sp,8
100120e8:	f800283a 	ret

100120ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100120ec:	defffa04 	addi	sp,sp,-24
100120f0:	dfc00515 	stw	ra,20(sp)
100120f4:	df000415 	stw	fp,16(sp)
100120f8:	df000404 	addi	fp,sp,16
100120fc:	e13ffd15 	stw	r4,-12(fp)
10012100:	e17ffe15 	stw	r5,-8(fp)
10012104:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012108:	e0bffd17 	ldw	r2,-12(fp)
1001210c:	10800017 	ldw	r2,0(r2)
10012110:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10012114:	e0bffc17 	ldw	r2,-16(fp)
10012118:	10c00a04 	addi	r3,r2,40
1001211c:	e0bffd17 	ldw	r2,-12(fp)
10012120:	10800217 	ldw	r2,8(r2)
10012124:	100f883a 	mov	r7,r2
10012128:	e1bfff17 	ldw	r6,-4(fp)
1001212c:	e17ffe17 	ldw	r5,-8(fp)
10012130:	1809883a 	mov	r4,r3
10012134:	00128d00 	call	100128d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10012138:	e037883a 	mov	sp,fp
1001213c:	dfc00117 	ldw	ra,4(sp)
10012140:	df000017 	ldw	fp,0(sp)
10012144:	dec00204 	addi	sp,sp,8
10012148:	f800283a 	ret

1001214c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1001214c:	defffc04 	addi	sp,sp,-16
10012150:	dfc00315 	stw	ra,12(sp)
10012154:	df000215 	stw	fp,8(sp)
10012158:	df000204 	addi	fp,sp,8
1001215c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012160:	e0bfff17 	ldw	r2,-4(fp)
10012164:	10800017 	ldw	r2,0(r2)
10012168:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1001216c:	e0bffe17 	ldw	r2,-8(fp)
10012170:	10c00a04 	addi	r3,r2,40
10012174:	e0bfff17 	ldw	r2,-4(fp)
10012178:	10800217 	ldw	r2,8(r2)
1001217c:	100b883a 	mov	r5,r2
10012180:	1809883a 	mov	r4,r3
10012184:	001255c0 	call	1001255c <altera_avalon_jtag_uart_close>
}
10012188:	e037883a 	mov	sp,fp
1001218c:	dfc00117 	ldw	ra,4(sp)
10012190:	df000017 	ldw	fp,0(sp)
10012194:	dec00204 	addi	sp,sp,8
10012198:	f800283a 	ret

1001219c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001219c:	defffa04 	addi	sp,sp,-24
100121a0:	dfc00515 	stw	ra,20(sp)
100121a4:	df000415 	stw	fp,16(sp)
100121a8:	df000404 	addi	fp,sp,16
100121ac:	e13ffd15 	stw	r4,-12(fp)
100121b0:	e17ffe15 	stw	r5,-8(fp)
100121b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100121b8:	e0bffd17 	ldw	r2,-12(fp)
100121bc:	10800017 	ldw	r2,0(r2)
100121c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100121c4:	e0bffc17 	ldw	r2,-16(fp)
100121c8:	10800a04 	addi	r2,r2,40
100121cc:	e1bfff17 	ldw	r6,-4(fp)
100121d0:	e17ffe17 	ldw	r5,-8(fp)
100121d4:	1009883a 	mov	r4,r2
100121d8:	00125c40 	call	100125c4 <altera_avalon_jtag_uart_ioctl>
}
100121dc:	e037883a 	mov	sp,fp
100121e0:	dfc00117 	ldw	ra,4(sp)
100121e4:	df000017 	ldw	fp,0(sp)
100121e8:	dec00204 	addi	sp,sp,8
100121ec:	f800283a 	ret

100121f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100121f0:	defffa04 	addi	sp,sp,-24
100121f4:	dfc00515 	stw	ra,20(sp)
100121f8:	df000415 	stw	fp,16(sp)
100121fc:	df000404 	addi	fp,sp,16
10012200:	e13ffd15 	stw	r4,-12(fp)
10012204:	e17ffe15 	stw	r5,-8(fp)
10012208:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001220c:	e0bffd17 	ldw	r2,-12(fp)
10012210:	00c00044 	movi	r3,1
10012214:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10012218:	e0bffd17 	ldw	r2,-12(fp)
1001221c:	10800017 	ldw	r2,0(r2)
10012220:	10800104 	addi	r2,r2,4
10012224:	1007883a 	mov	r3,r2
10012228:	e0bffd17 	ldw	r2,-12(fp)
1001222c:	10800817 	ldw	r2,32(r2)
10012230:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10012234:	e0bffe17 	ldw	r2,-8(fp)
10012238:	e0ffff17 	ldw	r3,-4(fp)
1001223c:	d8000015 	stw	zero,0(sp)
10012240:	e1fffd17 	ldw	r7,-12(fp)
10012244:	01840074 	movhi	r6,4097
10012248:	3188ac04 	addi	r6,r6,8880
1001224c:	180b883a 	mov	r5,r3
10012250:	1009883a 	mov	r4,r2
10012254:	0012f580 	call	10012f58 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10012258:	e0bffd17 	ldw	r2,-12(fp)
1001225c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10012260:	e0bffd17 	ldw	r2,-12(fp)
10012264:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10012268:	d0e6e517 	ldw	r3,-25708(gp)
1001226c:	e1fffd17 	ldw	r7,-12(fp)
10012270:	01840074 	movhi	r6,4097
10012274:	31892f04 	addi	r6,r6,9404
10012278:	180b883a 	mov	r5,r3
1001227c:	1009883a 	mov	r4,r2
10012280:	0012af40 	call	10012af4 <alt_alarm_start>
10012284:	1000040e 	bge	r2,zero,10012298 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012288:	e0fffd17 	ldw	r3,-12(fp)
1001228c:	00a00034 	movhi	r2,32768
10012290:	10bfffc4 	addi	r2,r2,-1
10012294:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10012298:	0001883a 	nop
1001229c:	e037883a 	mov	sp,fp
100122a0:	dfc00117 	ldw	ra,4(sp)
100122a4:	df000017 	ldw	fp,0(sp)
100122a8:	dec00204 	addi	sp,sp,8
100122ac:	f800283a 	ret

100122b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100122b0:	defff804 	addi	sp,sp,-32
100122b4:	df000715 	stw	fp,28(sp)
100122b8:	df000704 	addi	fp,sp,28
100122bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100122c0:	e0bfff17 	ldw	r2,-4(fp)
100122c4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100122c8:	e0bffb17 	ldw	r2,-20(fp)
100122cc:	10800017 	ldw	r2,0(r2)
100122d0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100122d4:	e0bffc17 	ldw	r2,-16(fp)
100122d8:	10800104 	addi	r2,r2,4
100122dc:	10800037 	ldwio	r2,0(r2)
100122e0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100122e4:	e0bffd17 	ldw	r2,-12(fp)
100122e8:	1080c00c 	andi	r2,r2,768
100122ec:	10006d26 	beq	r2,zero,100124a4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100122f0:	e0bffd17 	ldw	r2,-12(fp)
100122f4:	1080400c 	andi	r2,r2,256
100122f8:	10003526 	beq	r2,zero,100123d0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100122fc:	00800074 	movhi	r2,1
10012300:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012304:	e0bffb17 	ldw	r2,-20(fp)
10012308:	10800a17 	ldw	r2,40(r2)
1001230c:	10800044 	addi	r2,r2,1
10012310:	1081ffcc 	andi	r2,r2,2047
10012314:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012318:	e0bffb17 	ldw	r2,-20(fp)
1001231c:	10c00b17 	ldw	r3,44(r2)
10012320:	e0bffe17 	ldw	r2,-8(fp)
10012324:	18801526 	beq	r3,r2,1001237c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012328:	e0bffc17 	ldw	r2,-16(fp)
1001232c:	10800037 	ldwio	r2,0(r2)
10012330:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10012334:	e0bff917 	ldw	r2,-28(fp)
10012338:	10a0000c 	andi	r2,r2,32768
1001233c:	10001126 	beq	r2,zero,10012384 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012340:	e0bffb17 	ldw	r2,-20(fp)
10012344:	10800a17 	ldw	r2,40(r2)
10012348:	e0fff917 	ldw	r3,-28(fp)
1001234c:	1809883a 	mov	r4,r3
10012350:	e0fffb17 	ldw	r3,-20(fp)
10012354:	1885883a 	add	r2,r3,r2
10012358:	10800e04 	addi	r2,r2,56
1001235c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012360:	e0bffb17 	ldw	r2,-20(fp)
10012364:	10800a17 	ldw	r2,40(r2)
10012368:	10800044 	addi	r2,r2,1
1001236c:	10c1ffcc 	andi	r3,r2,2047
10012370:	e0bffb17 	ldw	r2,-20(fp)
10012374:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012378:	003fe206 	br	10012304 <__alt_data_end+0xf8012304>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1001237c:	0001883a 	nop
10012380:	00000106 	br	10012388 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10012384:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012388:	e0bff917 	ldw	r2,-28(fp)
1001238c:	10bfffec 	andhi	r2,r2,65535
10012390:	10000f26 	beq	r2,zero,100123d0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012394:	e0bffb17 	ldw	r2,-20(fp)
10012398:	10c00817 	ldw	r3,32(r2)
1001239c:	00bfff84 	movi	r2,-2
100123a0:	1886703a 	and	r3,r3,r2
100123a4:	e0bffb17 	ldw	r2,-20(fp)
100123a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100123ac:	e0bffc17 	ldw	r2,-16(fp)
100123b0:	10800104 	addi	r2,r2,4
100123b4:	1007883a 	mov	r3,r2
100123b8:	e0bffb17 	ldw	r2,-20(fp)
100123bc:	10800817 	ldw	r2,32(r2)
100123c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100123c4:	e0bffc17 	ldw	r2,-16(fp)
100123c8:	10800104 	addi	r2,r2,4
100123cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100123d0:	e0bffd17 	ldw	r2,-12(fp)
100123d4:	1080800c 	andi	r2,r2,512
100123d8:	103fbe26 	beq	r2,zero,100122d4 <__alt_data_end+0xf80122d4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100123dc:	e0bffd17 	ldw	r2,-12(fp)
100123e0:	1004d43a 	srli	r2,r2,16
100123e4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100123e8:	00001406 	br	1001243c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100123ec:	e0bffc17 	ldw	r2,-16(fp)
100123f0:	e0fffb17 	ldw	r3,-20(fp)
100123f4:	18c00d17 	ldw	r3,52(r3)
100123f8:	e13ffb17 	ldw	r4,-20(fp)
100123fc:	20c7883a 	add	r3,r4,r3
10012400:	18c20e04 	addi	r3,r3,2104
10012404:	18c00003 	ldbu	r3,0(r3)
10012408:	18c03fcc 	andi	r3,r3,255
1001240c:	18c0201c 	xori	r3,r3,128
10012410:	18ffe004 	addi	r3,r3,-128
10012414:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012418:	e0bffb17 	ldw	r2,-20(fp)
1001241c:	10800d17 	ldw	r2,52(r2)
10012420:	10800044 	addi	r2,r2,1
10012424:	10c1ffcc 	andi	r3,r2,2047
10012428:	e0bffb17 	ldw	r2,-20(fp)
1001242c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012430:	e0bffa17 	ldw	r2,-24(fp)
10012434:	10bfffc4 	addi	r2,r2,-1
10012438:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1001243c:	e0bffa17 	ldw	r2,-24(fp)
10012440:	10000526 	beq	r2,zero,10012458 <altera_avalon_jtag_uart_irq+0x1a8>
10012444:	e0bffb17 	ldw	r2,-20(fp)
10012448:	10c00d17 	ldw	r3,52(r2)
1001244c:	e0bffb17 	ldw	r2,-20(fp)
10012450:	10800c17 	ldw	r2,48(r2)
10012454:	18bfe51e 	bne	r3,r2,100123ec <__alt_data_end+0xf80123ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10012458:	e0bffa17 	ldw	r2,-24(fp)
1001245c:	103f9d26 	beq	r2,zero,100122d4 <__alt_data_end+0xf80122d4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012460:	e0bffb17 	ldw	r2,-20(fp)
10012464:	10c00817 	ldw	r3,32(r2)
10012468:	00bfff44 	movi	r2,-3
1001246c:	1886703a 	and	r3,r3,r2
10012470:	e0bffb17 	ldw	r2,-20(fp)
10012474:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012478:	e0bffb17 	ldw	r2,-20(fp)
1001247c:	10800017 	ldw	r2,0(r2)
10012480:	10800104 	addi	r2,r2,4
10012484:	1007883a 	mov	r3,r2
10012488:	e0bffb17 	ldw	r2,-20(fp)
1001248c:	10800817 	ldw	r2,32(r2)
10012490:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012494:	e0bffc17 	ldw	r2,-16(fp)
10012498:	10800104 	addi	r2,r2,4
1001249c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100124a0:	003f8c06 	br	100122d4 <__alt_data_end+0xf80122d4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100124a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
100124a8:	0001883a 	nop
100124ac:	e037883a 	mov	sp,fp
100124b0:	df000017 	ldw	fp,0(sp)
100124b4:	dec00104 	addi	sp,sp,4
100124b8:	f800283a 	ret

100124bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100124bc:	defff804 	addi	sp,sp,-32
100124c0:	df000715 	stw	fp,28(sp)
100124c4:	df000704 	addi	fp,sp,28
100124c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100124cc:	e0bffb17 	ldw	r2,-20(fp)
100124d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100124d4:	e0bff917 	ldw	r2,-28(fp)
100124d8:	10800017 	ldw	r2,0(r2)
100124dc:	10800104 	addi	r2,r2,4
100124e0:	10800037 	ldwio	r2,0(r2)
100124e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100124e8:	e0bffa17 	ldw	r2,-24(fp)
100124ec:	1081000c 	andi	r2,r2,1024
100124f0:	10000b26 	beq	r2,zero,10012520 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100124f4:	e0bff917 	ldw	r2,-28(fp)
100124f8:	10800017 	ldw	r2,0(r2)
100124fc:	10800104 	addi	r2,r2,4
10012500:	1007883a 	mov	r3,r2
10012504:	e0bff917 	ldw	r2,-28(fp)
10012508:	10800817 	ldw	r2,32(r2)
1001250c:	10810014 	ori	r2,r2,1024
10012510:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012514:	e0bff917 	ldw	r2,-28(fp)
10012518:	10000915 	stw	zero,36(r2)
1001251c:	00000a06 	br	10012548 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012520:	e0bff917 	ldw	r2,-28(fp)
10012524:	10c00917 	ldw	r3,36(r2)
10012528:	00a00034 	movhi	r2,32768
1001252c:	10bfff04 	addi	r2,r2,-4
10012530:	10c00536 	bltu	r2,r3,10012548 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012534:	e0bff917 	ldw	r2,-28(fp)
10012538:	10800917 	ldw	r2,36(r2)
1001253c:	10c00044 	addi	r3,r2,1
10012540:	e0bff917 	ldw	r2,-28(fp)
10012544:	10c00915 	stw	r3,36(r2)
10012548:	d0a6e517 	ldw	r2,-25708(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1001254c:	e037883a 	mov	sp,fp
10012550:	df000017 	ldw	fp,0(sp)
10012554:	dec00104 	addi	sp,sp,4
10012558:	f800283a 	ret

1001255c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1001255c:	defffd04 	addi	sp,sp,-12
10012560:	df000215 	stw	fp,8(sp)
10012564:	df000204 	addi	fp,sp,8
10012568:	e13ffe15 	stw	r4,-8(fp)
1001256c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012570:	00000506 	br	10012588 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012574:	e0bfff17 	ldw	r2,-4(fp)
10012578:	1090000c 	andi	r2,r2,16384
1001257c:	10000226 	beq	r2,zero,10012588 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012580:	00bffd44 	movi	r2,-11
10012584:	00000b06 	br	100125b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012588:	e0bffe17 	ldw	r2,-8(fp)
1001258c:	10c00d17 	ldw	r3,52(r2)
10012590:	e0bffe17 	ldw	r2,-8(fp)
10012594:	10800c17 	ldw	r2,48(r2)
10012598:	18800526 	beq	r3,r2,100125b0 <altera_avalon_jtag_uart_close+0x54>
1001259c:	e0bffe17 	ldw	r2,-8(fp)
100125a0:	10c00917 	ldw	r3,36(r2)
100125a4:	e0bffe17 	ldw	r2,-8(fp)
100125a8:	10800117 	ldw	r2,4(r2)
100125ac:	18bff136 	bltu	r3,r2,10012574 <__alt_data_end+0xf8012574>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100125b0:	0005883a 	mov	r2,zero
}
100125b4:	e037883a 	mov	sp,fp
100125b8:	df000017 	ldw	fp,0(sp)
100125bc:	dec00104 	addi	sp,sp,4
100125c0:	f800283a 	ret

100125c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100125c4:	defffa04 	addi	sp,sp,-24
100125c8:	df000515 	stw	fp,20(sp)
100125cc:	df000504 	addi	fp,sp,20
100125d0:	e13ffd15 	stw	r4,-12(fp)
100125d4:	e17ffe15 	stw	r5,-8(fp)
100125d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100125dc:	00bff9c4 	movi	r2,-25
100125e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100125e4:	e0bffe17 	ldw	r2,-8(fp)
100125e8:	10da8060 	cmpeqi	r3,r2,27137
100125ec:	1800031e 	bne	r3,zero,100125fc <altera_avalon_jtag_uart_ioctl+0x38>
100125f0:	109a80a0 	cmpeqi	r2,r2,27138
100125f4:	1000181e 	bne	r2,zero,10012658 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
100125f8:	00002906 	br	100126a0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100125fc:	e0bffd17 	ldw	r2,-12(fp)
10012600:	10c00117 	ldw	r3,4(r2)
10012604:	00a00034 	movhi	r2,32768
10012608:	10bfffc4 	addi	r2,r2,-1
1001260c:	18802126 	beq	r3,r2,10012694 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012610:	e0bfff17 	ldw	r2,-4(fp)
10012614:	10800017 	ldw	r2,0(r2)
10012618:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1001261c:	e0bffc17 	ldw	r2,-16(fp)
10012620:	10800090 	cmplti	r2,r2,2
10012624:	1000061e 	bne	r2,zero,10012640 <altera_avalon_jtag_uart_ioctl+0x7c>
10012628:	e0fffc17 	ldw	r3,-16(fp)
1001262c:	00a00034 	movhi	r2,32768
10012630:	10bfffc4 	addi	r2,r2,-1
10012634:	18800226 	beq	r3,r2,10012640 <altera_avalon_jtag_uart_ioctl+0x7c>
10012638:	e0bffc17 	ldw	r2,-16(fp)
1001263c:	00000206 	br	10012648 <altera_avalon_jtag_uart_ioctl+0x84>
10012640:	00a00034 	movhi	r2,32768
10012644:	10bfff84 	addi	r2,r2,-2
10012648:	e0fffd17 	ldw	r3,-12(fp)
1001264c:	18800115 	stw	r2,4(r3)
      rc = 0;
10012650:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012654:	00000f06 	br	10012694 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012658:	e0bffd17 	ldw	r2,-12(fp)
1001265c:	10c00117 	ldw	r3,4(r2)
10012660:	00a00034 	movhi	r2,32768
10012664:	10bfffc4 	addi	r2,r2,-1
10012668:	18800c26 	beq	r3,r2,1001269c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001266c:	e0bffd17 	ldw	r2,-12(fp)
10012670:	10c00917 	ldw	r3,36(r2)
10012674:	e0bffd17 	ldw	r2,-12(fp)
10012678:	10800117 	ldw	r2,4(r2)
1001267c:	1885803a 	cmpltu	r2,r3,r2
10012680:	10c03fcc 	andi	r3,r2,255
10012684:	e0bfff17 	ldw	r2,-4(fp)
10012688:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001268c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012690:	00000206 	br	1001269c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012694:	0001883a 	nop
10012698:	00000106 	br	100126a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1001269c:	0001883a 	nop

  default:
    break;
  }

  return rc;
100126a0:	e0bffb17 	ldw	r2,-20(fp)
}
100126a4:	e037883a 	mov	sp,fp
100126a8:	df000017 	ldw	fp,0(sp)
100126ac:	dec00104 	addi	sp,sp,4
100126b0:	f800283a 	ret

100126b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100126b4:	defff304 	addi	sp,sp,-52
100126b8:	dfc00c15 	stw	ra,48(sp)
100126bc:	df000b15 	stw	fp,44(sp)
100126c0:	df000b04 	addi	fp,sp,44
100126c4:	e13ffc15 	stw	r4,-16(fp)
100126c8:	e17ffd15 	stw	r5,-12(fp)
100126cc:	e1bffe15 	stw	r6,-8(fp)
100126d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100126d4:	e0bffd17 	ldw	r2,-12(fp)
100126d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100126dc:	00004706 	br	100127fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100126e0:	e0bffc17 	ldw	r2,-16(fp)
100126e4:	10800a17 	ldw	r2,40(r2)
100126e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100126ec:	e0bffc17 	ldw	r2,-16(fp)
100126f0:	10800b17 	ldw	r2,44(r2)
100126f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100126f8:	e0fff717 	ldw	r3,-36(fp)
100126fc:	e0bff817 	ldw	r2,-32(fp)
10012700:	18800536 	bltu	r3,r2,10012718 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012704:	e0fff717 	ldw	r3,-36(fp)
10012708:	e0bff817 	ldw	r2,-32(fp)
1001270c:	1885c83a 	sub	r2,r3,r2
10012710:	e0bff615 	stw	r2,-40(fp)
10012714:	00000406 	br	10012728 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012718:	00c20004 	movi	r3,2048
1001271c:	e0bff817 	ldw	r2,-32(fp)
10012720:	1885c83a 	sub	r2,r3,r2
10012724:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012728:	e0bff617 	ldw	r2,-40(fp)
1001272c:	10001e26 	beq	r2,zero,100127a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10012730:	e0fffe17 	ldw	r3,-8(fp)
10012734:	e0bff617 	ldw	r2,-40(fp)
10012738:	1880022e 	bgeu	r3,r2,10012744 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1001273c:	e0bffe17 	ldw	r2,-8(fp)
10012740:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012744:	e0bffc17 	ldw	r2,-16(fp)
10012748:	10c00e04 	addi	r3,r2,56
1001274c:	e0bff817 	ldw	r2,-32(fp)
10012750:	1885883a 	add	r2,r3,r2
10012754:	e1bff617 	ldw	r6,-40(fp)
10012758:	100b883a 	mov	r5,r2
1001275c:	e13ff517 	ldw	r4,-44(fp)
10012760:	000af8c0 	call	1000af8c <memcpy>
      ptr   += n;
10012764:	e0fff517 	ldw	r3,-44(fp)
10012768:	e0bff617 	ldw	r2,-40(fp)
1001276c:	1885883a 	add	r2,r3,r2
10012770:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012774:	e0fffe17 	ldw	r3,-8(fp)
10012778:	e0bff617 	ldw	r2,-40(fp)
1001277c:	1885c83a 	sub	r2,r3,r2
10012780:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012784:	e0fff817 	ldw	r3,-32(fp)
10012788:	e0bff617 	ldw	r2,-40(fp)
1001278c:	1885883a 	add	r2,r3,r2
10012790:	10c1ffcc 	andi	r3,r2,2047
10012794:	e0bffc17 	ldw	r2,-16(fp)
10012798:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1001279c:	e0bffe17 	ldw	r2,-8(fp)
100127a0:	00bfcf16 	blt	zero,r2,100126e0 <__alt_data_end+0xf80126e0>
100127a4:	00000106 	br	100127ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
100127a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
100127ac:	e0fff517 	ldw	r3,-44(fp)
100127b0:	e0bffd17 	ldw	r2,-12(fp)
100127b4:	1880141e 	bne	r3,r2,10012808 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100127b8:	e0bfff17 	ldw	r2,-4(fp)
100127bc:	1090000c 	andi	r2,r2,16384
100127c0:	1000131e 	bne	r2,zero,10012810 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100127c4:	0001883a 	nop
100127c8:	e0bffc17 	ldw	r2,-16(fp)
100127cc:	10c00a17 	ldw	r3,40(r2)
100127d0:	e0bff717 	ldw	r2,-36(fp)
100127d4:	1880051e 	bne	r3,r2,100127ec <altera_avalon_jtag_uart_read+0x138>
100127d8:	e0bffc17 	ldw	r2,-16(fp)
100127dc:	10c00917 	ldw	r3,36(r2)
100127e0:	e0bffc17 	ldw	r2,-16(fp)
100127e4:	10800117 	ldw	r2,4(r2)
100127e8:	18bff736 	bltu	r3,r2,100127c8 <__alt_data_end+0xf80127c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100127ec:	e0bffc17 	ldw	r2,-16(fp)
100127f0:	10c00a17 	ldw	r3,40(r2)
100127f4:	e0bff717 	ldw	r2,-36(fp)
100127f8:	18800726 	beq	r3,r2,10012818 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100127fc:	e0bffe17 	ldw	r2,-8(fp)
10012800:	00bfb716 	blt	zero,r2,100126e0 <__alt_data_end+0xf80126e0>
10012804:	00000506 	br	1001281c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012808:	0001883a 	nop
1001280c:	00000306 	br	1001281c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10012810:	0001883a 	nop
10012814:	00000106 	br	1001281c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10012818:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1001281c:	e0fff517 	ldw	r3,-44(fp)
10012820:	e0bffd17 	ldw	r2,-12(fp)
10012824:	18801826 	beq	r3,r2,10012888 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012828:	0005303a 	rdctl	r2,status
1001282c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012830:	e0fffb17 	ldw	r3,-20(fp)
10012834:	00bfff84 	movi	r2,-2
10012838:	1884703a 	and	r2,r3,r2
1001283c:	1001703a 	wrctl	status,r2
  
  return context;
10012840:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10012844:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012848:	e0bffc17 	ldw	r2,-16(fp)
1001284c:	10800817 	ldw	r2,32(r2)
10012850:	10c00054 	ori	r3,r2,1
10012854:	e0bffc17 	ldw	r2,-16(fp)
10012858:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001285c:	e0bffc17 	ldw	r2,-16(fp)
10012860:	10800017 	ldw	r2,0(r2)
10012864:	10800104 	addi	r2,r2,4
10012868:	1007883a 	mov	r3,r2
1001286c:	e0bffc17 	ldw	r2,-16(fp)
10012870:	10800817 	ldw	r2,32(r2)
10012874:	18800035 	stwio	r2,0(r3)
10012878:	e0bffa17 	ldw	r2,-24(fp)
1001287c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012880:	e0bff917 	ldw	r2,-28(fp)
10012884:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012888:	e0fff517 	ldw	r3,-44(fp)
1001288c:	e0bffd17 	ldw	r2,-12(fp)
10012890:	18800426 	beq	r3,r2,100128a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10012894:	e0fff517 	ldw	r3,-44(fp)
10012898:	e0bffd17 	ldw	r2,-12(fp)
1001289c:	1885c83a 	sub	r2,r3,r2
100128a0:	00000606 	br	100128bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
100128a4:	e0bfff17 	ldw	r2,-4(fp)
100128a8:	1090000c 	andi	r2,r2,16384
100128ac:	10000226 	beq	r2,zero,100128b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100128b0:	00bffd44 	movi	r2,-11
100128b4:	00000106 	br	100128bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100128b8:	00bffec4 	movi	r2,-5
}
100128bc:	e037883a 	mov	sp,fp
100128c0:	dfc00117 	ldw	ra,4(sp)
100128c4:	df000017 	ldw	fp,0(sp)
100128c8:	dec00204 	addi	sp,sp,8
100128cc:	f800283a 	ret

100128d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100128d0:	defff304 	addi	sp,sp,-52
100128d4:	dfc00c15 	stw	ra,48(sp)
100128d8:	df000b15 	stw	fp,44(sp)
100128dc:	df000b04 	addi	fp,sp,44
100128e0:	e13ffc15 	stw	r4,-16(fp)
100128e4:	e17ffd15 	stw	r5,-12(fp)
100128e8:	e1bffe15 	stw	r6,-8(fp)
100128ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100128f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100128f4:	e0bffd17 	ldw	r2,-12(fp)
100128f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100128fc:	00003706 	br	100129dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10012900:	e0bffc17 	ldw	r2,-16(fp)
10012904:	10800c17 	ldw	r2,48(r2)
10012908:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1001290c:	e0bffc17 	ldw	r2,-16(fp)
10012910:	10800d17 	ldw	r2,52(r2)
10012914:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10012918:	e0fff917 	ldw	r3,-28(fp)
1001291c:	e0bff517 	ldw	r2,-44(fp)
10012920:	1880062e 	bgeu	r3,r2,1001293c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10012924:	e0fff517 	ldw	r3,-44(fp)
10012928:	e0bff917 	ldw	r2,-28(fp)
1001292c:	1885c83a 	sub	r2,r3,r2
10012930:	10bfffc4 	addi	r2,r2,-1
10012934:	e0bff615 	stw	r2,-40(fp)
10012938:	00000b06 	br	10012968 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1001293c:	e0bff517 	ldw	r2,-44(fp)
10012940:	10000526 	beq	r2,zero,10012958 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10012944:	00c20004 	movi	r3,2048
10012948:	e0bff917 	ldw	r2,-28(fp)
1001294c:	1885c83a 	sub	r2,r3,r2
10012950:	e0bff615 	stw	r2,-40(fp)
10012954:	00000406 	br	10012968 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10012958:	00c1ffc4 	movi	r3,2047
1001295c:	e0bff917 	ldw	r2,-28(fp)
10012960:	1885c83a 	sub	r2,r3,r2
10012964:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012968:	e0bff617 	ldw	r2,-40(fp)
1001296c:	10001e26 	beq	r2,zero,100129e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10012970:	e0fffe17 	ldw	r3,-8(fp)
10012974:	e0bff617 	ldw	r2,-40(fp)
10012978:	1880022e 	bgeu	r3,r2,10012984 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1001297c:	e0bffe17 	ldw	r2,-8(fp)
10012980:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10012984:	e0bffc17 	ldw	r2,-16(fp)
10012988:	10c20e04 	addi	r3,r2,2104
1001298c:	e0bff917 	ldw	r2,-28(fp)
10012990:	1885883a 	add	r2,r3,r2
10012994:	e1bff617 	ldw	r6,-40(fp)
10012998:	e17ffd17 	ldw	r5,-12(fp)
1001299c:	1009883a 	mov	r4,r2
100129a0:	000af8c0 	call	1000af8c <memcpy>
      ptr   += n;
100129a4:	e0fffd17 	ldw	r3,-12(fp)
100129a8:	e0bff617 	ldw	r2,-40(fp)
100129ac:	1885883a 	add	r2,r3,r2
100129b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100129b4:	e0fffe17 	ldw	r3,-8(fp)
100129b8:	e0bff617 	ldw	r2,-40(fp)
100129bc:	1885c83a 	sub	r2,r3,r2
100129c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100129c4:	e0fff917 	ldw	r3,-28(fp)
100129c8:	e0bff617 	ldw	r2,-40(fp)
100129cc:	1885883a 	add	r2,r3,r2
100129d0:	10c1ffcc 	andi	r3,r2,2047
100129d4:	e0bffc17 	ldw	r2,-16(fp)
100129d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100129dc:	e0bffe17 	ldw	r2,-8(fp)
100129e0:	00bfc716 	blt	zero,r2,10012900 <__alt_data_end+0xf8012900>
100129e4:	00000106 	br	100129ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100129e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100129ec:	0005303a 	rdctl	r2,status
100129f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100129f4:	e0fffb17 	ldw	r3,-20(fp)
100129f8:	00bfff84 	movi	r2,-2
100129fc:	1884703a 	and	r2,r3,r2
10012a00:	1001703a 	wrctl	status,r2
  
  return context;
10012a04:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10012a08:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012a0c:	e0bffc17 	ldw	r2,-16(fp)
10012a10:	10800817 	ldw	r2,32(r2)
10012a14:	10c00094 	ori	r3,r2,2
10012a18:	e0bffc17 	ldw	r2,-16(fp)
10012a1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012a20:	e0bffc17 	ldw	r2,-16(fp)
10012a24:	10800017 	ldw	r2,0(r2)
10012a28:	10800104 	addi	r2,r2,4
10012a2c:	1007883a 	mov	r3,r2
10012a30:	e0bffc17 	ldw	r2,-16(fp)
10012a34:	10800817 	ldw	r2,32(r2)
10012a38:	18800035 	stwio	r2,0(r3)
10012a3c:	e0bffa17 	ldw	r2,-24(fp)
10012a40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012a44:	e0bff817 	ldw	r2,-32(fp)
10012a48:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10012a4c:	e0bffe17 	ldw	r2,-8(fp)
10012a50:	0080100e 	bge	zero,r2,10012a94 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10012a54:	e0bfff17 	ldw	r2,-4(fp)
10012a58:	1090000c 	andi	r2,r2,16384
10012a5c:	1000101e 	bne	r2,zero,10012aa0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10012a60:	0001883a 	nop
10012a64:	e0bffc17 	ldw	r2,-16(fp)
10012a68:	10c00d17 	ldw	r3,52(r2)
10012a6c:	e0bff517 	ldw	r2,-44(fp)
10012a70:	1880051e 	bne	r3,r2,10012a88 <altera_avalon_jtag_uart_write+0x1b8>
10012a74:	e0bffc17 	ldw	r2,-16(fp)
10012a78:	10c00917 	ldw	r3,36(r2)
10012a7c:	e0bffc17 	ldw	r2,-16(fp)
10012a80:	10800117 	ldw	r2,4(r2)
10012a84:	18bff736 	bltu	r3,r2,10012a64 <__alt_data_end+0xf8012a64>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10012a88:	e0bffc17 	ldw	r2,-16(fp)
10012a8c:	10800917 	ldw	r2,36(r2)
10012a90:	1000051e 	bne	r2,zero,10012aa8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10012a94:	e0bffe17 	ldw	r2,-8(fp)
10012a98:	00bfd016 	blt	zero,r2,100129dc <__alt_data_end+0xf80129dc>
10012a9c:	00000306 	br	10012aac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10012aa0:	0001883a 	nop
10012aa4:	00000106 	br	10012aac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10012aa8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10012aac:	e0fffd17 	ldw	r3,-12(fp)
10012ab0:	e0bff717 	ldw	r2,-36(fp)
10012ab4:	18800426 	beq	r3,r2,10012ac8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10012ab8:	e0fffd17 	ldw	r3,-12(fp)
10012abc:	e0bff717 	ldw	r2,-36(fp)
10012ac0:	1885c83a 	sub	r2,r3,r2
10012ac4:	00000606 	br	10012ae0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10012ac8:	e0bfff17 	ldw	r2,-4(fp)
10012acc:	1090000c 	andi	r2,r2,16384
10012ad0:	10000226 	beq	r2,zero,10012adc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10012ad4:	00bffd44 	movi	r2,-11
10012ad8:	00000106 	br	10012ae0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10012adc:	00bffec4 	movi	r2,-5
}
10012ae0:	e037883a 	mov	sp,fp
10012ae4:	dfc00117 	ldw	ra,4(sp)
10012ae8:	df000017 	ldw	fp,0(sp)
10012aec:	dec00204 	addi	sp,sp,8
10012af0:	f800283a 	ret

10012af4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10012af4:	defff504 	addi	sp,sp,-44
10012af8:	df000a15 	stw	fp,40(sp)
10012afc:	df000a04 	addi	fp,sp,40
10012b00:	e13ffc15 	stw	r4,-16(fp)
10012b04:	e17ffd15 	stw	r5,-12(fp)
10012b08:	e1bffe15 	stw	r6,-8(fp)
10012b0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10012b10:	e03ff615 	stw	zero,-40(fp)
10012b14:	d0a6e517 	ldw	r2,-25708(gp)
  
  if (alt_ticks_per_second ())
10012b18:	10003c26 	beq	r2,zero,10012c0c <alt_alarm_start+0x118>
  {
    if (alarm)
10012b1c:	e0bffc17 	ldw	r2,-16(fp)
10012b20:	10003826 	beq	r2,zero,10012c04 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10012b24:	e0bffc17 	ldw	r2,-16(fp)
10012b28:	e0fffe17 	ldw	r3,-8(fp)
10012b2c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10012b30:	e0bffc17 	ldw	r2,-16(fp)
10012b34:	e0ffff17 	ldw	r3,-4(fp)
10012b38:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012b3c:	0005303a 	rdctl	r2,status
10012b40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012b44:	e0fff917 	ldw	r3,-28(fp)
10012b48:	00bfff84 	movi	r2,-2
10012b4c:	1884703a 	and	r2,r3,r2
10012b50:	1001703a 	wrctl	status,r2
  
  return context;
10012b54:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10012b58:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10012b5c:	d0a6e617 	ldw	r2,-25704(gp)
      
      current_nticks = alt_nticks();
10012b60:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10012b64:	e0fffd17 	ldw	r3,-12(fp)
10012b68:	e0bff617 	ldw	r2,-40(fp)
10012b6c:	1885883a 	add	r2,r3,r2
10012b70:	10c00044 	addi	r3,r2,1
10012b74:	e0bffc17 	ldw	r2,-16(fp)
10012b78:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10012b7c:	e0bffc17 	ldw	r2,-16(fp)
10012b80:	10c00217 	ldw	r3,8(r2)
10012b84:	e0bff617 	ldw	r2,-40(fp)
10012b88:	1880042e 	bgeu	r3,r2,10012b9c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10012b8c:	e0bffc17 	ldw	r2,-16(fp)
10012b90:	00c00044 	movi	r3,1
10012b94:	10c00405 	stb	r3,16(r2)
10012b98:	00000206 	br	10012ba4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10012b9c:	e0bffc17 	ldw	r2,-16(fp)
10012ba0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10012ba4:	e0bffc17 	ldw	r2,-16(fp)
10012ba8:	d0e00f04 	addi	r3,gp,-32708
10012bac:	e0fffa15 	stw	r3,-24(fp)
10012bb0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012bb4:	e0bffb17 	ldw	r2,-20(fp)
10012bb8:	e0fffa17 	ldw	r3,-24(fp)
10012bbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012bc0:	e0bffa17 	ldw	r2,-24(fp)
10012bc4:	10c00017 	ldw	r3,0(r2)
10012bc8:	e0bffb17 	ldw	r2,-20(fp)
10012bcc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012bd0:	e0bffa17 	ldw	r2,-24(fp)
10012bd4:	10800017 	ldw	r2,0(r2)
10012bd8:	e0fffb17 	ldw	r3,-20(fp)
10012bdc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012be0:	e0bffa17 	ldw	r2,-24(fp)
10012be4:	e0fffb17 	ldw	r3,-20(fp)
10012be8:	10c00015 	stw	r3,0(r2)
10012bec:	e0bff817 	ldw	r2,-32(fp)
10012bf0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012bf4:	e0bff717 	ldw	r2,-36(fp)
10012bf8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10012bfc:	0005883a 	mov	r2,zero
10012c00:	00000306 	br	10012c10 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10012c04:	00bffa84 	movi	r2,-22
10012c08:	00000106 	br	10012c10 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10012c0c:	00bfde84 	movi	r2,-134
  }
}
10012c10:	e037883a 	mov	sp,fp
10012c14:	df000017 	ldw	fp,0(sp)
10012c18:	dec00104 	addi	sp,sp,4
10012c1c:	f800283a 	ret

10012c20 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10012c20:	defffa04 	addi	sp,sp,-24
10012c24:	dfc00515 	stw	ra,20(sp)
10012c28:	df000415 	stw	fp,16(sp)
10012c2c:	df000404 	addi	fp,sp,16
10012c30:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10012c34:	00800244 	movi	r2,9
10012c38:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10012c3c:	014003f4 	movhi	r5,15
10012c40:	29509004 	addi	r5,r5,16960
10012c44:	e13ffd17 	ldw	r4,-12(fp)
10012c48:	00052a00 	call	100052a0 <__mulsi3>
10012c4c:	100b883a 	mov	r5,r2
10012c50:	0100bef4 	movhi	r4,763
10012c54:	213c2004 	addi	r4,r4,-3968
10012c58:	00045380 	call	10004538 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10012c5c:	100b883a 	mov	r5,r2
10012c60:	01200034 	movhi	r4,32768
10012c64:	213fffc4 	addi	r4,r4,-1
10012c68:	00045380 	call	10004538 <__udivsi3>
10012c6c:	100b883a 	mov	r5,r2
10012c70:	e13fff17 	ldw	r4,-4(fp)
10012c74:	00045380 	call	10004538 <__udivsi3>
10012c78:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10012c7c:	e0bffe17 	ldw	r2,-8(fp)
10012c80:	10002a26 	beq	r2,zero,10012d2c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10012c84:	e03ffc15 	stw	zero,-16(fp)
10012c88:	00001706 	br	10012ce8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10012c8c:	00a00034 	movhi	r2,32768
10012c90:	10bfffc4 	addi	r2,r2,-1
10012c94:	10bfffc4 	addi	r2,r2,-1
10012c98:	103ffe1e 	bne	r2,zero,10012c94 <__alt_data_end+0xf8012c94>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10012c9c:	014003f4 	movhi	r5,15
10012ca0:	29509004 	addi	r5,r5,16960
10012ca4:	e13ffd17 	ldw	r4,-12(fp)
10012ca8:	00052a00 	call	100052a0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10012cac:	100b883a 	mov	r5,r2
10012cb0:	0100bef4 	movhi	r4,763
10012cb4:	213c2004 	addi	r4,r4,-3968
10012cb8:	00045380 	call	10004538 <__udivsi3>
10012cbc:	100b883a 	mov	r5,r2
10012cc0:	01200034 	movhi	r4,32768
10012cc4:	213fffc4 	addi	r4,r4,-1
10012cc8:	00045380 	call	10004538 <__udivsi3>
10012ccc:	1007883a 	mov	r3,r2
10012cd0:	e0bfff17 	ldw	r2,-4(fp)
10012cd4:	10c5c83a 	sub	r2,r2,r3
10012cd8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10012cdc:	e0bffc17 	ldw	r2,-16(fp)
10012ce0:	10800044 	addi	r2,r2,1
10012ce4:	e0bffc15 	stw	r2,-16(fp)
10012ce8:	e0fffc17 	ldw	r3,-16(fp)
10012cec:	e0bffe17 	ldw	r2,-8(fp)
10012cf0:	18bfe616 	blt	r3,r2,10012c8c <__alt_data_end+0xf8012c8c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10012cf4:	014003f4 	movhi	r5,15
10012cf8:	29509004 	addi	r5,r5,16960
10012cfc:	e13ffd17 	ldw	r4,-12(fp)
10012d00:	00052a00 	call	100052a0 <__mulsi3>
10012d04:	100b883a 	mov	r5,r2
10012d08:	0100bef4 	movhi	r4,763
10012d0c:	213c2004 	addi	r4,r4,-3968
10012d10:	00045380 	call	10004538 <__udivsi3>
10012d14:	e17fff17 	ldw	r5,-4(fp)
10012d18:	1009883a 	mov	r4,r2
10012d1c:	00052a00 	call	100052a0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012d20:	10bfffc4 	addi	r2,r2,-1
10012d24:	103ffe1e 	bne	r2,zero,10012d20 <__alt_data_end+0xf8012d20>
10012d28:	00000d06 	br	10012d60 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10012d2c:	014003f4 	movhi	r5,15
10012d30:	29509004 	addi	r5,r5,16960
10012d34:	e13ffd17 	ldw	r4,-12(fp)
10012d38:	00052a00 	call	100052a0 <__mulsi3>
10012d3c:	100b883a 	mov	r5,r2
10012d40:	0100bef4 	movhi	r4,763
10012d44:	213c2004 	addi	r4,r4,-3968
10012d48:	00045380 	call	10004538 <__udivsi3>
10012d4c:	e17fff17 	ldw	r5,-4(fp)
10012d50:	1009883a 	mov	r4,r2
10012d54:	00052a00 	call	100052a0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012d58:	10bfffc4 	addi	r2,r2,-1
10012d5c:	00bffe16 	blt	zero,r2,10012d58 <__alt_data_end+0xf8012d58>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10012d60:	0005883a 	mov	r2,zero
}
10012d64:	e037883a 	mov	sp,fp
10012d68:	dfc00117 	ldw	ra,4(sp)
10012d6c:	df000017 	ldw	fp,0(sp)
10012d70:	dec00204 	addi	sp,sp,8
10012d74:	f800283a 	ret

10012d78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10012d78:	deffff04 	addi	sp,sp,-4
10012d7c:	df000015 	stw	fp,0(sp)
10012d80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10012d84:	0001883a 	nop
10012d88:	e037883a 	mov	sp,fp
10012d8c:	df000017 	ldw	fp,0(sp)
10012d90:	dec00104 	addi	sp,sp,4
10012d94:	f800283a 	ret

10012d98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012d98:	defffe04 	addi	sp,sp,-8
10012d9c:	dfc00115 	stw	ra,4(sp)
10012da0:	df000015 	stw	fp,0(sp)
10012da4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012da8:	d0a00c17 	ldw	r2,-32720(gp)
10012dac:	10000326 	beq	r2,zero,10012dbc <alt_get_errno+0x24>
10012db0:	d0a00c17 	ldw	r2,-32720(gp)
10012db4:	103ee83a 	callr	r2
10012db8:	00000106 	br	10012dc0 <alt_get_errno+0x28>
10012dbc:	d0a6e004 	addi	r2,gp,-25728
}
10012dc0:	e037883a 	mov	sp,fp
10012dc4:	dfc00117 	ldw	ra,4(sp)
10012dc8:	df000017 	ldw	fp,0(sp)
10012dcc:	dec00204 	addi	sp,sp,8
10012dd0:	f800283a 	ret

10012dd4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10012dd4:	defffa04 	addi	sp,sp,-24
10012dd8:	dfc00515 	stw	ra,20(sp)
10012ddc:	df000415 	stw	fp,16(sp)
10012de0:	df000404 	addi	fp,sp,16
10012de4:	e13ffe15 	stw	r4,-8(fp)
10012de8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10012dec:	e0bffe17 	ldw	r2,-8(fp)
10012df0:	10000326 	beq	r2,zero,10012e00 <alt_dev_llist_insert+0x2c>
10012df4:	e0bffe17 	ldw	r2,-8(fp)
10012df8:	10800217 	ldw	r2,8(r2)
10012dfc:	1000061e 	bne	r2,zero,10012e18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10012e00:	0012d980 	call	10012d98 <alt_get_errno>
10012e04:	1007883a 	mov	r3,r2
10012e08:	00800584 	movi	r2,22
10012e0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10012e10:	00bffa84 	movi	r2,-22
10012e14:	00001306 	br	10012e64 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10012e18:	e0bffe17 	ldw	r2,-8(fp)
10012e1c:	e0ffff17 	ldw	r3,-4(fp)
10012e20:	e0fffc15 	stw	r3,-16(fp)
10012e24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012e28:	e0bffd17 	ldw	r2,-12(fp)
10012e2c:	e0fffc17 	ldw	r3,-16(fp)
10012e30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012e34:	e0bffc17 	ldw	r2,-16(fp)
10012e38:	10c00017 	ldw	r3,0(r2)
10012e3c:	e0bffd17 	ldw	r2,-12(fp)
10012e40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012e44:	e0bffc17 	ldw	r2,-16(fp)
10012e48:	10800017 	ldw	r2,0(r2)
10012e4c:	e0fffd17 	ldw	r3,-12(fp)
10012e50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012e54:	e0bffc17 	ldw	r2,-16(fp)
10012e58:	e0fffd17 	ldw	r3,-12(fp)
10012e5c:	10c00015 	stw	r3,0(r2)

  return 0;  
10012e60:	0005883a 	mov	r2,zero
}
10012e64:	e037883a 	mov	sp,fp
10012e68:	dfc00117 	ldw	ra,4(sp)
10012e6c:	df000017 	ldw	fp,0(sp)
10012e70:	dec00204 	addi	sp,sp,8
10012e74:	f800283a 	ret

10012e78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10012e78:	defffd04 	addi	sp,sp,-12
10012e7c:	dfc00215 	stw	ra,8(sp)
10012e80:	df000115 	stw	fp,4(sp)
10012e84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10012e88:	00840074 	movhi	r2,4097
10012e8c:	108f8b04 	addi	r2,r2,15916
10012e90:	e0bfff15 	stw	r2,-4(fp)
10012e94:	00000606 	br	10012eb0 <_do_ctors+0x38>
        (*ctor) (); 
10012e98:	e0bfff17 	ldw	r2,-4(fp)
10012e9c:	10800017 	ldw	r2,0(r2)
10012ea0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10012ea4:	e0bfff17 	ldw	r2,-4(fp)
10012ea8:	10bfff04 	addi	r2,r2,-4
10012eac:	e0bfff15 	stw	r2,-4(fp)
10012eb0:	e0ffff17 	ldw	r3,-4(fp)
10012eb4:	00840074 	movhi	r2,4097
10012eb8:	108f8c04 	addi	r2,r2,15920
10012ebc:	18bff62e 	bgeu	r3,r2,10012e98 <__alt_data_end+0xf8012e98>
        (*ctor) (); 
}
10012ec0:	0001883a 	nop
10012ec4:	e037883a 	mov	sp,fp
10012ec8:	dfc00117 	ldw	ra,4(sp)
10012ecc:	df000017 	ldw	fp,0(sp)
10012ed0:	dec00204 	addi	sp,sp,8
10012ed4:	f800283a 	ret

10012ed8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10012ed8:	defffd04 	addi	sp,sp,-12
10012edc:	dfc00215 	stw	ra,8(sp)
10012ee0:	df000115 	stw	fp,4(sp)
10012ee4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10012ee8:	00840074 	movhi	r2,4097
10012eec:	108f8b04 	addi	r2,r2,15916
10012ef0:	e0bfff15 	stw	r2,-4(fp)
10012ef4:	00000606 	br	10012f10 <_do_dtors+0x38>
        (*dtor) (); 
10012ef8:	e0bfff17 	ldw	r2,-4(fp)
10012efc:	10800017 	ldw	r2,0(r2)
10012f00:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10012f04:	e0bfff17 	ldw	r2,-4(fp)
10012f08:	10bfff04 	addi	r2,r2,-4
10012f0c:	e0bfff15 	stw	r2,-4(fp)
10012f10:	e0ffff17 	ldw	r3,-4(fp)
10012f14:	00840074 	movhi	r2,4097
10012f18:	108f8c04 	addi	r2,r2,15920
10012f1c:	18bff62e 	bgeu	r3,r2,10012ef8 <__alt_data_end+0xf8012ef8>
        (*dtor) (); 
}
10012f20:	0001883a 	nop
10012f24:	e037883a 	mov	sp,fp
10012f28:	dfc00117 	ldw	ra,4(sp)
10012f2c:	df000017 	ldw	fp,0(sp)
10012f30:	dec00204 	addi	sp,sp,8
10012f34:	f800283a 	ret

10012f38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10012f38:	deffff04 	addi	sp,sp,-4
10012f3c:	df000015 	stw	fp,0(sp)
10012f40:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10012f44:	0001883a 	nop
10012f48:	e037883a 	mov	sp,fp
10012f4c:	df000017 	ldw	fp,0(sp)
10012f50:	dec00104 	addi	sp,sp,4
10012f54:	f800283a 	ret

10012f58 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10012f58:	defff904 	addi	sp,sp,-28
10012f5c:	dfc00615 	stw	ra,24(sp)
10012f60:	df000515 	stw	fp,20(sp)
10012f64:	df000504 	addi	fp,sp,20
10012f68:	e13ffc15 	stw	r4,-16(fp)
10012f6c:	e17ffd15 	stw	r5,-12(fp)
10012f70:	e1bffe15 	stw	r6,-8(fp)
10012f74:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10012f78:	e0800217 	ldw	r2,8(fp)
10012f7c:	d8800015 	stw	r2,0(sp)
10012f80:	e1ffff17 	ldw	r7,-4(fp)
10012f84:	e1bffe17 	ldw	r6,-8(fp)
10012f88:	e17ffd17 	ldw	r5,-12(fp)
10012f8c:	e13ffc17 	ldw	r4,-16(fp)
10012f90:	00131080 	call	10013108 <alt_iic_isr_register>
}  
10012f94:	e037883a 	mov	sp,fp
10012f98:	dfc00117 	ldw	ra,4(sp)
10012f9c:	df000017 	ldw	fp,0(sp)
10012fa0:	dec00204 	addi	sp,sp,8
10012fa4:	f800283a 	ret

10012fa8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10012fa8:	defff904 	addi	sp,sp,-28
10012fac:	df000615 	stw	fp,24(sp)
10012fb0:	df000604 	addi	fp,sp,24
10012fb4:	e13ffe15 	stw	r4,-8(fp)
10012fb8:	e17fff15 	stw	r5,-4(fp)
10012fbc:	e0bfff17 	ldw	r2,-4(fp)
10012fc0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012fc4:	0005303a 	rdctl	r2,status
10012fc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012fcc:	e0fffb17 	ldw	r3,-20(fp)
10012fd0:	00bfff84 	movi	r2,-2
10012fd4:	1884703a 	and	r2,r3,r2
10012fd8:	1001703a 	wrctl	status,r2
  
  return context;
10012fdc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012fe0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10012fe4:	00c00044 	movi	r3,1
10012fe8:	e0bffa17 	ldw	r2,-24(fp)
10012fec:	1884983a 	sll	r2,r3,r2
10012ff0:	1007883a 	mov	r3,r2
10012ff4:	d0a6e417 	ldw	r2,-25712(gp)
10012ff8:	1884b03a 	or	r2,r3,r2
10012ffc:	d0a6e415 	stw	r2,-25712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013000:	d0a6e417 	ldw	r2,-25712(gp)
10013004:	100170fa 	wrctl	ienable,r2
10013008:	e0bffc17 	ldw	r2,-16(fp)
1001300c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013010:	e0bffd17 	ldw	r2,-12(fp)
10013014:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013018:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001301c:	0001883a 	nop
}
10013020:	e037883a 	mov	sp,fp
10013024:	df000017 	ldw	fp,0(sp)
10013028:	dec00104 	addi	sp,sp,4
1001302c:	f800283a 	ret

10013030 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10013030:	defff904 	addi	sp,sp,-28
10013034:	df000615 	stw	fp,24(sp)
10013038:	df000604 	addi	fp,sp,24
1001303c:	e13ffe15 	stw	r4,-8(fp)
10013040:	e17fff15 	stw	r5,-4(fp)
10013044:	e0bfff17 	ldw	r2,-4(fp)
10013048:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001304c:	0005303a 	rdctl	r2,status
10013050:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013054:	e0fffb17 	ldw	r3,-20(fp)
10013058:	00bfff84 	movi	r2,-2
1001305c:	1884703a 	and	r2,r3,r2
10013060:	1001703a 	wrctl	status,r2
  
  return context;
10013064:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013068:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1001306c:	00c00044 	movi	r3,1
10013070:	e0bffa17 	ldw	r2,-24(fp)
10013074:	1884983a 	sll	r2,r3,r2
10013078:	0084303a 	nor	r2,zero,r2
1001307c:	1007883a 	mov	r3,r2
10013080:	d0a6e417 	ldw	r2,-25712(gp)
10013084:	1884703a 	and	r2,r3,r2
10013088:	d0a6e415 	stw	r2,-25712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001308c:	d0a6e417 	ldw	r2,-25712(gp)
10013090:	100170fa 	wrctl	ienable,r2
10013094:	e0bffc17 	ldw	r2,-16(fp)
10013098:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001309c:	e0bffd17 	ldw	r2,-12(fp)
100130a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100130a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100130a8:	0001883a 	nop
}
100130ac:	e037883a 	mov	sp,fp
100130b0:	df000017 	ldw	fp,0(sp)
100130b4:	dec00104 	addi	sp,sp,4
100130b8:	f800283a 	ret

100130bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100130bc:	defffc04 	addi	sp,sp,-16
100130c0:	df000315 	stw	fp,12(sp)
100130c4:	df000304 	addi	fp,sp,12
100130c8:	e13ffe15 	stw	r4,-8(fp)
100130cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100130d0:	000530fa 	rdctl	r2,ienable
100130d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100130d8:	00c00044 	movi	r3,1
100130dc:	e0bfff17 	ldw	r2,-4(fp)
100130e0:	1884983a 	sll	r2,r3,r2
100130e4:	1007883a 	mov	r3,r2
100130e8:	e0bffd17 	ldw	r2,-12(fp)
100130ec:	1884703a 	and	r2,r3,r2
100130f0:	1004c03a 	cmpne	r2,r2,zero
100130f4:	10803fcc 	andi	r2,r2,255
}
100130f8:	e037883a 	mov	sp,fp
100130fc:	df000017 	ldw	fp,0(sp)
10013100:	dec00104 	addi	sp,sp,4
10013104:	f800283a 	ret

10013108 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013108:	defff504 	addi	sp,sp,-44
1001310c:	dfc00a15 	stw	ra,40(sp)
10013110:	df000915 	stw	fp,36(sp)
10013114:	df000904 	addi	fp,sp,36
10013118:	e13ffc15 	stw	r4,-16(fp)
1001311c:	e17ffd15 	stw	r5,-12(fp)
10013120:	e1bffe15 	stw	r6,-8(fp)
10013124:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10013128:	00bffa84 	movi	r2,-22
1001312c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10013130:	e0bffd17 	ldw	r2,-12(fp)
10013134:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10013138:	e0bff817 	ldw	r2,-32(fp)
1001313c:	10800808 	cmpgei	r2,r2,32
10013140:	1000271e 	bne	r2,zero,100131e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013144:	0005303a 	rdctl	r2,status
10013148:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001314c:	e0fffb17 	ldw	r3,-20(fp)
10013150:	00bfff84 	movi	r2,-2
10013154:	1884703a 	and	r2,r3,r2
10013158:	1001703a 	wrctl	status,r2
  
  return context;
1001315c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10013160:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10013164:	00840074 	movhi	r2,4097
10013168:	109fc104 	addi	r2,r2,32516
1001316c:	e0fff817 	ldw	r3,-32(fp)
10013170:	180690fa 	slli	r3,r3,3
10013174:	10c5883a 	add	r2,r2,r3
10013178:	e0fffe17 	ldw	r3,-8(fp)
1001317c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10013180:	00840074 	movhi	r2,4097
10013184:	109fc104 	addi	r2,r2,32516
10013188:	e0fff817 	ldw	r3,-32(fp)
1001318c:	180690fa 	slli	r3,r3,3
10013190:	10c5883a 	add	r2,r2,r3
10013194:	10800104 	addi	r2,r2,4
10013198:	e0ffff17 	ldw	r3,-4(fp)
1001319c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100131a0:	e0bffe17 	ldw	r2,-8(fp)
100131a4:	10000526 	beq	r2,zero,100131bc <alt_iic_isr_register+0xb4>
100131a8:	e0bff817 	ldw	r2,-32(fp)
100131ac:	100b883a 	mov	r5,r2
100131b0:	e13ffc17 	ldw	r4,-16(fp)
100131b4:	0012fa80 	call	10012fa8 <alt_ic_irq_enable>
100131b8:	00000406 	br	100131cc <alt_iic_isr_register+0xc4>
100131bc:	e0bff817 	ldw	r2,-32(fp)
100131c0:	100b883a 	mov	r5,r2
100131c4:	e13ffc17 	ldw	r4,-16(fp)
100131c8:	00130300 	call	10013030 <alt_ic_irq_disable>
100131cc:	e0bff715 	stw	r2,-36(fp)
100131d0:	e0bffa17 	ldw	r2,-24(fp)
100131d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100131d8:	e0bff917 	ldw	r2,-28(fp)
100131dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100131e0:	e0bff717 	ldw	r2,-36(fp)
}
100131e4:	e037883a 	mov	sp,fp
100131e8:	dfc00117 	ldw	ra,4(sp)
100131ec:	df000017 	ldw	fp,0(sp)
100131f0:	dec00204 	addi	sp,sp,8
100131f4:	f800283a 	ret

100131f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100131f8:	defff804 	addi	sp,sp,-32
100131fc:	dfc00715 	stw	ra,28(sp)
10013200:	df000615 	stw	fp,24(sp)
10013204:	dc000515 	stw	r16,20(sp)
10013208:	df000604 	addi	fp,sp,24
1001320c:	e13ffb15 	stw	r4,-20(fp)
10013210:	e17ffc15 	stw	r5,-16(fp)
10013214:	e1bffd15 	stw	r6,-12(fp)
10013218:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1001321c:	e1bffe17 	ldw	r6,-8(fp)
10013220:	e17ffd17 	ldw	r5,-12(fp)
10013224:	e13ffc17 	ldw	r4,-16(fp)
10013228:	00134800 	call	10013480 <open>
1001322c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10013230:	e0bffa17 	ldw	r2,-24(fp)
10013234:	10002216 	blt	r2,zero,100132c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10013238:	04040074 	movhi	r16,4097
1001323c:	84145704 	addi	r16,r16,20828
10013240:	e0bffa17 	ldw	r2,-24(fp)
10013244:	01400304 	movi	r5,12
10013248:	1009883a 	mov	r4,r2
1001324c:	00052a00 	call	100052a0 <__mulsi3>
10013250:	8085883a 	add	r2,r16,r2
10013254:	10c00017 	ldw	r3,0(r2)
10013258:	e0bffb17 	ldw	r2,-20(fp)
1001325c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10013260:	04040074 	movhi	r16,4097
10013264:	84145704 	addi	r16,r16,20828
10013268:	e0bffa17 	ldw	r2,-24(fp)
1001326c:	01400304 	movi	r5,12
10013270:	1009883a 	mov	r4,r2
10013274:	00052a00 	call	100052a0 <__mulsi3>
10013278:	8085883a 	add	r2,r16,r2
1001327c:	10800104 	addi	r2,r2,4
10013280:	10c00017 	ldw	r3,0(r2)
10013284:	e0bffb17 	ldw	r2,-20(fp)
10013288:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1001328c:	04040074 	movhi	r16,4097
10013290:	84145704 	addi	r16,r16,20828
10013294:	e0bffa17 	ldw	r2,-24(fp)
10013298:	01400304 	movi	r5,12
1001329c:	1009883a 	mov	r4,r2
100132a0:	00052a00 	call	100052a0 <__mulsi3>
100132a4:	8085883a 	add	r2,r16,r2
100132a8:	10800204 	addi	r2,r2,8
100132ac:	10c00017 	ldw	r3,0(r2)
100132b0:	e0bffb17 	ldw	r2,-20(fp)
100132b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100132b8:	e13ffa17 	ldw	r4,-24(fp)
100132bc:	0011c800 	call	10011c80 <alt_release_fd>
  }
} 
100132c0:	0001883a 	nop
100132c4:	e6ffff04 	addi	sp,fp,-4
100132c8:	dfc00217 	ldw	ra,8(sp)
100132cc:	df000117 	ldw	fp,4(sp)
100132d0:	dc000017 	ldw	r16,0(sp)
100132d4:	dec00304 	addi	sp,sp,12
100132d8:	f800283a 	ret

100132dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100132dc:	defffb04 	addi	sp,sp,-20
100132e0:	dfc00415 	stw	ra,16(sp)
100132e4:	df000315 	stw	fp,12(sp)
100132e8:	df000304 	addi	fp,sp,12
100132ec:	e13ffd15 	stw	r4,-12(fp)
100132f0:	e17ffe15 	stw	r5,-8(fp)
100132f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100132f8:	01c07fc4 	movi	r7,511
100132fc:	01800044 	movi	r6,1
10013300:	e17ffd17 	ldw	r5,-12(fp)
10013304:	01040074 	movhi	r4,4097
10013308:	21145a04 	addi	r4,r4,20840
1001330c:	00131f80 	call	100131f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013310:	01c07fc4 	movi	r7,511
10013314:	000d883a 	mov	r6,zero
10013318:	e17ffe17 	ldw	r5,-8(fp)
1001331c:	01040074 	movhi	r4,4097
10013320:	21145704 	addi	r4,r4,20828
10013324:	00131f80 	call	100131f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013328:	01c07fc4 	movi	r7,511
1001332c:	01800044 	movi	r6,1
10013330:	e17fff17 	ldw	r5,-4(fp)
10013334:	01040074 	movhi	r4,4097
10013338:	21145d04 	addi	r4,r4,20852
1001333c:	00131f80 	call	100131f8 <alt_open_fd>
}  
10013340:	0001883a 	nop
10013344:	e037883a 	mov	sp,fp
10013348:	dfc00117 	ldw	ra,4(sp)
1001334c:	df000017 	ldw	fp,0(sp)
10013350:	dec00204 	addi	sp,sp,8
10013354:	f800283a 	ret

10013358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013358:	defffe04 	addi	sp,sp,-8
1001335c:	dfc00115 	stw	ra,4(sp)
10013360:	df000015 	stw	fp,0(sp)
10013364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013368:	d0a00c17 	ldw	r2,-32720(gp)
1001336c:	10000326 	beq	r2,zero,1001337c <alt_get_errno+0x24>
10013370:	d0a00c17 	ldw	r2,-32720(gp)
10013374:	103ee83a 	callr	r2
10013378:	00000106 	br	10013380 <alt_get_errno+0x28>
1001337c:	d0a6e004 	addi	r2,gp,-25728
}
10013380:	e037883a 	mov	sp,fp
10013384:	dfc00117 	ldw	ra,4(sp)
10013388:	df000017 	ldw	fp,0(sp)
1001338c:	dec00204 	addi	sp,sp,8
10013390:	f800283a 	ret

10013394 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013394:	defffb04 	addi	sp,sp,-20
10013398:	dfc00415 	stw	ra,16(sp)
1001339c:	df000315 	stw	fp,12(sp)
100133a0:	dc000215 	stw	r16,8(sp)
100133a4:	df000304 	addi	fp,sp,12
100133a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100133ac:	e0bffe17 	ldw	r2,-8(fp)
100133b0:	10800217 	ldw	r2,8(r2)
100133b4:	10d00034 	orhi	r3,r2,16384
100133b8:	e0bffe17 	ldw	r2,-8(fp)
100133bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100133c0:	e03ffd15 	stw	zero,-12(fp)
100133c4:	00002306 	br	10013454 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100133c8:	04040074 	movhi	r16,4097
100133cc:	84145704 	addi	r16,r16,20828
100133d0:	e0bffd17 	ldw	r2,-12(fp)
100133d4:	01400304 	movi	r5,12
100133d8:	1009883a 	mov	r4,r2
100133dc:	00052a00 	call	100052a0 <__mulsi3>
100133e0:	8085883a 	add	r2,r16,r2
100133e4:	10c00017 	ldw	r3,0(r2)
100133e8:	e0bffe17 	ldw	r2,-8(fp)
100133ec:	10800017 	ldw	r2,0(r2)
100133f0:	1880151e 	bne	r3,r2,10013448 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100133f4:	04040074 	movhi	r16,4097
100133f8:	84145704 	addi	r16,r16,20828
100133fc:	e0bffd17 	ldw	r2,-12(fp)
10013400:	01400304 	movi	r5,12
10013404:	1009883a 	mov	r4,r2
10013408:	00052a00 	call	100052a0 <__mulsi3>
1001340c:	8085883a 	add	r2,r16,r2
10013410:	10800204 	addi	r2,r2,8
10013414:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013418:	10000b0e 	bge	r2,zero,10013448 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1001341c:	01400304 	movi	r5,12
10013420:	e13ffd17 	ldw	r4,-12(fp)
10013424:	00052a00 	call	100052a0 <__mulsi3>
10013428:	1007883a 	mov	r3,r2
1001342c:	00840074 	movhi	r2,4097
10013430:	10945704 	addi	r2,r2,20828
10013434:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013438:	e0bffe17 	ldw	r2,-8(fp)
1001343c:	18800226 	beq	r3,r2,10013448 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013440:	00bffcc4 	movi	r2,-13
10013444:	00000806 	br	10013468 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013448:	e0bffd17 	ldw	r2,-12(fp)
1001344c:	10800044 	addi	r2,r2,1
10013450:	e0bffd15 	stw	r2,-12(fp)
10013454:	d0a00b17 	ldw	r2,-32724(gp)
10013458:	1007883a 	mov	r3,r2
1001345c:	e0bffd17 	ldw	r2,-12(fp)
10013460:	18bfd92e 	bgeu	r3,r2,100133c8 <__alt_data_end+0xf80133c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10013464:	0005883a 	mov	r2,zero
}
10013468:	e6ffff04 	addi	sp,fp,-4
1001346c:	dfc00217 	ldw	ra,8(sp)
10013470:	df000117 	ldw	fp,4(sp)
10013474:	dc000017 	ldw	r16,0(sp)
10013478:	dec00304 	addi	sp,sp,12
1001347c:	f800283a 	ret

10013480 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013480:	defff604 	addi	sp,sp,-40
10013484:	dfc00915 	stw	ra,36(sp)
10013488:	df000815 	stw	fp,32(sp)
1001348c:	df000804 	addi	fp,sp,32
10013490:	e13ffd15 	stw	r4,-12(fp)
10013494:	e17ffe15 	stw	r5,-8(fp)
10013498:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001349c:	00bfffc4 	movi	r2,-1
100134a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100134a4:	00bffb44 	movi	r2,-19
100134a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100134ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100134b0:	d1600904 	addi	r5,gp,-32732
100134b4:	e13ffd17 	ldw	r4,-12(fp)
100134b8:	00137a40 	call	100137a4 <alt_find_dev>
100134bc:	e0bff815 	stw	r2,-32(fp)
100134c0:	e0bff817 	ldw	r2,-32(fp)
100134c4:	1000051e 	bne	r2,zero,100134dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100134c8:	e13ffd17 	ldw	r4,-12(fp)
100134cc:	00138340 	call	10013834 <alt_find_file>
100134d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100134d4:	00800044 	movi	r2,1
100134d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100134dc:	e0bff817 	ldw	r2,-32(fp)
100134e0:	10002b26 	beq	r2,zero,10013590 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
100134e4:	e13ff817 	ldw	r4,-32(fp)
100134e8:	001393c0 	call	1001393c <alt_get_fd>
100134ec:	e0bff915 	stw	r2,-28(fp)
100134f0:	e0bff917 	ldw	r2,-28(fp)
100134f4:	1000030e 	bge	r2,zero,10013504 <open+0x84>
    {
      status = index;
100134f8:	e0bff917 	ldw	r2,-28(fp)
100134fc:	e0bffa15 	stw	r2,-24(fp)
10013500:	00002506 	br	10013598 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10013504:	01400304 	movi	r5,12
10013508:	e13ff917 	ldw	r4,-28(fp)
1001350c:	00052a00 	call	100052a0 <__mulsi3>
10013510:	1007883a 	mov	r3,r2
10013514:	00840074 	movhi	r2,4097
10013518:	10945704 	addi	r2,r2,20828
1001351c:	1885883a 	add	r2,r3,r2
10013520:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013524:	e0fffe17 	ldw	r3,-8(fp)
10013528:	00900034 	movhi	r2,16384
1001352c:	10bfffc4 	addi	r2,r2,-1
10013530:	1886703a 	and	r3,r3,r2
10013534:	e0bffc17 	ldw	r2,-16(fp)
10013538:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1001353c:	e0bffb17 	ldw	r2,-20(fp)
10013540:	1000051e 	bne	r2,zero,10013558 <open+0xd8>
10013544:	e13ffc17 	ldw	r4,-16(fp)
10013548:	00133940 	call	10013394 <alt_file_locked>
1001354c:	e0bffa15 	stw	r2,-24(fp)
10013550:	e0bffa17 	ldw	r2,-24(fp)
10013554:	10001016 	blt	r2,zero,10013598 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013558:	e0bff817 	ldw	r2,-32(fp)
1001355c:	10800317 	ldw	r2,12(r2)
10013560:	10000826 	beq	r2,zero,10013584 <open+0x104>
10013564:	e0bff817 	ldw	r2,-32(fp)
10013568:	10800317 	ldw	r2,12(r2)
1001356c:	e1ffff17 	ldw	r7,-4(fp)
10013570:	e1bffe17 	ldw	r6,-8(fp)
10013574:	e17ffd17 	ldw	r5,-12(fp)
10013578:	e13ffc17 	ldw	r4,-16(fp)
1001357c:	103ee83a 	callr	r2
10013580:	00000106 	br	10013588 <open+0x108>
10013584:	0005883a 	mov	r2,zero
10013588:	e0bffa15 	stw	r2,-24(fp)
1001358c:	00000206 	br	10013598 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013590:	00bffb44 	movi	r2,-19
10013594:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013598:	e0bffa17 	ldw	r2,-24(fp)
1001359c:	1000090e 	bge	r2,zero,100135c4 <open+0x144>
  {
    alt_release_fd (index);  
100135a0:	e13ff917 	ldw	r4,-28(fp)
100135a4:	0011c800 	call	10011c80 <alt_release_fd>
    ALT_ERRNO = -status;
100135a8:	00133580 	call	10013358 <alt_get_errno>
100135ac:	1007883a 	mov	r3,r2
100135b0:	e0bffa17 	ldw	r2,-24(fp)
100135b4:	0085c83a 	sub	r2,zero,r2
100135b8:	18800015 	stw	r2,0(r3)
    return -1;
100135bc:	00bfffc4 	movi	r2,-1
100135c0:	00000106 	br	100135c8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100135c4:	e0bff917 	ldw	r2,-28(fp)
}
100135c8:	e037883a 	mov	sp,fp
100135cc:	dfc00117 	ldw	ra,4(sp)
100135d0:	df000017 	ldw	fp,0(sp)
100135d4:	dec00204 	addi	sp,sp,8
100135d8:	f800283a 	ret

100135dc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100135dc:	defffa04 	addi	sp,sp,-24
100135e0:	df000515 	stw	fp,20(sp)
100135e4:	df000504 	addi	fp,sp,20
100135e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100135ec:	0005303a 	rdctl	r2,status
100135f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100135f4:	e0fffc17 	ldw	r3,-16(fp)
100135f8:	00bfff84 	movi	r2,-2
100135fc:	1884703a 	and	r2,r3,r2
10013600:	1001703a 	wrctl	status,r2
  
  return context;
10013604:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013608:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1001360c:	e0bfff17 	ldw	r2,-4(fp)
10013610:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013614:	e0bffd17 	ldw	r2,-12(fp)
10013618:	10800017 	ldw	r2,0(r2)
1001361c:	e0fffd17 	ldw	r3,-12(fp)
10013620:	18c00117 	ldw	r3,4(r3)
10013624:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013628:	e0bffd17 	ldw	r2,-12(fp)
1001362c:	10800117 	ldw	r2,4(r2)
10013630:	e0fffd17 	ldw	r3,-12(fp)
10013634:	18c00017 	ldw	r3,0(r3)
10013638:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1001363c:	e0bffd17 	ldw	r2,-12(fp)
10013640:	e0fffd17 	ldw	r3,-12(fp)
10013644:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013648:	e0bffd17 	ldw	r2,-12(fp)
1001364c:	e0fffd17 	ldw	r3,-12(fp)
10013650:	10c00015 	stw	r3,0(r2)
10013654:	e0bffb17 	ldw	r2,-20(fp)
10013658:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001365c:	e0bffe17 	ldw	r2,-8(fp)
10013660:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10013664:	0001883a 	nop
10013668:	e037883a 	mov	sp,fp
1001366c:	df000017 	ldw	fp,0(sp)
10013670:	dec00104 	addi	sp,sp,4
10013674:	f800283a 	ret

10013678 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013678:	defffb04 	addi	sp,sp,-20
1001367c:	dfc00415 	stw	ra,16(sp)
10013680:	df000315 	stw	fp,12(sp)
10013684:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013688:	d0a00f17 	ldw	r2,-32708(gp)
1001368c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013690:	d0a6e617 	ldw	r2,-25704(gp)
10013694:	10800044 	addi	r2,r2,1
10013698:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001369c:	00002e06 	br	10013758 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100136a0:	e0bffd17 	ldw	r2,-12(fp)
100136a4:	10800017 	ldw	r2,0(r2)
100136a8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100136ac:	e0bffd17 	ldw	r2,-12(fp)
100136b0:	10800403 	ldbu	r2,16(r2)
100136b4:	10803fcc 	andi	r2,r2,255
100136b8:	10000426 	beq	r2,zero,100136cc <alt_tick+0x54>
100136bc:	d0a6e617 	ldw	r2,-25704(gp)
100136c0:	1000021e 	bne	r2,zero,100136cc <alt_tick+0x54>
    {
      alarm->rollover = 0;
100136c4:	e0bffd17 	ldw	r2,-12(fp)
100136c8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100136cc:	e0bffd17 	ldw	r2,-12(fp)
100136d0:	10800217 	ldw	r2,8(r2)
100136d4:	d0e6e617 	ldw	r3,-25704(gp)
100136d8:	18801d36 	bltu	r3,r2,10013750 <alt_tick+0xd8>
100136dc:	e0bffd17 	ldw	r2,-12(fp)
100136e0:	10800403 	ldbu	r2,16(r2)
100136e4:	10803fcc 	andi	r2,r2,255
100136e8:	1000191e 	bne	r2,zero,10013750 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100136ec:	e0bffd17 	ldw	r2,-12(fp)
100136f0:	10800317 	ldw	r2,12(r2)
100136f4:	e0fffd17 	ldw	r3,-12(fp)
100136f8:	18c00517 	ldw	r3,20(r3)
100136fc:	1809883a 	mov	r4,r3
10013700:	103ee83a 	callr	r2
10013704:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013708:	e0bfff17 	ldw	r2,-4(fp)
1001370c:	1000031e 	bne	r2,zero,1001371c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013710:	e13ffd17 	ldw	r4,-12(fp)
10013714:	00135dc0 	call	100135dc <alt_alarm_stop>
10013718:	00000d06 	br	10013750 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001371c:	e0bffd17 	ldw	r2,-12(fp)
10013720:	10c00217 	ldw	r3,8(r2)
10013724:	e0bfff17 	ldw	r2,-4(fp)
10013728:	1887883a 	add	r3,r3,r2
1001372c:	e0bffd17 	ldw	r2,-12(fp)
10013730:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013734:	e0bffd17 	ldw	r2,-12(fp)
10013738:	10c00217 	ldw	r3,8(r2)
1001373c:	d0a6e617 	ldw	r2,-25704(gp)
10013740:	1880032e 	bgeu	r3,r2,10013750 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013744:	e0bffd17 	ldw	r2,-12(fp)
10013748:	00c00044 	movi	r3,1
1001374c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013750:	e0bffe17 	ldw	r2,-8(fp)
10013754:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013758:	e0fffd17 	ldw	r3,-12(fp)
1001375c:	d0a00f04 	addi	r2,gp,-32708
10013760:	18bfcf1e 	bne	r3,r2,100136a0 <__alt_data_end+0xf80136a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10013764:	0001883a 	nop
}
10013768:	0001883a 	nop
1001376c:	e037883a 	mov	sp,fp
10013770:	dfc00117 	ldw	ra,4(sp)
10013774:	df000017 	ldw	fp,0(sp)
10013778:	dec00204 	addi	sp,sp,8
1001377c:	f800283a 	ret

10013780 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10013780:	deffff04 	addi	sp,sp,-4
10013784:	df000015 	stw	fp,0(sp)
10013788:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1001378c:	000170fa 	wrctl	ienable,zero
}
10013790:	0001883a 	nop
10013794:	e037883a 	mov	sp,fp
10013798:	df000017 	ldw	fp,0(sp)
1001379c:	dec00104 	addi	sp,sp,4
100137a0:	f800283a 	ret

100137a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100137a4:	defffa04 	addi	sp,sp,-24
100137a8:	dfc00515 	stw	ra,20(sp)
100137ac:	df000415 	stw	fp,16(sp)
100137b0:	df000404 	addi	fp,sp,16
100137b4:	e13ffe15 	stw	r4,-8(fp)
100137b8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100137bc:	e0bfff17 	ldw	r2,-4(fp)
100137c0:	10800017 	ldw	r2,0(r2)
100137c4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100137c8:	e13ffe17 	ldw	r4,-8(fp)
100137cc:	00054d00 	call	100054d0 <strlen>
100137d0:	10800044 	addi	r2,r2,1
100137d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100137d8:	00000d06 	br	10013810 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100137dc:	e0bffc17 	ldw	r2,-16(fp)
100137e0:	10800217 	ldw	r2,8(r2)
100137e4:	e0fffd17 	ldw	r3,-12(fp)
100137e8:	180d883a 	mov	r6,r3
100137ec:	e17ffe17 	ldw	r5,-8(fp)
100137f0:	1009883a 	mov	r4,r2
100137f4:	0013ae80 	call	10013ae8 <memcmp>
100137f8:	1000021e 	bne	r2,zero,10013804 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100137fc:	e0bffc17 	ldw	r2,-16(fp)
10013800:	00000706 	br	10013820 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013804:	e0bffc17 	ldw	r2,-16(fp)
10013808:	10800017 	ldw	r2,0(r2)
1001380c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013810:	e0fffc17 	ldw	r3,-16(fp)
10013814:	e0bfff17 	ldw	r2,-4(fp)
10013818:	18bff01e 	bne	r3,r2,100137dc <__alt_data_end+0xf80137dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1001381c:	0005883a 	mov	r2,zero
}
10013820:	e037883a 	mov	sp,fp
10013824:	dfc00117 	ldw	ra,4(sp)
10013828:	df000017 	ldw	fp,0(sp)
1001382c:	dec00204 	addi	sp,sp,8
10013830:	f800283a 	ret

10013834 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10013834:	defffb04 	addi	sp,sp,-20
10013838:	dfc00415 	stw	ra,16(sp)
1001383c:	df000315 	stw	fp,12(sp)
10013840:	df000304 	addi	fp,sp,12
10013844:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10013848:	d0a00717 	ldw	r2,-32740(gp)
1001384c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013850:	00003106 	br	10013918 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10013854:	e0bffd17 	ldw	r2,-12(fp)
10013858:	10800217 	ldw	r2,8(r2)
1001385c:	1009883a 	mov	r4,r2
10013860:	00054d00 	call	100054d0 <strlen>
10013864:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10013868:	e0bffd17 	ldw	r2,-12(fp)
1001386c:	10c00217 	ldw	r3,8(r2)
10013870:	e0bffe17 	ldw	r2,-8(fp)
10013874:	10bfffc4 	addi	r2,r2,-1
10013878:	1885883a 	add	r2,r3,r2
1001387c:	10800003 	ldbu	r2,0(r2)
10013880:	10803fcc 	andi	r2,r2,255
10013884:	1080201c 	xori	r2,r2,128
10013888:	10bfe004 	addi	r2,r2,-128
1001388c:	10800bd8 	cmpnei	r2,r2,47
10013890:	1000031e 	bne	r2,zero,100138a0 <alt_find_file+0x6c>
    {
      len -= 1;
10013894:	e0bffe17 	ldw	r2,-8(fp)
10013898:	10bfffc4 	addi	r2,r2,-1
1001389c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100138a0:	e0bffe17 	ldw	r2,-8(fp)
100138a4:	e0ffff17 	ldw	r3,-4(fp)
100138a8:	1885883a 	add	r2,r3,r2
100138ac:	10800003 	ldbu	r2,0(r2)
100138b0:	10803fcc 	andi	r2,r2,255
100138b4:	1080201c 	xori	r2,r2,128
100138b8:	10bfe004 	addi	r2,r2,-128
100138bc:	10800be0 	cmpeqi	r2,r2,47
100138c0:	1000081e 	bne	r2,zero,100138e4 <alt_find_file+0xb0>
100138c4:	e0bffe17 	ldw	r2,-8(fp)
100138c8:	e0ffff17 	ldw	r3,-4(fp)
100138cc:	1885883a 	add	r2,r3,r2
100138d0:	10800003 	ldbu	r2,0(r2)
100138d4:	10803fcc 	andi	r2,r2,255
100138d8:	1080201c 	xori	r2,r2,128
100138dc:	10bfe004 	addi	r2,r2,-128
100138e0:	10000a1e 	bne	r2,zero,1001390c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100138e4:	e0bffd17 	ldw	r2,-12(fp)
100138e8:	10800217 	ldw	r2,8(r2)
100138ec:	e0fffe17 	ldw	r3,-8(fp)
100138f0:	180d883a 	mov	r6,r3
100138f4:	e17fff17 	ldw	r5,-4(fp)
100138f8:	1009883a 	mov	r4,r2
100138fc:	0013ae80 	call	10013ae8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013900:	1000021e 	bne	r2,zero,1001390c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10013904:	e0bffd17 	ldw	r2,-12(fp)
10013908:	00000706 	br	10013928 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1001390c:	e0bffd17 	ldw	r2,-12(fp)
10013910:	10800017 	ldw	r2,0(r2)
10013914:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013918:	e0fffd17 	ldw	r3,-12(fp)
1001391c:	d0a00704 	addi	r2,gp,-32740
10013920:	18bfcc1e 	bne	r3,r2,10013854 <__alt_data_end+0xf8013854>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10013924:	0005883a 	mov	r2,zero
}
10013928:	e037883a 	mov	sp,fp
1001392c:	dfc00117 	ldw	ra,4(sp)
10013930:	df000017 	ldw	fp,0(sp)
10013934:	dec00204 	addi	sp,sp,8
10013938:	f800283a 	ret

1001393c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1001393c:	defffa04 	addi	sp,sp,-24
10013940:	dfc00515 	stw	ra,20(sp)
10013944:	df000415 	stw	fp,16(sp)
10013948:	dc000315 	stw	r16,12(sp)
1001394c:	df000404 	addi	fp,sp,16
10013950:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10013954:	00bffa04 	movi	r2,-24
10013958:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001395c:	e03ffc15 	stw	zero,-16(fp)
10013960:	00001d06 	br	100139d8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10013964:	04040074 	movhi	r16,4097
10013968:	84145704 	addi	r16,r16,20828
1001396c:	e0bffc17 	ldw	r2,-16(fp)
10013970:	01400304 	movi	r5,12
10013974:	1009883a 	mov	r4,r2
10013978:	00052a00 	call	100052a0 <__mulsi3>
1001397c:	8085883a 	add	r2,r16,r2
10013980:	10800017 	ldw	r2,0(r2)
10013984:	1000111e 	bne	r2,zero,100139cc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10013988:	04040074 	movhi	r16,4097
1001398c:	84145704 	addi	r16,r16,20828
10013990:	e0bffc17 	ldw	r2,-16(fp)
10013994:	01400304 	movi	r5,12
10013998:	1009883a 	mov	r4,r2
1001399c:	00052a00 	call	100052a0 <__mulsi3>
100139a0:	8085883a 	add	r2,r16,r2
100139a4:	e0fffe17 	ldw	r3,-8(fp)
100139a8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100139ac:	d0e00b17 	ldw	r3,-32724(gp)
100139b0:	e0bffc17 	ldw	r2,-16(fp)
100139b4:	1880020e 	bge	r3,r2,100139c0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
100139b8:	e0bffc17 	ldw	r2,-16(fp)
100139bc:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
100139c0:	e0bffc17 	ldw	r2,-16(fp)
100139c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100139c8:	00000606 	br	100139e4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100139cc:	e0bffc17 	ldw	r2,-16(fp)
100139d0:	10800044 	addi	r2,r2,1
100139d4:	e0bffc15 	stw	r2,-16(fp)
100139d8:	e0bffc17 	ldw	r2,-16(fp)
100139dc:	10800810 	cmplti	r2,r2,32
100139e0:	103fe01e 	bne	r2,zero,10013964 <__alt_data_end+0xf8013964>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100139e4:	e0bffd17 	ldw	r2,-12(fp)
}
100139e8:	e6ffff04 	addi	sp,fp,-4
100139ec:	dfc00217 	ldw	ra,8(sp)
100139f0:	df000117 	ldw	fp,4(sp)
100139f4:	dc000017 	ldw	r16,0(sp)
100139f8:	dec00304 	addi	sp,sp,12
100139fc:	f800283a 	ret

10013a00 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10013a00:	defffe04 	addi	sp,sp,-8
10013a04:	df000115 	stw	fp,4(sp)
10013a08:	df000104 	addi	fp,sp,4
10013a0c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10013a10:	e0bfff17 	ldw	r2,-4(fp)
10013a14:	10bffe84 	addi	r2,r2,-6
10013a18:	10c00428 	cmpgeui	r3,r2,16
10013a1c:	18001a1e 	bne	r3,zero,10013a88 <alt_exception_cause_generated_bad_addr+0x88>
10013a20:	100690ba 	slli	r3,r2,2
10013a24:	00840074 	movhi	r2,4097
10013a28:	108e8e04 	addi	r2,r2,14904
10013a2c:	1885883a 	add	r2,r3,r2
10013a30:	10800017 	ldw	r2,0(r2)
10013a34:	1000683a 	jmp	r2
10013a38:	10013a78 	rdprs	zero,r2,1257
10013a3c:	10013a78 	rdprs	zero,r2,1257
10013a40:	10013a88 	cmpgei	zero,r2,1258
10013a44:	10013a88 	cmpgei	zero,r2,1258
10013a48:	10013a88 	cmpgei	zero,r2,1258
10013a4c:	10013a78 	rdprs	zero,r2,1257
10013a50:	10013a80 	call	110013a8 <_gp+0xfe306c>
10013a54:	10013a88 	cmpgei	zero,r2,1258
10013a58:	10013a78 	rdprs	zero,r2,1257
10013a5c:	10013a78 	rdprs	zero,r2,1257
10013a60:	10013a88 	cmpgei	zero,r2,1258
10013a64:	10013a78 	rdprs	zero,r2,1257
10013a68:	10013a80 	call	110013a8 <_gp+0xfe306c>
10013a6c:	10013a88 	cmpgei	zero,r2,1258
10013a70:	10013a88 	cmpgei	zero,r2,1258
10013a74:	10013a78 	rdprs	zero,r2,1257
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10013a78:	00800044 	movi	r2,1
10013a7c:	00000306 	br	10013a8c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10013a80:	0005883a 	mov	r2,zero
10013a84:	00000106 	br	10013a8c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10013a88:	0005883a 	mov	r2,zero
  }
}
10013a8c:	e037883a 	mov	sp,fp
10013a90:	df000017 	ldw	fp,0(sp)
10013a94:	dec00104 	addi	sp,sp,4
10013a98:	f800283a 	ret

10013a9c <atexit>:
10013a9c:	200b883a 	mov	r5,r4
10013aa0:	000f883a 	mov	r7,zero
10013aa4:	000d883a 	mov	r6,zero
10013aa8:	0009883a 	mov	r4,zero
10013aac:	0013b641 	jmpi	10013b64 <__register_exitproc>

10013ab0 <exit>:
10013ab0:	defffe04 	addi	sp,sp,-8
10013ab4:	000b883a 	mov	r5,zero
10013ab8:	dc000015 	stw	r16,0(sp)
10013abc:	dfc00115 	stw	ra,4(sp)
10013ac0:	2021883a 	mov	r16,r4
10013ac4:	0013c7c0 	call	10013c7c <__call_exitprocs>
10013ac8:	00840074 	movhi	r2,4097
10013acc:	1098d004 	addi	r2,r2,25408
10013ad0:	11000017 	ldw	r4,0(r2)
10013ad4:	20800f17 	ldw	r2,60(r4)
10013ad8:	10000126 	beq	r2,zero,10013ae0 <exit+0x30>
10013adc:	103ee83a 	callr	r2
10013ae0:	8009883a 	mov	r4,r16
10013ae4:	0013dfc0 	call	10013dfc <_exit>

10013ae8 <memcmp>:
10013ae8:	01c000c4 	movi	r7,3
10013aec:	3980192e 	bgeu	r7,r6,10013b54 <memcmp+0x6c>
10013af0:	2144b03a 	or	r2,r4,r5
10013af4:	11c4703a 	and	r2,r2,r7
10013af8:	10000f26 	beq	r2,zero,10013b38 <memcmp+0x50>
10013afc:	20800003 	ldbu	r2,0(r4)
10013b00:	28c00003 	ldbu	r3,0(r5)
10013b04:	10c0151e 	bne	r2,r3,10013b5c <memcmp+0x74>
10013b08:	31bfff84 	addi	r6,r6,-2
10013b0c:	01ffffc4 	movi	r7,-1
10013b10:	00000406 	br	10013b24 <memcmp+0x3c>
10013b14:	20800003 	ldbu	r2,0(r4)
10013b18:	28c00003 	ldbu	r3,0(r5)
10013b1c:	31bfffc4 	addi	r6,r6,-1
10013b20:	10c00e1e 	bne	r2,r3,10013b5c <memcmp+0x74>
10013b24:	21000044 	addi	r4,r4,1
10013b28:	29400044 	addi	r5,r5,1
10013b2c:	31fff91e 	bne	r6,r7,10013b14 <__alt_data_end+0xf8013b14>
10013b30:	0005883a 	mov	r2,zero
10013b34:	f800283a 	ret
10013b38:	20c00017 	ldw	r3,0(r4)
10013b3c:	28800017 	ldw	r2,0(r5)
10013b40:	18bfee1e 	bne	r3,r2,10013afc <__alt_data_end+0xf8013afc>
10013b44:	31bfff04 	addi	r6,r6,-4
10013b48:	21000104 	addi	r4,r4,4
10013b4c:	29400104 	addi	r5,r5,4
10013b50:	39bff936 	bltu	r7,r6,10013b38 <__alt_data_end+0xf8013b38>
10013b54:	303fe91e 	bne	r6,zero,10013afc <__alt_data_end+0xf8013afc>
10013b58:	003ff506 	br	10013b30 <__alt_data_end+0xf8013b30>
10013b5c:	10c5c83a 	sub	r2,r2,r3
10013b60:	f800283a 	ret

10013b64 <__register_exitproc>:
10013b64:	defffa04 	addi	sp,sp,-24
10013b68:	dc000315 	stw	r16,12(sp)
10013b6c:	04040074 	movhi	r16,4097
10013b70:	8418d004 	addi	r16,r16,25408
10013b74:	80c00017 	ldw	r3,0(r16)
10013b78:	dc400415 	stw	r17,16(sp)
10013b7c:	dfc00515 	stw	ra,20(sp)
10013b80:	18805217 	ldw	r2,328(r3)
10013b84:	2023883a 	mov	r17,r4
10013b88:	10003726 	beq	r2,zero,10013c68 <__register_exitproc+0x104>
10013b8c:	10c00117 	ldw	r3,4(r2)
10013b90:	010007c4 	movi	r4,31
10013b94:	20c00e16 	blt	r4,r3,10013bd0 <__register_exitproc+0x6c>
10013b98:	1a000044 	addi	r8,r3,1
10013b9c:	8800221e 	bne	r17,zero,10013c28 <__register_exitproc+0xc4>
10013ba0:	18c00084 	addi	r3,r3,2
10013ba4:	18c7883a 	add	r3,r3,r3
10013ba8:	18c7883a 	add	r3,r3,r3
10013bac:	12000115 	stw	r8,4(r2)
10013bb0:	10c7883a 	add	r3,r2,r3
10013bb4:	19400015 	stw	r5,0(r3)
10013bb8:	0005883a 	mov	r2,zero
10013bbc:	dfc00517 	ldw	ra,20(sp)
10013bc0:	dc400417 	ldw	r17,16(sp)
10013bc4:	dc000317 	ldw	r16,12(sp)
10013bc8:	dec00604 	addi	sp,sp,24
10013bcc:	f800283a 	ret
10013bd0:	00800034 	movhi	r2,0
10013bd4:	10800004 	addi	r2,r2,0
10013bd8:	10002626 	beq	r2,zero,10013c74 <__register_exitproc+0x110>
10013bdc:	01006404 	movi	r4,400
10013be0:	d9400015 	stw	r5,0(sp)
10013be4:	d9800115 	stw	r6,4(sp)
10013be8:	d9c00215 	stw	r7,8(sp)
10013bec:	00000000 	call	10000000 <__reset>
10013bf0:	d9400017 	ldw	r5,0(sp)
10013bf4:	d9800117 	ldw	r6,4(sp)
10013bf8:	d9c00217 	ldw	r7,8(sp)
10013bfc:	10001d26 	beq	r2,zero,10013c74 <__register_exitproc+0x110>
10013c00:	81000017 	ldw	r4,0(r16)
10013c04:	10000115 	stw	zero,4(r2)
10013c08:	02000044 	movi	r8,1
10013c0c:	22405217 	ldw	r9,328(r4)
10013c10:	0007883a 	mov	r3,zero
10013c14:	12400015 	stw	r9,0(r2)
10013c18:	20805215 	stw	r2,328(r4)
10013c1c:	10006215 	stw	zero,392(r2)
10013c20:	10006315 	stw	zero,396(r2)
10013c24:	883fde26 	beq	r17,zero,10013ba0 <__alt_data_end+0xf8013ba0>
10013c28:	18c9883a 	add	r4,r3,r3
10013c2c:	2109883a 	add	r4,r4,r4
10013c30:	1109883a 	add	r4,r2,r4
10013c34:	21802215 	stw	r6,136(r4)
10013c38:	01800044 	movi	r6,1
10013c3c:	12406217 	ldw	r9,392(r2)
10013c40:	30cc983a 	sll	r6,r6,r3
10013c44:	4992b03a 	or	r9,r9,r6
10013c48:	12406215 	stw	r9,392(r2)
10013c4c:	21c04215 	stw	r7,264(r4)
10013c50:	01000084 	movi	r4,2
10013c54:	893fd21e 	bne	r17,r4,10013ba0 <__alt_data_end+0xf8013ba0>
10013c58:	11006317 	ldw	r4,396(r2)
10013c5c:	218cb03a 	or	r6,r4,r6
10013c60:	11806315 	stw	r6,396(r2)
10013c64:	003fce06 	br	10013ba0 <__alt_data_end+0xf8013ba0>
10013c68:	18805304 	addi	r2,r3,332
10013c6c:	18805215 	stw	r2,328(r3)
10013c70:	003fc606 	br	10013b8c <__alt_data_end+0xf8013b8c>
10013c74:	00bfffc4 	movi	r2,-1
10013c78:	003fd006 	br	10013bbc <__alt_data_end+0xf8013bbc>

10013c7c <__call_exitprocs>:
10013c7c:	defff504 	addi	sp,sp,-44
10013c80:	df000915 	stw	fp,36(sp)
10013c84:	dd400615 	stw	r21,24(sp)
10013c88:	dc800315 	stw	r18,12(sp)
10013c8c:	dfc00a15 	stw	ra,40(sp)
10013c90:	ddc00815 	stw	r23,32(sp)
10013c94:	dd800715 	stw	r22,28(sp)
10013c98:	dd000515 	stw	r20,20(sp)
10013c9c:	dcc00415 	stw	r19,16(sp)
10013ca0:	dc400215 	stw	r17,8(sp)
10013ca4:	dc000115 	stw	r16,4(sp)
10013ca8:	d9000015 	stw	r4,0(sp)
10013cac:	2839883a 	mov	fp,r5
10013cb0:	04800044 	movi	r18,1
10013cb4:	057fffc4 	movi	r21,-1
10013cb8:	00840074 	movhi	r2,4097
10013cbc:	1098d004 	addi	r2,r2,25408
10013cc0:	12000017 	ldw	r8,0(r2)
10013cc4:	45005217 	ldw	r20,328(r8)
10013cc8:	44c05204 	addi	r19,r8,328
10013ccc:	a0001c26 	beq	r20,zero,10013d40 <__call_exitprocs+0xc4>
10013cd0:	a0800117 	ldw	r2,4(r20)
10013cd4:	15ffffc4 	addi	r23,r2,-1
10013cd8:	b8000d16 	blt	r23,zero,10013d10 <__call_exitprocs+0x94>
10013cdc:	14000044 	addi	r16,r2,1
10013ce0:	8421883a 	add	r16,r16,r16
10013ce4:	8421883a 	add	r16,r16,r16
10013ce8:	84402004 	addi	r17,r16,128
10013cec:	a463883a 	add	r17,r20,r17
10013cf0:	a421883a 	add	r16,r20,r16
10013cf4:	e0001e26 	beq	fp,zero,10013d70 <__call_exitprocs+0xf4>
10013cf8:	80804017 	ldw	r2,256(r16)
10013cfc:	e0801c26 	beq	fp,r2,10013d70 <__call_exitprocs+0xf4>
10013d00:	bdffffc4 	addi	r23,r23,-1
10013d04:	843fff04 	addi	r16,r16,-4
10013d08:	8c7fff04 	addi	r17,r17,-4
10013d0c:	bd7ff91e 	bne	r23,r21,10013cf4 <__alt_data_end+0xf8013cf4>
10013d10:	00800034 	movhi	r2,0
10013d14:	10800004 	addi	r2,r2,0
10013d18:	10000926 	beq	r2,zero,10013d40 <__call_exitprocs+0xc4>
10013d1c:	a0800117 	ldw	r2,4(r20)
10013d20:	1000301e 	bne	r2,zero,10013de4 <__call_exitprocs+0x168>
10013d24:	a0800017 	ldw	r2,0(r20)
10013d28:	10003226 	beq	r2,zero,10013df4 <__call_exitprocs+0x178>
10013d2c:	a009883a 	mov	r4,r20
10013d30:	98800015 	stw	r2,0(r19)
10013d34:	00000000 	call	10000000 <__reset>
10013d38:	9d000017 	ldw	r20,0(r19)
10013d3c:	a03fe41e 	bne	r20,zero,10013cd0 <__alt_data_end+0xf8013cd0>
10013d40:	dfc00a17 	ldw	ra,40(sp)
10013d44:	df000917 	ldw	fp,36(sp)
10013d48:	ddc00817 	ldw	r23,32(sp)
10013d4c:	dd800717 	ldw	r22,28(sp)
10013d50:	dd400617 	ldw	r21,24(sp)
10013d54:	dd000517 	ldw	r20,20(sp)
10013d58:	dcc00417 	ldw	r19,16(sp)
10013d5c:	dc800317 	ldw	r18,12(sp)
10013d60:	dc400217 	ldw	r17,8(sp)
10013d64:	dc000117 	ldw	r16,4(sp)
10013d68:	dec00b04 	addi	sp,sp,44
10013d6c:	f800283a 	ret
10013d70:	a0800117 	ldw	r2,4(r20)
10013d74:	80c00017 	ldw	r3,0(r16)
10013d78:	10bfffc4 	addi	r2,r2,-1
10013d7c:	15c01426 	beq	r2,r23,10013dd0 <__call_exitprocs+0x154>
10013d80:	80000015 	stw	zero,0(r16)
10013d84:	183fde26 	beq	r3,zero,10013d00 <__alt_data_end+0xf8013d00>
10013d88:	95c8983a 	sll	r4,r18,r23
10013d8c:	a0806217 	ldw	r2,392(r20)
10013d90:	a5800117 	ldw	r22,4(r20)
10013d94:	2084703a 	and	r2,r4,r2
10013d98:	10000b26 	beq	r2,zero,10013dc8 <__call_exitprocs+0x14c>
10013d9c:	a0806317 	ldw	r2,396(r20)
10013da0:	2088703a 	and	r4,r4,r2
10013da4:	20000c1e 	bne	r4,zero,10013dd8 <__call_exitprocs+0x15c>
10013da8:	89400017 	ldw	r5,0(r17)
10013dac:	d9000017 	ldw	r4,0(sp)
10013db0:	183ee83a 	callr	r3
10013db4:	a0800117 	ldw	r2,4(r20)
10013db8:	15bfbf1e 	bne	r2,r22,10013cb8 <__alt_data_end+0xf8013cb8>
10013dbc:	98800017 	ldw	r2,0(r19)
10013dc0:	153fcf26 	beq	r2,r20,10013d00 <__alt_data_end+0xf8013d00>
10013dc4:	003fbc06 	br	10013cb8 <__alt_data_end+0xf8013cb8>
10013dc8:	183ee83a 	callr	r3
10013dcc:	003ff906 	br	10013db4 <__alt_data_end+0xf8013db4>
10013dd0:	a5c00115 	stw	r23,4(r20)
10013dd4:	003feb06 	br	10013d84 <__alt_data_end+0xf8013d84>
10013dd8:	89000017 	ldw	r4,0(r17)
10013ddc:	183ee83a 	callr	r3
10013de0:	003ff406 	br	10013db4 <__alt_data_end+0xf8013db4>
10013de4:	a0800017 	ldw	r2,0(r20)
10013de8:	a027883a 	mov	r19,r20
10013dec:	1029883a 	mov	r20,r2
10013df0:	003fb606 	br	10013ccc <__alt_data_end+0xf8013ccc>
10013df4:	0005883a 	mov	r2,zero
10013df8:	003ffb06 	br	10013de8 <__alt_data_end+0xf8013de8>

10013dfc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10013dfc:	defffd04 	addi	sp,sp,-12
10013e00:	df000215 	stw	fp,8(sp)
10013e04:	df000204 	addi	fp,sp,8
10013e08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10013e0c:	0001883a 	nop
10013e10:	e0bfff17 	ldw	r2,-4(fp)
10013e14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10013e18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10013e1c:	10000226 	beq	r2,zero,10013e28 <_exit+0x2c>
    ALT_SIM_FAIL();
10013e20:	002af070 	cmpltui	zero,zero,43969
10013e24:	00000106 	br	10013e2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10013e28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10013e2c:	003fff06 	br	10013e2c <__alt_data_end+0xf8013e2c>

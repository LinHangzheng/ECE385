
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00014800 memsz 0x00014800 flags r-x
    LOAD off    0x00015820 vaddr 0x10014820 paddr 0x10016310 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00017e00 vaddr 0x10017e00 paddr 0x10017e00 align 2**12
         filesz 0x00000000 memsz 0x00000194 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013b90  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a60  10013dc0  10013dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  10014820  10016310  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000194  10017e00  10017e00  00017e00  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00017310  2**0
                  CONTENTS
  7 .sdram        00000000  10017f94  10017f94  00017310  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017310  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001020  00000000  00000000  00017338  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002695e  00000000  00000000  00018358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009c2c  00000000  00000000  0003ecb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c675  00000000  00000000  000488e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000028d4  00000000  00000000  00054f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000421e  00000000  00000000  0005782c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017a3c  00000000  00000000  0005ba4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00073488  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019b0  00000000  00000000  000734c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007879a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007879d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000787a9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000787aa  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000787ab  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000787af  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000787b3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000787b7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000787c2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000787cd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000787d8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002b  00000000  00000000  000787e0  2**0
                  CONTENTS, READONLY
 30 .jdi          00005256  00000000  00000000  0007880b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000773bc  00000000  00000000  0007da61  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10013dc0 l    d  .rodata	00000000 .rodata
10014820 l    d  .rwdata	00000000 .rwdata
10017e00 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10017f94 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 monster_logic.c
00000000 l    df *ABS*	00000000 saber_logic.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_main.c
10017e1c l     O .bss	00000002 ctl_reg
10017e1e l     O .bss	00000002 no_device
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
10014820 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001466a l     O .rodata	00000010 zeroes.4404
100077f8 l     F .text	000000bc __sbprintf
1001467a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10007a08 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10009560 l     F .text	00000008 __fp_unlock
10009574 l     F .text	0000019c __sinit.part.1
10009710 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
10014c64 l     O .rwdata	00000020 lc_ctype_charset
10014c44 l     O .rwdata	00000020 lc_message_charset
10014c84 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100146a8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000cbe4 l     F .text	000000fc __sprint_r.part.0
100147cc l     O .rodata	00000010 zeroes.4349
1000e220 l     F .text	000000bc __sbprintf
100147dc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_close.c
100114ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011600 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1001162c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10011720 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10011808 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100118f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10011ad0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10016300 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
10011d44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10011e28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10011f64 l     F .text	00000034 alt_dev_reg
1001526c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10012240 l     F .text	0000020c altera_avalon_jtag_uart_irq
1001244c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10012d28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013188 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100132e8 l     F .text	0000003c alt_get_errno
10013324 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10017e68 g     O .bss	00000004 alt_instruction_exception_handler
1000c228 g     F .text	00000074 _mprec_log10
10000ba4 g     F .text	00000084 game_update
1000c314 g     F .text	0000008c __any_on
1000e7d4 g     F .text	00000054 _isatty_r
100146b4 g     O .rodata	00000028 __mprec_tinytens
10011a0c g     F .text	0000007c alt_main
10005310 g     F .text	000000c0 _puts_r
10017e94 g     O .bss	00000100 alt_irq
1000e828 g     F .text	00000060 _lseek_r
10016310 g       *ABS*	00000000 __flash_rwdata_start
100101a0 g     F .text	00000088 .hidden __eqdf2
100006a0 g     F .text	00000100 round3
10017f94 g       *ABS*	00000000 __alt_heap_start
100052d4 g     F .text	0000003c printf
1000ea40 g     F .text	0000009c _wcrtomb_r
10017e2a g     O .bss	00000002 usb_ctl_val
1000caa4 g     F .text	0000005c __sseek
100098c0 g     F .text	00000010 __sinit
10017e24 g     O .bss	00000004 keycode
1000e8e8 g     F .text	00000140 __swbuf_r
1000a394 g     F .text	0000007c _setlocale_r
10009718 g     F .text	00000078 __sfmoreglue
10011aac g     F .text	00000024 __malloc_unlock
1000155c g     F .text	00000114 saber_be_attacked_check
100034c8 g     F .text	00000080 UsbGetRetryCnt
1000b064 g     F .text	0000015c memmove
1000026c g     F .text	00000088 IO_init
100098a8 g     F .text	00000018 _cleanup
1000b2e8 g     F .text	000000a8 _Balloc
10010228 g     F .text	000000dc .hidden __gtdf2
10013710 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10011d80 g     F .text	00000078 times
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000e778 g     F .text	0000005c _fstat_r
10017e4c g     O .bss	00000004 errno
1000ca20 g     F .text	00000008 __seofread
100040c8 g     F .text	00000308 get_keycode
10017e54 g     O .bss	00000004 alt_argv
1001e2cc g       *ABS*	00000000 _gp
10011df8 g     F .text	00000030 usleep
100150ec g     O .rwdata	00000180 alt_fd_list
10013734 g     F .text	00000090 alt_find_dev
1000af1c g     F .text	00000148 memcpy
100054f8 g     F .text	00000008 _times_r
10009568 g     F .text	0000000c _cleanup_r
10005048 g     F .text	000000dc .hidden __floatsidf
1001326c g     F .text	0000007c alt_io_redirect
10017e2c g     O .bss	00000001 data_size
10004f54 g     F .text	000000f4 .hidden __ltdf2
10013dc0 g       *ABS*	00000000 __DTOR_END__
100053d0 g     F .text	00000014 puts
10013990 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10017e00 g     O .bss	00000004 developer_mode
1000c904 g     F .text	00000074 __fpclassifyd
1000c184 g     F .text	000000a4 __ratio
1000e204 g     F .text	0000001c __vfiprintf_internal
10012644 g     F .text	0000021c altera_avalon_jtag_uart_read
100052a4 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100044c8 g     F .text	00000064 .hidden __udivsi3
1001175c g     F .text	000000ac isatty
10014704 g     O .rodata	000000c8 __mprec_tens
100035c8 g     F .text	00000b00 usb_init
1000a410 g     F .text	0000000c __locale_charset
10001670 g     F .text	000003b8 monster_update
10017e48 g     O .bss	00000004 __malloc_top_pad
10002b54 g     F .text	00000268 UsbGetConfigDesc2
100162d8 g     O .rwdata	00000004 __mb_cur_max
1000a440 g     F .text	0000000c _localeconv_r
1000b71c g     F .text	0000003c __i2b
10009d44 g     F .text	000004c8 __sfvwrite_r
10001d88 g     F .text	000000ec press_d
10017e2e g     O .bss	00000002 intStat
1000c978 g     F .text	00000054 _sbrk_r
1000e888 g     F .text	00000060 _read_r
100162f8 g     O .rwdata	00000004 alt_max_fd
1000e46c g     F .text	000000f0 _fclose_r
10009530 g     F .text	00000030 fflush
10017e44 g     O .bss	00000004 __malloc_max_sbrked_mem
1000f8f4 g     F .text	000008ac .hidden __adddf3
1000bf2c g     F .text	0000010c __b2d
1000f330 g     F .text	000005c4 .hidden __umoddi3
10011930 g     F .text	000000dc lseek
100162d0 g     O .rwdata	00000004 _global_impure_ptr
1000c3a0 g     F .text	00000564 _realloc_r
10017f94 g       *ABS*	00000000 __bss_end
10013098 g     F .text	000000f0 alt_iic_isr_register
10013608 g     F .text	00000108 alt_tick
1000ed34 g     F .text	000005fc .hidden __udivdi3
1000e6d4 g     F .text	00000024 _fputwc_r
100146dc g     O .rodata	00000028 __mprec_bigtens
1000b500 g     F .text	00000104 __s2b
10005124 g     F .text	000000a8 .hidden __floatunsidf
1000bc6c g     F .text	00000060 __mcmp
100025a4 g     F .text	00000100 UsbSetAddress
100098e0 g     F .text	00000018 __fp_lock_all
1001304c g     F .text	0000004c alt_ic_irq_enabled
1001356c g     F .text	0000009c alt_alarm_stop
10017e5c g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
100150c4 g     O .rwdata	00000028 alt_dev_null
10012d08 g     F .text	00000020 alt_dcache_flush_all
1000b604 g     F .text	00000068 __hi0bits
10000364 g     F .text	00000068 IO_read
1001146c g     F .text	00000080 .hidden __fixdfsi
10001ca0 g     F .text	000000e8 press_a
10016310 g       *ABS*	00000000 __ram_rwdata_end
100162f0 g     O .rwdata	00000008 alt_dev_list
10011e64 g     F .text	00000100 write
10014820 g       *ABS*	00000000 __ram_rodata_end
10011668 g     F .text	000000b8 fstat
10004f54 g     F .text	000000f4 .hidden __ledf2
10003548 g     F .text	00000080 UsbPrintMem
1000b9e4 g     F .text	00000140 __pow5mult
1000ccf8 g     F .text	0000150c ___vfiprintf_internal_r
10017e3c g     O .bss	00000004 __nlocale_changed
1000452c g     F .text	00000058 .hidden __umodsi3
10017e04 g     O .bss	00000004 blood_state
10000c28 g     F .text	00000330 gamefile_update
10017f94 g       *ABS*	00000000 end
10012180 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10013dc0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100051cc g     F .text	00000064 .hidden __clzsi2
10012860 g     F .text	00000224 altera_avalon_jtag_uart_write
100098d0 g     F .text	00000004 __sfp_lock_acquire
1000ae38 g     F .text	000000e4 memchr
10005500 g     F .text	000022dc ___vfprintf_internal_r
10002ebc g     F .text	00000100 UsbClassRequest
10009a34 g     F .text	00000310 _free_r
1000a41c g     F .text	00000010 __locale_mb_cur_max
10013c0c g     F .text	00000180 __call_exitprocs
10017e38 g     O .bss	00000004 __mlocale_changed
10017e08 g     O .bss	00000004 win
100162dc g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10002370 g     F .text	000000e4 update_helper
10017e60 g     O .bss	00000004 _alt_tick_rate
100053fc g     F .text	00000064 rand
100008a0 g     F .text	0000010c round5
1000bb24 g     F .text	00000148 __lshift
10017e64 g     O .bss	00000004 _alt_nticks
10011b0c g     F .text	00000104 read
10011fd0 g     F .text	0000004c alt_sys_init
10013af4 g     F .text	00000118 __register_exitproc
100162cc g     O .rwdata	00000004 game_file
1000b758 g     F .text	0000028c __multiply
100124ec g     F .text	00000068 altera_avalon_jtag_uart_close
10005230 g     F .text	00000028 .hidden __mulsi3
10014820 g       *ABS*	00000000 __ram_rwdata_start
10013dc0 g       *ABS*	00000000 __ram_rodata_start
10017e6c g     O .bss	00000028 __malloc_current_mallinfo
1000c038 g     F .text	0000014c __d2b
100026a4 g     F .text	00000148 UsbGetDeviceDesc1
1001201c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100138cc g     F .text	000000c4 alt_get_fd
10012bb0 g     F .text	00000158 alt_busy_sleep
1000e33c g     F .text	00000054 _close_r
10013a78 g     F .text	0000007c memcmp
100120dc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1000205c g     F .text	000000c0 saber_init
10017f94 g       *ABS*	00000000 __alt_stack_base
1001212c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100078b4 g     F .text	00000154 __swsetup_r
10004584 g     F .text	000009d0 .hidden __divdf3
10009790 g     F .text	00000118 __sfp
1000c29c g     F .text	00000078 __copybits
100003cc g     F .text	000000b8 frame_clock
10014cbc g     O .rwdata	00000408 __malloc_av_
100098dc g     F .text	00000004 __sinit_lock_release
10010304 g     F .text	0000086c .hidden __muldf3
1000c9cc g     F .text	00000054 __sread
10003444 g     F .text	00000084 UsbWaitTDListDone
100137c4 g     F .text	00000108 alt_find_file
10012d64 g     F .text	000000a4 alt_dev_llist_insert
10011a88 g     F .text	00000024 __malloc_lock
10011c94 g     F .text	000000b0 sbrk
10001144 g     F .text	00000138 monster_init
100094d4 g     F .text	0000005c _fflush_r
1000e390 g     F .text	000000dc _calloc_r
10017e30 g     O .bss	00000001 hot_plug_count
10017e00 g       *ABS*	00000000 __bss_start
1000b1c0 g     F .text	00000128 memset
10000f58 g     F .text	000001ec main
10017e58 g     O .bss	00000004 alt_envp
10017e40 g     O .bss	00000004 __malloc_max_total_mem
1001207c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10002dbc g     F .text	00000100 UsbSetConfig
1000ea28 g     F .text	00000018 __swbuf
100053e4 g     F .text	00000018 srand
1000cb00 g     F .text	00000008 __sclose
10017e0c g     O .bss	00000004 event
18000000 g       *ABS*	00000000 __alt_heap_limit
1000e55c g     F .text	00000014 fclose
10007c30 g     F .text	00001688 _dtoa_r
1000a62c g     F .text	0000080c _malloc_r
1000eb9c g     F .text	00000030 __ascii_wctomb
10017e10 g     O .bss	00000004 saber_state
10001fdc g     F .text	00000080 press_l
10000484 g     F .text	0000011c round1
100162fc g     O .rwdata	00000004 alt_errno
1000a20c g     F .text	000000c4 _fwalk
1000127c g     F .text	000002e0 monster_hit_check
100043d0 g     F .text	00000084 .hidden __divsi3
10009910 g     F .text	00000124 _malloc_trim_r
10002fbc g     F .text	00000148 UsbGetHidDesc
10013dc0 g       *ABS*	00000000 __CTOR_END__
10001b64 g     F .text	0000013c press_s
1000cb08 g     F .text	000000dc strcmp
10013dc0 g       *ABS*	00000000 __flash_rodata_start
10013dc0 g       *ABS*	00000000 __DTOR_LIST__
100005a0 g     F .text	00000100 round2
100101a0 g     F .text	00000088 .hidden __nedf2
100024ac g     F .text	00000044 UsbRead
10011f98 g     F .text	00000038 alt_irq_init
10011c10 g     F .text	00000084 alt_release_fd
10014520 g     O .rodata	00000100 .hidden __clz_tab
10017e34 g     O .bss	00000004 _PathLocale
10013a2c g     F .text	00000014 atexit
1000e2dc g     F .text	00000060 _write_r
100009ac g     F .text	000001f8 key_event
1000a44c g     F .text	00000018 setlocale
10017e14 g     O .bss	00000004 monster_state
100162d4 g     O .rwdata	00000004 _impure_ptr
10017e50 g     O .bss	00000004 alt_argc
100092b8 g     F .text	0000021c __sflush_r
10012e68 g     F .text	00000060 _do_dtors
1000a438 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000bec8 g     F .text	00000064 __ulp
100098f8 g     F .text	00000018 __fp_unlock_all
10017e28 g     O .bss	00000001 toggle
100162e8 g     O .rwdata	00000008 alt_fs_list
10003104 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000a464 g     F .text	0000000c localeconv
10012ee8 g     F .text	00000050 alt_ic_isr_register
10016310 g       *ABS*	00000000 _edata
10017f94 g       *ABS*	00000000 _end
10002454 g     F .text	00000058 UsbWrite
1000e570 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10012554 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10017e32 g     O .bss	00000002 code
10012fc0 g     F .text	0000008c alt_ic_irq_disable
1000ca28 g     F .text	0000007c __swrite
10001a28 g     F .text	0000013c press_w
100162e0 g     O .rwdata	00000004 __malloc_trim_threshold
1000a42c g     F .text	0000000c __locale_msgcharset
10017e20 g     O .bss	00000002 fs_device
10013a40 g     F .text	00000038 exit
1000a2d0 g     F .text	000000c4 _fwalk_reent
1000bccc g     F .text	000001fc __mdiff
10004454 g     F .text	00000074 .hidden __modsi3
10001f0c g     F .text	000000d0 press_k
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100098d4 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100007a0 g     F .text	00000100 round4
100002f4 g     F .text	00000070 IO_write
1000211c g     F .text	000001fc update
10013d8c g     F .text	00000034 _exit
10012a84 g     F .text	0000012c alt_alarm_start
1000ec28 g     F .text	0000010c .hidden __muldi3
10001e74 g     F .text	00000098 press_j
1000a470 g     F .text	000001bc __smakebuf_r
10005460 g     F .text	00000098 strlen
10013410 g     F .text	0000015c open
10010228 g     F .text	000000dc .hidden __gedf2
10002318 g     F .text	00000058 stop
10005258 g     F .text	0000004c clock
100162e4 g     O .rwdata	00000004 __wctomb
1000cce0 g     F .text	00000018 __sprint_r
10012ec8 g     F .text	00000020 alt_icache_flush_all
10016304 g     O .rwdata	00000004 alt_priority_mask
10012f38 g     F .text	00000088 alt_ic_irq_enable
100077dc g     F .text	0000001c __vfprintf_internal
10017e18 g     O .bss	00000004 Excalibur_state
1000ebcc g     F .text	0000005c _wctomb_r
10010b70 g     F .text	000008fc .hidden __subdf3
1000b66c g     F .text	000000b0 __lo0bits
100029c4 g     F .text	00000190 UsbGetConfigDesc1
10016308 g     O .rwdata	00000008 alt_alarm_list
10012e08 g     F .text	00000060 _do_ctors
100024f0 g     F .text	000000b4 UsbSoftReset
1000eadc g     F .text	000000c0 wcrtomb
10011528 g     F .text	000000d8 close
100027ec g     F .text	000001d8 UsbGetDeviceDesc2
10011870 g     F .text	00000084 alt_load
1000e6f8 g     F .text	00000080 fputwc
100098d8 g     F .text	00000004 __sinit_lock_acquire
1000b3b8 g     F .text	00000148 __multadd
1000b390 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	109fa504 	addi	r2,r2,32404
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	109fa504 	addi	r2,r2,32404
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6e717 	ldw	r2,-25700(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6e717 	ldw	r2,-25700(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b8b314 	ori	gp,gp,58060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	109f8014 	ori	r2,r2,32256

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18dfe514 	ori	r3,r3,32660

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00118700 	call	10011870 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0011a0c0 	call	10011a0c <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00800804 	movi	r2,32
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00800c04 	movi	r2,48
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801404 	movi	r2,80
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801004 	movi	r2,64
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00801c04 	movi	r2,112
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00801804 	movi	r2,96
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00800c04 	movi	r2,48
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00800804 	movi	r2,32
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00800804 	movi	r2,32
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00800c04 	movi	r2,48
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	0001883a 	nop
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f4:	defffd04 	addi	sp,sp,-12
100002f8:	df000215 	stw	fp,8(sp)
100002fc:	df000204 	addi	fp,sp,8
10000300:	2007883a 	mov	r3,r4
10000304:	2805883a 	mov	r2,r5
10000308:	e0fffe05 	stb	r3,-8(fp)
1000030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000310:	00801c04 	movi	r2,112
10000314:	e0fffe03 	ldbu	r3,-8(fp)
10000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000031c:	00801804 	movi	r2,96
10000320:	e0ffff0b 	ldhu	r3,-4(fp)
10000324:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000328:	00800c04 	movi	r2,48
1000032c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000330:	00801004 	movi	r2,64
10000334:	10000005 	stb	zero,0(r2)

	// Reset OTG chip
	*otg_hpi_w = 1;
10000338:	00801004 	movi	r2,64
1000033c:	00c00044 	movi	r3,1
10000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000344:	00800c04 	movi	r2,48
10000348:	00c00044 	movi	r3,1
1000034c:	10c00005 	stb	r3,0(r2)

}
10000350:	0001883a 	nop
10000354:	e037883a 	mov	sp,fp
10000358:	df000017 	ldw	fp,0(sp)
1000035c:	dec00104 	addi	sp,sp,4
10000360:	f800283a 	ret

10000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000364:	defffd04 	addi	sp,sp,-12
10000368:	df000215 	stw	fp,8(sp)
1000036c:	df000204 	addi	fp,sp,8
10000370:	2005883a 	mov	r2,r4
10000374:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
10000378:	00801c04 	movi	r2,112
1000037c:	e0ffff03 	ldbu	r3,-4(fp)
10000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000384:	00800c04 	movi	r2,48
10000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000038c:	00801404 	movi	r2,80
10000390:	10000005 	stb	zero,0(r2)

	temp = *otg_hpi_data;
10000394:	00801804 	movi	r2,96
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe0d 	sth	r2,-8(fp)
	// Reset OTG chip
	*otg_hpi_r = 1;
100003a0:	00801404 	movi	r2,80
100003a4:	00c00044 	movi	r3,1
100003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003ac:	00800c04 	movi	r2,48
100003b0:	00c00044 	movi	r3,1
100003b4:	10c00005 	stb	r3,0(r2)

	return temp;
100003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100003bc:	e037883a 	mov	sp,fp
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00104 	addi	sp,sp,4
100003c8:	f800283a 	ret

100003cc <frame_clock>:
enum Key_event
{PRESS_UP = 1, PRESS_DOWN, PRESS_LEFT, PRESS_RIGHT, PRESS_ATK, PRESS_SKILL
}event;


void frame_clock (double frame_time){
100003cc:	defff804 	addi	sp,sp,-32
100003d0:	dfc00715 	stw	ra,28(sp)
100003d4:	df000615 	stw	fp,24(sp)
100003d8:	df000604 	addi	fp,sp,24
100003dc:	e13ffe15 	stw	r4,-8(fp)
100003e0:	e17fff15 	stw	r5,-4(fp)
	double time_to_switch = frame_time;
100003e4:	e0bffe17 	ldw	r2,-8(fp)
100003e8:	e0bffb15 	stw	r2,-20(fp)
100003ec:	e0bfff17 	ldw	r2,-4(fp)
100003f0:	e0bffc15 	stw	r2,-16(fp)
	clock_t begin = clock();
100003f4:	00052580 	call	10005258 <clock>
100003f8:	e0bffd15 	stw	r2,-12(fp)
	clock_t end = clock();
100003fc:	00052580 	call	10005258 <clock>
10000400:	e0bffa15 	stw	r2,-24(fp)
	while ((double)(end-begin)/CLOCKS_PER_SEC <time_to_switch){
10000404:	00000206 	br	10000410 <frame_clock+0x44>
		end = clock();
10000408:	00052580 	call	10005258 <clock>
1000040c:	e0bffa15 	stw	r2,-24(fp)

void frame_clock (double frame_time){
	double time_to_switch = frame_time;
	clock_t begin = clock();
	clock_t end = clock();
	while ((double)(end-begin)/CLOCKS_PER_SEC <time_to_switch){
10000410:	e0fffa17 	ldw	r3,-24(fp)
10000414:	e0bffd17 	ldw	r2,-12(fp)
10000418:	1885c83a 	sub	r2,r3,r2
1000041c:	1009883a 	mov	r4,r2
10000420:	00051240 	call	10005124 <__floatunsidf>
10000424:	1011883a 	mov	r8,r2
10000428:	1813883a 	mov	r9,r3
1000042c:	000d883a 	mov	r6,zero
10000430:	01d023f4 	movhi	r7,16527
10000434:	39d00004 	addi	r7,r7,16384
10000438:	4009883a 	mov	r4,r8
1000043c:	480b883a 	mov	r5,r9
10000440:	00045840 	call	10004584 <__divdf3>
10000444:	1009883a 	mov	r4,r2
10000448:	180b883a 	mov	r5,r3
1000044c:	2005883a 	mov	r2,r4
10000450:	2807883a 	mov	r3,r5
10000454:	e1bffb17 	ldw	r6,-20(fp)
10000458:	e1fffc17 	ldw	r7,-16(fp)
1000045c:	1009883a 	mov	r4,r2
10000460:	180b883a 	mov	r5,r3
10000464:	0004f540 	call	10004f54 <__ledf2>
10000468:	103fe716 	blt	r2,zero,10000408 <__alt_data_end+0xf8000408>
		end = clock();
	}
}
1000046c:	0001883a 	nop
10000470:	e037883a 	mov	sp,fp
10000474:	dfc00117 	ldw	ra,4(sp)
10000478:	df000017 	ldw	fp,0(sp)
1000047c:	dec00204 	addi	sp,sp,8
10000480:	f800283a 	ret

10000484 <round1>:


void round1 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
10000484:	defff504 	addi	sp,sp,-44
10000488:	dfc00a15 	stw	ra,40(sp)
1000048c:	df000915 	stw	fp,36(sp)
10000490:	df000904 	addi	fp,sp,36
10000494:	e13ffc15 	stw	r4,-16(fp)
10000498:	e17ffd15 	stw	r5,-12(fp)
1000049c:	e1bffe15 	stw	r6,-8(fp)
100004a0:	e1ffff15 	stw	r7,-4(fp)
	saber_init(saber);
100004a4:	e13ffd17 	ldw	r4,-12(fp)
100004a8:	000205c0 	call	1000205c <saber_init>
	if (developer_mode){saber->Excalibur_remain = 30;}
100004ac:	d0a6cd17 	ldw	r2,-25804(gp)
100004b0:	10000326 	beq	r2,zero,100004c0 <round1+0x3c>
100004b4:	e0bffd17 	ldw	r2,-12(fp)
100004b8:	00c00784 	movi	r3,30
100004bc:	10c00c15 	stw	r3,48(r2)
	monster_init(snowman, 1, 1, 30, 15, 1, -30, 20,40);
100004c0:	00800a04 	movi	r2,40
100004c4:	d8800415 	stw	r2,16(sp)
100004c8:	00800504 	movi	r2,20
100004cc:	d8800315 	stw	r2,12(sp)
100004d0:	00bff884 	movi	r2,-30
100004d4:	d8800215 	stw	r2,8(sp)
100004d8:	00800044 	movi	r2,1
100004dc:	d8800115 	stw	r2,4(sp)
100004e0:	008003c4 	movi	r2,15
100004e4:	d8800015 	stw	r2,0(sp)
100004e8:	01c00784 	movi	r7,30
100004ec:	01800044 	movi	r6,1
100004f0:	01400044 	movi	r5,1
100004f4:	e13ffe17 	ldw	r4,-8(fp)
100004f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 0, 1, 30, 25, 1, -20, 80,40);
100004fc:	00800a04 	movi	r2,40
10000500:	d8800415 	stw	r2,16(sp)
10000504:	00801404 	movi	r2,80
10000508:	d8800315 	stw	r2,12(sp)
1000050c:	00bffb04 	movi	r2,-20
10000510:	d8800215 	stw	r2,8(sp)
10000514:	00800044 	movi	r2,1
10000518:	d8800115 	stw	r2,4(sp)
1000051c:	00800644 	movi	r2,25
10000520:	d8800015 	stw	r2,0(sp)
10000524:	01c00784 	movi	r7,30
10000528:	01800044 	movi	r6,1
1000052c:	000b883a 	mov	r5,zero
10000530:	e13fff17 	ldw	r4,-4(fp)
10000534:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000538:	00000d06 	br	10000570 <round1+0xec>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000053c:	e1ffff17 	ldw	r7,-4(fp)
10000540:	e1bffe17 	ldw	r6,-8(fp)
10000544:	e17ffd17 	ldw	r5,-12(fp)
10000548:	e13ffc17 	ldw	r4,-16(fp)
1000054c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000550:	e1ffff17 	ldw	r7,-4(fp)
10000554:	e1bffe17 	ldw	r6,-8(fp)
10000558:	e17ffd17 	ldw	r5,-12(fp)
1000055c:	e13ffc17 	ldw	r4,-16(fp)
10000560:	0000ba40 	call	10000ba4 <game_update>
		if (snowman->exist == 0){
10000564:	e0bffe17 	ldw	r2,-8(fp)
10000568:	10800017 	ldw	r2,0(r2)
1000056c:	10000526 	beq	r2,zero,10000584 <round1+0x100>
void round1 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	saber_init(saber);
	if (developer_mode){saber->Excalibur_remain = 30;}
	monster_init(snowman, 1, 1, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 0, 1, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
10000570:	e0bffc17 	ldw	r2,-16(fp)
10000574:	10800017 	ldw	r2,0(r2)
10000578:	10800060 	cmpeqi	r2,r2,1
1000057c:	103fef1e 	bne	r2,zero,1000053c <__alt_data_end+0xf800053c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (snowman->exist == 0){
			break;
		}
	}
}
10000580:	00000106 	br	10000588 <round1+0x104>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (snowman->exist == 0){
			break;
10000584:	0001883a 	nop
		}
	}
}
10000588:	0001883a 	nop
1000058c:	e037883a 	mov	sp,fp
10000590:	dfc00117 	ldw	ra,4(sp)
10000594:	df000017 	ldw	fp,0(sp)
10000598:	dec00204 	addi	sp,sp,8
1000059c:	f800283a 	ret

100005a0 <round2>:

void round2 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
100005a0:	defff504 	addi	sp,sp,-44
100005a4:	dfc00a15 	stw	ra,40(sp)
100005a8:	df000915 	stw	fp,36(sp)
100005ac:	df000904 	addi	fp,sp,36
100005b0:	e13ffc15 	stw	r4,-16(fp)
100005b4:	e17ffd15 	stw	r5,-12(fp)
100005b8:	e1bffe15 	stw	r6,-8(fp)
100005bc:	e1ffff15 	stw	r7,-4(fp)
	monster_init(snowman, 1, 2, 30, 15, 1, -30, 20,40);
100005c0:	00800a04 	movi	r2,40
100005c4:	d8800415 	stw	r2,16(sp)
100005c8:	00800504 	movi	r2,20
100005cc:	d8800315 	stw	r2,12(sp)
100005d0:	00bff884 	movi	r2,-30
100005d4:	d8800215 	stw	r2,8(sp)
100005d8:	00800044 	movi	r2,1
100005dc:	d8800115 	stw	r2,4(sp)
100005e0:	008003c4 	movi	r2,15
100005e4:	d8800015 	stw	r2,0(sp)
100005e8:	01c00784 	movi	r7,30
100005ec:	01800084 	movi	r6,2
100005f0:	01400044 	movi	r5,1
100005f4:	e13ffe17 	ldw	r4,-8(fp)
100005f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 0, 2, 30, 25, 1, -20, 80,40);
100005fc:	00800a04 	movi	r2,40
10000600:	d8800415 	stw	r2,16(sp)
10000604:	00801404 	movi	r2,80
10000608:	d8800315 	stw	r2,12(sp)
1000060c:	00bffb04 	movi	r2,-20
10000610:	d8800215 	stw	r2,8(sp)
10000614:	00800044 	movi	r2,1
10000618:	d8800115 	stw	r2,4(sp)
1000061c:	00800644 	movi	r2,25
10000620:	d8800015 	stw	r2,0(sp)
10000624:	01c00784 	movi	r7,30
10000628:	01800084 	movi	r6,2
1000062c:	000b883a 	mov	r5,zero
10000630:	e13fff17 	ldw	r4,-4(fp)
10000634:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000638:	00000d06 	br	10000670 <round2+0xd0>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000063c:	e1ffff17 	ldw	r7,-4(fp)
10000640:	e1bffe17 	ldw	r6,-8(fp)
10000644:	e17ffd17 	ldw	r5,-12(fp)
10000648:	e13ffc17 	ldw	r4,-16(fp)
1000064c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000650:	e1ffff17 	ldw	r7,-4(fp)
10000654:	e1bffe17 	ldw	r6,-8(fp)
10000658:	e17ffd17 	ldw	r5,-12(fp)
1000065c:	e13ffc17 	ldw	r4,-16(fp)
10000660:	0000ba40 	call	10000ba4 <game_update>
		if (snowman->exist == 0){
10000664:	e0bffe17 	ldw	r2,-8(fp)
10000668:	10800017 	ldw	r2,0(r2)
1000066c:	10000526 	beq	r2,zero,10000684 <round2+0xe4>
}

void round2 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	monster_init(snowman, 1, 2, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 0, 2, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
10000670:	e0bffc17 	ldw	r2,-16(fp)
10000674:	10800017 	ldw	r2,0(r2)
10000678:	10800060 	cmpeqi	r2,r2,1
1000067c:	103fef1e 	bne	r2,zero,1000063c <__alt_data_end+0xf800063c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (snowman->exist == 0){
			break;
		}
	}
}
10000680:	00000106 	br	10000688 <round2+0xe8>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (snowman->exist == 0){
			break;
10000684:	0001883a 	nop
		}
	}
}
10000688:	0001883a 	nop
1000068c:	e037883a 	mov	sp,fp
10000690:	dfc00117 	ldw	ra,4(sp)
10000694:	df000017 	ldw	fp,0(sp)
10000698:	dec00204 	addi	sp,sp,8
1000069c:	f800283a 	ret

100006a0 <round3>:


void round3 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
100006a0:	defff504 	addi	sp,sp,-44
100006a4:	dfc00a15 	stw	ra,40(sp)
100006a8:	df000915 	stw	fp,36(sp)
100006ac:	df000904 	addi	fp,sp,36
100006b0:	e13ffc15 	stw	r4,-16(fp)
100006b4:	e17ffd15 	stw	r5,-12(fp)
100006b8:	e1bffe15 	stw	r6,-8(fp)
100006bc:	e1ffff15 	stw	r7,-4(fp)
	monster_init(snowman, 0, 3, 30, 15, 1, -30, 20,40);
100006c0:	00800a04 	movi	r2,40
100006c4:	d8800415 	stw	r2,16(sp)
100006c8:	00800504 	movi	r2,20
100006cc:	d8800315 	stw	r2,12(sp)
100006d0:	00bff884 	movi	r2,-30
100006d4:	d8800215 	stw	r2,8(sp)
100006d8:	00800044 	movi	r2,1
100006dc:	d8800115 	stw	r2,4(sp)
100006e0:	008003c4 	movi	r2,15
100006e4:	d8800015 	stw	r2,0(sp)
100006e8:	01c00784 	movi	r7,30
100006ec:	018000c4 	movi	r6,3
100006f0:	000b883a 	mov	r5,zero
100006f4:	e13ffe17 	ldw	r4,-8(fp)
100006f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 1, 2, 30, 25, 1, -20, 80,40);
100006fc:	00800a04 	movi	r2,40
10000700:	d8800415 	stw	r2,16(sp)
10000704:	00801404 	movi	r2,80
10000708:	d8800315 	stw	r2,12(sp)
1000070c:	00bffb04 	movi	r2,-20
10000710:	d8800215 	stw	r2,8(sp)
10000714:	00800044 	movi	r2,1
10000718:	d8800115 	stw	r2,4(sp)
1000071c:	00800644 	movi	r2,25
10000720:	d8800015 	stw	r2,0(sp)
10000724:	01c00784 	movi	r7,30
10000728:	01800084 	movi	r6,2
1000072c:	01400044 	movi	r5,1
10000730:	e13fff17 	ldw	r4,-4(fp)
10000734:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000738:	00000d06 	br	10000770 <round3+0xd0>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000073c:	e1ffff17 	ldw	r7,-4(fp)
10000740:	e1bffe17 	ldw	r6,-8(fp)
10000744:	e17ffd17 	ldw	r5,-12(fp)
10000748:	e13ffc17 	ldw	r4,-16(fp)
1000074c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000750:	e1ffff17 	ldw	r7,-4(fp)
10000754:	e1bffe17 	ldw	r6,-8(fp)
10000758:	e17ffd17 	ldw	r5,-12(fp)
1000075c:	e13ffc17 	ldw	r4,-16(fp)
10000760:	0000ba40 	call	10000ba4 <game_update>
		if (gingerbreadman->exist == 0){
10000764:	e0bfff17 	ldw	r2,-4(fp)
10000768:	10800017 	ldw	r2,0(r2)
1000076c:	10000526 	beq	r2,zero,10000784 <round3+0xe4>


void round3 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	monster_init(snowman, 0, 3, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 1, 2, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
10000770:	e0bffc17 	ldw	r2,-16(fp)
10000774:	10800017 	ldw	r2,0(r2)
10000778:	10800060 	cmpeqi	r2,r2,1
1000077c:	103fef1e 	bne	r2,zero,1000073c <__alt_data_end+0xf800073c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0){
			break;
		}
	}
}
10000780:	00000106 	br	10000788 <round3+0xe8>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0){
			break;
10000784:	0001883a 	nop
		}
	}
}
10000788:	0001883a 	nop
1000078c:	e037883a 	mov	sp,fp
10000790:	dfc00117 	ldw	ra,4(sp)
10000794:	df000017 	ldw	fp,0(sp)
10000798:	dec00204 	addi	sp,sp,8
1000079c:	f800283a 	ret

100007a0 <round4>:


void round4 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
100007a0:	defff504 	addi	sp,sp,-44
100007a4:	dfc00a15 	stw	ra,40(sp)
100007a8:	df000915 	stw	fp,36(sp)
100007ac:	df000904 	addi	fp,sp,36
100007b0:	e13ffc15 	stw	r4,-16(fp)
100007b4:	e17ffd15 	stw	r5,-12(fp)
100007b8:	e1bffe15 	stw	r6,-8(fp)
100007bc:	e1ffff15 	stw	r7,-4(fp)
	monster_init(snowman, 0, 2, 30, 15, 1, -30, 20,40);
100007c0:	00800a04 	movi	r2,40
100007c4:	d8800415 	stw	r2,16(sp)
100007c8:	00800504 	movi	r2,20
100007cc:	d8800315 	stw	r2,12(sp)
100007d0:	00bff884 	movi	r2,-30
100007d4:	d8800215 	stw	r2,8(sp)
100007d8:	00800044 	movi	r2,1
100007dc:	d8800115 	stw	r2,4(sp)
100007e0:	008003c4 	movi	r2,15
100007e4:	d8800015 	stw	r2,0(sp)
100007e8:	01c00784 	movi	r7,30
100007ec:	01800084 	movi	r6,2
100007f0:	000b883a 	mov	r5,zero
100007f4:	e13ffe17 	ldw	r4,-8(fp)
100007f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 1, 3, 30, 25, 1, -20, 80,40);
100007fc:	00800a04 	movi	r2,40
10000800:	d8800415 	stw	r2,16(sp)
10000804:	00801404 	movi	r2,80
10000808:	d8800315 	stw	r2,12(sp)
1000080c:	00bffb04 	movi	r2,-20
10000810:	d8800215 	stw	r2,8(sp)
10000814:	00800044 	movi	r2,1
10000818:	d8800115 	stw	r2,4(sp)
1000081c:	00800644 	movi	r2,25
10000820:	d8800015 	stw	r2,0(sp)
10000824:	01c00784 	movi	r7,30
10000828:	018000c4 	movi	r6,3
1000082c:	01400044 	movi	r5,1
10000830:	e13fff17 	ldw	r4,-4(fp)
10000834:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000838:	00000d06 	br	10000870 <round4+0xd0>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000083c:	e1ffff17 	ldw	r7,-4(fp)
10000840:	e1bffe17 	ldw	r6,-8(fp)
10000844:	e17ffd17 	ldw	r5,-12(fp)
10000848:	e13ffc17 	ldw	r4,-16(fp)
1000084c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000850:	e1ffff17 	ldw	r7,-4(fp)
10000854:	e1bffe17 	ldw	r6,-8(fp)
10000858:	e17ffd17 	ldw	r5,-12(fp)
1000085c:	e13ffc17 	ldw	r4,-16(fp)
10000860:	0000ba40 	call	10000ba4 <game_update>
		if (gingerbreadman->exist == 0){
10000864:	e0bfff17 	ldw	r2,-4(fp)
10000868:	10800017 	ldw	r2,0(r2)
1000086c:	10000526 	beq	r2,zero,10000884 <round4+0xe4>


void round4 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	monster_init(snowman, 0, 2, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 1, 3, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
10000870:	e0bffc17 	ldw	r2,-16(fp)
10000874:	10800017 	ldw	r2,0(r2)
10000878:	10800060 	cmpeqi	r2,r2,1
1000087c:	103fef1e 	bne	r2,zero,1000083c <__alt_data_end+0xf800083c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0){
			break;
		}
	}
}
10000880:	00000106 	br	10000888 <round4+0xe8>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0){
			break;
10000884:	0001883a 	nop
		}
	}
}
10000888:	0001883a 	nop
1000088c:	e037883a 	mov	sp,fp
10000890:	dfc00117 	ldw	ra,4(sp)
10000894:	df000017 	ldw	fp,0(sp)
10000898:	dec00204 	addi	sp,sp,8
1000089c:	f800283a 	ret

100008a0 <round5>:

void round5 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
100008a0:	defff504 	addi	sp,sp,-44
100008a4:	dfc00a15 	stw	ra,40(sp)
100008a8:	df000915 	stw	fp,36(sp)
100008ac:	df000904 	addi	fp,sp,36
100008b0:	e13ffc15 	stw	r4,-16(fp)
100008b4:	e17ffd15 	stw	r5,-12(fp)
100008b8:	e1bffe15 	stw	r6,-8(fp)
100008bc:	e1ffff15 	stw	r7,-4(fp)
	monster_init(snowman, 1, 2, 30, 15, 1, -30, 20,40);
100008c0:	00800a04 	movi	r2,40
100008c4:	d8800415 	stw	r2,16(sp)
100008c8:	00800504 	movi	r2,20
100008cc:	d8800315 	stw	r2,12(sp)
100008d0:	00bff884 	movi	r2,-30
100008d4:	d8800215 	stw	r2,8(sp)
100008d8:	00800044 	movi	r2,1
100008dc:	d8800115 	stw	r2,4(sp)
100008e0:	008003c4 	movi	r2,15
100008e4:	d8800015 	stw	r2,0(sp)
100008e8:	01c00784 	movi	r7,30
100008ec:	01800084 	movi	r6,2
100008f0:	01400044 	movi	r5,1
100008f4:	e13ffe17 	ldw	r4,-8(fp)
100008f8:	00011440 	call	10001144 <monster_init>
	monster_init(gingerbreadman, 1, 3, 30, 25, 1, -20, 80,40);
100008fc:	00800a04 	movi	r2,40
10000900:	d8800415 	stw	r2,16(sp)
10000904:	00801404 	movi	r2,80
10000908:	d8800315 	stw	r2,12(sp)
1000090c:	00bffb04 	movi	r2,-20
10000910:	d8800215 	stw	r2,8(sp)
10000914:	00800044 	movi	r2,1
10000918:	d8800115 	stw	r2,4(sp)
1000091c:	00800644 	movi	r2,25
10000920:	d8800015 	stw	r2,0(sp)
10000924:	01c00784 	movi	r7,30
10000928:	018000c4 	movi	r6,3
1000092c:	01400044 	movi	r5,1
10000930:	e13fff17 	ldw	r4,-4(fp)
10000934:	00011440 	call	10001144 <monster_init>
	while(*game_start == 1){
10000938:	00001006 	br	1000097c <round5+0xdc>
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
1000093c:	e1ffff17 	ldw	r7,-4(fp)
10000940:	e1bffe17 	ldw	r6,-8(fp)
10000944:	e17ffd17 	ldw	r5,-12(fp)
10000948:	e13ffc17 	ldw	r4,-16(fp)
1000094c:	00009ac0 	call	100009ac <key_event>
		game_update(game_start, saber, snowman, gingerbreadman);
10000950:	e1ffff17 	ldw	r7,-4(fp)
10000954:	e1bffe17 	ldw	r6,-8(fp)
10000958:	e17ffd17 	ldw	r5,-12(fp)
1000095c:	e13ffc17 	ldw	r4,-16(fp)
10000960:	0000ba40 	call	10000ba4 <game_update>
		if (gingerbreadman->exist == 0 && snowman->exist ==0){
10000964:	e0bfff17 	ldw	r2,-4(fp)
10000968:	10800017 	ldw	r2,0(r2)
1000096c:	1000031e 	bne	r2,zero,1000097c <round5+0xdc>
10000970:	e0bffe17 	ldw	r2,-8(fp)
10000974:	10800017 	ldw	r2,0(r2)
10000978:	10000526 	beq	r2,zero,10000990 <round5+0xf0>
}

void round5 (int *game_start, saber_t *saber, monster_t *snowman, monster_t *gingerbreadman){
	monster_init(snowman, 1, 2, 30, 15, 1, -30, 20,40);
	monster_init(gingerbreadman, 1, 3, 30, 25, 1, -20, 80,40);
	while(*game_start == 1){
1000097c:	e0bffc17 	ldw	r2,-16(fp)
10000980:	10800017 	ldw	r2,0(r2)
10000984:	10800060 	cmpeqi	r2,r2,1
10000988:	103fec1e 	bne	r2,zero,1000093c <__alt_data_end+0xf800093c>
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0 && snowman->exist ==0){
			break;
		}
	}
}
1000098c:	00000106 	br	10000994 <round5+0xf4>
	while(*game_start == 1){
		// use key code update saber state, vx and vy
		key_event(game_start, saber, snowman, gingerbreadman);
		game_update(game_start, saber, snowman, gingerbreadman);
		if (gingerbreadman->exist == 0 && snowman->exist ==0){
			break;
10000990:	0001883a 	nop
		}
	}
}
10000994:	0001883a 	nop
10000998:	e037883a 	mov	sp,fp
1000099c:	dfc00117 	ldw	ra,4(sp)
100009a0:	df000017 	ldw	fp,0(sp)
100009a4:	dec00204 	addi	sp,sp,8
100009a8:	f800283a 	ret

100009ac <key_event>:

/*
 * key_event: get key codes and update saber information
 * input : saber structure
 */
void key_event(int* game_start, saber_t* saber,monster_t* snowman, monster_t* gingerbreadman){
100009ac:	defff104 	addi	sp,sp,-60
100009b0:	dfc00e15 	stw	ra,56(sp)
100009b4:	df000d15 	stw	fp,52(sp)
100009b8:	df000d04 	addi	fp,sp,52
100009bc:	e13ffc15 	stw	r4,-16(fp)
100009c0:	e17ffd15 	stw	r5,-12(fp)
100009c4:	e1bffe15 	stw	r6,-8(fp)
100009c8:	e1ffff15 	stw	r7,-4(fp)
	unsigned long key;
	int key_array[4];
	int cur_key;
	int walk_x, walk_y;
	walk_x = 0;
100009cc:	e03ff315 	stw	zero,-52(fp)
	walk_y = 0;
100009d0:	e03ff415 	stw	zero,-48(fp)
	key = get_keycode();
100009d4:	00040c80 	call	100040c8 <get_keycode>
100009d8:	e0bff615 	stw	r2,-40(fp)
	key_array[0]= (key>>24) & 0xff;
100009dc:	e0bff617 	ldw	r2,-40(fp)
100009e0:	1004d63a 	srli	r2,r2,24
100009e4:	e0bff815 	stw	r2,-32(fp)
	key_array[1]= (key>>16) & 0xff;
100009e8:	e0bff617 	ldw	r2,-40(fp)
100009ec:	1004d43a 	srli	r2,r2,16
100009f0:	10803fcc 	andi	r2,r2,255
100009f4:	e0bff915 	stw	r2,-28(fp)
	key_array[2]= (key>>8) & 0xff;
100009f8:	e0bff617 	ldw	r2,-40(fp)
100009fc:	1004d23a 	srli	r2,r2,8
10000a00:	10803fcc 	andi	r2,r2,255
10000a04:	e0bffa15 	stw	r2,-24(fp)
	key_array[3]= key & 0xff;
10000a08:	e0bff617 	ldw	r2,-40(fp)
10000a0c:	10803fcc 	andi	r2,r2,255
10000a10:	e0bffb15 	stw	r2,-20(fp)

	for (int i =0; i< MAX_KEY;i++){
10000a14:	e03ff515 	stw	zero,-44(fp)
10000a18:	00005206 	br	10000b64 <key_event+0x1b8>
		cur_key = key_array[i];
10000a1c:	e0bff517 	ldw	r2,-44(fp)
10000a20:	1085883a 	add	r2,r2,r2
10000a24:	1085883a 	add	r2,r2,r2
10000a28:	e0fff304 	addi	r3,fp,-52
10000a2c:	1885883a 	add	r2,r3,r2
10000a30:	10800504 	addi	r2,r2,20
10000a34:	10800017 	ldw	r2,0(r2)
10000a38:	e0bff715 	stw	r2,-36(fp)
		if (cur_key == KEY_W ){
10000a3c:	e0bff717 	ldw	r2,-36(fp)
10000a40:	10800698 	cmpnei	r2,r2,26
10000a44:	1000041e 	bne	r2,zero,10000a58 <key_event+0xac>
			press_w(saber);
10000a48:	e13ffd17 	ldw	r4,-12(fp)
10000a4c:	0001a280 	call	10001a28 <press_w>
			walk_y = 1;
10000a50:	00800044 	movi	r2,1
10000a54:	e0bff415 	stw	r2,-48(fp)
		}
		if (cur_key == KEY_S){
10000a58:	e0bff717 	ldw	r2,-36(fp)
10000a5c:	10800598 	cmpnei	r2,r2,22
10000a60:	1000041e 	bne	r2,zero,10000a74 <key_event+0xc8>
			press_s(saber);
10000a64:	e13ffd17 	ldw	r4,-12(fp)
10000a68:	0001b640 	call	10001b64 <press_s>
			walk_y = 1;
10000a6c:	00800044 	movi	r2,1
10000a70:	e0bff415 	stw	r2,-48(fp)
		}
		if (cur_key == KEY_A){
10000a74:	e0bff717 	ldw	r2,-36(fp)
10000a78:	10800118 	cmpnei	r2,r2,4
10000a7c:	1000041e 	bne	r2,zero,10000a90 <key_event+0xe4>
			press_a(saber);
10000a80:	e13ffd17 	ldw	r4,-12(fp)
10000a84:	0001ca00 	call	10001ca0 <press_a>
			walk_x = 1;
10000a88:	00800044 	movi	r2,1
10000a8c:	e0bff315 	stw	r2,-52(fp)
		}
		if (cur_key == KEY_D){
10000a90:	e0bff717 	ldw	r2,-36(fp)
10000a94:	108001d8 	cmpnei	r2,r2,7
10000a98:	1000041e 	bne	r2,zero,10000aac <key_event+0x100>
			press_d(saber);
10000a9c:	e13ffd17 	ldw	r4,-12(fp)
10000aa0:	0001d880 	call	10001d88 <press_d>
			walk_x = 1;
10000aa4:	00800044 	movi	r2,1
10000aa8:	e0bff315 	stw	r2,-52(fp)
		}
		if (cur_key == KEY_J){
10000aac:	e0bff717 	ldw	r2,-36(fp)
10000ab0:	10800358 	cmpnei	r2,r2,13
10000ab4:	1000021e 	bne	r2,zero,10000ac0 <key_event+0x114>
			press_j(saber);
10000ab8:	e13ffd17 	ldw	r4,-12(fp)
10000abc:	0001e740 	call	10001e74 <press_j>
		}
		if (cur_key == KEY_K){
10000ac0:	e0bff717 	ldw	r2,-36(fp)
10000ac4:	10800398 	cmpnei	r2,r2,14
10000ac8:	1000021e 	bne	r2,zero,10000ad4 <key_event+0x128>
			press_k(saber);
10000acc:	e13ffd17 	ldw	r4,-12(fp)
10000ad0:	0001f0c0 	call	10001f0c <press_k>
		}
		if (cur_key == KEY_L){
10000ad4:	e0bff717 	ldw	r2,-36(fp)
10000ad8:	108003d8 	cmpnei	r2,r2,15
10000adc:	1000021e 	bne	r2,zero,10000ae8 <key_event+0x13c>
			press_l(saber);
10000ae0:	e13ffd17 	ldw	r4,-12(fp)
10000ae4:	0001fdc0 	call	10001fdc <press_l>
		}
		if (cur_key == KEY_ENTER){
10000ae8:	e0bff717 	ldw	r2,-36(fp)
10000aec:	10800a18 	cmpnei	r2,r2,40
10000af0:	1000041e 	bne	r2,zero,10000b04 <key_event+0x158>
			*game_start = 1;
10000af4:	e0bffc17 	ldw	r2,-16(fp)
10000af8:	00c00044 	movi	r3,1
10000afc:	10c00015 	stw	r3,0(r2)
			return;
10000b00:	00002306 	br	10000b90 <key_event+0x1e4>
		}
		if (cur_key == KEY_ESC){
10000b04:	e0bff717 	ldw	r2,-36(fp)
10000b08:	10800a58 	cmpnei	r2,r2,41
10000b0c:	1000041e 	bne	r2,zero,10000b20 <key_event+0x174>
			*game_start = 0;
10000b10:	e0bffc17 	ldw	r2,-16(fp)
10000b14:	10000015 	stw	zero,0(r2)
			developer_mode = 0;
10000b18:	d026cd15 	stw	zero,-25804(gp)
			return;
10000b1c:	00001c06 	br	10000b90 <key_event+0x1e4>
		}
		if (cur_key == KEY_ESC){
10000b20:	e0bff717 	ldw	r2,-36(fp)
10000b24:	10800a58 	cmpnei	r2,r2,41
10000b28:	1000031e 	bne	r2,zero,10000b38 <key_event+0x18c>
			*game_start = 0;
10000b2c:	e0bffc17 	ldw	r2,-16(fp)
10000b30:	10000015 	stw	zero,0(r2)
			return;
10000b34:	00001606 	br	10000b90 <key_event+0x1e4>
		}
		if (cur_key == KEY_BACKSPACE){
10000b38:	e0bff717 	ldw	r2,-36(fp)
10000b3c:	10800a98 	cmpnei	r2,r2,42
10000b40:	1000051e 	bne	r2,zero,10000b58 <key_event+0x1ac>
			*game_start = 0;
10000b44:	e0bffc17 	ldw	r2,-16(fp)
10000b48:	10000015 	stw	zero,0(r2)
			developer_mode = 1;
10000b4c:	00800044 	movi	r2,1
10000b50:	d0a6cd15 	stw	r2,-25804(gp)
			return;
10000b54:	00000e06 	br	10000b90 <key_event+0x1e4>
	key_array[0]= (key>>24) & 0xff;
	key_array[1]= (key>>16) & 0xff;
	key_array[2]= (key>>8) & 0xff;
	key_array[3]= key & 0xff;

	for (int i =0; i< MAX_KEY;i++){
10000b58:	e0bff517 	ldw	r2,-44(fp)
10000b5c:	10800044 	addi	r2,r2,1
10000b60:	e0bff515 	stw	r2,-44(fp)
10000b64:	e0bff517 	ldw	r2,-44(fp)
10000b68:	10800110 	cmplti	r2,r2,4
10000b6c:	103fab1e 	bne	r2,zero,10000a1c <__alt_data_end+0xf8000a1c>
			developer_mode = 1;
			return;
		}
	}

	if (walk_x == 0){saber->vx = 0;}
10000b70:	e0bff317 	ldw	r2,-52(fp)
10000b74:	1000021e 	bne	r2,zero,10000b80 <key_event+0x1d4>
10000b78:	e0bffd17 	ldw	r2,-12(fp)
10000b7c:	10000315 	stw	zero,12(r2)
	if (walk_y == 0){saber->vy = 0;}
10000b80:	e0bff417 	ldw	r2,-48(fp)
10000b84:	1000021e 	bne	r2,zero,10000b90 <key_event+0x1e4>
10000b88:	e0bffd17 	ldw	r2,-12(fp)
10000b8c:	10000415 	stw	zero,16(r2)
}
10000b90:	e037883a 	mov	sp,fp
10000b94:	dfc00117 	ldw	ra,4(sp)
10000b98:	df000017 	ldw	fp,0(sp)
10000b9c:	dec00204 	addi	sp,sp,8
10000ba0:	f800283a 	ret

10000ba4 <game_update>:

void game_update(int *game_start,saber_t *saber, monster_t *snowman, monster_t* gingerbreadman){
10000ba4:	defffa04 	addi	sp,sp,-24
10000ba8:	dfc00515 	stw	ra,20(sp)
10000bac:	df000415 	stw	fp,16(sp)
10000bb0:	df000404 	addi	fp,sp,16
10000bb4:	e13ffc15 	stw	r4,-16(fp)
10000bb8:	e17ffd15 	stw	r5,-12(fp)
10000bbc:	e1bffe15 	stw	r6,-8(fp)
10000bc0:	e1ffff15 	stw	r7,-4(fp)
	saber_be_attacked_check(saber,snowman);
10000bc4:	e17ffe17 	ldw	r5,-8(fp)
10000bc8:	e13ffd17 	ldw	r4,-12(fp)
10000bcc:	000155c0 	call	1000155c <saber_be_attacked_check>
	saber_be_attacked_check(saber,gingerbreadman);
10000bd0:	e17fff17 	ldw	r5,-4(fp)
10000bd4:	e13ffd17 	ldw	r4,-12(fp)
10000bd8:	000155c0 	call	1000155c <saber_be_attacked_check>

	// update saber state and x, y
	update(saber);
10000bdc:	e13ffd17 	ldw	r4,-12(fp)
10000be0:	000211c0 	call	1000211c <update>

	// use information for both snowman and saber to update snowman
	monster_update(snowman, saber);
10000be4:	e17ffd17 	ldw	r5,-12(fp)
10000be8:	e13ffe17 	ldw	r4,-8(fp)
10000bec:	00016700 	call	10001670 <monster_update>

	// use information for both gingerbreadman and saber to update snowman
	monster_update(gingerbreadman, saber);
10000bf0:	e17ffd17 	ldw	r5,-12(fp)
10000bf4:	e13fff17 	ldw	r4,-4(fp)
10000bf8:	00016700 	call	10001670 <monster_update>

	// send the information to the hardware
	gamefile_update(game_start, saber, snowman, gingerbreadman);
10000bfc:	e1ffff17 	ldw	r7,-4(fp)
10000c00:	e1bffe17 	ldw	r6,-8(fp)
10000c04:	e17ffd17 	ldw	r5,-12(fp)
10000c08:	e13ffc17 	ldw	r4,-16(fp)
10000c0c:	0000c280 	call	10000c28 <gamefile_update>
}
10000c10:	0001883a 	nop
10000c14:	e037883a 	mov	sp,fp
10000c18:	dfc00117 	ldw	ra,4(sp)
10000c1c:	df000017 	ldw	fp,0(sp)
10000c20:	dec00204 	addi	sp,sp,8
10000c24:	f800283a 	ret

10000c28 <gamefile_update>:

/*
 * gamefile_update : use characters information to update the game file,
 * 					which will communicate with the hardware
 */
void gamefile_update(int *game_start, saber_t *saber, monster_t *snowman, monster_t* gingerbreadman){
10000c28:	defffb04 	addi	sp,sp,-20
10000c2c:	df000415 	stw	fp,16(sp)
10000c30:	df000404 	addi	fp,sp,16
10000c34:	e13ffc15 	stw	r4,-16(fp)
10000c38:	e17ffd15 	stw	r5,-12(fp)
10000c3c:	e1bffe15 	stw	r6,-8(fp)
10000c40:	e1ffff15 	stw	r7,-4(fp)
	game_file[0] = saber->exist;
10000c44:	d0a00017 	ldw	r2,-32768(gp)
10000c48:	e0fffd17 	ldw	r3,-12(fp)
10000c4c:	18c00017 	ldw	r3,0(r3)
10000c50:	10c00015 	stw	r3,0(r2)
	game_file[1] = saber->x;
10000c54:	d0a00017 	ldw	r2,-32768(gp)
10000c58:	10800104 	addi	r2,r2,4
10000c5c:	e0fffd17 	ldw	r3,-12(fp)
10000c60:	18c00117 	ldw	r3,4(r3)
10000c64:	10c00015 	stw	r3,0(r2)
	game_file[2] = saber->y;
10000c68:	d0a00017 	ldw	r2,-32768(gp)
10000c6c:	10800204 	addi	r2,r2,8
10000c70:	e0fffd17 	ldw	r3,-12(fp)
10000c74:	18c00217 	ldw	r3,8(r3)
10000c78:	10c00015 	stw	r3,0(r2)
	game_file[3] = saber->state;
10000c7c:	d0a00017 	ldw	r2,-32768(gp)
10000c80:	10800304 	addi	r2,r2,12
10000c84:	e0fffd17 	ldw	r3,-12(fp)
10000c88:	18c00817 	ldw	r3,32(r3)
10000c8c:	10c00015 	stw	r3,0(r2)
	game_file[4] = saber->HP > 2;
10000c90:	d0a00017 	ldw	r2,-32768(gp)
10000c94:	10800404 	addi	r2,r2,16
10000c98:	e0fffd17 	ldw	r3,-12(fp)
10000c9c:	18c00517 	ldw	r3,20(r3)
10000ca0:	18c000c8 	cmpgei	r3,r3,3
10000ca4:	18c03fcc 	andi	r3,r3,255
10000ca8:	10c00015 	stw	r3,0(r2)

	game_file[7] = snowman->exist;
10000cac:	d0a00017 	ldw	r2,-32768(gp)
10000cb0:	10800704 	addi	r2,r2,28
10000cb4:	e0fffe17 	ldw	r3,-8(fp)
10000cb8:	18c00017 	ldw	r3,0(r3)
10000cbc:	10c00015 	stw	r3,0(r2)
	game_file[8] = snowman->x;
10000cc0:	d0a00017 	ldw	r2,-32768(gp)
10000cc4:	10800804 	addi	r2,r2,32
10000cc8:	e0fffe17 	ldw	r3,-8(fp)
10000ccc:	18c00117 	ldw	r3,4(r3)
10000cd0:	10c00015 	stw	r3,0(r2)
	game_file[9] = snowman->y;
10000cd4:	d0a00017 	ldw	r2,-32768(gp)
10000cd8:	10800904 	addi	r2,r2,36
10000cdc:	e0fffe17 	ldw	r3,-8(fp)
10000ce0:	18c00217 	ldw	r3,8(r3)
10000ce4:	10c00015 	stw	r3,0(r2)
	game_file[10] = snowman->state;
10000ce8:	d0a00017 	ldw	r2,-32768(gp)
10000cec:	10800a04 	addi	r2,r2,40
10000cf0:	e0fffe17 	ldw	r3,-8(fp)
10000cf4:	18c00d17 	ldw	r3,52(r3)
10000cf8:	10c00015 	stw	r3,0(r2)

	game_file[13] = gingerbreadman->exist;
10000cfc:	d0a00017 	ldw	r2,-32768(gp)
10000d00:	10800d04 	addi	r2,r2,52
10000d04:	e0ffff17 	ldw	r3,-4(fp)
10000d08:	18c00017 	ldw	r3,0(r3)
10000d0c:	10c00015 	stw	r3,0(r2)
	game_file[14] = gingerbreadman->x;
10000d10:	d0a00017 	ldw	r2,-32768(gp)
10000d14:	10800e04 	addi	r2,r2,56
10000d18:	e0ffff17 	ldw	r3,-4(fp)
10000d1c:	18c00117 	ldw	r3,4(r3)
10000d20:	10c00015 	stw	r3,0(r2)
	game_file[15] = gingerbreadman->y;
10000d24:	d0a00017 	ldw	r2,-32768(gp)
10000d28:	10800f04 	addi	r2,r2,60
10000d2c:	e0ffff17 	ldw	r3,-4(fp)
10000d30:	18c00217 	ldw	r3,8(r3)
10000d34:	10c00015 	stw	r3,0(r2)
	game_file[16] = gingerbreadman->state;
10000d38:	d0a00017 	ldw	r2,-32768(gp)
10000d3c:	10801004 	addi	r2,r2,64
10000d40:	e0ffff17 	ldw	r3,-4(fp)
10000d44:	18c00d17 	ldw	r3,52(r3)
10000d48:	10c00015 	stw	r3,0(r2)

	game_file[19] = *game_start;
10000d4c:	d0a00017 	ldw	r2,-32768(gp)
10000d50:	10801304 	addi	r2,r2,76
10000d54:	e0fffc17 	ldw	r3,-16(fp)
10000d58:	18c00017 	ldw	r3,0(r3)
10000d5c:	10c00015 	stw	r3,0(r2)
	game_file[20] = *game_start==0;
10000d60:	d0a00017 	ldw	r2,-32768(gp)
10000d64:	10801404 	addi	r2,r2,80
10000d68:	e0fffc17 	ldw	r3,-16(fp)
10000d6c:	18c00017 	ldw	r3,0(r3)
10000d70:	1807003a 	cmpeq	r3,r3,zero
10000d74:	18c03fcc 	andi	r3,r3,255
10000d78:	10c00015 	stw	r3,0(r2)
	game_file[22] = saber->HP<=0;
10000d7c:	d0a00017 	ldw	r2,-32768(gp)
10000d80:	10801604 	addi	r2,r2,88
10000d84:	e0fffd17 	ldw	r3,-12(fp)
10000d88:	18c00517 	ldw	r3,20(r3)
10000d8c:	00c6403a 	cmpge	r3,zero,r3
10000d90:	18c03fcc 	andi	r3,r3,255
10000d94:	10c00015 	stw	r3,0(r2)

	game_file[24] = saber -> HP;
10000d98:	d0a00017 	ldw	r2,-32768(gp)
10000d9c:	10801804 	addi	r2,r2,96
10000da0:	e0fffd17 	ldw	r3,-12(fp)
10000da4:	18c00517 	ldw	r3,20(r3)
10000da8:	10c00015 	stw	r3,0(r2)
	game_file[25] = *game_start;
10000dac:	d0a00017 	ldw	r2,-32768(gp)
10000db0:	10801904 	addi	r2,r2,100
10000db4:	e0fffc17 	ldw	r3,-16(fp)
10000db8:	18c00017 	ldw	r3,0(r3)
10000dbc:	10c00015 	stw	r3,0(r2)

	game_file[26] = snowman->blood_state<=BLOOD3;
10000dc0:	d0a00017 	ldw	r2,-32768(gp)
10000dc4:	10801a04 	addi	r2,r2,104
10000dc8:	e0fffe17 	ldw	r3,-8(fp)
10000dcc:	18c00e17 	ldw	r3,56(r3)
10000dd0:	18c000d0 	cmplti	r3,r3,3
10000dd4:	18c03fcc 	andi	r3,r3,255
10000dd8:	10c00015 	stw	r3,0(r2)
	game_file[27] = gingerbreadman->blood_state<=BLOOD3;
10000ddc:	d0a00017 	ldw	r2,-32768(gp)
10000de0:	10801b04 	addi	r2,r2,108
10000de4:	e0ffff17 	ldw	r3,-4(fp)
10000de8:	18c00e17 	ldw	r3,56(r3)
10000dec:	18c000d0 	cmplti	r3,r3,3
10000df0:	18c03fcc 	andi	r3,r3,255
10000df4:	10c00015 	stw	r3,0(r2)
	game_file[28] = snowman->blood_state;
10000df8:	d0a00017 	ldw	r2,-32768(gp)
10000dfc:	10801c04 	addi	r2,r2,112
10000e00:	e0fffe17 	ldw	r3,-8(fp)
10000e04:	18c00e17 	ldw	r3,56(r3)
10000e08:	10c00015 	stw	r3,0(r2)
	game_file[29] = gingerbreadman->blood_state;
10000e0c:	d0a00017 	ldw	r2,-32768(gp)
10000e10:	10801d04 	addi	r2,r2,116
10000e14:	e0ffff17 	ldw	r3,-4(fp)
10000e18:	18c00e17 	ldw	r3,56(r3)
10000e1c:	10c00015 	stw	r3,0(r2)
	game_file[30] = snowman->attack_x-20;
10000e20:	d0a00017 	ldw	r2,-32768(gp)
10000e24:	10801e04 	addi	r2,r2,120
10000e28:	e0fffe17 	ldw	r3,-8(fp)
10000e2c:	18c00317 	ldw	r3,12(r3)
10000e30:	18fffb04 	addi	r3,r3,-20
10000e34:	10c00015 	stw	r3,0(r2)
	game_file[31] = snowman->attack_y;
10000e38:	d0a00017 	ldw	r2,-32768(gp)
10000e3c:	10801f04 	addi	r2,r2,124
10000e40:	e0fffe17 	ldw	r3,-8(fp)
10000e44:	18c00417 	ldw	r3,16(r3)
10000e48:	10c00015 	stw	r3,0(r2)
	game_file[32] = gingerbreadman->attack_x;
10000e4c:	d0a00017 	ldw	r2,-32768(gp)
10000e50:	10802004 	addi	r2,r2,128
10000e54:	e0ffff17 	ldw	r3,-4(fp)
10000e58:	18c00317 	ldw	r3,12(r3)
10000e5c:	10c00015 	stw	r3,0(r2)
	game_file[33] = gingerbreadman->attack_y;
10000e60:	d0a00017 	ldw	r2,-32768(gp)
10000e64:	10802104 	addi	r2,r2,132
10000e68:	e0ffff17 	ldw	r3,-4(fp)
10000e6c:	18c00417 	ldw	r3,16(r3)
10000e70:	10c00015 	stw	r3,0(r2)

	game_file[35] = saber -> Excalibur_state < EXCALIBURNULL;
10000e74:	d0a00017 	ldw	r2,-32768(gp)
10000e78:	10802304 	addi	r2,r2,140
10000e7c:	e0fffd17 	ldw	r3,-12(fp)
10000e80:	18c00a17 	ldw	r3,40(r3)
10000e84:	18c00210 	cmplti	r3,r3,8
10000e88:	18c03fcc 	andi	r3,r3,255
10000e8c:	10c00015 	stw	r3,0(r2)
	game_file[36] = (saber->FaceDirection==RIGHT)? saber->x+EXCALIBUR_LENGTH/2+EXCALIBUR_X_BIAS: saber->x-(EXCALIBUR_LENGTH/2+EXCALIBUR_X_BIAS);
10000e90:	d0a00017 	ldw	r2,-32768(gp)
10000e94:	10802404 	addi	r2,r2,144
10000e98:	e0fffd17 	ldw	r3,-12(fp)
10000e9c:	18c00717 	ldw	r3,28(r3)
10000ea0:	1800041e 	bne	r3,zero,10000eb4 <gamefile_update+0x28c>
10000ea4:	e0fffd17 	ldw	r3,-12(fp)
10000ea8:	18c00117 	ldw	r3,4(r3)
10000eac:	18c02084 	addi	r3,r3,130
10000eb0:	00000306 	br	10000ec0 <gamefile_update+0x298>
10000eb4:	e0fffd17 	ldw	r3,-12(fp)
10000eb8:	18c00117 	ldw	r3,4(r3)
10000ebc:	18ffdf84 	addi	r3,r3,-130
10000ec0:	10c00015 	stw	r3,0(r2)
	game_file[37] = saber-> y+EXCALIBUR_Y_BIAS;
10000ec4:	d0a00017 	ldw	r2,-32768(gp)
10000ec8:	10802504 	addi	r2,r2,148
10000ecc:	e0fffd17 	ldw	r3,-12(fp)
10000ed0:	18c00217 	ldw	r3,8(r3)
10000ed4:	18fffc44 	addi	r3,r3,-15
10000ed8:	10c00015 	stw	r3,0(r2)
	game_file[38] = saber->Excalibur_state;
10000edc:	d0a00017 	ldw	r2,-32768(gp)
10000ee0:	10802604 	addi	r2,r2,152
10000ee4:	e0fffd17 	ldw	r3,-12(fp)
10000ee8:	18c00a17 	ldw	r3,40(r3)
10000eec:	10c00015 	stw	r3,0(r2)
	game_file[39] = saber->FaceDirection == LEFT;
10000ef0:	d0a00017 	ldw	r2,-32768(gp)
10000ef4:	10802704 	addi	r2,r2,156
10000ef8:	e0fffd17 	ldw	r3,-12(fp)
10000efc:	18c00717 	ldw	r3,28(r3)
10000f00:	18c00060 	cmpeqi	r3,r3,1
10000f04:	18c03fcc 	andi	r3,r3,255
10000f08:	10c00015 	stw	r3,0(r2)
	game_file[41] = win;
10000f0c:	d0a00017 	ldw	r2,-32768(gp)
10000f10:	10802904 	addi	r2,r2,164
10000f14:	d0e6cf17 	ldw	r3,-25796(gp)
10000f18:	10c00015 	stw	r3,0(r2)

	game_file[43] = saber->Excalibur_remain;
10000f1c:	d0a00017 	ldw	r2,-32768(gp)
10000f20:	10802b04 	addi	r2,r2,172
10000f24:	e0fffd17 	ldw	r3,-12(fp)
10000f28:	18c00c17 	ldw	r3,48(r3)
10000f2c:	10c00015 	stw	r3,0(r2)
	game_file[44] = *game_start;
10000f30:	d0a00017 	ldw	r2,-32768(gp)
10000f34:	10802c04 	addi	r2,r2,176
10000f38:	e0fffc17 	ldw	r3,-16(fp)
10000f3c:	18c00017 	ldw	r3,0(r3)
10000f40:	10c00015 	stw	r3,0(r2)
}
10000f44:	0001883a 	nop
10000f48:	e037883a 	mov	sp,fp
10000f4c:	df000017 	ldw	fp,0(sp)
10000f50:	dec00104 	addi	sp,sp,4
10000f54:	f800283a 	ret

10000f58 <main>:


int main(){
10000f58:	deffbe04 	addi	sp,sp,-264
10000f5c:	dfc04115 	stw	ra,260(sp)
10000f60:	df004015 	stw	fp,256(sp)
10000f64:	df004004 	addi	fp,sp,256
	saber_t saber;
	int game_start = 0;
10000f68:	e03fd115 	stw	zero,-188(fp)
	monster_t snowman;
	monster_t gingerbreadman;
	usb_init();		// initialize usb
10000f6c:	00035c80 	call	100035c8 <usb_init>
	developer_mode = 0;
10000f70:	d026cd15 	stw	zero,-25804(gp)
	GAME_INITIAL:
	win = 0;
10000f74:	d026cf15 	stw	zero,-25796(gp)
	while(game_start == 0){
10000f78:	00001206 	br	10000fc4 <main+0x6c>
		key_event(&game_start, &saber, &snowman, &gingerbreadman);
10000f7c:	e17fe904 	addi	r5,fp,-92
10000f80:	e13fd204 	addi	r4,fp,-184
10000f84:	e0ffc104 	addi	r3,fp,-252
10000f88:	e0bfd104 	addi	r2,fp,-188
10000f8c:	280f883a 	mov	r7,r5
10000f90:	200d883a 	mov	r6,r4
10000f94:	180b883a 	mov	r5,r3
10000f98:	1009883a 	mov	r4,r2
10000f9c:	00009ac0 	call	100009ac <key_event>
		gamefile_update(&game_start, &saber, &snowman, &gingerbreadman);
10000fa0:	e17fe904 	addi	r5,fp,-92
10000fa4:	e13fd204 	addi	r4,fp,-184
10000fa8:	e0ffc104 	addi	r3,fp,-252
10000fac:	e0bfd104 	addi	r2,fp,-188
10000fb0:	280f883a 	mov	r7,r5
10000fb4:	200d883a 	mov	r6,r4
10000fb8:	180b883a 	mov	r5,r3
10000fbc:	1009883a 	mov	r4,r2
10000fc0:	0000c280 	call	10000c28 <gamefile_update>
	monster_t gingerbreadman;
	usb_init();		// initialize usb
	developer_mode = 0;
	GAME_INITIAL:
	win = 0;
	while(game_start == 0){
10000fc4:	e0bfd117 	ldw	r2,-188(fp)
10000fc8:	103fec26 	beq	r2,zero,10000f7c <__alt_data_end+0xf8000f7c>
		key_event(&game_start, &saber, &snowman, &gingerbreadman);
		gamefile_update(&game_start, &saber, &snowman, &gingerbreadman);
	}

	printf("game start\n");
10000fcc:	01040074 	movhi	r4,4097
10000fd0:	210f7004 	addi	r4,r4,15808
10000fd4:	00053d00 	call	100053d0 <puts>
	int frame_time = 0.2;
10000fd8:	e03fc015 	stw	zero,-256(fp)
	while (1){
		// wait until next clock
		frame_clock (frame_time);
10000fdc:	e13fc017 	ldw	r4,-256(fp)
10000fe0:	00050480 	call	10005048 <__floatsidf>
10000fe4:	100b883a 	mov	r5,r2
10000fe8:	180d883a 	mov	r6,r3
10000fec:	2809883a 	mov	r4,r5
10000ff0:	300b883a 	mov	r5,r6
10000ff4:	00003cc0 	call	100003cc <frame_clock>
		round1(&game_start, &saber, &snowman, &gingerbreadman);
10000ff8:	e17fe904 	addi	r5,fp,-92
10000ffc:	e13fd204 	addi	r4,fp,-184
10001000:	e0ffc104 	addi	r3,fp,-252
10001004:	e0bfd104 	addi	r2,fp,-188
10001008:	280f883a 	mov	r7,r5
1000100c:	200d883a 	mov	r6,r4
10001010:	180b883a 	mov	r5,r3
10001014:	1009883a 	mov	r4,r2
10001018:	00004840 	call	10000484 <round1>
		if (game_start ==0){goto GAME_INITIAL;}
1000101c:	e0bfd117 	ldw	r2,-188(fp)
10001020:	1000011e 	bne	r2,zero,10001028 <main+0xd0>
10001024:	003fd306 	br	10000f74 <__alt_data_end+0xf8000f74>
		round2(&game_start, &saber, &snowman, &gingerbreadman);
10001028:	e17fe904 	addi	r5,fp,-92
1000102c:	e13fd204 	addi	r4,fp,-184
10001030:	e0ffc104 	addi	r3,fp,-252
10001034:	e0bfd104 	addi	r2,fp,-188
10001038:	280f883a 	mov	r7,r5
1000103c:	200d883a 	mov	r6,r4
10001040:	180b883a 	mov	r5,r3
10001044:	1009883a 	mov	r4,r2
10001048:	00005a00 	call	100005a0 <round2>
		if (game_start ==0){goto GAME_INITIAL;}
1000104c:	e0bfd117 	ldw	r2,-188(fp)
10001050:	1000011e 	bne	r2,zero,10001058 <main+0x100>
10001054:	003fc706 	br	10000f74 <__alt_data_end+0xf8000f74>
		round3(&game_start, &saber, &snowman, &gingerbreadman);
10001058:	e17fe904 	addi	r5,fp,-92
1000105c:	e13fd204 	addi	r4,fp,-184
10001060:	e0ffc104 	addi	r3,fp,-252
10001064:	e0bfd104 	addi	r2,fp,-188
10001068:	280f883a 	mov	r7,r5
1000106c:	200d883a 	mov	r6,r4
10001070:	180b883a 	mov	r5,r3
10001074:	1009883a 	mov	r4,r2
10001078:	00006a00 	call	100006a0 <round3>
		if (game_start ==0){goto GAME_INITIAL;}
1000107c:	e0bfd117 	ldw	r2,-188(fp)
10001080:	1000011e 	bne	r2,zero,10001088 <main+0x130>
10001084:	003fbb06 	br	10000f74 <__alt_data_end+0xf8000f74>
		round4(&game_start, &saber, &snowman, &gingerbreadman);
10001088:	e17fe904 	addi	r5,fp,-92
1000108c:	e13fd204 	addi	r4,fp,-184
10001090:	e0ffc104 	addi	r3,fp,-252
10001094:	e0bfd104 	addi	r2,fp,-188
10001098:	280f883a 	mov	r7,r5
1000109c:	200d883a 	mov	r6,r4
100010a0:	180b883a 	mov	r5,r3
100010a4:	1009883a 	mov	r4,r2
100010a8:	00007a00 	call	100007a0 <round4>
		if (game_start ==0){goto GAME_INITIAL;}
100010ac:	e0bfd117 	ldw	r2,-188(fp)
100010b0:	1000011e 	bne	r2,zero,100010b8 <main+0x160>
100010b4:	003faf06 	br	10000f74 <__alt_data_end+0xf8000f74>
		round5(&game_start, &saber, &snowman, &gingerbreadman);
100010b8:	e17fe904 	addi	r5,fp,-92
100010bc:	e13fd204 	addi	r4,fp,-184
100010c0:	e0ffc104 	addi	r3,fp,-252
100010c4:	e0bfd104 	addi	r2,fp,-188
100010c8:	280f883a 	mov	r7,r5
100010cc:	200d883a 	mov	r6,r4
100010d0:	180b883a 	mov	r5,r3
100010d4:	1009883a 	mov	r4,r2
100010d8:	00008a00 	call	100008a0 <round5>
		if (game_start ==0){goto GAME_INITIAL;}
100010dc:	e0bfd117 	ldw	r2,-188(fp)
100010e0:	1000011e 	bne	r2,zero,100010e8 <main+0x190>
100010e4:	003fa306 	br	10000f74 <__alt_data_end+0xf8000f74>
		//win
		win = 1;
100010e8:	00800044 	movi	r2,1
100010ec:	d0a6cf15 	stw	r2,-25796(gp)
		while(1){
			key_event(&game_start, &saber, &snowman, &gingerbreadman);
100010f0:	e17fe904 	addi	r5,fp,-92
100010f4:	e13fd204 	addi	r4,fp,-184
100010f8:	e0ffc104 	addi	r3,fp,-252
100010fc:	e0bfd104 	addi	r2,fp,-188
10001100:	280f883a 	mov	r7,r5
10001104:	200d883a 	mov	r6,r4
10001108:	180b883a 	mov	r5,r3
1000110c:	1009883a 	mov	r4,r2
10001110:	00009ac0 	call	100009ac <key_event>
			gamefile_update(&game_start, &saber, &snowman, &gingerbreadman);
10001114:	e17fe904 	addi	r5,fp,-92
10001118:	e13fd204 	addi	r4,fp,-184
1000111c:	e0ffc104 	addi	r3,fp,-252
10001120:	e0bfd104 	addi	r2,fp,-188
10001124:	280f883a 	mov	r7,r5
10001128:	200d883a 	mov	r6,r4
1000112c:	180b883a 	mov	r5,r3
10001130:	1009883a 	mov	r4,r2
10001134:	0000c280 	call	10000c28 <gamefile_update>
			if (game_start ==0){goto GAME_INITIAL;}
10001138:	e0bfd117 	ldw	r2,-188(fp)
1000113c:	103fec1e 	bne	r2,zero,100010f0 <__alt_data_end+0xf80010f0>
10001140:	003f8c06 	br	10000f74 <__alt_data_end+0xf8000f74>

10001144 <monster_init>:

/*
 * monster_t *monster: pointer of the monster instance
 * int exist:
 */
void monster_init(monster_t *monster, int exist, int speed, int fat, int HP, int ATK, int ATTACK_BIASX, int ATTACK_BIASY, int ATTACK_RANGE){
10001144:	defffb04 	addi	sp,sp,-20
10001148:	df000415 	stw	fp,16(sp)
1000114c:	df000404 	addi	fp,sp,16
10001150:	e13ffc15 	stw	r4,-16(fp)
10001154:	e17ffd15 	stw	r5,-12(fp)
10001158:	e1bffe15 	stw	r6,-8(fp)
1000115c:	e1ffff15 	stw	r7,-4(fp)
	monster->exist = exist;
10001160:	e0bffc17 	ldw	r2,-16(fp)
10001164:	e0fffd17 	ldw	r3,-12(fp)
10001168:	10c00015 	stw	r3,0(r2)
	monster->x = SNOWMAN_INIT_X;
1000116c:	e0bffc17 	ldw	r2,-16(fp)
10001170:	00c09604 	movi	r3,600
10001174:	10c00115 	stw	r3,4(r2)
	monster->y = SNOWMAN_INIT_Y;
10001178:	e0bffc17 	ldw	r2,-16(fp)
1000117c:	00c03204 	movi	r3,200
10001180:	10c00215 	stw	r3,8(r2)
	monster->attack_x = monster->x + ATTACK_BIASX;
10001184:	e0bffc17 	ldw	r2,-16(fp)
10001188:	10c00117 	ldw	r3,4(r2)
1000118c:	e0800317 	ldw	r2,12(fp)
10001190:	1887883a 	add	r3,r3,r2
10001194:	e0bffc17 	ldw	r2,-16(fp)
10001198:	10c00315 	stw	r3,12(r2)
	monster->attack_y = monster->y + ATTACK_BIASY;
1000119c:	e0bffc17 	ldw	r2,-16(fp)
100011a0:	10c00217 	ldw	r3,8(r2)
100011a4:	e0800417 	ldw	r2,16(fp)
100011a8:	1887883a 	add	r3,r3,r2
100011ac:	e0bffc17 	ldw	r2,-16(fp)
100011b0:	10c00415 	stw	r3,16(r2)
	monster->attack_biasx = ATTACK_BIASX;
100011b4:	e0bffc17 	ldw	r2,-16(fp)
100011b8:	e0c00317 	ldw	r3,12(fp)
100011bc:	10c00715 	stw	r3,28(r2)
	monster->attack_biasy = ATTACK_BIASY;
100011c0:	e0bffc17 	ldw	r2,-16(fp)
100011c4:	e0c00417 	ldw	r3,16(fp)
100011c8:	10c00815 	stw	r3,32(r2)
	monster->attack_arange = ATTACK_RANGE;
100011cc:	e0bffc17 	ldw	r2,-16(fp)
100011d0:	e0c00517 	ldw	r3,20(fp)
100011d4:	10c00915 	stw	r3,36(r2)
	monster->vx = -speed;
100011d8:	e0bffe17 	ldw	r2,-8(fp)
100011dc:	0087c83a 	sub	r3,zero,r2
100011e0:	e0bffc17 	ldw	r2,-16(fp)
100011e4:	10c00515 	stw	r3,20(r2)
	monster->vy = 0;
100011e8:	e0bffc17 	ldw	r2,-16(fp)
100011ec:	10000615 	stw	zero,24(r2)
	monster->FAT = fat;
100011f0:	e0bffc17 	ldw	r2,-16(fp)
100011f4:	e0ffff17 	ldw	r3,-4(fp)
100011f8:	10c00a15 	stw	r3,40(r2)
	monster->HP = HP;
100011fc:	e0bffc17 	ldw	r2,-16(fp)
10001200:	e0c00117 	ldw	r3,4(fp)
10001204:	10c00b15 	stw	r3,44(r2)
	monster->ATK = ATK;
10001208:	e0bffc17 	ldw	r2,-16(fp)
1000120c:	e0c00217 	ldw	r3,8(fp)
10001210:	10c00c15 	stw	r3,48(r2)
	monster->state = WALK1;
10001214:	e0bffc17 	ldw	r2,-16(fp)
10001218:	10000d15 	stw	zero,52(r2)
	monster->blood_state = SAFE;
1000121c:	e0bffc17 	ldw	r2,-16(fp)
10001220:	00c000c4 	movi	r3,3
10001224:	10c00e15 	stw	r3,56(r2)
	monster->blood_count = 0;
10001228:	e0bffc17 	ldw	r2,-16(fp)
1000122c:	10000f15 	stw	zero,60(r2)
	monster->state_count = 0; 	// frame count for each state
10001230:	e0bffc17 	ldw	r2,-16(fp)
10001234:	10001015 	stw	zero,64(r2)
	monster->fight_count = 0;
10001238:	e0bffc17 	ldw	r2,-16(fp)
1000123c:	10001515 	stw	zero,84(r2)
	monster->bleeding = 0;
10001240:	e0bffc17 	ldw	r2,-16(fp)
10001244:	10001415 	stw	zero,80(r2)
	monster->Dying = 0;
10001248:	e0bffc17 	ldw	r2,-16(fp)
1000124c:	10001315 	stw	zero,76(r2)
	monster->dead_count = 0;
10001250:	e0bffc17 	ldw	r2,-16(fp)
10001254:	10001115 	stw	zero,68(r2)
	monster->hit_count = 0;
10001258:	e0bffc17 	ldw	r2,-16(fp)
1000125c:	10001215 	stw	zero,72(r2)
	monster->fight_relax_time =0;
10001260:	e0bffc17 	ldw	r2,-16(fp)
10001264:	10001615 	stw	zero,88(r2)
}
10001268:	0001883a 	nop
1000126c:	e037883a 	mov	sp,fp
10001270:	df000017 	ldw	fp,0(sp)
10001274:	dec00104 	addi	sp,sp,4
10001278:	f800283a 	ret

1000127c <monster_hit_check>:

void monster_hit_check(monster_t *monster, saber_t *saber){
1000127c:	defffc04 	addi	sp,sp,-16
10001280:	df000315 	stw	fp,12(sp)
10001284:	df000304 	addi	fp,sp,12
10001288:	e13ffe15 	stw	r4,-8(fp)
1000128c:	e17fff15 	stw	r5,-4(fp)
	if (saber->HP<=0 || monster-> HP <=0){return;}
10001290:	e0bfff17 	ldw	r2,-4(fp)
10001294:	10800517 	ldw	r2,20(r2)
10001298:	0080ab0e 	bge	zero,r2,10001548 <monster_hit_check+0x2cc>
1000129c:	e0bffe17 	ldw	r2,-8(fp)
100012a0:	10800b17 	ldw	r2,44(r2)
100012a4:	0080a80e 	bge	zero,r2,10001548 <monster_hit_check+0x2cc>
	int position_x_diff;
	position_x_diff = monster->attack_x - saber->x;
100012a8:	e0bffe17 	ldw	r2,-8(fp)
100012ac:	10c00317 	ldw	r3,12(r2)
100012b0:	e0bfff17 	ldw	r2,-4(fp)
100012b4:	10800117 	ldw	r2,4(r2)
100012b8:	1885c83a 	sub	r2,r3,r2
100012bc:	e0bffd15 	stw	r2,-12(fp)
	if (monster -> state <= WALK4){
100012c0:	e0bffe17 	ldw	r2,-8(fp)
100012c4:	10800d17 	ldw	r2,52(r2)
100012c8:	10800108 	cmpgei	r2,r2,4
100012cc:	10009f1e 	bne	r2,zero,1000154c <monster_hit_check+0x2d0>
		if(saber->IsFighting && abs(monster->attack_y - saber-> y) < ATTACK_RANGEY &&
100012d0:	e0bfff17 	ldw	r2,-4(fp)
100012d4:	10800d17 	ldw	r2,52(r2)
100012d8:	10004226 	beq	r2,zero,100013e4 <monster_hit_check+0x168>
100012dc:	e0bffe17 	ldw	r2,-8(fp)
100012e0:	10c00417 	ldw	r3,16(r2)
100012e4:	e0bfff17 	ldw	r2,-4(fp)
100012e8:	10800217 	ldw	r2,8(r2)
100012ec:	1885c83a 	sub	r2,r3,r2
100012f0:	10bffb50 	cmplti	r2,r2,-19
100012f4:	10003b1e 	bne	r2,zero,100013e4 <monster_hit_check+0x168>
100012f8:	e0bffe17 	ldw	r2,-8(fp)
100012fc:	10c00417 	ldw	r3,16(r2)
10001300:	e0bfff17 	ldw	r2,-4(fp)
10001304:	10800217 	ldw	r2,8(r2)
10001308:	1885c83a 	sub	r2,r3,r2
1000130c:	10800508 	cmpgei	r2,r2,20
10001310:	1000341e 	bne	r2,zero,100013e4 <monster_hit_check+0x168>
10001314:	e0bffd17 	ldw	r2,-12(fp)
10001318:	10000916 	blt	r2,zero,10001340 <monster_hit_check+0xc4>
					((position_x_diff >=0 && saber->FaceDirection ==RIGHT && position_x_diff-monster->FAT < ATTACK_RANGEX ) ||
1000131c:	e0bfff17 	ldw	r2,-4(fp)
10001320:	10800717 	ldw	r2,28(r2)
10001324:	1000061e 	bne	r2,zero,10001340 <monster_hit_check+0xc4>
10001328:	e0bffe17 	ldw	r2,-8(fp)
1000132c:	10800a17 	ldw	r2,40(r2)
10001330:	e0fffd17 	ldw	r3,-12(fp)
10001334:	1885c83a 	sub	r2,r3,r2
10001338:	10801050 	cmplti	r2,r2,65
1000133c:	10000d1e 	bne	r2,zero,10001374 <monster_hit_check+0xf8>
10001340:	e0bffd17 	ldw	r2,-12(fp)
10001344:	00802716 	blt	zero,r2,100013e4 <monster_hit_check+0x168>
					(position_x_diff <=0 && saber->FaceDirection ==LEFT && -position_x_diff-monster->FAT < ATTACK_RANGEX))){
10001348:	e0bfff17 	ldw	r2,-4(fp)
1000134c:	10800717 	ldw	r2,28(r2)
10001350:	10800058 	cmpnei	r2,r2,1
10001354:	1000231e 	bne	r2,zero,100013e4 <monster_hit_check+0x168>
10001358:	e0bffd17 	ldw	r2,-12(fp)
1000135c:	0087c83a 	sub	r3,zero,r2
10001360:	e0bffe17 	ldw	r2,-8(fp)
10001364:	10800a17 	ldw	r2,40(r2)
10001368:	1885c83a 	sub	r2,r3,r2
1000136c:	10801048 	cmpgei	r2,r2,65
10001370:	10001c1e 	bne	r2,zero,100013e4 <monster_hit_check+0x168>
			monster->state = HIT;
10001374:	e0bffe17 	ldw	r2,-8(fp)
10001378:	00c00104 	movi	r3,4
1000137c:	10c00d15 	stw	r3,52(r2)
			monster->blood_state = BLOOD1;
10001380:	e0bffe17 	ldw	r2,-8(fp)
10001384:	10000e15 	stw	zero,56(r2)
			monster->HP = monster->HP - saber->ATK;
10001388:	e0bffe17 	ldw	r2,-8(fp)
1000138c:	10c00b17 	ldw	r3,44(r2)
10001390:	e0bfff17 	ldw	r2,-4(fp)
10001394:	10800617 	ldw	r2,24(r2)
10001398:	1887c83a 	sub	r3,r3,r2
1000139c:	e0bffe17 	ldw	r2,-8(fp)
100013a0:	10c00b15 	stw	r3,44(r2)
			monster->x += (saber->FaceDirection == RIGHT)? 20: - 20;
100013a4:	e0bffe17 	ldw	r2,-8(fp)
100013a8:	10c00117 	ldw	r3,4(r2)
100013ac:	e0bfff17 	ldw	r2,-4(fp)
100013b0:	10800717 	ldw	r2,28(r2)
100013b4:	1000021e 	bne	r2,zero,100013c0 <monster_hit_check+0x144>
100013b8:	00800504 	movi	r2,20
100013bc:	00000106 	br	100013c4 <monster_hit_check+0x148>
100013c0:	00bffb04 	movi	r2,-20
100013c4:	1887883a 	add	r3,r3,r2
100013c8:	e0bffe17 	ldw	r2,-8(fp)
100013cc:	10c00115 	stw	r3,4(r2)
			monster->attack_x = monster-> x;
100013d0:	e0bffe17 	ldw	r2,-8(fp)
100013d4:	10c00117 	ldw	r3,4(r2)
100013d8:	e0bffe17 	ldw	r2,-8(fp)
100013dc:	10c00315 	stw	r3,12(r2)
100013e0:	00005a06 	br	1000154c <monster_hit_check+0x2d0>
		}
		else if(saber->Excalibur_state<EXCALIBURNULL&&
100013e4:	e0bfff17 	ldw	r2,-4(fp)
100013e8:	10800a17 	ldw	r2,40(r2)
100013ec:	10800208 	cmpgei	r2,r2,8
100013f0:	1000561e 	bne	r2,zero,1000154c <monster_hit_check+0x2d0>
			 monster->attack_y < saber-> y-EXCALIBUR_Y_BIAS+EXCALIBUR_WIDTH/2 &&
100013f4:	e0bffe17 	ldw	r2,-8(fp)
100013f8:	10c00417 	ldw	r3,16(r2)
100013fc:	e0bfff17 	ldw	r2,-4(fp)
10001400:	10800217 	ldw	r2,8(r2)
10001404:	10801a84 	addi	r2,r2,106
			monster->blood_state = BLOOD1;
			monster->HP = monster->HP - saber->ATK;
			monster->x += (saber->FaceDirection == RIGHT)? 20: - 20;
			monster->attack_x = monster-> x;
		}
		else if(saber->Excalibur_state<EXCALIBURNULL&&
10001408:	1880500e 	bge	r3,r2,1000154c <monster_hit_check+0x2d0>
			 monster->attack_y < saber-> y-EXCALIBUR_Y_BIAS+EXCALIBUR_WIDTH/2 &&
			 monster->attack_y > saber-> y-EXCALIBUR_Y_BIAS-EXCALIBUR_WIDTH/2){
1000140c:	e0bffe17 	ldw	r2,-8(fp)
10001410:	10800417 	ldw	r2,16(r2)
10001414:	e0ffff17 	ldw	r3,-4(fp)
10001418:	18c00217 	ldw	r3,8(r3)
1000141c:	18ffed04 	addi	r3,r3,-76
			monster->HP = monster->HP - saber->ATK;
			monster->x += (saber->FaceDirection == RIGHT)? 20: - 20;
			monster->attack_x = monster-> x;
		}
		else if(saber->Excalibur_state<EXCALIBURNULL&&
			 monster->attack_y < saber-> y-EXCALIBUR_Y_BIAS+EXCALIBUR_WIDTH/2 &&
10001420:	18804a0e 	bge	r3,r2,1000154c <monster_hit_check+0x2d0>
			 monster->attack_y > saber-> y-EXCALIBUR_Y_BIAS-EXCALIBUR_WIDTH/2){
			if(saber->FaceDirection == RIGHT && monster->attack_x > saber->x &&
10001424:	e0bfff17 	ldw	r2,-4(fp)
10001428:	10800717 	ldw	r2,28(r2)
1000142c:	1000211e 	bne	r2,zero,100014b4 <monster_hit_check+0x238>
10001430:	e0bffe17 	ldw	r2,-8(fp)
10001434:	10800317 	ldw	r2,12(r2)
10001438:	e0ffff17 	ldw	r3,-4(fp)
1000143c:	18c00117 	ldw	r3,4(r3)
10001440:	18801c0e 	bge	r3,r2,100014b4 <monster_hit_check+0x238>
			   monster->attack_x < saber->x+EXCALIBUR_LENGTH+ EXCALIBUR_X_BIAS){
10001444:	e0bffe17 	ldw	r2,-8(fp)
10001448:	10c00317 	ldw	r3,12(r2)
1000144c:	e0bfff17 	ldw	r2,-4(fp)
10001450:	10800117 	ldw	r2,4(r2)
10001454:	10805284 	addi	r2,r2,330
			monster->attack_x = monster-> x;
		}
		else if(saber->Excalibur_state<EXCALIBURNULL&&
			 monster->attack_y < saber-> y-EXCALIBUR_Y_BIAS+EXCALIBUR_WIDTH/2 &&
			 monster->attack_y > saber-> y-EXCALIBUR_Y_BIAS-EXCALIBUR_WIDTH/2){
			if(saber->FaceDirection == RIGHT && monster->attack_x > saber->x &&
10001458:	1880160e 	bge	r3,r2,100014b4 <monster_hit_check+0x238>
			   monster->attack_x < saber->x+EXCALIBUR_LENGTH+ EXCALIBUR_X_BIAS){
				monster->state = HIT;
1000145c:	e0bffe17 	ldw	r2,-8(fp)
10001460:	00c00104 	movi	r3,4
10001464:	10c00d15 	stw	r3,52(r2)
				monster->blood_state = BLOOD1;
10001468:	e0bffe17 	ldw	r2,-8(fp)
1000146c:	10000e15 	stw	zero,56(r2)
				monster->HP = monster->HP - saber->Excalibur_damage;
10001470:	e0bffe17 	ldw	r2,-8(fp)
10001474:	10c00b17 	ldw	r3,44(r2)
10001478:	e0bfff17 	ldw	r2,-4(fp)
1000147c:	10800f17 	ldw	r2,60(r2)
10001480:	1887c83a 	sub	r3,r3,r2
10001484:	e0bffe17 	ldw	r2,-8(fp)
10001488:	10c00b15 	stw	r3,44(r2)
				monster->x +=20;
1000148c:	e0bffe17 	ldw	r2,-8(fp)
10001490:	10800117 	ldw	r2,4(r2)
10001494:	10c00504 	addi	r3,r2,20
10001498:	e0bffe17 	ldw	r2,-8(fp)
1000149c:	10c00115 	stw	r3,4(r2)
				monster->attack_x = monster-> x;
100014a0:	e0bffe17 	ldw	r2,-8(fp)
100014a4:	10c00117 	ldw	r3,4(r2)
100014a8:	e0bffe17 	ldw	r2,-8(fp)
100014ac:	10c00315 	stw	r3,12(r2)
100014b0:	00002606 	br	1000154c <monster_hit_check+0x2d0>
			}else if(saber->FaceDirection == LEFT && monster->attack_x < saber->x &&
100014b4:	e0bfff17 	ldw	r2,-4(fp)
100014b8:	10800717 	ldw	r2,28(r2)
100014bc:	10800058 	cmpnei	r2,r2,1
100014c0:	1000221e 	bne	r2,zero,1000154c <monster_hit_check+0x2d0>
100014c4:	e0bffe17 	ldw	r2,-8(fp)
100014c8:	10c00317 	ldw	r3,12(r2)
100014cc:	e0bfff17 	ldw	r2,-4(fp)
100014d0:	10800117 	ldw	r2,4(r2)
100014d4:	18801d0e 	bge	r3,r2,1000154c <monster_hit_check+0x2d0>
				monster->attack_x > saber->x-(EXCALIBUR_LENGTH+EXCALIBUR_X_BIAS)){
100014d8:	e0bffe17 	ldw	r2,-8(fp)
100014dc:	10800317 	ldw	r2,12(r2)
100014e0:	e0ffff17 	ldw	r3,-4(fp)
100014e4:	18c00117 	ldw	r3,4(r3)
100014e8:	18ffad84 	addi	r3,r3,-330
				monster->state = HIT;
				monster->blood_state = BLOOD1;
				monster->HP = monster->HP - saber->Excalibur_damage;
				monster->x +=20;
				monster->attack_x = monster-> x;
			}else if(saber->FaceDirection == LEFT && monster->attack_x < saber->x &&
100014ec:	1880170e 	bge	r3,r2,1000154c <monster_hit_check+0x2d0>
				monster->attack_x > saber->x-(EXCALIBUR_LENGTH+EXCALIBUR_X_BIAS)){
				monster->state = HIT;
100014f0:	e0bffe17 	ldw	r2,-8(fp)
100014f4:	00c00104 	movi	r3,4
100014f8:	10c00d15 	stw	r3,52(r2)
				monster->blood_state = BLOOD1;
100014fc:	e0bffe17 	ldw	r2,-8(fp)
10001500:	10000e15 	stw	zero,56(r2)
				monster->HP = monster->HP - saber->Excalibur_damage;
10001504:	e0bffe17 	ldw	r2,-8(fp)
10001508:	10c00b17 	ldw	r3,44(r2)
1000150c:	e0bfff17 	ldw	r2,-4(fp)
10001510:	10800f17 	ldw	r2,60(r2)
10001514:	1887c83a 	sub	r3,r3,r2
10001518:	e0bffe17 	ldw	r2,-8(fp)
1000151c:	10c00b15 	stw	r3,44(r2)
				monster->x -= 20;
10001520:	e0bffe17 	ldw	r2,-8(fp)
10001524:	10800117 	ldw	r2,4(r2)
10001528:	10fffb04 	addi	r3,r2,-20
1000152c:	e0bffe17 	ldw	r2,-8(fp)
10001530:	10c00115 	stw	r3,4(r2)
				monster->attack_x = monster-> x;
10001534:	e0bffe17 	ldw	r2,-8(fp)
10001538:	10c00117 	ldw	r3,4(r2)
1000153c:	e0bffe17 	ldw	r2,-8(fp)
10001540:	10c00315 	stw	r3,12(r2)
10001544:	00000106 	br	1000154c <monster_hit_check+0x2d0>
	monster->hit_count = 0;
	monster->fight_relax_time =0;
}

void monster_hit_check(monster_t *monster, saber_t *saber){
	if (saber->HP<=0 || monster-> HP <=0){return;}
10001548:	0001883a 	nop
				monster->attack_x = monster-> x;
			}

		}
	}
}
1000154c:	e037883a 	mov	sp,fp
10001550:	df000017 	ldw	fp,0(sp)
10001554:	dec00104 	addi	sp,sp,4
10001558:	f800283a 	ret

1000155c <saber_be_attacked_check>:

void saber_be_attacked_check(saber_t *saber, monster_t *monster){
1000155c:	defffd04 	addi	sp,sp,-12
10001560:	df000215 	stw	fp,8(sp)
10001564:	df000204 	addi	fp,sp,8
10001568:	e13ffe15 	stw	r4,-8(fp)
1000156c:	e17fff15 	stw	r5,-4(fp)
	if (saber->exist ==0||monster->exist ==0 ||monster->HP<=0){return;}
10001570:	e0bffe17 	ldw	r2,-8(fp)
10001574:	10800017 	ldw	r2,0(r2)
10001578:	10003826 	beq	r2,zero,1000165c <saber_be_attacked_check+0x100>
1000157c:	e0bfff17 	ldw	r2,-4(fp)
10001580:	10800017 	ldw	r2,0(r2)
10001584:	10003526 	beq	r2,zero,1000165c <saber_be_attacked_check+0x100>
10001588:	e0bfff17 	ldw	r2,-4(fp)
1000158c:	10800b17 	ldw	r2,44(r2)
10001590:	0080320e 	bge	zero,r2,1000165c <saber_be_attacked_check+0x100>
	if (abs(saber->x - monster->attack_x)<= (monster->FAT +SABER_FAT)&& abs(saber->y - monster->attack_y)<=monster->FAT){
10001594:	e0bffe17 	ldw	r2,-8(fp)
10001598:	10c00117 	ldw	r3,4(r2)
1000159c:	e0bfff17 	ldw	r2,-4(fp)
100015a0:	10800317 	ldw	r2,12(r2)
100015a4:	1885c83a 	sub	r2,r3,r2
100015a8:	1000010e 	bge	r2,zero,100015b0 <saber_be_attacked_check+0x54>
100015ac:	0085c83a 	sub	r2,zero,r2
100015b0:	1007883a 	mov	r3,r2
100015b4:	e0bfff17 	ldw	r2,-4(fp)
100015b8:	10800a17 	ldw	r2,40(r2)
100015bc:	10800284 	addi	r2,r2,10
100015c0:	10c02716 	blt	r2,r3,10001660 <saber_be_attacked_check+0x104>
100015c4:	e0bffe17 	ldw	r2,-8(fp)
100015c8:	10c00217 	ldw	r3,8(r2)
100015cc:	e0bfff17 	ldw	r2,-4(fp)
100015d0:	10800417 	ldw	r2,16(r2)
100015d4:	1885c83a 	sub	r2,r3,r2
100015d8:	1000010e 	bge	r2,zero,100015e0 <saber_be_attacked_check+0x84>
100015dc:	0085c83a 	sub	r2,zero,r2
100015e0:	1007883a 	mov	r3,r2
100015e4:	e0bfff17 	ldw	r2,-4(fp)
100015e8:	10800a17 	ldw	r2,40(r2)
100015ec:	10c01c16 	blt	r2,r3,10001660 <saber_be_attacked_check+0x104>
		if (saber->x < monster->attack_x){
100015f0:	e0bffe17 	ldw	r2,-8(fp)
100015f4:	10c00117 	ldw	r3,4(r2)
100015f8:	e0bfff17 	ldw	r2,-4(fp)
100015fc:	10800317 	ldw	r2,12(r2)
10001600:	1880060e 	bge	r3,r2,1000161c <saber_be_attacked_check+0xc0>
			saber->x = saber->x -40;
10001604:	e0bffe17 	ldw	r2,-8(fp)
10001608:	10800117 	ldw	r2,4(r2)
1000160c:	10fff604 	addi	r3,r2,-40
10001610:	e0bffe17 	ldw	r2,-8(fp)
10001614:	10c00115 	stw	r3,4(r2)
10001618:	00000506 	br	10001630 <saber_be_attacked_check+0xd4>
		}else{
			saber->x = saber->x +40;
1000161c:	e0bffe17 	ldw	r2,-8(fp)
10001620:	10800117 	ldw	r2,4(r2)
10001624:	10c00a04 	addi	r3,r2,40
10001628:	e0bffe17 	ldw	r2,-8(fp)
1000162c:	10c00115 	stw	r3,4(r2)
		}
		saber->injuring = 1;
10001630:	e0bffe17 	ldw	r2,-8(fp)
10001634:	00c00044 	movi	r3,1
10001638:	10c00e15 	stw	r3,56(r2)
		saber-> HP = saber-> HP - monster-> ATK;
1000163c:	e0bffe17 	ldw	r2,-8(fp)
10001640:	10c00517 	ldw	r3,20(r2)
10001644:	e0bfff17 	ldw	r2,-4(fp)
10001648:	10800c17 	ldw	r2,48(r2)
1000164c:	1887c83a 	sub	r3,r3,r2
10001650:	e0bffe17 	ldw	r2,-8(fp)
10001654:	10c00515 	stw	r3,20(r2)
10001658:	00000106 	br	10001660 <saber_be_attacked_check+0x104>
		}
	}
}

void saber_be_attacked_check(saber_t *saber, monster_t *monster){
	if (saber->exist ==0||monster->exist ==0 ||monster->HP<=0){return;}
1000165c:	0001883a 	nop
		}
		saber->injuring = 1;
		saber-> HP = saber-> HP - monster-> ATK;
	}

}
10001660:	e037883a 	mov	sp,fp
10001664:	df000017 	ldw	fp,0(sp)
10001668:	dec00104 	addi	sp,sp,4
1000166c:	f800283a 	ret

10001670 <monster_update>:

void monster_update(monster_t *monster, saber_t *saber){
10001670:	defffc04 	addi	sp,sp,-16
10001674:	dfc00315 	stw	ra,12(sp)
10001678:	df000215 	stw	fp,8(sp)
1000167c:	df000204 	addi	fp,sp,8
10001680:	e13ffe15 	stw	r4,-8(fp)
10001684:	e17fff15 	stw	r5,-4(fp)
	if (monster-> exist ==0){
10001688:	e0bffe17 	ldw	r2,-8(fp)
1000168c:	10800017 	ldw	r2,0(r2)
10001690:	1000df26 	beq	r2,zero,10001a10 <monster_update+0x3a0>
//	if (monster-> bleeding >0){
//		monster->
//	}

	// if monster is dead, set the frame for his corpse to remain
	if (monster->state == DEAD2 && monster->dead_count++ == DEAD_COUNT){
10001694:	e0bffe17 	ldw	r2,-8(fp)
10001698:	10800d17 	ldw	r2,52(r2)
1000169c:	10800198 	cmpnei	r2,r2,6
100016a0:	10000a1e 	bne	r2,zero,100016cc <monster_update+0x5c>
100016a4:	e0bffe17 	ldw	r2,-8(fp)
100016a8:	10801117 	ldw	r2,68(r2)
100016ac:	11000044 	addi	r4,r2,1
100016b0:	e0fffe17 	ldw	r3,-8(fp)
100016b4:	19001115 	stw	r4,68(r3)
100016b8:	10801918 	cmpnei	r2,r2,100
100016bc:	1000031e 	bne	r2,zero,100016cc <monster_update+0x5c>
		monster->exist = 0;
100016c0:	e0bffe17 	ldw	r2,-8(fp)
100016c4:	10000015 	stw	zero,0(r2)
		return;
100016c8:	0000d206 	br	10001a14 <monster_update+0x3a4>
	}

	// check whether the monster can be dead
	if (monster->HP <= 0 ){
100016cc:	e0bffe17 	ldw	r2,-8(fp)
100016d0:	10800b17 	ldw	r2,44(r2)
100016d4:	00800316 	blt	zero,r2,100016e4 <monster_update+0x74>
		monster->Dying =1;
100016d8:	e0bffe17 	ldw	r2,-8(fp)
100016dc:	00c00044 	movi	r3,1
100016e0:	10c01315 	stw	r3,76(r2)
	}

	// update the bleeding animation
	if (monster->blood_state <= BLOOD3){
100016e4:	e0bffe17 	ldw	r2,-8(fp)
100016e8:	10800e17 	ldw	r2,56(r2)
100016ec:	108000c8 	cmpgei	r2,r2,3
100016f0:	10000e1e 	bne	r2,zero,1000172c <monster_update+0xbc>
		if (monster->blood_count ++ > BLOOD_COUNT_MAX){
100016f4:	e0bffe17 	ldw	r2,-8(fp)
100016f8:	10800f17 	ldw	r2,60(r2)
100016fc:	11000044 	addi	r4,r2,1
10001700:	e0fffe17 	ldw	r3,-8(fp)
10001704:	19000f15 	stw	r4,60(r3)
10001708:	10800090 	cmplti	r2,r2,2
1000170c:	1000071e 	bne	r2,zero,1000172c <monster_update+0xbc>
			monster->blood_state += 1;
10001710:	e0bffe17 	ldw	r2,-8(fp)
10001714:	10800e17 	ldw	r2,56(r2)
10001718:	10c00044 	addi	r3,r2,1
1000171c:	e0bffe17 	ldw	r2,-8(fp)
10001720:	10c00e15 	stw	r3,56(r2)
			monster->blood_count = 0;
10001724:	e0bffe17 	ldw	r2,-8(fp)
10001728:	10000f15 	stw	zero,60(r2)
		}
	}

	// monster attack by a random number
	if (monster->fight_relax_time >0){
1000172c:	e0bffe17 	ldw	r2,-8(fp)
10001730:	10801617 	ldw	r2,88(r2)
10001734:	0080060e 	bge	zero,r2,10001750 <monster_update+0xe0>
		monster->fight_relax_time--;
10001738:	e0bffe17 	ldw	r2,-8(fp)
1000173c:	10801617 	ldw	r2,88(r2)
10001740:	10ffffc4 	addi	r3,r2,-1
10001744:	e0bffe17 	ldw	r2,-8(fp)
10001748:	10c01615 	stw	r3,88(r2)
1000174c:	00001106 	br	10001794 <monster_update+0x124>
	}else if(monster->state <= WALK4 && rand()%100 > (100-FIGHT_PROBABILITY)){
10001750:	e0bffe17 	ldw	r2,-8(fp)
10001754:	10800d17 	ldw	r2,52(r2)
10001758:	10800108 	cmpgei	r2,r2,4
1000175c:	10000d1e 	bne	r2,zero,10001794 <monster_update+0x124>
10001760:	00053fc0 	call	100053fc <rand>
10001764:	01401904 	movi	r5,100
10001768:	1009883a 	mov	r4,r2
1000176c:	00044540 	call	10004454 <__modsi3>
10001770:	10801850 	cmplti	r2,r2,97
10001774:	1000071e 	bne	r2,zero,10001794 <monster_update+0x124>
		monster->state = ATTACK1;
10001778:	e0bffe17 	ldw	r2,-8(fp)
1000177c:	00c001c4 	movi	r3,7
10001780:	10c00d15 	stw	r3,52(r2)
		monster->fight_relax_time = 5;
10001784:	e0bffe17 	ldw	r2,-8(fp)
10001788:	00c00144 	movi	r3,5
1000178c:	10c01615 	stw	r3,88(r2)
		return;
10001790:	0000a006 	br	10001a14 <monster_update+0x3a4>
	}

	// if monster reaches the left most, the game fails
	if (monster->x == LEFT_MOST){
10001794:	e0bffe17 	ldw	r2,-8(fp)
10001798:	10800117 	ldw	r2,4(r2)
1000179c:	10800858 	cmpnei	r2,r2,33
100017a0:	1000031e 	bne	r2,zero,100017b0 <monster_update+0x140>
		saber->HP = 0;
100017a4:	e0bfff17 	ldw	r2,-4(fp)
100017a8:	10000515 	stw	zero,20(r2)
		return;
100017ac:	00009906 	br	10001a14 <monster_update+0x3a4>
	}

	// monster attack detection, if monster state is ATTACK2 and ATTACK3, update
	// monster's attack x position
	if (monster->state >= ATTACK1 && monster->fight_count ++ >FIGHT_COUNT_MAX){
100017b0:	e0bffe17 	ldw	r2,-8(fp)
100017b4:	10800d17 	ldw	r2,52(r2)
100017b8:	108001d0 	cmplti	r2,r2,7
100017bc:	10001f1e 	bne	r2,zero,1000183c <monster_update+0x1cc>
100017c0:	e0bffe17 	ldw	r2,-8(fp)
100017c4:	10801517 	ldw	r2,84(r2)
100017c8:	11000044 	addi	r4,r2,1
100017cc:	e0fffe17 	ldw	r3,-8(fp)
100017d0:	19001515 	stw	r4,84(r3)
100017d4:	10800190 	cmplti	r2,r2,6
100017d8:	1000181e 	bne	r2,zero,1000183c <monster_update+0x1cc>
		if (monster->state == ATTACK2){
100017dc:	e0bffe17 	ldw	r2,-8(fp)
100017e0:	10800d17 	ldw	r2,52(r2)
100017e4:	10800218 	cmpnei	r2,r2,8
100017e8:	1000071e 	bne	r2,zero,10001808 <monster_update+0x198>
			monster->attack_x -= monster->attack_arange;
100017ec:	e0bffe17 	ldw	r2,-8(fp)
100017f0:	10c00317 	ldw	r3,12(r2)
100017f4:	e0bffe17 	ldw	r2,-8(fp)
100017f8:	10800917 	ldw	r2,36(r2)
100017fc:	1887c83a 	sub	r3,r3,r2
10001800:	e0bffe17 	ldw	r2,-8(fp)
10001804:	10c00315 	stw	r3,12(r2)
		}
		monster->state = (monster->state ==ATTACK4)?WALK1:monster->state +1;
10001808:	e0bffe17 	ldw	r2,-8(fp)
1000180c:	10800d17 	ldw	r2,52(r2)
10001810:	108002a0 	cmpeqi	r2,r2,10
10001814:	1000041e 	bne	r2,zero,10001828 <monster_update+0x1b8>
10001818:	e0bffe17 	ldw	r2,-8(fp)
1000181c:	10800d17 	ldw	r2,52(r2)
10001820:	10800044 	addi	r2,r2,1
10001824:	00000106 	br	1000182c <monster_update+0x1bc>
10001828:	0005883a 	mov	r2,zero
1000182c:	e0fffe17 	ldw	r3,-8(fp)
10001830:	18800d15 	stw	r2,52(r3)
		monster->fight_count = 0;
10001834:	e0bffe17 	ldw	r2,-8(fp)
10001838:	10001515 	stw	zero,84(r2)
	}
	// update monster's state
	if (monster->state <= WALK4){
1000183c:	e0bffe17 	ldw	r2,-8(fp)
10001840:	10800d17 	ldw	r2,52(r2)
10001844:	10800108 	cmpgei	r2,r2,4
10001848:	10002d1e 	bne	r2,zero,10001900 <monster_update+0x290>
		monster-> x = (monster->x + monster->vx< LEFT_MOST)?LEFT_MOST:monster->x + monster->vx;
1000184c:	e0bffe17 	ldw	r2,-8(fp)
10001850:	10c00117 	ldw	r3,4(r2)
10001854:	e0bffe17 	ldw	r2,-8(fp)
10001858:	10800517 	ldw	r2,20(r2)
1000185c:	1885883a 	add	r2,r3,r2
10001860:	10c00848 	cmpgei	r3,r2,33
10001864:	1800011e 	bne	r3,zero,1000186c <monster_update+0x1fc>
10001868:	00800844 	movi	r2,33
1000186c:	e0fffe17 	ldw	r3,-8(fp)
10001870:	18800115 	stw	r2,4(r3)
		if (monster-> y + monster->vy > UP_MOST && monster-> y + monster->vy < DOWN_MOST){
10001874:	e0bffe17 	ldw	r2,-8(fp)
10001878:	10c00217 	ldw	r3,8(r2)
1000187c:	e0bffe17 	ldw	r2,-8(fp)
10001880:	10800617 	ldw	r2,24(r2)
10001884:	1885883a 	add	r2,r3,r2
10001888:	10802ad0 	cmplti	r2,r2,171
1000188c:	10000e1e 	bne	r2,zero,100018c8 <monster_update+0x258>
10001890:	e0bffe17 	ldw	r2,-8(fp)
10001894:	10c00217 	ldw	r3,8(r2)
10001898:	e0bffe17 	ldw	r2,-8(fp)
1000189c:	10800617 	ldw	r2,24(r2)
100018a0:	1885883a 	add	r2,r3,r2
100018a4:	10804608 	cmpgei	r2,r2,280
100018a8:	1000071e 	bne	r2,zero,100018c8 <monster_update+0x258>
			monster->y = monster->y + monster->vy;
100018ac:	e0bffe17 	ldw	r2,-8(fp)
100018b0:	10c00217 	ldw	r3,8(r2)
100018b4:	e0bffe17 	ldw	r2,-8(fp)
100018b8:	10800617 	ldw	r2,24(r2)
100018bc:	1887883a 	add	r3,r3,r2
100018c0:	e0bffe17 	ldw	r2,-8(fp)
100018c4:	10c00215 	stw	r3,8(r2)
		}
		monster->attack_x = monster-> x + monster-> attack_biasx;
100018c8:	e0bffe17 	ldw	r2,-8(fp)
100018cc:	10c00117 	ldw	r3,4(r2)
100018d0:	e0bffe17 	ldw	r2,-8(fp)
100018d4:	10800717 	ldw	r2,28(r2)
100018d8:	1887883a 	add	r3,r3,r2
100018dc:	e0bffe17 	ldw	r2,-8(fp)
100018e0:	10c00315 	stw	r3,12(r2)
		monster->attack_y = monster-> y + monster-> attack_biasy;
100018e4:	e0bffe17 	ldw	r2,-8(fp)
100018e8:	10c00217 	ldw	r3,8(r2)
100018ec:	e0bffe17 	ldw	r2,-8(fp)
100018f0:	10800817 	ldw	r2,32(r2)
100018f4:	1887883a 	add	r3,r3,r2
100018f8:	e0bffe17 	ldw	r2,-8(fp)
100018fc:	10c00415 	stw	r3,16(r2)
	}

	if (monster->state_count ++ > STATE_COUNT_MAX){
10001900:	e0bffe17 	ldw	r2,-8(fp)
10001904:	10801017 	ldw	r2,64(r2)
10001908:	11000044 	addi	r4,r2,1
1000190c:	e0fffe17 	ldw	r3,-8(fp)
10001910:	19001015 	stw	r4,64(r3)
10001914:	10800110 	cmplti	r2,r2,4
10001918:	1000391e 	bne	r2,zero,10001a00 <monster_update+0x390>
		// set the frame for monster when he is attacked
		if (monster->state == HIT){
1000191c:	e0bffe17 	ldw	r2,-8(fp)
10001920:	10800d17 	ldw	r2,52(r2)
10001924:	10800118 	cmpnei	r2,r2,4
10001928:	10000e1e 	bne	r2,zero,10001964 <monster_update+0x2f4>
			if (monster->hit_count < 2){
1000192c:	e0bffe17 	ldw	r2,-8(fp)
10001930:	10801217 	ldw	r2,72(r2)
10001934:	10800088 	cmpgei	r2,r2,2
10001938:	1000081e 	bne	r2,zero,1000195c <monster_update+0x2ec>
				monster->hit_count= monster->hit_count+1 ;
1000193c:	e0bffe17 	ldw	r2,-8(fp)
10001940:	10801217 	ldw	r2,72(r2)
10001944:	10c00044 	addi	r3,r2,1
10001948:	e0bffe17 	ldw	r2,-8(fp)
1000194c:	10c01215 	stw	r3,72(r2)
				monster->state_count = 0;
10001950:	e0bffe17 	ldw	r2,-8(fp)
10001954:	10001015 	stw	zero,64(r2)
				return;
10001958:	00002e06 	br	10001a14 <monster_update+0x3a4>
			}else{
				monster->hit_count = 0;
1000195c:	e0bffe17 	ldw	r2,-8(fp)
10001960:	10001215 	stw	zero,72(r2)
			}
		}
		if (monster->state <=HIT && monster->Dying ==0){
10001964:	e0bffe17 	ldw	r2,-8(fp)
10001968:	10800d17 	ldw	r2,52(r2)
1000196c:	10800148 	cmpgei	r2,r2,5
10001970:	10000f1e 	bne	r2,zero,100019b0 <monster_update+0x340>
10001974:	e0bffe17 	ldw	r2,-8(fp)
10001978:	10801317 	ldw	r2,76(r2)
1000197c:	10000c1e 	bne	r2,zero,100019b0 <monster_update+0x340>
			// IF WALK4 OR HIT, RETURN BACK TO WALK1
			monster->state = (monster->state >= WALK4)? WALK1:monster->state+1;
10001980:	e0bffe17 	ldw	r2,-8(fp)
10001984:	10800d17 	ldw	r2,52(r2)
10001988:	108000c8 	cmpgei	r2,r2,3
1000198c:	1000041e 	bne	r2,zero,100019a0 <monster_update+0x330>
10001990:	e0bffe17 	ldw	r2,-8(fp)
10001994:	10800d17 	ldw	r2,52(r2)
10001998:	10800044 	addi	r2,r2,1
1000199c:	00000106 	br	100019a4 <monster_update+0x334>
100019a0:	0005883a 	mov	r2,zero
100019a4:	e0fffe17 	ldw	r3,-8(fp)
100019a8:	18800d15 	stw	r2,52(r3)
100019ac:	00001206 	br	100019f8 <monster_update+0x388>
		}else if (monster->Dying && monster->state <= HIT){
100019b0:	e0bffe17 	ldw	r2,-8(fp)
100019b4:	10801317 	ldw	r2,76(r2)
100019b8:	10000826 	beq	r2,zero,100019dc <monster_update+0x36c>
100019bc:	e0bffe17 	ldw	r2,-8(fp)
100019c0:	10800d17 	ldw	r2,52(r2)
100019c4:	10800148 	cmpgei	r2,r2,5
100019c8:	1000041e 	bne	r2,zero,100019dc <monster_update+0x36c>
			monster->state = DEAD1;
100019cc:	e0bffe17 	ldw	r2,-8(fp)
100019d0:	00c00144 	movi	r3,5
100019d4:	10c00d15 	stw	r3,52(r2)
100019d8:	00000706 	br	100019f8 <monster_update+0x388>
		}
		else if (monster->state == DEAD1){
100019dc:	e0bffe17 	ldw	r2,-8(fp)
100019e0:	10800d17 	ldw	r2,52(r2)
100019e4:	10800158 	cmpnei	r2,r2,5
100019e8:	1000031e 	bne	r2,zero,100019f8 <monster_update+0x388>
			monster->state = DEAD2;
100019ec:	e0bffe17 	ldw	r2,-8(fp)
100019f0:	00c00184 	movi	r3,6
100019f4:	10c00d15 	stw	r3,52(r2)
		}
		monster->state_count=0;
100019f8:	e0bffe17 	ldw	r2,-8(fp)
100019fc:	10001015 	stw	zero,64(r2)
	}

	monster_hit_check(monster, saber);
10001a00:	e17fff17 	ldw	r5,-4(fp)
10001a04:	e13ffe17 	ldw	r4,-8(fp)
10001a08:	000127c0 	call	1000127c <monster_hit_check>
10001a0c:	00000106 	br	10001a14 <monster_update+0x3a4>

}

void monster_update(monster_t *monster, saber_t *saber){
	if (monster-> exist ==0){
		return;
10001a10:	0001883a 	nop
		}
		monster->state_count=0;
	}

	monster_hit_check(monster, saber);
}
10001a14:	e037883a 	mov	sp,fp
10001a18:	dfc00117 	ldw	ra,4(sp)
10001a1c:	df000017 	ldw	fp,0(sp)
10001a20:	dec00204 	addi	sp,sp,8
10001a24:	f800283a 	ret

10001a28 <press_w>:
#include "saber_logic.h"
#include <stdio.h>

void press_w(saber_t *saber){
10001a28:	defffd04 	addi	sp,sp,-12
10001a2c:	df000215 	stw	fp,8(sp)
10001a30:	df000204 	addi	fp,sp,8
10001a34:	e13fff15 	stw	r4,-4(fp)
	char can_walk = 0;
10001a38:	e03ffe05 	stb	zero,-8(fp)
	if (saber->state <= WALK_LEFT6 ){
10001a3c:	e0bfff17 	ldw	r2,-4(fp)
10001a40:	10800817 	ldw	r2,32(r2)
10001a44:	10800188 	cmpgei	r2,r2,6
10001a48:	1000171e 	bne	r2,zero,10001aa8 <press_w+0x80>
		// if count reach the state_count_max we set, update the saber state
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001a4c:	e0bfff17 	ldw	r2,-4(fp)
10001a50:	10800917 	ldw	r2,36(r2)
10001a54:	11000044 	addi	r4,r2,1
10001a58:	e0ffff17 	ldw	r3,-4(fp)
10001a5c:	19000915 	stw	r4,36(r3)
10001a60:	10800110 	cmplti	r2,r2,4
10001a64:	10000d1e 	bne	r2,zero,10001a9c <press_w+0x74>
			saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
10001a68:	e0bfff17 	ldw	r2,-4(fp)
10001a6c:	10800817 	ldw	r2,32(r2)
10001a70:	10800160 	cmpeqi	r2,r2,5
10001a74:	1000041e 	bne	r2,zero,10001a88 <press_w+0x60>
10001a78:	e0bfff17 	ldw	r2,-4(fp)
10001a7c:	10800817 	ldw	r2,32(r2)
10001a80:	10800044 	addi	r2,r2,1
10001a84:	00000106 	br	10001a8c <press_w+0x64>
10001a88:	0005883a 	mov	r2,zero
10001a8c:	e0ffff17 	ldw	r3,-4(fp)
10001a90:	18800815 	stw	r2,32(r3)
			saber->state_count = 0;
10001a94:	e0bfff17 	ldw	r2,-4(fp)
10001a98:	10000915 	stw	zero,36(r2)
		}
		can_walk = 1;
10001a9c:	00800044 	movi	r2,1
10001aa0:	e0bffe05 	stb	r2,-8(fp)
10001aa4:	00001e06 	br	10001b20 <press_w+0xf8>
	}
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
10001aa8:	e0bfff17 	ldw	r2,-4(fp)
10001aac:	10800817 	ldw	r2,32(r2)
10001ab0:	10800190 	cmplti	r2,r2,6
10001ab4:	10001a1e 	bne	r2,zero,10001b20 <press_w+0xf8>
10001ab8:	e0bfff17 	ldw	r2,-4(fp)
10001abc:	10800817 	ldw	r2,32(r2)
10001ac0:	10800308 	cmpgei	r2,r2,12
10001ac4:	1000161e 	bne	r2,zero,10001b20 <press_w+0xf8>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001ac8:	e0bfff17 	ldw	r2,-4(fp)
10001acc:	10800917 	ldw	r2,36(r2)
10001ad0:	11000044 	addi	r4,r2,1
10001ad4:	e0ffff17 	ldw	r3,-4(fp)
10001ad8:	19000915 	stw	r4,36(r3)
10001adc:	10800110 	cmplti	r2,r2,4
10001ae0:	10000d1e 	bne	r2,zero,10001b18 <press_w+0xf0>
			saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
10001ae4:	e0bfff17 	ldw	r2,-4(fp)
10001ae8:	10800817 	ldw	r2,32(r2)
10001aec:	108002e0 	cmpeqi	r2,r2,11
10001af0:	1000041e 	bne	r2,zero,10001b04 <press_w+0xdc>
10001af4:	e0bfff17 	ldw	r2,-4(fp)
10001af8:	10800817 	ldw	r2,32(r2)
10001afc:	10800044 	addi	r2,r2,1
10001b00:	00000106 	br	10001b08 <press_w+0xe0>
10001b04:	00800184 	movi	r2,6
10001b08:	e0ffff17 	ldw	r3,-4(fp)
10001b0c:	18800815 	stw	r2,32(r3)
			saber->state_count = 0;
10001b10:	e0bfff17 	ldw	r2,-4(fp)
10001b14:	10000915 	stw	zero,36(r2)
		}
		can_walk = 1;
10001b18:	00800044 	movi	r2,1
10001b1c:	e0bffe05 	stb	r2,-8(fp)
	}
    if (can_walk == 1 && saber->vy > -VY_MOST){
10001b20:	e0bffe07 	ldb	r2,-8(fp)
10001b24:	10800058 	cmpnei	r2,r2,1
10001b28:	1000091e 	bne	r2,zero,10001b50 <press_w+0x128>
10001b2c:	e0bfff17 	ldw	r2,-4(fp)
10001b30:	10800417 	ldw	r2,16(r2)
10001b34:	10bfff90 	cmplti	r2,r2,-2
10001b38:	1000051e 	bne	r2,zero,10001b50 <press_w+0x128>
    	saber->vy--;
10001b3c:	e0bfff17 	ldw	r2,-4(fp)
10001b40:	10800417 	ldw	r2,16(r2)
10001b44:	10ffffc4 	addi	r3,r2,-1
10001b48:	e0bfff17 	ldw	r2,-4(fp)
10001b4c:	10c00415 	stw	r3,16(r2)
    }
}
10001b50:	0001883a 	nop
10001b54:	e037883a 	mov	sp,fp
10001b58:	df000017 	ldw	fp,0(sp)
10001b5c:	dec00104 	addi	sp,sp,4
10001b60:	f800283a 	ret

10001b64 <press_s>:

void press_s(saber_t *saber){
10001b64:	defffd04 	addi	sp,sp,-12
10001b68:	df000215 	stw	fp,8(sp)
10001b6c:	df000204 	addi	fp,sp,8
10001b70:	e13fff15 	stw	r4,-4(fp)
	char can_walk = 0;
10001b74:	e03ffe05 	stb	zero,-8(fp)
	// if walking leftward
	if (saber->state <= WALK_LEFT6 ){
10001b78:	e0bfff17 	ldw	r2,-4(fp)
10001b7c:	10800817 	ldw	r2,32(r2)
10001b80:	10800188 	cmpgei	r2,r2,6
10001b84:	1000171e 	bne	r2,zero,10001be4 <press_s+0x80>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001b88:	e0bfff17 	ldw	r2,-4(fp)
10001b8c:	10800917 	ldw	r2,36(r2)
10001b90:	11000044 	addi	r4,r2,1
10001b94:	e0ffff17 	ldw	r3,-4(fp)
10001b98:	19000915 	stw	r4,36(r3)
10001b9c:	10800110 	cmplti	r2,r2,4
10001ba0:	10000d1e 	bne	r2,zero,10001bd8 <press_s+0x74>
		saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
10001ba4:	e0bfff17 	ldw	r2,-4(fp)
10001ba8:	10800817 	ldw	r2,32(r2)
10001bac:	10800160 	cmpeqi	r2,r2,5
10001bb0:	1000041e 	bne	r2,zero,10001bc4 <press_s+0x60>
10001bb4:	e0bfff17 	ldw	r2,-4(fp)
10001bb8:	10800817 	ldw	r2,32(r2)
10001bbc:	10800044 	addi	r2,r2,1
10001bc0:	00000106 	br	10001bc8 <press_s+0x64>
10001bc4:	0005883a 	mov	r2,zero
10001bc8:	e0ffff17 	ldw	r3,-4(fp)
10001bcc:	18800815 	stw	r2,32(r3)
		saber->state_count = 0;
10001bd0:	e0bfff17 	ldw	r2,-4(fp)
10001bd4:	10000915 	stw	zero,36(r2)
		}
		can_walk = 1;
10001bd8:	00800044 	movi	r2,1
10001bdc:	e0bffe05 	stb	r2,-8(fp)
10001be0:	00001e06 	br	10001c5c <press_s+0xf8>
	}
	// if walking right
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
10001be4:	e0bfff17 	ldw	r2,-4(fp)
10001be8:	10800817 	ldw	r2,32(r2)
10001bec:	10800190 	cmplti	r2,r2,6
10001bf0:	10001a1e 	bne	r2,zero,10001c5c <press_s+0xf8>
10001bf4:	e0bfff17 	ldw	r2,-4(fp)
10001bf8:	10800817 	ldw	r2,32(r2)
10001bfc:	10800308 	cmpgei	r2,r2,12
10001c00:	1000161e 	bne	r2,zero,10001c5c <press_s+0xf8>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001c04:	e0bfff17 	ldw	r2,-4(fp)
10001c08:	10800917 	ldw	r2,36(r2)
10001c0c:	11000044 	addi	r4,r2,1
10001c10:	e0ffff17 	ldw	r3,-4(fp)
10001c14:	19000915 	stw	r4,36(r3)
10001c18:	10800110 	cmplti	r2,r2,4
10001c1c:	10000d1e 	bne	r2,zero,10001c54 <press_s+0xf0>
		saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
10001c20:	e0bfff17 	ldw	r2,-4(fp)
10001c24:	10800817 	ldw	r2,32(r2)
10001c28:	108002e0 	cmpeqi	r2,r2,11
10001c2c:	1000041e 	bne	r2,zero,10001c40 <press_s+0xdc>
10001c30:	e0bfff17 	ldw	r2,-4(fp)
10001c34:	10800817 	ldw	r2,32(r2)
10001c38:	10800044 	addi	r2,r2,1
10001c3c:	00000106 	br	10001c44 <press_s+0xe0>
10001c40:	00800184 	movi	r2,6
10001c44:	e0ffff17 	ldw	r3,-4(fp)
10001c48:	18800815 	stw	r2,32(r3)
		saber->state_count = 0;
10001c4c:	e0bfff17 	ldw	r2,-4(fp)
10001c50:	10000915 	stw	zero,36(r2)
		}
		can_walk = 1;
10001c54:	00800044 	movi	r2,1
10001c58:	e0bffe05 	stb	r2,-8(fp)
	}
    if (can_walk == 1 && saber->vy < VY_MOST){
10001c5c:	e0bffe07 	ldb	r2,-8(fp)
10001c60:	10800058 	cmpnei	r2,r2,1
10001c64:	1000091e 	bne	r2,zero,10001c8c <press_s+0x128>
10001c68:	e0bfff17 	ldw	r2,-4(fp)
10001c6c:	10800417 	ldw	r2,16(r2)
10001c70:	108000c8 	cmpgei	r2,r2,3
10001c74:	1000051e 	bne	r2,zero,10001c8c <press_s+0x128>
    	saber->vy++;
10001c78:	e0bfff17 	ldw	r2,-4(fp)
10001c7c:	10800417 	ldw	r2,16(r2)
10001c80:	10c00044 	addi	r3,r2,1
10001c84:	e0bfff17 	ldw	r2,-4(fp)
10001c88:	10c00415 	stw	r3,16(r2)
    }
}
10001c8c:	0001883a 	nop
10001c90:	e037883a 	mov	sp,fp
10001c94:	df000017 	ldw	fp,0(sp)
10001c98:	dec00104 	addi	sp,sp,4
10001c9c:	f800283a 	ret

10001ca0 <press_a>:

void press_a(saber_t *saber){
10001ca0:	defffe04 	addi	sp,sp,-8
10001ca4:	df000115 	stw	fp,4(sp)
10001ca8:	df000104 	addi	fp,sp,4
10001cac:	e13fff15 	stw	r4,-4(fp)
	if (saber->state <= WALK_LEFT6 ){
10001cb0:	e0bfff17 	ldw	r2,-4(fp)
10001cb4:	10800817 	ldw	r2,32(r2)
10001cb8:	10800188 	cmpgei	r2,r2,6
10001cbc:	10001e1e 	bne	r2,zero,10001d38 <press_a+0x98>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001cc0:	e0bfff17 	ldw	r2,-4(fp)
10001cc4:	10800917 	ldw	r2,36(r2)
10001cc8:	11000044 	addi	r4,r2,1
10001ccc:	e0ffff17 	ldw	r3,-4(fp)
10001cd0:	19000915 	stw	r4,36(r3)
10001cd4:	10800110 	cmplti	r2,r2,4
10001cd8:	10000d1e 	bne	r2,zero,10001d10 <press_a+0x70>
		saber->state = (saber->state == WALK_LEFT6)? WALK_LEFT1:saber->state+1;
10001cdc:	e0bfff17 	ldw	r2,-4(fp)
10001ce0:	10800817 	ldw	r2,32(r2)
10001ce4:	10800160 	cmpeqi	r2,r2,5
10001ce8:	1000041e 	bne	r2,zero,10001cfc <press_a+0x5c>
10001cec:	e0bfff17 	ldw	r2,-4(fp)
10001cf0:	10800817 	ldw	r2,32(r2)
10001cf4:	10800044 	addi	r2,r2,1
10001cf8:	00000106 	br	10001d00 <press_a+0x60>
10001cfc:	0005883a 	mov	r2,zero
10001d00:	e0ffff17 	ldw	r3,-4(fp)
10001d04:	18800815 	stw	r2,32(r3)
		saber->state_count = 0;
10001d08:	e0bfff17 	ldw	r2,-4(fp)
10001d0c:	10000915 	stw	zero,36(r2)
		}
		if (saber->vx > -VX_MOST){
10001d10:	e0bfff17 	ldw	r2,-4(fp)
10001d14:	10800317 	ldw	r2,12(r2)
10001d18:	10bfff50 	cmplti	r2,r2,-3
10001d1c:	1000151e 	bne	r2,zero,10001d74 <press_a+0xd4>
			saber->vx--;
10001d20:	e0bfff17 	ldw	r2,-4(fp)
10001d24:	10800317 	ldw	r2,12(r2)
10001d28:	10ffffc4 	addi	r3,r2,-1
10001d2c:	e0bfff17 	ldw	r2,-4(fp)
10001d30:	10c00315 	stw	r3,12(r2)
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
		saber->state = WALK_LEFT1;
		saber -> vx = 0;
		saber->FaceDirection = LEFT;
	}
}
10001d34:	00000f06 	br	10001d74 <press_a+0xd4>
		}
		if (saber->vx > -VX_MOST){
			saber->vx--;
		}
	}
	else if(saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6){
10001d38:	e0bfff17 	ldw	r2,-4(fp)
10001d3c:	10800817 	ldw	r2,32(r2)
10001d40:	10800190 	cmplti	r2,r2,6
10001d44:	10000b1e 	bne	r2,zero,10001d74 <press_a+0xd4>
10001d48:	e0bfff17 	ldw	r2,-4(fp)
10001d4c:	10800817 	ldw	r2,32(r2)
10001d50:	10800308 	cmpgei	r2,r2,12
10001d54:	1000071e 	bne	r2,zero,10001d74 <press_a+0xd4>
		saber->state = WALK_LEFT1;
10001d58:	e0bfff17 	ldw	r2,-4(fp)
10001d5c:	10000815 	stw	zero,32(r2)
		saber -> vx = 0;
10001d60:	e0bfff17 	ldw	r2,-4(fp)
10001d64:	10000315 	stw	zero,12(r2)
		saber->FaceDirection = LEFT;
10001d68:	e0bfff17 	ldw	r2,-4(fp)
10001d6c:	00c00044 	movi	r3,1
10001d70:	10c00715 	stw	r3,28(r2)
	}
}
10001d74:	0001883a 	nop
10001d78:	e037883a 	mov	sp,fp
10001d7c:	df000017 	ldw	fp,0(sp)
10001d80:	dec00104 	addi	sp,sp,4
10001d84:	f800283a 	ret

10001d88 <press_d>:

void press_d(saber_t *saber){
10001d88:	defffe04 	addi	sp,sp,-8
10001d8c:	df000115 	stw	fp,4(sp)
10001d90:	df000104 	addi	fp,sp,4
10001d94:	e13fff15 	stw	r4,-4(fp)
	if (saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6 ){
10001d98:	e0bfff17 	ldw	r2,-4(fp)
10001d9c:	10800817 	ldw	r2,32(r2)
10001da0:	10800190 	cmplti	r2,r2,6
10001da4:	1000221e 	bne	r2,zero,10001e30 <press_d+0xa8>
10001da8:	e0bfff17 	ldw	r2,-4(fp)
10001dac:	10800817 	ldw	r2,32(r2)
10001db0:	10800308 	cmpgei	r2,r2,12
10001db4:	10001e1e 	bne	r2,zero,10001e30 <press_d+0xa8>
		if (saber->state_count ++ > STATE_COUNT_MAX){
10001db8:	e0bfff17 	ldw	r2,-4(fp)
10001dbc:	10800917 	ldw	r2,36(r2)
10001dc0:	11000044 	addi	r4,r2,1
10001dc4:	e0ffff17 	ldw	r3,-4(fp)
10001dc8:	19000915 	stw	r4,36(r3)
10001dcc:	10800110 	cmplti	r2,r2,4
10001dd0:	10000d1e 	bne	r2,zero,10001e08 <press_d+0x80>
		saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
10001dd4:	e0bfff17 	ldw	r2,-4(fp)
10001dd8:	10800817 	ldw	r2,32(r2)
10001ddc:	108002e0 	cmpeqi	r2,r2,11
10001de0:	1000041e 	bne	r2,zero,10001df4 <press_d+0x6c>
10001de4:	e0bfff17 	ldw	r2,-4(fp)
10001de8:	10800817 	ldw	r2,32(r2)
10001dec:	10800044 	addi	r2,r2,1
10001df0:	00000106 	br	10001df8 <press_d+0x70>
10001df4:	00800184 	movi	r2,6
10001df8:	e0ffff17 	ldw	r3,-4(fp)
10001dfc:	18800815 	stw	r2,32(r3)
		saber->state_count = 0;
10001e00:	e0bfff17 	ldw	r2,-4(fp)
10001e04:	10000915 	stw	zero,36(r2)
		}
		if (saber->vx < VX_MOST){
10001e08:	e0bfff17 	ldw	r2,-4(fp)
10001e0c:	10800317 	ldw	r2,12(r2)
10001e10:	10800108 	cmpgei	r2,r2,4
10001e14:	1000121e 	bne	r2,zero,10001e60 <press_d+0xd8>
			saber->vx++;
10001e18:	e0bfff17 	ldw	r2,-4(fp)
10001e1c:	10800317 	ldw	r2,12(r2)
10001e20:	10c00044 	addi	r3,r2,1
10001e24:	e0bfff17 	ldw	r2,-4(fp)
10001e28:	10c00315 	stw	r3,12(r2)
	if (saber->state >= WALK_RIGHT1 && saber->state <= WALK_RIGHT6 ){
		if (saber->state_count ++ > STATE_COUNT_MAX){
		saber->state = (saber->state == WALK_RIGHT6)? WALK_RIGHT1:saber->state+1;
		saber->state_count = 0;
		}
		if (saber->vx < VX_MOST){
10001e2c:	00000c06 	br	10001e60 <press_d+0xd8>
			saber->vx++;
		}
	}
	else if(saber->state <= WALK_LEFT6){
10001e30:	e0bfff17 	ldw	r2,-4(fp)
10001e34:	10800817 	ldw	r2,32(r2)
10001e38:	10800188 	cmpgei	r2,r2,6
10001e3c:	1000081e 	bne	r2,zero,10001e60 <press_d+0xd8>
		saber->state = WALK_RIGHT1;
10001e40:	e0bfff17 	ldw	r2,-4(fp)
10001e44:	00c00184 	movi	r3,6
10001e48:	10c00815 	stw	r3,32(r2)
		saber-> vx = 0;
10001e4c:	e0bfff17 	ldw	r2,-4(fp)
10001e50:	10000315 	stw	zero,12(r2)
		saber->FaceDirection = RIGHT;
10001e54:	e0bfff17 	ldw	r2,-4(fp)
10001e58:	10000715 	stw	zero,28(r2)
	}
}
10001e5c:	00000006 	br	10001e60 <press_d+0xd8>
10001e60:	0001883a 	nop
10001e64:	e037883a 	mov	sp,fp
10001e68:	df000017 	ldw	fp,0(sp)
10001e6c:	dec00104 	addi	sp,sp,4
10001e70:	f800283a 	ret

10001e74 <press_j>:

void press_j(saber_t *saber){
10001e74:	defffe04 	addi	sp,sp,-8
10001e78:	df000115 	stw	fp,4(sp)
10001e7c:	df000104 	addi	fp,sp,4
10001e80:	e13fff15 	stw	r4,-4(fp)
	if (saber->state <= WALK_LEFT6){
10001e84:	e0bfff17 	ldw	r2,-4(fp)
10001e88:	10800817 	ldw	r2,32(r2)
10001e8c:	10800188 	cmpgei	r2,r2,6
10001e90:	1000091e 	bne	r2,zero,10001eb8 <press_j+0x44>
		saber-> state = ATTACK_LEFT1;
10001e94:	e0bfff17 	ldw	r2,-4(fp)
10001e98:	00c00304 	movi	r3,12
10001e9c:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10001ea0:	e0bfff17 	ldw	r2,-4(fp)
10001ea4:	10000915 	stw	zero,36(r2)
		saber-> IsFighting = 1;
10001ea8:	e0bfff17 	ldw	r2,-4(fp)
10001eac:	00c00044 	movi	r3,1
10001eb0:	10c00d15 	stw	r3,52(r2)
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
		saber-> state = ATTACK_RIGHT1;
		saber-> state_count = 0;
		saber-> IsFighting = 1;
	}
}
10001eb4:	00001006 	br	10001ef8 <press_j+0x84>
void press_j(saber_t *saber){
	if (saber->state <= WALK_LEFT6){
		saber-> state = ATTACK_LEFT1;
		saber-> state_count = 0;
		saber-> IsFighting = 1;
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
10001eb8:	e0bfff17 	ldw	r2,-4(fp)
10001ebc:	10800817 	ldw	r2,32(r2)
10001ec0:	10800190 	cmplti	r2,r2,6
10001ec4:	10000c1e 	bne	r2,zero,10001ef8 <press_j+0x84>
10001ec8:	e0bfff17 	ldw	r2,-4(fp)
10001ecc:	10800817 	ldw	r2,32(r2)
10001ed0:	10800308 	cmpgei	r2,r2,12
10001ed4:	1000081e 	bne	r2,zero,10001ef8 <press_j+0x84>
		saber-> state = ATTACK_RIGHT1;
10001ed8:	e0bfff17 	ldw	r2,-4(fp)
10001edc:	00c00584 	movi	r3,22
10001ee0:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10001ee4:	e0bfff17 	ldw	r2,-4(fp)
10001ee8:	10000915 	stw	zero,36(r2)
		saber-> IsFighting = 1;
10001eec:	e0bfff17 	ldw	r2,-4(fp)
10001ef0:	00c00044 	movi	r3,1
10001ef4:	10c00d15 	stw	r3,52(r2)
	}
}
10001ef8:	0001883a 	nop
10001efc:	e037883a 	mov	sp,fp
10001f00:	df000017 	ldw	fp,0(sp)
10001f04:	dec00104 	addi	sp,sp,4
10001f08:	f800283a 	ret

10001f0c <press_k>:

void press_k(saber_t *saber){
10001f0c:	defffe04 	addi	sp,sp,-8
10001f10:	df000115 	stw	fp,4(sp)
10001f14:	df000104 	addi	fp,sp,4
10001f18:	e13fff15 	stw	r4,-4(fp)
	if (saber->Excalibur_remain ==0){
10001f1c:	e0bfff17 	ldw	r2,-4(fp)
10001f20:	10800c17 	ldw	r2,48(r2)
10001f24:	10002826 	beq	r2,zero,10001fc8 <press_k+0xbc>
		return;
	}
	if (saber->state <= WALK_LEFT6){
10001f28:	e0bfff17 	ldw	r2,-4(fp)
10001f2c:	10800817 	ldw	r2,32(r2)
10001f30:	10800188 	cmpgei	r2,r2,6
10001f34:	10000f1e 	bne	r2,zero,10001f74 <press_k+0x68>
		saber-> state = EXCALIBUR_LEFT1;
10001f38:	e0bfff17 	ldw	r2,-4(fp)
10001f3c:	00c00404 	movi	r3,16
10001f40:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10001f44:	e0bfff17 	ldw	r2,-4(fp)
10001f48:	10000915 	stw	zero,36(r2)
		saber-> Excalibur_state = EXCALIBUR1;
10001f4c:	e0bfff17 	ldw	r2,-4(fp)
10001f50:	10000a15 	stw	zero,40(r2)
		saber-> Excalibur_count = 0;
10001f54:	e0bfff17 	ldw	r2,-4(fp)
10001f58:	10000b15 	stw	zero,44(r2)
		saber-> Excalibur_remain --;
10001f5c:	e0bfff17 	ldw	r2,-4(fp)
10001f60:	10800c17 	ldw	r2,48(r2)
10001f64:	10ffffc4 	addi	r3,r2,-1
10001f68:	e0bfff17 	ldw	r2,-4(fp)
10001f6c:	10c00c15 	stw	r3,48(r2)
10001f70:	00001606 	br	10001fcc <press_k+0xc0>
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
10001f74:	e0bfff17 	ldw	r2,-4(fp)
10001f78:	10800817 	ldw	r2,32(r2)
10001f7c:	10800190 	cmplti	r2,r2,6
10001f80:	1000121e 	bne	r2,zero,10001fcc <press_k+0xc0>
10001f84:	e0bfff17 	ldw	r2,-4(fp)
10001f88:	10800817 	ldw	r2,32(r2)
10001f8c:	10800308 	cmpgei	r2,r2,12
10001f90:	10000e1e 	bne	r2,zero,10001fcc <press_k+0xc0>
		saber-> state = EXCALIBUR_RIGHT1;
10001f94:	e0bfff17 	ldw	r2,-4(fp)
10001f98:	00c00684 	movi	r3,26
10001f9c:	10c00815 	stw	r3,32(r2)
		saber-> Excalibur_state = EXCALIBUR1;
10001fa0:	e0bfff17 	ldw	r2,-4(fp)
10001fa4:	10000a15 	stw	zero,40(r2)
		saber-> Excalibur_count = 0;
10001fa8:	e0bfff17 	ldw	r2,-4(fp)
10001fac:	10000b15 	stw	zero,44(r2)
		saber-> Excalibur_remain --;
10001fb0:	e0bfff17 	ldw	r2,-4(fp)
10001fb4:	10800c17 	ldw	r2,48(r2)
10001fb8:	10ffffc4 	addi	r3,r2,-1
10001fbc:	e0bfff17 	ldw	r2,-4(fp)
10001fc0:	10c00c15 	stw	r3,48(r2)
10001fc4:	00000106 	br	10001fcc <press_k+0xc0>
	}
}

void press_k(saber_t *saber){
	if (saber->Excalibur_remain ==0){
		return;
10001fc8:	0001883a 	nop
		saber-> state = EXCALIBUR_RIGHT1;
		saber-> Excalibur_state = EXCALIBUR1;
		saber-> Excalibur_count = 0;
		saber-> Excalibur_remain --;
	}
}
10001fcc:	e037883a 	mov	sp,fp
10001fd0:	df000017 	ldw	fp,0(sp)
10001fd4:	dec00104 	addi	sp,sp,4
10001fd8:	f800283a 	ret

10001fdc <press_l>:

void press_l(saber_t *saber){
10001fdc:	defffe04 	addi	sp,sp,-8
10001fe0:	df000115 	stw	fp,4(sp)
10001fe4:	df000104 	addi	fp,sp,4
10001fe8:	e13fff15 	stw	r4,-4(fp)
	if (saber->state <= WALK_LEFT6){
10001fec:	e0bfff17 	ldw	r2,-4(fp)
10001ff0:	10800817 	ldw	r2,32(r2)
10001ff4:	10800188 	cmpgei	r2,r2,6
10001ff8:	1000061e 	bne	r2,zero,10002014 <press_l+0x38>
		saber-> state = POSE_LEFT1;
10001ffc:	e0bfff17 	ldw	r2,-4(fp)
10002000:	00c00504 	movi	r3,20
10002004:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10002008:	e0bfff17 	ldw	r2,-4(fp)
1000200c:	10000915 	stw	zero,36(r2)
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
		saber-> state = POSE_RIGHT1;
		saber-> state_count = 0;
	}
}
10002010:	00000d06 	br	10002048 <press_l+0x6c>

void press_l(saber_t *saber){
	if (saber->state <= WALK_LEFT6){
		saber-> state = POSE_LEFT1;
		saber-> state_count = 0;
	}else if (saber->state >= WALK_RIGHT1 &&saber->state <= WALK_RIGHT6){
10002014:	e0bfff17 	ldw	r2,-4(fp)
10002018:	10800817 	ldw	r2,32(r2)
1000201c:	10800190 	cmplti	r2,r2,6
10002020:	1000091e 	bne	r2,zero,10002048 <press_l+0x6c>
10002024:	e0bfff17 	ldw	r2,-4(fp)
10002028:	10800817 	ldw	r2,32(r2)
1000202c:	10800308 	cmpgei	r2,r2,12
10002030:	1000051e 	bne	r2,zero,10002048 <press_l+0x6c>
		saber-> state = POSE_RIGHT1;
10002034:	e0bfff17 	ldw	r2,-4(fp)
10002038:	00c00784 	movi	r3,30
1000203c:	10c00815 	stw	r3,32(r2)
		saber-> state_count = 0;
10002040:	e0bfff17 	ldw	r2,-4(fp)
10002044:	10000915 	stw	zero,36(r2)
	}
}
10002048:	0001883a 	nop
1000204c:	e037883a 	mov	sp,fp
10002050:	df000017 	ldw	fp,0(sp)
10002054:	dec00104 	addi	sp,sp,4
10002058:	f800283a 	ret

1000205c <saber_init>:


void saber_init(saber_t *saber){
1000205c:	defffe04 	addi	sp,sp,-8
10002060:	df000115 	stw	fp,4(sp)
10002064:	df000104 	addi	fp,sp,4
10002068:	e13fff15 	stw	r4,-4(fp)
	saber -> exist = 1;
1000206c:	e0bfff17 	ldw	r2,-4(fp)
10002070:	00c00044 	movi	r3,1
10002074:	10c00015 	stw	r3,0(r2)
	saber -> vx = 0;
10002078:	e0bfff17 	ldw	r2,-4(fp)
1000207c:	10000315 	stw	zero,12(r2)
	saber -> vy = 0;
10002080:	e0bfff17 	ldw	r2,-4(fp)
10002084:	10000415 	stw	zero,16(r2)
	saber -> x = INIT_X;
10002088:	e0bfff17 	ldw	r2,-4(fp)
1000208c:	00c00c84 	movi	r3,50
10002090:	10c00115 	stw	r3,4(r2)
	saber -> y = INIT_Y;
10002094:	e0bfff17 	ldw	r2,-4(fp)
10002098:	00c03c04 	movi	r3,240
1000209c:	10c00215 	stw	r3,8(r2)
	saber -> HP = 3;
100020a0:	e0bfff17 	ldw	r2,-4(fp)
100020a4:	00c000c4 	movi	r3,3
100020a8:	10c00515 	stw	r3,20(r2)
	saber -> ATK = 3;
100020ac:	e0bfff17 	ldw	r2,-4(fp)
100020b0:	00c000c4 	movi	r3,3
100020b4:	10c00615 	stw	r3,24(r2)
	saber -> state = WALK_RIGHT1;
100020b8:	e0bfff17 	ldw	r2,-4(fp)
100020bc:	00c00184 	movi	r3,6
100020c0:	10c00815 	stw	r3,32(r2)
	saber -> state_count = 0;
100020c4:	e0bfff17 	ldw	r2,-4(fp)
100020c8:	10000915 	stw	zero,36(r2)
	saber -> Excalibur_state = EXCALIBURNULL;
100020cc:	e0bfff17 	ldw	r2,-4(fp)
100020d0:	00c00204 	movi	r3,8
100020d4:	10c00a15 	stw	r3,40(r2)
	saber -> Excalibur_damage = 5;
100020d8:	e0bfff17 	ldw	r2,-4(fp)
100020dc:	00c00144 	movi	r3,5
100020e0:	10c00f15 	stw	r3,60(r2)
	saber -> Excalibur_remain = 3;
100020e4:	e0bfff17 	ldw	r2,-4(fp)
100020e8:	00c000c4 	movi	r3,3
100020ec:	10c00c15 	stw	r3,48(r2)
	saber -> IsFighting = 0;
100020f0:	e0bfff17 	ldw	r2,-4(fp)
100020f4:	10000d15 	stw	zero,52(r2)
	saber -> FaceDirection = RIGHT;
100020f8:	e0bfff17 	ldw	r2,-4(fp)
100020fc:	10000715 	stw	zero,28(r2)
	saber -> injuring =0;
10002100:	e0bfff17 	ldw	r2,-4(fp)
10002104:	10000e15 	stw	zero,56(r2)
}
10002108:	0001883a 	nop
1000210c:	e037883a 	mov	sp,fp
10002110:	df000017 	ldw	fp,0(sp)
10002114:	dec00104 	addi	sp,sp,4
10002118:	f800283a 	ret

1000211c <update>:


void update(saber_t *saber){
1000211c:	defffd04 	addi	sp,sp,-12
10002120:	dfc00215 	stw	ra,8(sp)
10002124:	df000115 	stw	fp,4(sp)
10002128:	df000104 	addi	fp,sp,4
1000212c:	e13fff15 	stw	r4,-4(fp)
	saber -> x = saber ->x + saber->vx;
10002130:	e0bfff17 	ldw	r2,-4(fp)
10002134:	10c00117 	ldw	r3,4(r2)
10002138:	e0bfff17 	ldw	r2,-4(fp)
1000213c:	10800317 	ldw	r2,12(r2)
10002140:	1887883a 	add	r3,r3,r2
10002144:	e0bfff17 	ldw	r2,-4(fp)
10002148:	10c00115 	stw	r3,4(r2)
	saber -> y = saber ->y + saber->vy;
1000214c:	e0bfff17 	ldw	r2,-4(fp)
10002150:	10c00217 	ldw	r3,8(r2)
10002154:	e0bfff17 	ldw	r2,-4(fp)
10002158:	10800417 	ldw	r2,16(r2)
1000215c:	1887883a 	add	r3,r3,r2
10002160:	e0bfff17 	ldw	r2,-4(fp)
10002164:	10c00215 	stw	r3,8(r2)

	if (saber->injuring){
10002168:	e0bfff17 	ldw	r2,-4(fp)
1000216c:	10800e17 	ldw	r2,56(r2)
10002170:	10001d26 	beq	r2,zero,100021e8 <update+0xcc>
		saber->exist = (saber->injuring-1)/2 % 2;
10002174:	e0bfff17 	ldw	r2,-4(fp)
10002178:	10800e17 	ldw	r2,56(r2)
1000217c:	10bfffc4 	addi	r2,r2,-1
10002180:	1006d7fa 	srli	r3,r2,31
10002184:	1885883a 	add	r2,r3,r2
10002188:	1005d07a 	srai	r2,r2,1
1000218c:	1007883a 	mov	r3,r2
10002190:	00a00034 	movhi	r2,32768
10002194:	10800044 	addi	r2,r2,1
10002198:	1884703a 	and	r2,r3,r2
1000219c:	1000040e 	bge	r2,zero,100021b0 <update+0x94>
100021a0:	10bfffc4 	addi	r2,r2,-1
100021a4:	00ffff84 	movi	r3,-2
100021a8:	10c4b03a 	or	r2,r2,r3
100021ac:	10800044 	addi	r2,r2,1
100021b0:	1007883a 	mov	r3,r2
100021b4:	e0bfff17 	ldw	r2,-4(fp)
100021b8:	10c00015 	stw	r3,0(r2)
		saber->injuring = (saber->injuring>=8)?0:saber->injuring+1;
100021bc:	e0bfff17 	ldw	r2,-4(fp)
100021c0:	10800e17 	ldw	r2,56(r2)
100021c4:	10800208 	cmpgei	r2,r2,8
100021c8:	1000041e 	bne	r2,zero,100021dc <update+0xc0>
100021cc:	e0bfff17 	ldw	r2,-4(fp)
100021d0:	10800e17 	ldw	r2,56(r2)
100021d4:	10800044 	addi	r2,r2,1
100021d8:	00000106 	br	100021e0 <update+0xc4>
100021dc:	0005883a 	mov	r2,zero
100021e0:	e0ffff17 	ldw	r3,-4(fp)
100021e4:	18800e15 	stw	r2,56(r3)
	}

	if (saber->Excalibur_state< EXCALIBURNULL ){
100021e8:	e0bfff17 	ldw	r2,-4(fp)
100021ec:	10800a17 	ldw	r2,40(r2)
100021f0:	10800208 	cmpgei	r2,r2,8
100021f4:	10000e1e 	bne	r2,zero,10002230 <update+0x114>
		if (saber->Excalibur_count ++ >EXCALIBUR_COUNT_MAX){
100021f8:	e0bfff17 	ldw	r2,-4(fp)
100021fc:	10800b17 	ldw	r2,44(r2)
10002200:	11000044 	addi	r4,r2,1
10002204:	e0ffff17 	ldw	r3,-4(fp)
10002208:	19000b15 	stw	r4,44(r3)
1000220c:	10800090 	cmplti	r2,r2,2
10002210:	1000071e 	bne	r2,zero,10002230 <update+0x114>
			saber->Excalibur_state++;
10002214:	e0bfff17 	ldw	r2,-4(fp)
10002218:	10800a17 	ldw	r2,40(r2)
1000221c:	10c00044 	addi	r3,r2,1
10002220:	e0bfff17 	ldw	r2,-4(fp)
10002224:	10c00a15 	stw	r3,40(r2)
			saber->Excalibur_count = 0;
10002228:	e0bfff17 	ldw	r2,-4(fp)
1000222c:	10000b15 	stw	zero,44(r2)
		}
	}
	// boundary check
	if (saber-> x < LEFT_MOST){saber-> x = LEFT_MOST;}
10002230:	e0bfff17 	ldw	r2,-4(fp)
10002234:	10800117 	ldw	r2,4(r2)
10002238:	10800848 	cmpgei	r2,r2,33
1000223c:	1000031e 	bne	r2,zero,1000224c <update+0x130>
10002240:	e0bfff17 	ldw	r2,-4(fp)
10002244:	00c00844 	movi	r3,33
10002248:	10c00115 	stw	r3,4(r2)
	if (saber-> x > RIGHT_MOST){saber-> x = RIGHT_MOST;}
1000224c:	e0bfff17 	ldw	r2,-4(fp)
10002250:	10800117 	ldw	r2,4(r2)
10002254:	10809810 	cmplti	r2,r2,608
10002258:	1000031e 	bne	r2,zero,10002268 <update+0x14c>
1000225c:	e0bfff17 	ldw	r2,-4(fp)
10002260:	00c097c4 	movi	r3,607
10002264:	10c00115 	stw	r3,4(r2)
	if (saber-> y < UP_MOST){saber-> y = UP_MOST;}
10002268:	e0bfff17 	ldw	r2,-4(fp)
1000226c:	10800217 	ldw	r2,8(r2)
10002270:	10802a88 	cmpgei	r2,r2,170
10002274:	1000031e 	bne	r2,zero,10002284 <update+0x168>
10002278:	e0bfff17 	ldw	r2,-4(fp)
1000227c:	00c02a84 	movi	r3,170
10002280:	10c00215 	stw	r3,8(r2)
	if (saber-> y > DOWN_MOST){saber-> y = DOWN_MOST;}
10002284:	e0bfff17 	ldw	r2,-4(fp)
10002288:	10800217 	ldw	r2,8(r2)
1000228c:	10804650 	cmplti	r2,r2,281
10002290:	1000031e 	bne	r2,zero,100022a0 <update+0x184>
10002294:	e0bfff17 	ldw	r2,-4(fp)
10002298:	00c04604 	movi	r3,280
1000229c:	10c00215 	stw	r3,8(r2)

	update_helper(saber, ATTACK_LEFT1, ATTACK_LEFT4);
100022a0:	018003c4 	movi	r6,15
100022a4:	01400304 	movi	r5,12
100022a8:	e13fff17 	ldw	r4,-4(fp)
100022ac:	00023700 	call	10002370 <update_helper>
	update_helper(saber, ATTACK_RIGHT1, ATTACK_RIGHT4);
100022b0:	01800644 	movi	r6,25
100022b4:	01400584 	movi	r5,22
100022b8:	e13fff17 	ldw	r4,-4(fp)
100022bc:	00023700 	call	10002370 <update_helper>
	update_helper(saber, EXCALIBUR_LEFT1, EXCALIBUR_LEFT4);
100022c0:	018004c4 	movi	r6,19
100022c4:	01400404 	movi	r5,16
100022c8:	e13fff17 	ldw	r4,-4(fp)
100022cc:	00023700 	call	10002370 <update_helper>
	update_helper(saber, EXCALIBUR_RIGHT1, EXCALIBUR_RIGHT4);
100022d0:	01800744 	movi	r6,29
100022d4:	01400684 	movi	r5,26
100022d8:	e13fff17 	ldw	r4,-4(fp)
100022dc:	00023700 	call	10002370 <update_helper>
	update_helper(saber, POSE_LEFT1, POSE_LEFT2);
100022e0:	01800544 	movi	r6,21
100022e4:	01400504 	movi	r5,20
100022e8:	e13fff17 	ldw	r4,-4(fp)
100022ec:	00023700 	call	10002370 <update_helper>
	update_helper(saber, POSE_RIGHT1, POSE_RIGHT2);
100022f0:	018007c4 	movi	r6,31
100022f4:	01400784 	movi	r5,30
100022f8:	e13fff17 	ldw	r4,-4(fp)
100022fc:	00023700 	call	10002370 <update_helper>
}
10002300:	0001883a 	nop
10002304:	e037883a 	mov	sp,fp
10002308:	dfc00117 	ldw	ra,4(sp)
1000230c:	df000017 	ldw	fp,0(sp)
10002310:	dec00204 	addi	sp,sp,8
10002314:	f800283a 	ret

10002318 <stop>:

void stop(saber_t *saber){
10002318:	defffe04 	addi	sp,sp,-8
1000231c:	df000115 	stw	fp,4(sp)
10002320:	df000104 	addi	fp,sp,4
10002324:	e13fff15 	stw	r4,-4(fp)
	saber-> vx =0;
10002328:	e0bfff17 	ldw	r2,-4(fp)
1000232c:	10000315 	stw	zero,12(r2)
	saber-> vy =0;
10002330:	e0bfff17 	ldw	r2,-4(fp)
10002334:	10000415 	stw	zero,16(r2)
	if (saber -> FaceDirection == RIGHT){
10002338:	e0bfff17 	ldw	r2,-4(fp)
1000233c:	10800717 	ldw	r2,28(r2)
10002340:	1000041e 	bne	r2,zero,10002354 <stop+0x3c>
		saber -> state = WALK_RIGHT1;
10002344:	e0bfff17 	ldw	r2,-4(fp)
10002348:	00c00184 	movi	r3,6
1000234c:	10c00815 	stw	r3,32(r2)
	}else{
		saber -> state = WALK_LEFT1;
	}
}
10002350:	00000206 	br	1000235c <stop+0x44>
	saber-> vx =0;
	saber-> vy =0;
	if (saber -> FaceDirection == RIGHT){
		saber -> state = WALK_RIGHT1;
	}else{
		saber -> state = WALK_LEFT1;
10002354:	e0bfff17 	ldw	r2,-4(fp)
10002358:	10000815 	stw	zero,32(r2)
	}
}
1000235c:	0001883a 	nop
10002360:	e037883a 	mov	sp,fp
10002364:	df000017 	ldw	fp,0(sp)
10002368:	dec00104 	addi	sp,sp,4
1000236c:	f800283a 	ret

10002370 <update_helper>:

void update_helper(saber_t*saber, int state_start, int state_end){
10002370:	defffb04 	addi	sp,sp,-20
10002374:	df000415 	stw	fp,16(sp)
10002378:	df000404 	addi	fp,sp,16
1000237c:	e13ffd15 	stw	r4,-12(fp)
10002380:	e17ffe15 	stw	r5,-8(fp)
10002384:	e1bfff15 	stw	r6,-4(fp)
	int final_frame;
	final_frame = saber->FaceDirection == RIGHT? WALK_RIGHT1:WALK_LEFT1;
10002388:	e0bffd17 	ldw	r2,-12(fp)
1000238c:	10800717 	ldw	r2,28(r2)
10002390:	1000021e 	bne	r2,zero,1000239c <update_helper+0x2c>
10002394:	00800184 	movi	r2,6
10002398:	00000106 	br	100023a0 <update_helper+0x30>
1000239c:	0005883a 	mov	r2,zero
100023a0:	e0bffc15 	stw	r2,-16(fp)
	if (saber->HP == 0){
100023a4:	e0bffd17 	ldw	r2,-12(fp)
100023a8:	10800517 	ldw	r2,20(r2)
100023ac:	1000021e 	bne	r2,zero,100023b8 <update_helper+0x48>
		saber->exist = 0;
100023b0:	e0bffd17 	ldw	r2,-12(fp)
100023b4:	10000015 	stw	zero,0(r2)
	}
	if (saber->state >= state_start && saber->state<= state_end){
100023b8:	e0bffd17 	ldw	r2,-12(fp)
100023bc:	10c00817 	ldw	r3,32(r2)
100023c0:	e0bffe17 	ldw	r2,-8(fp)
100023c4:	18801e16 	blt	r3,r2,10002440 <update_helper+0xd0>
100023c8:	e0bffd17 	ldw	r2,-12(fp)
100023cc:	10800817 	ldw	r2,32(r2)
100023d0:	e0ffff17 	ldw	r3,-4(fp)
100023d4:	18801a16 	blt	r3,r2,10002440 <update_helper+0xd0>
		saber->vx = 0;
100023d8:	e0bffd17 	ldw	r2,-12(fp)
100023dc:	10000315 	stw	zero,12(r2)
		saber->vy = 0;
100023e0:	e0bffd17 	ldw	r2,-12(fp)
100023e4:	10000415 	stw	zero,16(r2)
		if (saber->state_count ++ > STATE_COUNT_MAX){
100023e8:	e0bffd17 	ldw	r2,-12(fp)
100023ec:	10800917 	ldw	r2,36(r2)
100023f0:	11000044 	addi	r4,r2,1
100023f4:	e0fffd17 	ldw	r3,-12(fp)
100023f8:	19000915 	stw	r4,36(r3)
100023fc:	10800110 	cmplti	r2,r2,4
10002400:	10000f1e 	bne	r2,zero,10002440 <update_helper+0xd0>
			saber->state = (saber->state == state_end)? final_frame:saber->state+1;
10002404:	e0bffd17 	ldw	r2,-12(fp)
10002408:	10c00817 	ldw	r3,32(r2)
1000240c:	e0bfff17 	ldw	r2,-4(fp)
10002410:	18800426 	beq	r3,r2,10002424 <update_helper+0xb4>
10002414:	e0bffd17 	ldw	r2,-12(fp)
10002418:	10800817 	ldw	r2,32(r2)
1000241c:	10800044 	addi	r2,r2,1
10002420:	00000106 	br	10002428 <update_helper+0xb8>
10002424:	e0bffc17 	ldw	r2,-16(fp)
10002428:	e0fffd17 	ldw	r3,-12(fp)
1000242c:	18800815 	stw	r2,32(r3)
			saber->state_count = 0;
10002430:	e0bffd17 	ldw	r2,-12(fp)
10002434:	10000915 	stw	zero,36(r2)
			saber->IsFighting = 0;
10002438:	e0bffd17 	ldw	r2,-12(fp)
1000243c:	10000d15 	stw	zero,52(r2)
		}
	}
}
10002440:	0001883a 	nop
10002444:	e037883a 	mov	sp,fp
10002448:	df000017 	ldw	fp,0(sp)
1000244c:	dec00104 	addi	sp,sp,4
10002450:	f800283a 	ret

10002454 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10002454:	defffc04 	addi	sp,sp,-16
10002458:	dfc00315 	stw	ra,12(sp)
1000245c:	df000215 	stw	fp,8(sp)
10002460:	df000204 	addi	fp,sp,8
10002464:	2007883a 	mov	r3,r4
10002468:	2805883a 	mov	r2,r5
1000246c:	e0fffe0d 	sth	r3,-8(fp)
10002470:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
10002474:	e0bffe0b 	ldhu	r2,-8(fp)
10002478:	100b883a 	mov	r5,r2
1000247c:	01000084 	movi	r4,2
10002480:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,Data);
10002484:	e0bfff0b 	ldhu	r2,-4(fp)
10002488:	100b883a 	mov	r5,r2
1000248c:	0009883a 	mov	r4,zero
10002490:	00002f40 	call	100002f4 <IO_write>
}
10002494:	0001883a 	nop
10002498:	e037883a 	mov	sp,fp
1000249c:	dfc00117 	ldw	ra,4(sp)
100024a0:	df000017 	ldw	fp,0(sp)
100024a4:	dec00204 	addi	sp,sp,8
100024a8:	f800283a 	ret

100024ac <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100024ac:	defffd04 	addi	sp,sp,-12
100024b0:	dfc00215 	stw	ra,8(sp)
100024b4:	df000115 	stw	fp,4(sp)
100024b8:	df000104 	addi	fp,sp,4
100024bc:	2005883a 	mov	r2,r4
100024c0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
100024c4:	e0bfff0b 	ldhu	r2,-4(fp)
100024c8:	100b883a 	mov	r5,r2
100024cc:	01000084 	movi	r4,2
100024d0:	00002f40 	call	100002f4 <IO_write>
	return IO_read(HPI_DATA);
100024d4:	0009883a 	mov	r4,zero
100024d8:	00003640 	call	10000364 <IO_read>
}
100024dc:	e037883a 	mov	sp,fp
100024e0:	dfc00117 	ldw	ra,4(sp)
100024e4:	df000017 	ldw	fp,0(sp)
100024e8:	dec00204 	addi	sp,sp,8
100024ec:	f800283a 	ret

100024f0 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100024f0:	defffe04 	addi	sp,sp,-8
100024f4:	dfc00115 	stw	ra,4(sp)
100024f8:	df000015 	stw	fp,0(sp)
100024fc:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10002500:	017e9414 	movui	r5,64080
10002504:	01000044 	movi	r4,1
10002508:	00002f40 	call	100002f4 <IO_write>
	usleep(100000);
1000250c:	010000b4 	movhi	r4,2
10002510:	2121a804 	addi	r4,r4,-31072
10002514:	0011df80 	call	10011df8 <usleep>
	printf("[USB INIT]:reset finished!\n");
10002518:	01040074 	movhi	r4,4097
1000251c:	210f7304 	addi	r4,r4,15820
10002520:	00053d00 	call	100053d0 <puts>

	usleep(500000);
10002524:	01000234 	movhi	r4,8
10002528:	21284804 	addi	r4,r4,-24288
1000252c:	0011df80 	call	10011df8 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10002530:	01040074 	movhi	r4,4097
10002534:	210f7a04 	addi	r4,r4,15848
10002538:	00053d00 	call	100053d0 <puts>
	IO_read(HPI_MAILBOX);
1000253c:	01000044 	movi	r4,1
10002540:	00003640 	call	10000364 <IO_read>
	IO_read(HPI_STATUS);
10002544:	010000c4 	movi	r4,3
10002548:	00003640 	call	10000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
1000254c:	01005104 	movi	r4,324
10002550:	00024ac0 	call	100024ac <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10002554:	000b883a 	mov	r5,zero
10002558:	01005104 	movi	r4,324
1000255c:	00024540 	call	10002454 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10002560:	01005204 	movi	r4,328
10002564:	00024ac0 	call	100024ac <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10002568:	000b883a 	mov	r5,zero
1000256c:	01005204 	movi	r4,328
10002570:	00024540 	call	10002454 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10002574:	017fffd4 	movui	r5,65535
10002578:	01302414 	movui	r4,49296
1000257c:	00024540 	call	10002454 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10002580:	017fffd4 	movui	r5,65535
10002584:	01302c14 	movui	r4,49328
10002588:	00024540 	call	10002454 <UsbWrite>
}
1000258c:	0001883a 	nop
10002590:	e037883a 	mov	sp,fp
10002594:	dfc00117 	ldw	ra,4(sp)
10002598:	df000017 	ldw	fp,0(sp)
1000259c:	dec00204 	addi	sp,sp,8
100025a0:	f800283a 	ret

100025a4 <UsbSetAddress>:


void UsbSetAddress()
{
100025a4:	defffe04 	addi	sp,sp,-8
100025a8:	dfc00115 	stw	ra,4(sp)
100025ac:	df000015 	stw	fp,0(sp)
100025b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100025b4:	01414004 	movi	r5,1280
100025b8:	01000084 	movi	r4,2
100025bc:	00002f40 	call	100002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100025c0:	01414304 	movi	r5,1292
100025c4:	0009883a 	mov	r4,zero
100025c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100025cc:	01400204 	movi	r5,8
100025d0:	0009883a 	mov	r4,zero
100025d4:	00002f40 	call	100002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100025d8:	01403404 	movi	r5,208
100025dc:	0009883a 	mov	r4,zero
100025e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100025e4:	01400044 	movi	r5,1
100025e8:	0009883a 	mov	r4,zero
100025ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100025f0:	014004c4 	movi	r5,19
100025f4:	0009883a 	mov	r4,zero
100025f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100025fc:	01414504 	movi	r5,1300
10002600:	0009883a 	mov	r4,zero
10002604:	00002f40 	call	100002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002608:	01414004 	movi	r5,1280
1000260c:	0009883a 	mov	r4,zero
10002610:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002614:	01400084 	movi	r5,2
10002618:	0009883a 	mov	r4,zero
1000261c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002620:	000b883a 	mov	r5,zero
10002624:	0009883a 	mov	r4,zero
10002628:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000262c:	000b883a 	mov	r5,zero
10002630:	0009883a 	mov	r4,zero
10002634:	00002f40 	call	100002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002638:	000b883a 	mov	r5,zero
1000263c:	0009883a 	mov	r4,zero
10002640:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002644:	000b883a 	mov	r5,zero
10002648:	0009883a 	mov	r4,zero
1000264c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002650:	01402404 	movi	r5,144
10002654:	0009883a 	mov	r4,zero
10002658:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000265c:	01401044 	movi	r5,65
10002660:	0009883a 	mov	r4,zero
10002664:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002668:	014004c4 	movi	r5,19
1000266c:	0009883a 	mov	r4,zero
10002670:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002674:	000b883a 	mov	r5,zero
10002678:	0009883a 	mov	r4,zero
1000267c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002680:	01414004 	movi	r5,1280
10002684:	01006c04 	movi	r4,432
10002688:	00024540 	call	10002454 <UsbWrite>
}
1000268c:	0001883a 	nop
10002690:	e037883a 	mov	sp,fp
10002694:	dfc00117 	ldw	ra,4(sp)
10002698:	df000017 	ldw	fp,0(sp)
1000269c:	dec00204 	addi	sp,sp,8
100026a0:	f800283a 	ret

100026a4 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100026a4:	defffe04 	addi	sp,sp,-8
100026a8:	dfc00115 	stw	ra,4(sp)
100026ac:	df000015 	stw	fp,0(sp)
100026b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100026b4:	01414004 	movi	r5,1280
100026b8:	01000084 	movi	r4,2
100026bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100026c0:	01414304 	movi	r5,1292
100026c4:	0009883a 	mov	r4,zero
100026c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100026cc:	01400204 	movi	r5,8
100026d0:	0009883a 	mov	r4,zero
100026d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100026d8:	0140b404 	movi	r5,720
100026dc:	0009883a 	mov	r4,zero
100026e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100026e4:	01400044 	movi	r5,1
100026e8:	0009883a 	mov	r4,zero
100026ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100026f0:	014004c4 	movi	r5,19
100026f4:	0009883a 	mov	r4,zero
100026f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100026fc:	01414504 	movi	r5,1300
10002700:	0009883a 	mov	r4,zero
10002704:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002708:	0141a004 	movi	r5,1664
1000270c:	0009883a 	mov	r4,zero
10002710:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002714:	01404004 	movi	r5,256
10002718:	0009883a 	mov	r4,zero
1000271c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002720:	000b883a 	mov	r5,zero
10002724:	0009883a 	mov	r4,zero
10002728:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
1000272c:	01400204 	movi	r5,8
10002730:	0009883a 	mov	r4,zero
10002734:	00002f40 	call	100002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002738:	01414b04 	movi	r5,1324
1000273c:	0009883a 	mov	r4,zero
10002740:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002744:	01400204 	movi	r5,8
10002748:	0009883a 	mov	r4,zero
1000274c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002750:	0140a404 	movi	r5,656
10002754:	0009883a 	mov	r4,zero
10002758:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000275c:	01401044 	movi	r5,65
10002760:	0009883a 	mov	r4,zero
10002764:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002768:	014004c4 	movi	r5,19
1000276c:	0009883a 	mov	r4,zero
10002770:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002774:	01414804 	movi	r5,1312
10002778:	0009883a 	mov	r4,zero
1000277c:	00002f40 	call	100002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10002780:	000b883a 	mov	r5,zero
10002784:	0009883a 	mov	r4,zero
10002788:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000278c:	000b883a 	mov	r5,zero
10002790:	0009883a 	mov	r4,zero
10002794:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10002798:	01408404 	movi	r5,528
1000279c:	0009883a 	mov	r4,zero
100027a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100027a4:	01401044 	movi	r5,65
100027a8:	0009883a 	mov	r4,zero
100027ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100027b0:	014004c4 	movi	r5,19
100027b4:	0009883a 	mov	r4,zero
100027b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100027bc:	000b883a 	mov	r5,zero
100027c0:	0009883a 	mov	r4,zero
100027c4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100027c8:	01414004 	movi	r5,1280
100027cc:	01006c04 	movi	r4,432
100027d0:	00024540 	call	10002454 <UsbWrite>
}
100027d4:	0001883a 	nop
100027d8:	e037883a 	mov	sp,fp
100027dc:	dfc00117 	ldw	ra,4(sp)
100027e0:	df000017 	ldw	fp,0(sp)
100027e4:	dec00204 	addi	sp,sp,8
100027e8:	f800283a 	ret

100027ec <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100027ec:	defffe04 	addi	sp,sp,-8
100027f0:	dfc00115 	stw	ra,4(sp)
100027f4:	df000015 	stw	fp,0(sp)
100027f8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100027fc:	01414004 	movi	r5,1280
10002800:	01000084 	movi	r4,2
10002804:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002808:	01414304 	movi	r5,1292
1000280c:	0009883a 	mov	r4,zero
10002810:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002814:	01400204 	movi	r5,8
10002818:	0009883a 	mov	r4,zero
1000281c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002820:	0140b404 	movi	r5,720
10002824:	0009883a 	mov	r4,zero
10002828:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000282c:	01400044 	movi	r5,1
10002830:	0009883a 	mov	r4,zero
10002834:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002838:	014004c4 	movi	r5,19
1000283c:	0009883a 	mov	r4,zero
10002840:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002844:	01414504 	movi	r5,1300
10002848:	0009883a 	mov	r4,zero
1000284c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002850:	0141a004 	movi	r5,1664
10002854:	0009883a 	mov	r4,zero
10002858:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
1000285c:	01404004 	movi	r5,256
10002860:	0009883a 	mov	r4,zero
10002864:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002868:	000b883a 	mov	r5,zero
1000286c:	0009883a 	mov	r4,zero
10002870:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10002874:	01400484 	movi	r5,18
10002878:	0009883a 	mov	r4,zero
1000287c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002880:	01415104 	movi	r5,1348
10002884:	0009883a 	mov	r4,zero
10002888:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000288c:	01400204 	movi	r5,8
10002890:	0009883a 	mov	r4,zero
10002894:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002898:	0140a404 	movi	r5,656
1000289c:	0009883a 	mov	r4,zero
100028a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100028a4:	01401044 	movi	r5,65
100028a8:	0009883a 	mov	r4,zero
100028ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100028b0:	014004c4 	movi	r5,19
100028b4:	0009883a 	mov	r4,zero
100028b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100028bc:	01414804 	movi	r5,1312
100028c0:	0009883a 	mov	r4,zero
100028c4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100028c8:	01415304 	movi	r5,1356
100028cc:	0009883a 	mov	r4,zero
100028d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100028d4:	01400204 	movi	r5,8
100028d8:	0009883a 	mov	r4,zero
100028dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100028e0:	0140a404 	movi	r5,656
100028e4:	0009883a 	mov	r4,zero
100028e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100028ec:	01400044 	movi	r5,1
100028f0:	0009883a 	mov	r4,zero
100028f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100028f8:	014004c4 	movi	r5,19
100028fc:	0009883a 	mov	r4,zero
10002900:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002904:	01414b04 	movi	r5,1324
10002908:	0009883a 	mov	r4,zero
1000290c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10002910:	01415504 	movi	r5,1364
10002914:	0009883a 	mov	r4,zero
10002918:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
1000291c:	01400084 	movi	r5,2
10002920:	0009883a 	mov	r4,zero
10002924:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002928:	0140a404 	movi	r5,656
1000292c:	0009883a 	mov	r4,zero
10002930:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002934:	01401044 	movi	r5,65
10002938:	0009883a 	mov	r4,zero
1000293c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002940:	014004c4 	movi	r5,19
10002944:	0009883a 	mov	r4,zero
10002948:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000294c:	01414e04 	movi	r5,1336
10002950:	0009883a 	mov	r4,zero
10002954:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002958:	000b883a 	mov	r5,zero
1000295c:	0009883a 	mov	r4,zero
10002960:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002964:	000b883a 	mov	r5,zero
10002968:	0009883a 	mov	r4,zero
1000296c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10002970:	01408404 	movi	r5,528
10002974:	0009883a 	mov	r4,zero
10002978:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
1000297c:	01401044 	movi	r5,65
10002980:	0009883a 	mov	r4,zero
10002984:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002988:	014004c4 	movi	r5,19
1000298c:	0009883a 	mov	r4,zero
10002990:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002994:	000b883a 	mov	r5,zero
10002998:	0009883a 	mov	r4,zero
1000299c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100029a0:	01414004 	movi	r5,1280
100029a4:	01006c04 	movi	r4,432
100029a8:	00024540 	call	10002454 <UsbWrite>
}
100029ac:	0001883a 	nop
100029b0:	e037883a 	mov	sp,fp
100029b4:	dfc00117 	ldw	ra,4(sp)
100029b8:	df000017 	ldw	fp,0(sp)
100029bc:	dec00204 	addi	sp,sp,8
100029c0:	f800283a 	ret

100029c4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100029c4:	defffe04 	addi	sp,sp,-8
100029c8:	dfc00115 	stw	ra,4(sp)
100029cc:	df000015 	stw	fp,0(sp)
100029d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100029d4:	01414004 	movi	r5,1280
100029d8:	01000084 	movi	r4,2
100029dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100029e0:	01414304 	movi	r5,1292
100029e4:	0009883a 	mov	r4,zero
100029e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100029ec:	01400204 	movi	r5,8
100029f0:	0009883a 	mov	r4,zero
100029f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100029f8:	0140b404 	movi	r5,720
100029fc:	0009883a 	mov	r4,zero
10002a00:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002a04:	01400044 	movi	r5,1
10002a08:	0009883a 	mov	r4,zero
10002a0c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002a10:	014004c4 	movi	r5,19
10002a14:	0009883a 	mov	r4,zero
10002a18:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002a1c:	01414504 	movi	r5,1300
10002a20:	0009883a 	mov	r4,zero
10002a24:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002a28:	0141a004 	movi	r5,1664
10002a2c:	0009883a 	mov	r4,zero
10002a30:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002a34:	01408004 	movi	r5,512
10002a38:	0009883a 	mov	r4,zero
10002a3c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002a40:	000b883a 	mov	r5,zero
10002a44:	0009883a 	mov	r4,zero
10002a48:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10002a4c:	01400244 	movi	r5,9
10002a50:	0009883a 	mov	r4,zero
10002a54:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002a58:	01415104 	movi	r5,1348
10002a5c:	0009883a 	mov	r4,zero
10002a60:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002a64:	01400204 	movi	r5,8
10002a68:	0009883a 	mov	r4,zero
10002a6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002a70:	0140a404 	movi	r5,656
10002a74:	0009883a 	mov	r4,zero
10002a78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002a7c:	01401044 	movi	r5,65
10002a80:	0009883a 	mov	r4,zero
10002a84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002a88:	014004c4 	movi	r5,19
10002a8c:	0009883a 	mov	r4,zero
10002a90:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002a94:	01414804 	movi	r5,1312
10002a98:	0009883a 	mov	r4,zero
10002a9c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002aa0:	01415304 	movi	r5,1356
10002aa4:	0009883a 	mov	r4,zero
10002aa8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10002aac:	01400044 	movi	r5,1
10002ab0:	0009883a 	mov	r4,zero
10002ab4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002ab8:	0140a404 	movi	r5,656
10002abc:	0009883a 	mov	r4,zero
10002ac0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002ac4:	01400044 	movi	r5,1
10002ac8:	0009883a 	mov	r4,zero
10002acc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002ad0:	014004c4 	movi	r5,19
10002ad4:	0009883a 	mov	r4,zero
10002ad8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002adc:	01414b04 	movi	r5,1324
10002ae0:	0009883a 	mov	r4,zero
10002ae4:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002ae8:	000b883a 	mov	r5,zero
10002aec:	0009883a 	mov	r4,zero
10002af0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002af4:	000b883a 	mov	r5,zero
10002af8:	0009883a 	mov	r4,zero
10002afc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002b00:	01408404 	movi	r5,528
10002b04:	0009883a 	mov	r4,zero
10002b08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002b0c:	01401044 	movi	r5,65
10002b10:	0009883a 	mov	r4,zero
10002b14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002b18:	014004c4 	movi	r5,19
10002b1c:	0009883a 	mov	r4,zero
10002b20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002b24:	000b883a 	mov	r5,zero
10002b28:	0009883a 	mov	r4,zero
10002b2c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002b30:	01414004 	movi	r5,1280
10002b34:	01006c04 	movi	r4,432
10002b38:	00024540 	call	10002454 <UsbWrite>
}
10002b3c:	0001883a 	nop
10002b40:	e037883a 	mov	sp,fp
10002b44:	dfc00117 	ldw	ra,4(sp)
10002b48:	df000017 	ldw	fp,0(sp)
10002b4c:	dec00204 	addi	sp,sp,8
10002b50:	f800283a 	ret

10002b54 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10002b54:	defffe04 	addi	sp,sp,-8
10002b58:	dfc00115 	stw	ra,4(sp)
10002b5c:	df000015 	stw	fp,0(sp)
10002b60:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002b64:	01414004 	movi	r5,1280
10002b68:	01000084 	movi	r4,2
10002b6c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002b70:	01414304 	movi	r5,1292
10002b74:	0009883a 	mov	r4,zero
10002b78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002b7c:	01400204 	movi	r5,8
10002b80:	0009883a 	mov	r4,zero
10002b84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002b88:	0140b404 	movi	r5,720
10002b8c:	0009883a 	mov	r4,zero
10002b90:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002b94:	01400044 	movi	r5,1
10002b98:	0009883a 	mov	r4,zero
10002b9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002ba0:	014004c4 	movi	r5,19
10002ba4:	0009883a 	mov	r4,zero
10002ba8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002bac:	01414504 	movi	r5,1300
10002bb0:	0009883a 	mov	r4,zero
10002bb4:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002bb8:	0141a004 	movi	r5,1664
10002bbc:	0009883a 	mov	r4,zero
10002bc0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002bc4:	01408004 	movi	r5,512
10002bc8:	0009883a 	mov	r4,zero
10002bcc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002bd0:	000b883a 	mov	r5,zero
10002bd4:	0009883a 	mov	r4,zero
10002bd8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10002bdc:	01403fc4 	movi	r5,255
10002be0:	0009883a 	mov	r4,zero
10002be4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10002be8:	01415704 	movi	r5,1372
10002bec:	0009883a 	mov	r4,zero
10002bf0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002bf4:	01400204 	movi	r5,8
10002bf8:	0009883a 	mov	r4,zero
10002bfc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002c00:	0140a404 	movi	r5,656
10002c04:	0009883a 	mov	r4,zero
10002c08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002c0c:	01401044 	movi	r5,65
10002c10:	0009883a 	mov	r4,zero
10002c14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002c18:	014004c4 	movi	r5,19
10002c1c:	0009883a 	mov	r4,zero
10002c20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002c24:	01414804 	movi	r5,1312
10002c28:	0009883a 	mov	r4,zero
10002c2c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10002c30:	01415904 	movi	r5,1380
10002c34:	0009883a 	mov	r4,zero
10002c38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002c3c:	01400204 	movi	r5,8
10002c40:	0009883a 	mov	r4,zero
10002c44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002c48:	0140a404 	movi	r5,656
10002c4c:	0009883a 	mov	r4,zero
10002c50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002c54:	01400044 	movi	r5,1
10002c58:	0009883a 	mov	r4,zero
10002c5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002c60:	014004c4 	movi	r5,19
10002c64:	0009883a 	mov	r4,zero
10002c68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002c6c:	01414b04 	movi	r5,1324
10002c70:	0009883a 	mov	r4,zero
10002c74:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10002c78:	01415b04 	movi	r5,1388
10002c7c:	0009883a 	mov	r4,zero
10002c80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002c84:	01400204 	movi	r5,8
10002c88:	0009883a 	mov	r4,zero
10002c8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002c90:	0140a404 	movi	r5,656
10002c94:	0009883a 	mov	r4,zero
10002c98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002c9c:	01401044 	movi	r5,65
10002ca0:	0009883a 	mov	r4,zero
10002ca4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002ca8:	014004c4 	movi	r5,19
10002cac:	0009883a 	mov	r4,zero
10002cb0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002cb4:	01414e04 	movi	r5,1336
10002cb8:	0009883a 	mov	r4,zero
10002cbc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10002cc0:	01415d04 	movi	r5,1396
10002cc4:	0009883a 	mov	r4,zero
10002cc8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002ccc:	01400204 	movi	r5,8
10002cd0:	0009883a 	mov	r4,zero
10002cd4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002cd8:	0140a404 	movi	r5,656
10002cdc:	0009883a 	mov	r4,zero
10002ce0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002ce4:	01400044 	movi	r5,1
10002ce8:	0009883a 	mov	r4,zero
10002cec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002cf0:	014004c4 	movi	r5,19
10002cf4:	0009883a 	mov	r4,zero
10002cf8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002cfc:	01415104 	movi	r5,1348
10002d00:	0009883a 	mov	r4,zero
10002d04:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10002d08:	01415f04 	movi	r5,1404
10002d0c:	0009883a 	mov	r4,zero
10002d10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10002d14:	01400084 	movi	r5,2
10002d18:	0009883a 	mov	r4,zero
10002d1c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002d20:	0140a404 	movi	r5,656
10002d24:	0009883a 	mov	r4,zero
10002d28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002d2c:	01401044 	movi	r5,65
10002d30:	0009883a 	mov	r4,zero
10002d34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002d38:	014004c4 	movi	r5,19
10002d3c:	0009883a 	mov	r4,zero
10002d40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002d44:	01415404 	movi	r5,1360
10002d48:	0009883a 	mov	r4,zero
10002d4c:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10002d50:	000b883a 	mov	r5,zero
10002d54:	0009883a 	mov	r4,zero
10002d58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002d5c:	000b883a 	mov	r5,zero
10002d60:	0009883a 	mov	r4,zero
10002d64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10002d68:	01408404 	movi	r5,528
10002d6c:	0009883a 	mov	r4,zero
10002d70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002d74:	01401044 	movi	r5,65
10002d78:	0009883a 	mov	r4,zero
10002d7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002d80:	014004c4 	movi	r5,19
10002d84:	0009883a 	mov	r4,zero
10002d88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002d8c:	000b883a 	mov	r5,zero
10002d90:	0009883a 	mov	r4,zero
10002d94:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002d98:	01414004 	movi	r5,1280
10002d9c:	01006c04 	movi	r4,432
10002da0:	00024540 	call	10002454 <UsbWrite>
}
10002da4:	0001883a 	nop
10002da8:	e037883a 	mov	sp,fp
10002dac:	dfc00117 	ldw	ra,4(sp)
10002db0:	df000017 	ldw	fp,0(sp)
10002db4:	dec00204 	addi	sp,sp,8
10002db8:	f800283a 	ret

10002dbc <UsbSetConfig>:

void UsbSetConfig()
{
10002dbc:	defffe04 	addi	sp,sp,-8
10002dc0:	dfc00115 	stw	ra,4(sp)
10002dc4:	df000015 	stw	fp,0(sp)
10002dc8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002dcc:	01414004 	movi	r5,1280
10002dd0:	01000084 	movi	r4,2
10002dd4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002dd8:	01414304 	movi	r5,1292
10002ddc:	0009883a 	mov	r4,zero
10002de0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002de4:	01400204 	movi	r5,8
10002de8:	0009883a 	mov	r4,zero
10002dec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002df0:	0140b404 	movi	r5,720
10002df4:	0009883a 	mov	r4,zero
10002df8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002dfc:	01400044 	movi	r5,1
10002e00:	0009883a 	mov	r4,zero
10002e04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002e08:	014004c4 	movi	r5,19
10002e0c:	0009883a 	mov	r4,zero
10002e10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002e14:	01414504 	movi	r5,1300
10002e18:	0009883a 	mov	r4,zero
10002e1c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10002e20:	01424004 	movi	r5,2304
10002e24:	0009883a 	mov	r4,zero
10002e28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10002e2c:	01400044 	movi	r5,1
10002e30:	0009883a 	mov	r4,zero
10002e34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002e38:	000b883a 	mov	r5,zero
10002e3c:	0009883a 	mov	r4,zero
10002e40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002e44:	000b883a 	mov	r5,zero
10002e48:	0009883a 	mov	r4,zero
10002e4c:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002e50:	000b883a 	mov	r5,zero
10002e54:	0009883a 	mov	r4,zero
10002e58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002e5c:	000b883a 	mov	r5,zero
10002e60:	0009883a 	mov	r4,zero
10002e64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002e68:	0140a404 	movi	r5,656
10002e6c:	0009883a 	mov	r4,zero
10002e70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002e74:	01401044 	movi	r5,65
10002e78:	0009883a 	mov	r4,zero
10002e7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002e80:	014004c4 	movi	r5,19
10002e84:	0009883a 	mov	r4,zero
10002e88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002e8c:	000b883a 	mov	r5,zero
10002e90:	0009883a 	mov	r4,zero
10002e94:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002e98:	01414004 	movi	r5,1280
10002e9c:	01006c04 	movi	r4,432
10002ea0:	00024540 	call	10002454 <UsbWrite>

}
10002ea4:	0001883a 	nop
10002ea8:	e037883a 	mov	sp,fp
10002eac:	dfc00117 	ldw	ra,4(sp)
10002eb0:	df000017 	ldw	fp,0(sp)
10002eb4:	dec00204 	addi	sp,sp,8
10002eb8:	f800283a 	ret

10002ebc <UsbClassRequest>:

void UsbClassRequest()
{
10002ebc:	defffe04 	addi	sp,sp,-8
10002ec0:	dfc00115 	stw	ra,4(sp)
10002ec4:	df000015 	stw	fp,0(sp)
10002ec8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002ecc:	01414004 	movi	r5,1280
10002ed0:	01000084 	movi	r4,2
10002ed4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002ed8:	01414304 	movi	r5,1292
10002edc:	0009883a 	mov	r4,zero
10002ee0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002ee4:	01400204 	movi	r5,8
10002ee8:	0009883a 	mov	r4,zero
10002eec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002ef0:	0140b404 	movi	r5,720
10002ef4:	0009883a 	mov	r4,zero
10002ef8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002efc:	01400044 	movi	r5,1
10002f00:	0009883a 	mov	r4,zero
10002f04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002f08:	014004c4 	movi	r5,19
10002f0c:	0009883a 	mov	r4,zero
10002f10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002f14:	01414504 	movi	r5,1300
10002f18:	0009883a 	mov	r4,zero
10002f1c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10002f20:	01428844 	movi	r5,2593
10002f24:	0009883a 	mov	r4,zero
10002f28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10002f2c:	000b883a 	mov	r5,zero
10002f30:	0009883a 	mov	r4,zero
10002f34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002f38:	000b883a 	mov	r5,zero
10002f3c:	0009883a 	mov	r4,zero
10002f40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002f44:	000b883a 	mov	r5,zero
10002f48:	0009883a 	mov	r4,zero
10002f4c:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10002f50:	000b883a 	mov	r5,zero
10002f54:	0009883a 	mov	r4,zero
10002f58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10002f5c:	000b883a 	mov	r5,zero
10002f60:	0009883a 	mov	r4,zero
10002f64:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002f68:	0140a404 	movi	r5,656
10002f6c:	0009883a 	mov	r4,zero
10002f70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002f74:	01401044 	movi	r5,65
10002f78:	0009883a 	mov	r4,zero
10002f7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002f80:	014004c4 	movi	r5,19
10002f84:	0009883a 	mov	r4,zero
10002f88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002f8c:	000b883a 	mov	r5,zero
10002f90:	0009883a 	mov	r4,zero
10002f94:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002f98:	01414004 	movi	r5,1280
10002f9c:	01006c04 	movi	r4,432
10002fa0:	00024540 	call	10002454 <UsbWrite>
}
10002fa4:	0001883a 	nop
10002fa8:	e037883a 	mov	sp,fp
10002fac:	dfc00117 	ldw	ra,4(sp)
10002fb0:	df000017 	ldw	fp,0(sp)
10002fb4:	dec00204 	addi	sp,sp,8
10002fb8:	f800283a 	ret

10002fbc <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10002fbc:	defffe04 	addi	sp,sp,-8
10002fc0:	dfc00115 	stw	ra,4(sp)
10002fc4:	df000015 	stw	fp,0(sp)
10002fc8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002fcc:	01414004 	movi	r5,1280
10002fd0:	01000084 	movi	r4,2
10002fd4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002fd8:	01414304 	movi	r5,1292
10002fdc:	0009883a 	mov	r4,zero
10002fe0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002fe4:	01400204 	movi	r5,8
10002fe8:	0009883a 	mov	r4,zero
10002fec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002ff0:	0140b404 	movi	r5,720
10002ff4:	0009883a 	mov	r4,zero
10002ff8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002ffc:	01400044 	movi	r5,1
10003000:	0009883a 	mov	r4,zero
10003004:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003008:	014004c4 	movi	r5,19
1000300c:	0009883a 	mov	r4,zero
10003010:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003014:	01414504 	movi	r5,1300
10003018:	0009883a 	mov	r4,zero
1000301c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003020:	0141a044 	movi	r5,1665
10003024:	0009883a 	mov	r4,zero
10003028:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
1000302c:	01484004 	movi	r5,8448
10003030:	0009883a 	mov	r4,zero
10003034:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003038:	000b883a 	mov	r5,zero
1000303c:	0009883a 	mov	r4,zero
10003040:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10003044:	01401ec4 	movi	r5,123
10003048:	0009883a 	mov	r4,zero
1000304c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10003050:	01415104 	movi	r5,1348
10003054:	0009883a 	mov	r4,zero
10003058:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000305c:	01400204 	movi	r5,8
10003060:	0009883a 	mov	r4,zero
10003064:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003068:	0140a404 	movi	r5,656
1000306c:	0009883a 	mov	r4,zero
10003070:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003074:	01401044 	movi	r5,65
10003078:	0009883a 	mov	r4,zero
1000307c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003080:	014004c4 	movi	r5,19
10003084:	0009883a 	mov	r4,zero
10003088:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000308c:	01414804 	movi	r5,1312
10003090:	0009883a 	mov	r4,zero
10003094:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10003098:	000b883a 	mov	r5,zero
1000309c:	0009883a 	mov	r4,zero
100030a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100030a4:	000b883a 	mov	r5,zero
100030a8:	0009883a 	mov	r4,zero
100030ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100030b0:	01408404 	movi	r5,528
100030b4:	0009883a 	mov	r4,zero
100030b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100030bc:	01401044 	movi	r5,65
100030c0:	0009883a 	mov	r4,zero
100030c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100030c8:	014004c4 	movi	r5,19
100030cc:	0009883a 	mov	r4,zero
100030d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100030d4:	000b883a 	mov	r5,zero
100030d8:	0009883a 	mov	r4,zero
100030dc:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100030e0:	01414004 	movi	r5,1280
100030e4:	01006c04 	movi	r4,432
100030e8:	00024540 	call	10002454 <UsbWrite>

}
100030ec:	0001883a 	nop
100030f0:	e037883a 	mov	sp,fp
100030f4:	dfc00117 	ldw	ra,4(sp)
100030f8:	df000017 	ldw	fp,0(sp)
100030fc:	dec00204 	addi	sp,sp,8
10003100:	f800283a 	ret

10003104 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10003104:	defffe04 	addi	sp,sp,-8
10003108:	dfc00115 	stw	ra,4(sp)
1000310c:	df000015 	stw	fp,0(sp)
10003110:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003114:	01414004 	movi	r5,1280
10003118:	01000084 	movi	r4,2
1000311c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003120:	01414304 	movi	r5,1292
10003124:	0009883a 	mov	r4,zero
10003128:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000312c:	01400204 	movi	r5,8
10003130:	0009883a 	mov	r4,zero
10003134:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003138:	0140b404 	movi	r5,720
1000313c:	0009883a 	mov	r4,zero
10003140:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003144:	01400044 	movi	r5,1
10003148:	0009883a 	mov	r4,zero
1000314c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003150:	014004c4 	movi	r5,19
10003154:	0009883a 	mov	r4,zero
10003158:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000315c:	01414504 	movi	r5,1300
10003160:	0009883a 	mov	r4,zero
10003164:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003168:	0141a044 	movi	r5,1665
1000316c:	0009883a 	mov	r4,zero
10003170:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10003174:	01488004 	movi	r5,8704
10003178:	0009883a 	mov	r4,zero
1000317c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003180:	000b883a 	mov	r5,zero
10003184:	0009883a 	mov	r4,zero
10003188:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
1000318c:	01401ec4 	movi	r5,123
10003190:	0009883a 	mov	r4,zero
10003194:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10003198:	01416004 	movi	r5,1408
1000319c:	0009883a 	mov	r4,zero
100031a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100031a4:	01400204 	movi	r5,8
100031a8:	0009883a 	mov	r4,zero
100031ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100031b0:	0140a404 	movi	r5,656
100031b4:	0009883a 	mov	r4,zero
100031b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100031bc:	01401044 	movi	r5,65
100031c0:	0009883a 	mov	r4,zero
100031c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100031c8:	014004c4 	movi	r5,19
100031cc:	0009883a 	mov	r4,zero
100031d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100031d4:	01414804 	movi	r5,1312
100031d8:	0009883a 	mov	r4,zero
100031dc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
100031e0:	01416204 	movi	r5,1416
100031e4:	0009883a 	mov	r4,zero
100031e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100031ec:	01400204 	movi	r5,8
100031f0:	0009883a 	mov	r4,zero
100031f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100031f8:	0140a404 	movi	r5,656
100031fc:	0009883a 	mov	r4,zero
10003200:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003204:	01400044 	movi	r5,1
10003208:	0009883a 	mov	r4,zero
1000320c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003210:	014004c4 	movi	r5,19
10003214:	0009883a 	mov	r4,zero
10003218:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000321c:	01414b04 	movi	r5,1324
10003220:	0009883a 	mov	r4,zero
10003224:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10003228:	01416404 	movi	r5,1424
1000322c:	0009883a 	mov	r4,zero
10003230:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003234:	01400204 	movi	r5,8
10003238:	0009883a 	mov	r4,zero
1000323c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003240:	0140a404 	movi	r5,656
10003244:	0009883a 	mov	r4,zero
10003248:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000324c:	01401044 	movi	r5,65
10003250:	0009883a 	mov	r4,zero
10003254:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003258:	014004c4 	movi	r5,19
1000325c:	0009883a 	mov	r4,zero
10003260:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10003264:	01414e04 	movi	r5,1336
10003268:	0009883a 	mov	r4,zero
1000326c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10003270:	01416604 	movi	r5,1432
10003274:	0009883a 	mov	r4,zero
10003278:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
1000327c:	01400204 	movi	r5,8
10003280:	0009883a 	mov	r4,zero
10003284:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003288:	0140a404 	movi	r5,656
1000328c:	0009883a 	mov	r4,zero
10003290:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003294:	01400044 	movi	r5,1
10003298:	0009883a 	mov	r4,zero
1000329c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100032a0:	014004c4 	movi	r5,19
100032a4:	0009883a 	mov	r4,zero
100032a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100032ac:	01415104 	movi	r5,1348
100032b0:	0009883a 	mov	r4,zero
100032b4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
100032b8:	01416804 	movi	r5,1440
100032bc:	0009883a 	mov	r4,zero
100032c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100032c4:	01400204 	movi	r5,8
100032c8:	0009883a 	mov	r4,zero
100032cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100032d0:	0140a404 	movi	r5,656
100032d4:	0009883a 	mov	r4,zero
100032d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100032dc:	01401044 	movi	r5,65
100032e0:	0009883a 	mov	r4,zero
100032e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100032e8:	014004c4 	movi	r5,19
100032ec:	0009883a 	mov	r4,zero
100032f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100032f4:	01415404 	movi	r5,1360
100032f8:	0009883a 	mov	r4,zero
100032fc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10003300:	01416a04 	movi	r5,1448
10003304:	0009883a 	mov	r4,zero
10003308:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000330c:	01400204 	movi	r5,8
10003310:	0009883a 	mov	r4,zero
10003314:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003318:	0140a404 	movi	r5,656
1000331c:	0009883a 	mov	r4,zero
10003320:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003324:	01400044 	movi	r5,1
10003328:	0009883a 	mov	r4,zero
1000332c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003330:	014004c4 	movi	r5,19
10003334:	0009883a 	mov	r4,zero
10003338:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
1000333c:	01415704 	movi	r5,1372
10003340:	0009883a 	mov	r4,zero
10003344:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10003348:	01416c04 	movi	r5,1456
1000334c:	0009883a 	mov	r4,zero
10003350:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003354:	01400204 	movi	r5,8
10003358:	0009883a 	mov	r4,zero
1000335c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10003360:	0140a404 	movi	r5,656
10003364:	0009883a 	mov	r4,zero
10003368:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
1000336c:	01401044 	movi	r5,65
10003370:	0009883a 	mov	r4,zero
10003374:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003378:	014004c4 	movi	r5,19
1000337c:	0009883a 	mov	r4,zero
10003380:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10003384:	01415a04 	movi	r5,1384
10003388:	0009883a 	mov	r4,zero
1000338c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10003390:	01416e04 	movi	r5,1464
10003394:	0009883a 	mov	r4,zero
10003398:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
1000339c:	014000c4 	movi	r5,3
100033a0:	0009883a 	mov	r4,zero
100033a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100033a8:	0140a404 	movi	r5,656
100033ac:	0009883a 	mov	r4,zero
100033b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100033b4:	01400044 	movi	r5,1
100033b8:	0009883a 	mov	r4,zero
100033bc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
100033c0:	014004c4 	movi	r5,19
100033c4:	0009883a 	mov	r4,zero
100033c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
100033cc:	01415d04 	movi	r5,1396
100033d0:	0009883a 	mov	r4,zero
100033d4:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
100033d8:	000b883a 	mov	r5,zero
100033dc:	0009883a 	mov	r4,zero
100033e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100033e4:	000b883a 	mov	r5,zero
100033e8:	0009883a 	mov	r4,zero
100033ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100033f0:	01408404 	movi	r5,528
100033f4:	0009883a 	mov	r4,zero
100033f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100033fc:	01401044 	movi	r5,65
10003400:	0009883a 	mov	r4,zero
10003404:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003408:	014004c4 	movi	r5,19
1000340c:	0009883a 	mov	r4,zero
10003410:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003414:	000b883a 	mov	r5,zero
10003418:	0009883a 	mov	r4,zero
1000341c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003420:	01414004 	movi	r5,1280
10003424:	01006c04 	movi	r4,432
10003428:	00024540 	call	10002454 <UsbWrite>

}
1000342c:	0001883a 	nop
10003430:	e037883a 	mov	sp,fp
10003434:	dfc00117 	ldw	ra,4(sp)
10003438:	df000017 	ldw	fp,0(sp)
1000343c:	dec00204 	addi	sp,sp,8
10003440:	f800283a 	ret

10003444 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10003444:	defffd04 	addi	sp,sp,-12
10003448:	dfc00215 	stw	ra,8(sp)
1000344c:	df000115 	stw	fp,4(sp)
10003450:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10003454:	01005104 	movi	r4,324
10003458:	00024ac0 	call	100024ac <UsbRead>
1000345c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003460:	000b883a 	mov	r5,zero
10003464:	01005104 	movi	r4,324
10003468:	00024540 	call	10002454 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
1000346c:	00000d06 	br	100034a4 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10003470:	e0bfff0b 	ldhu	r2,-4(fp)
10003474:	10000526 	beq	r2,zero,1000348c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10003478:	e0bfff0b 	ldhu	r2,-4(fp)
1000347c:	100b883a 	mov	r5,r2
10003480:	01040074 	movhi	r4,4097
10003484:	210f8304 	addi	r4,r4,15884
10003488:	00052d40 	call	100052d4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
1000348c:	01005104 	movi	r4,324
10003490:	00024ac0 	call	100024ac <UsbRead>
10003494:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003498:	000b883a 	mov	r5,zero
1000349c:	01005104 	movi	r4,324
100034a0:	00024540 	call	10002454 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100034a4:	e0bfff0b 	ldhu	r2,-4(fp)
100034a8:	10840018 	cmpnei	r2,r2,4096
100034ac:	103ff01e 	bne	r2,zero,10003470 <__alt_data_end+0xf8003470>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
100034b0:	e0bfff0b 	ldhu	r2,-4(fp)
}
100034b4:	e037883a 	mov	sp,fp
100034b8:	dfc00117 	ldw	ra,4(sp)
100034bc:	df000017 	ldw	fp,0(sp)
100034c0:	dec00204 	addi	sp,sp,8
100034c4:	f800283a 	ret

100034c8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
100034c8:	defffd04 	addi	sp,sp,-12
100034cc:	dfc00215 	stw	ra,8(sp)
100034d0:	df000115 	stw	fp,4(sp)
100034d4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100034d8:	010000c4 	movi	r4,3
100034dc:	00003640 	call	10000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100034e0:	01005104 	movi	r4,324
100034e4:	00024ac0 	call	100024ac <UsbRead>
100034e8:	10bfffcc 	andi	r2,r2,65535
100034ec:	10840018 	cmpnei	r2,r2,4096
100034f0:	1000091e 	bne	r2,zero,10003518 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100034f4:	000b883a 	mov	r5,zero
100034f8:	01005104 	movi	r4,324
100034fc:	00024540 	call	10002454 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003500:	0001883a 	nop
10003504:	010000c4 	movi	r4,3
10003508:	00003640 	call	10000364 <IO_read>
1000350c:	10bfffcc 	andi	r2,r2,65535
10003510:	1080040c 	andi	r2,r2,16
10003514:	103ffb26 	beq	r2,zero,10003504 <__alt_data_end+0xf8003504>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10003518:	01414204 	movi	r5,1288
1000351c:	01000084 	movi	r4,2
10003520:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003524:	0009883a 	mov	r4,zero
10003528:	00003640 	call	10000364 <IO_read>
1000352c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10003530:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003534:	e037883a 	mov	sp,fp
10003538:	dfc00117 	ldw	ra,4(sp)
1000353c:	df000017 	ldw	fp,0(sp)
10003540:	dec00204 	addi	sp,sp,8
10003544:	f800283a 	ret

10003548 <UsbPrintMem>:


void UsbPrintMem()
{
10003548:	defffc04 	addi	sp,sp,-16
1000354c:	dfc00315 	stw	ra,12(sp)
10003550:	df000215 	stw	fp,8(sp)
10003554:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10003558:	01414004 	movi	r5,1280
1000355c:	01000084 	movi	r4,2
10003560:	00002f40 	call	100002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
10003564:	e03ffe15 	stw	zero,-8(fp)
10003568:	00000e06 	br	100035a4 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
1000356c:	0009883a 	mov	r4,zero
10003570:	00003640 	call	10000364 <IO_read>
10003574:	10bfffcc 	andi	r2,r2,65535
10003578:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
1000357c:	e0bffe17 	ldw	r2,-8(fp)
10003580:	10814004 	addi	r2,r2,1280
10003584:	e1bfff17 	ldw	r6,-4(fp)
10003588:	100b883a 	mov	r5,r2
1000358c:	01040074 	movhi	r4,4097
10003590:	210f8b04 	addi	r4,r4,15916
10003594:	00052d40 	call	100052d4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10003598:	e0bffe17 	ldw	r2,-8(fp)
1000359c:	10800084 	addi	r2,r2,2
100035a0:	e0bffe15 	stw	r2,-8(fp)
100035a4:	e0bffe17 	ldw	r2,-8(fp)
100035a8:	10803250 	cmplti	r2,r2,201
100035ac:	103fef1e 	bne	r2,zero,1000356c <__alt_data_end+0xf800356c>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100035b0:	0001883a 	nop
100035b4:	e037883a 	mov	sp,fp
100035b8:	dfc00117 	ldw	ra,4(sp)
100035bc:	df000017 	ldw	fp,0(sp)
100035c0:	dec00204 	addi	sp,sp,8
100035c4:	f800283a 	ret

100035c8 <usb_init>:
alt_u8 toggle = 0;
alt_u8 data_size;
alt_u8 hot_plug_count;
alt_u16 code;
int usb_init(void)
{
100035c8:	defffe04 	addi	sp,sp,-8
100035cc:	dfc00115 	stw	ra,4(sp)
100035d0:	df000015 	stw	fp,0(sp)
100035d4:	d839883a 	mov	fp,sp
	IO_init();
100035d8:	000026c0 	call	1000026c <IO_init>
		usleep(10*10000);
	}*/



	printf("USB keyboard setup...\n\n");
100035dc:	01040074 	movhi	r4,4097
100035e0:	210f9004 	addi	r4,r4,15936
100035e4:	00053d00 	call	100053d0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100035e8:	00024f00 	call	100024f0 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100035ec:	000b883a 	mov	r5,zero
100035f0:	01005104 	movi	r4,324
100035f4:	00024540 	call	10002454 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100035f8:	017fffd4 	movui	r5,65535
100035fc:	01302414 	movui	r4,49296
10003600:	00024540 	call	10002454 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10003604:	01409604 	movi	r5,600
10003608:	01006d04 	movi	r4,436
1000360c:	00024540 	call	10002454 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10003610:	00811004 	movi	r2,1088
10003614:	d0a6d78d 	sth	r2,-25762(gp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10003618:	d0a6d78b 	ldhu	r2,-25762(gp)
1000361c:	10bfffcc 	andi	r2,r2,65535
10003620:	100b883a 	mov	r5,r2
10003624:	01005084 	movi	r4,322
10003628:	00024540 	call	10002454 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
1000362c:	00808404 	movi	r2,528
10003630:	d0a6d88d 	sth	r2,-25758(gp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10003634:	d0a6d88b 	ldhu	r2,-25758(gp)
10003638:	10bfffcc 	andi	r2,r2,65535
1000363c:	100b883a 	mov	r5,r2
10003640:	01302314 	movui	r4,49292
10003644:	00024540 	call	10002454 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10003648:	000b883a 	mov	r5,zero
1000364c:	01007104 	movi	r4,452
10003650:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10003654:	000b883a 	mov	r5,zero
10003658:	01007184 	movi	r4,454
1000365c:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10003660:	000b883a 	mov	r5,zero
10003664:	01007204 	movi	r4,456
10003668:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000366c:	000b883a 	mov	r5,zero
10003670:	01007284 	movi	r4,458
10003674:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10003678:	000b883a 	mov	r5,zero
1000367c:	01007304 	movi	r4,460
10003680:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10003684:	000b883a 	mov	r5,zero
10003688:	01007384 	movi	r4,462
1000368c:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10003690:	000b883a 	mov	r5,zero
10003694:	01007404 	movi	r4,464
10003698:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000369c:	000b883a 	mov	r5,zero
100036a0:	01007484 	movi	r4,466
100036a4:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100036a8:	000b883a 	mov	r5,zero
100036ac:	01007504 	movi	r4,468
100036b0:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100036b4:	000b883a 	mov	r5,zero
100036b8:	01007584 	movi	r4,470
100036bc:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100036c0:	000b883a 	mov	r5,zero
100036c4:	01007604 	movi	r4,472
100036c8:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100036cc:	000b883a 	mov	r5,zero
100036d0:	01007684 	movi	r4,474
100036d4:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100036d8:	000b883a 	mov	r5,zero
100036dc:	01007704 	movi	r4,476
100036e0:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100036e4:	000b883a 	mov	r5,zero
100036e8:	01007784 	movi	r4,478
100036ec:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100036f0:	01401c84 	movi	r5,114
100036f4:	01007084 	movi	r4,450
100036f8:	00024540 	call	10002454 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100036fc:	01738054 	movui	r5,52737
10003700:	01000044 	movi	r4,1
10003704:	00002f40 	call	100002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10003708:	0001883a 	nop
1000370c:	010000c4 	movi	r4,3
10003710:	00003640 	call	10000364 <IO_read>
10003714:	10bfffcc 	andi	r2,r2,65535
10003718:	103ffc26 	beq	r2,zero,1000370c <__alt_data_end+0xf800370c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000371c:	00000806 	br	10003740 <usb_init+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10003720:	01000044 	movi	r4,1
10003724:	00003640 	call	10000364 <IO_read>
10003728:	10bfffcc 	andi	r2,r2,65535
1000372c:	100b883a 	mov	r5,r2
10003730:	01040074 	movhi	r4,4097
10003734:	210f9604 	addi	r4,r4,15960
10003738:	00052d40 	call	100052d4 <printf>
		goto USB_HOT_PLUG;
1000373c:	003faa06 	br	100035e8 <__alt_data_end+0xf80035e8>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10003740:	01000044 	movi	r4,1
10003744:	00003640 	call	10000364 <IO_read>
10003748:	10bfffcc 	andi	r2,r2,65535
1000374c:	1083fb58 	cmpnei	r2,r2,4077
10003750:	103ff31e 	bne	r2,zero,10003720 <__alt_data_end+0xf8003720>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10003754:	01040074 	movhi	r4,4097
10003758:	210f9f04 	addi	r4,r4,15996
1000375c:	00052d40 	call	100052d4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10003760:	01401d04 	movi	r5,116
10003764:	01007084 	movi	r4,450
10003768:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
1000376c:	01400f04 	movi	r5,60
10003770:	01007104 	movi	r4,452
10003774:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10003778:	000b883a 	mov	r5,zero
1000377c:	01007184 	movi	r4,454
10003780:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10003784:	000b883a 	mov	r5,zero
10003788:	01007204 	movi	r4,456
1000378c:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10003790:	000b883a 	mov	r5,zero
10003794:	01007284 	movi	r4,458
10003798:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000379c:	000b883a 	mov	r5,zero
100037a0:	01007304 	movi	r4,460
100037a4:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100037a8:	000b883a 	mov	r5,zero
100037ac:	01007384 	movi	r4,462
100037b0:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100037b4:	000b883a 	mov	r5,zero
100037b8:	01007404 	movi	r4,464
100037bc:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100037c0:	000b883a 	mov	r5,zero
100037c4:	01007484 	movi	r4,466
100037c8:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100037cc:	000b883a 	mov	r5,zero
100037d0:	01007504 	movi	r4,468
100037d4:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100037d8:	000b883a 	mov	r5,zero
100037dc:	01007584 	movi	r4,470
100037e0:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100037e4:	000b883a 	mov	r5,zero
100037e8:	01007604 	movi	r4,472
100037ec:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100037f0:	000b883a 	mov	r5,zero
100037f4:	01007684 	movi	r4,474
100037f8:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100037fc:	000b883a 	mov	r5,zero
10003800:	01007704 	movi	r4,476
10003804:	00024540 	call	10002454 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10003808:	000b883a 	mov	r5,zero
1000380c:	01007784 	movi	r4,478
10003810:	00024540 	call	10002454 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10003814:	01738054 	movui	r5,52737
10003818:	01000044 	movi	r4,1
1000381c:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10003820:	0001883a 	nop
10003824:	01000044 	movi	r4,1
10003828:	00003640 	call	10000364 <IO_read>
1000382c:	10bfffcc 	andi	r2,r2,65535
10003830:	1083fb58 	cmpnei	r2,r2,4077
10003834:	10000826 	beq	r2,zero,10003858 <usb_init+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10003838:	01000044 	movi	r4,1
1000383c:	00003640 	call	10000364 <IO_read>
10003840:	10bfffcc 	andi	r2,r2,65535
10003844:	100b883a 	mov	r5,r2
10003848:	01040074 	movhi	r4,4097
1000384c:	210f9604 	addi	r4,r4,15960
10003850:	00052d40 	call	100052d4 <printf>
		goto USB_HOT_PLUG;
10003854:	003f6406 	br	100035e8 <__alt_data_end+0xf80035e8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10003858:	00b02284 	movi	r2,-16246
1000385c:	d0a6d40d 	sth	r2,-25776(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10003860:	008c0004 	movi	r2,12288
10003864:	d0a6d48d 	sth	r2,-25774(gp)
	fs_device = A_DP_STAT;
10003868:	00880004 	movi	r2,8192
1000386c:	d0a6d50d 	sth	r2,-25772(gp)
	usb_ctl_val = UsbRead(ctl_reg);
10003870:	d0a6d40b 	ldhu	r2,-25776(gp)
10003874:	10bfffcc 	andi	r2,r2,65535
10003878:	1009883a 	mov	r4,r2
1000387c:	00024ac0 	call	100024ac <UsbRead>
10003880:	d0a6d78d 	sth	r2,-25762(gp)

	if (!(usb_ctl_val & no_device))
10003884:	d0e6d78b 	ldhu	r3,-25762(gp)
10003888:	d0a6d48b 	ldhu	r2,-25774(gp)
1000388c:	1884703a 	and	r2,r3,r2
10003890:	10bfffcc 	andi	r2,r2,65535
10003894:	1000361e 	bne	r2,zero,10003970 <usb_init+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10003898:	d026d905 	stb	zero,-25756(gp)
1000389c:	00000f06 	br	100038dc <usb_init+0x314>
		{
			usleep(5*1000);
100038a0:	0104e204 	movi	r4,5000
100038a4:	0011df80 	call	10011df8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100038a8:	d0a6d40b 	ldhu	r2,-25776(gp)
100038ac:	10bfffcc 	andi	r2,r2,65535
100038b0:	1009883a 	mov	r4,r2
100038b4:	00024ac0 	call	100024ac <UsbRead>
100038b8:	d0a6d78d 	sth	r2,-25762(gp)
			if(usb_ctl_val & no_device) break;
100038bc:	d0e6d78b 	ldhu	r3,-25762(gp)
100038c0:	d0a6d48b 	ldhu	r2,-25774(gp)
100038c4:	1884703a 	and	r2,r3,r2
100038c8:	10bfffcc 	andi	r2,r2,65535
100038cc:	1000081e 	bne	r2,zero,100038f0 <usb_init+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100038d0:	d0a6d903 	ldbu	r2,-25756(gp)
100038d4:	10800044 	addi	r2,r2,1
100038d8:	d0a6d905 	stb	r2,-25756(gp)
100038dc:	d0a6d903 	ldbu	r2,-25756(gp)
100038e0:	10803fcc 	andi	r2,r2,255
100038e4:	10800170 	cmpltui	r2,r2,5
100038e8:	103fed1e 	bne	r2,zero,100038a0 <__alt_data_end+0xf80038a0>
100038ec:	00000106 	br	100038f4 <usb_init+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100038f0:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100038f4:	d0e6d78b 	ldhu	r3,-25762(gp)
100038f8:	d0a6d48b 	ldhu	r2,-25774(gp)
100038fc:	1884703a 	and	r2,r3,r2
10003900:	10bfffcc 	andi	r2,r2,65535
10003904:	1000261e 	bne	r2,zero,100039a0 <usb_init+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10003908:	01040074 	movhi	r4,4097
1000390c:	210fa304 	addi	r4,r4,16012
10003910:	00053d00 	call	100053d0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10003914:	01040074 	movhi	r4,4097
10003918:	210fad04 	addi	r4,r4,16052
1000391c:	00053d00 	call	100053d0 <puts>
			while (!(usb_ctl_val & no_device))
10003920:	00000d06 	br	10003958 <usb_init+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10003924:	d0a6d40b 	ldhu	r2,-25776(gp)
10003928:	10bfffcc 	andi	r2,r2,65535
1000392c:	1009883a 	mov	r4,r2
10003930:	00024ac0 	call	100024ac <UsbRead>
10003934:	d0a6d78d 	sth	r2,-25762(gp)
				if(usb_ctl_val & no_device)
10003938:	d0e6d78b 	ldhu	r3,-25762(gp)
1000393c:	d0a6d48b 	ldhu	r2,-25774(gp)
10003940:	1884703a 	and	r2,r3,r2
10003944:	10bfffcc 	andi	r2,r2,65535
10003948:	10000126 	beq	r2,zero,10003950 <usb_init+0x388>
					goto USB_HOT_PLUG;
1000394c:	003f2606 	br	100035e8 <__alt_data_end+0xf80035e8>

				usleep(2000);
10003950:	0101f404 	movi	r4,2000
10003954:	0011df80 	call	10011df8 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10003958:	d0e6d78b 	ldhu	r3,-25762(gp)
1000395c:	d0a6d48b 	ldhu	r2,-25774(gp)
10003960:	1884703a 	and	r2,r3,r2
10003964:	10bfffcc 	andi	r2,r2,65535
10003968:	103fee26 	beq	r2,zero,10003924 <__alt_data_end+0xf8003924>
1000396c:	00000c06 	br	100039a0 <usb_init+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10003970:	d0e6d78b 	ldhu	r3,-25762(gp)
10003974:	d0a6d50b 	ldhu	r2,-25772(gp)
10003978:	1884703a 	and	r2,r3,r2
1000397c:	10bfffcc 	andi	r2,r2,65535
10003980:	10000426 	beq	r2,zero,10003994 <usb_init+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10003984:	01040074 	movhi	r4,4097
10003988:	210fb904 	addi	r4,r4,16100
1000398c:	00053d00 	call	100053d0 <puts>
10003990:	00000306 	br	100039a0 <usb_init+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10003994:	01040074 	movhi	r4,4097
10003998:	210fc004 	addi	r4,r4,16128
1000399c:	00053d00 	call	100053d0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100039a0:	00025a40 	call	100025a4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100039a4:	00000306 	br	100039b4 <usb_init+0x3ec>
	{
		UsbSetAddress();
100039a8:	00025a40 	call	100025a4 <UsbSetAddress>
		usleep(10*1000);
100039ac:	0109c404 	movi	r4,10000
100039b0:	0011df80 	call	10011df8 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100039b4:	010000c4 	movi	r4,3
100039b8:	00003640 	call	10000364 <IO_read>
100039bc:	10bfffcc 	andi	r2,r2,65535
100039c0:	1080040c 	andi	r2,r2,16
100039c4:	103ff826 	beq	r2,zero,100039a8 <__alt_data_end+0xf80039a8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100039c8:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100039cc:	01414184 	movi	r5,1286
100039d0:	01000084 	movi	r4,2
100039d4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100039d8:	0009883a 	mov	r4,zero
100039dc:	00003640 	call	10000364 <IO_read>
100039e0:	10bfffcc 	andi	r2,r2,65535
100039e4:	100b883a 	mov	r5,r2
100039e8:	01040074 	movhi	r4,4097
100039ec:	210fc704 	addi	r4,r4,16156
100039f0:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
100039f4:	01414204 	movi	r5,1288
100039f8:	01000084 	movi	r4,2
100039fc:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003a00:	0009883a 	mov	r4,zero
10003a04:	00003640 	call	10000364 <IO_read>
10003a08:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10003a0c:	d0a6d78b 	ldhu	r2,-25762(gp)
10003a10:	10bfffcc 	andi	r2,r2,65535
10003a14:	100b883a 	mov	r5,r2
10003a18:	01040074 	movhi	r4,4097
10003a1c:	210fd204 	addi	r4,r4,16200
10003a20:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10003a24:	0001883a 	nop
10003a28:	d0a6d78b 	ldhu	r2,-25762(gp)
10003a2c:	10bfffcc 	andi	r2,r2,65535
10003a30:	108000d8 	cmpnei	r2,r2,3
10003a34:	10000326 	beq	r2,zero,10003a44 <usb_init+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003a38:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10003a3c:	d0a6d78d 	sth	r2,-25762(gp)

		goto USB_HOT_PLUG;
10003a40:	003ee906 	br	100035e8 <__alt_data_end+0xf80035e8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10003a44:	01040074 	movhi	r4,4097
10003a48:	210fde04 	addi	r4,r4,16248
10003a4c:	00053d00 	call	100053d0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10003a50:	00026a40 	call	100026a4 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003a54:	00000306 	br	10003a64 <usb_init+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10003a58:	00026a40 	call	100026a4 <UsbGetDeviceDesc1>
		usleep(10*1000);
10003a5c:	0109c404 	movi	r4,10000
10003a60:	0011df80 	call	10011df8 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003a64:	010000c4 	movi	r4,3
10003a68:	00003640 	call	10000364 <IO_read>
10003a6c:	10bfffcc 	andi	r2,r2,65535
10003a70:	1080040c 	andi	r2,r2,16
10003a74:	103ff826 	beq	r2,zero,10003a58 <__alt_data_end+0xf8003a58>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003a78:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003a7c:	01414184 	movi	r5,1286
10003a80:	01000084 	movi	r4,2
10003a84:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003a88:	0009883a 	mov	r4,zero
10003a8c:	00003640 	call	10000364 <IO_read>
10003a90:	10bfffcc 	andi	r2,r2,65535
10003a94:	100b883a 	mov	r5,r2
10003a98:	01040074 	movhi	r4,4097
10003a9c:	210fed04 	addi	r4,r4,16308
10003aa0:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508);
10003aa4:	01414204 	movi	r5,1288
10003aa8:	01000084 	movi	r4,2
10003aac:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003ab0:	0009883a 	mov	r4,zero
10003ab4:	00003640 	call	10000364 <IO_read>
10003ab8:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10003abc:	d0a6d78b 	ldhu	r2,-25762(gp)
10003ac0:	10bfffcc 	andi	r2,r2,65535
10003ac4:	100b883a 	mov	r5,r2
10003ac8:	01040074 	movhi	r4,4097
10003acc:	210ff804 	addi	r4,r4,16352
10003ad0:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03)
10003ad4:	00000206 	br	10003ae0 <usb_init+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003ad8:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10003adc:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003ae0:	d0a6d78b 	ldhu	r2,-25762(gp)
10003ae4:	10bfffcc 	andi	r2,r2,65535
10003ae8:	108000d8 	cmpnei	r2,r2,3
10003aec:	103ffa1e 	bne	r2,zero,10003ad8 <__alt_data_end+0xf8003ad8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10003af0:	01040074 	movhi	r4,4097
10003af4:	21100404 	addi	r4,r4,16400
10003af8:	00053d00 	call	100053d0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10003afc:	00027ec0 	call	100027ec <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003b00:	00000306 	br	10003b10 <usb_init+0x548>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10003b04:	00027ec0 	call	100027ec <UsbGetDeviceDesc2>
		usleep(10*1000);
10003b08:	0109c404 	movi	r4,10000
10003b0c:	0011df80 	call	10011df8 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003b10:	010000c4 	movi	r4,3
10003b14:	00003640 	call	10000364 <IO_read>
10003b18:	10bfffcc 	andi	r2,r2,65535
10003b1c:	1080040c 	andi	r2,r2,16
10003b20:	103ff826 	beq	r2,zero,10003b04 <__alt_data_end+0xf8003b04>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003b24:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003b28:	01414184 	movi	r5,1286
10003b2c:	01000084 	movi	r4,2
10003b30:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003b34:	0009883a 	mov	r4,zero
10003b38:	00003640 	call	10000364 <IO_read>
10003b3c:	10bfffcc 	andi	r2,r2,65535
10003b40:	100b883a 	mov	r5,r2
10003b44:	01040074 	movhi	r4,4097
10003b48:	210fed04 	addi	r4,r4,16308
10003b4c:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508);
10003b50:	01414204 	movi	r5,1288
10003b54:	01000084 	movi	r4,2
10003b58:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003b5c:	0009883a 	mov	r4,zero
10003b60:	00003640 	call	10000364 <IO_read>
10003b64:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10003b68:	d0a6d78b 	ldhu	r2,-25762(gp)
10003b6c:	10bfffcc 	andi	r2,r2,65535
10003b70:	100b883a 	mov	r5,r2
10003b74:	01040074 	movhi	r4,4097
10003b78:	210ff804 	addi	r4,r4,16352
10003b7c:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03)
10003b80:	00000206 	br	10003b8c <usb_init+0x5c4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003b84:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10003b88:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003b8c:	d0a6d78b 	ldhu	r2,-25762(gp)
10003b90:	10bfffcc 	andi	r2,r2,65535
10003b94:	108000d8 	cmpnei	r2,r2,3
10003b98:	103ffa1e 	bne	r2,zero,10003b84 <__alt_data_end+0xf8003b84>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10003b9c:	01040074 	movhi	r4,4097
10003ba0:	21101804 	addi	r4,r4,16480
10003ba4:	00053d00 	call	100053d0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10003ba8:	00029c40 	call	100029c4 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003bac:	00000306 	br	10003bbc <usb_init+0x5f4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10003bb0:	00029c40 	call	100029c4 <UsbGetConfigDesc1>
		usleep(10*1000);
10003bb4:	0109c404 	movi	r4,10000
10003bb8:	0011df80 	call	10011df8 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003bbc:	010000c4 	movi	r4,3
10003bc0:	00003640 	call	10000364 <IO_read>
10003bc4:	10bfffcc 	andi	r2,r2,65535
10003bc8:	1080040c 	andi	r2,r2,16
10003bcc:	103ff826 	beq	r2,zero,10003bb0 <__alt_data_end+0xf8003bb0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003bd0:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003bd4:	01414184 	movi	r5,1286
10003bd8:	01000084 	movi	r4,2
10003bdc:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003be0:	0009883a 	mov	r4,zero
10003be4:	00003640 	call	10000364 <IO_read>
10003be8:	10bfffcc 	andi	r2,r2,65535
10003bec:	100b883a 	mov	r5,r2
10003bf0:	01040074 	movhi	r4,4097
10003bf4:	21102a04 	addi	r4,r4,16552
10003bf8:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508);
10003bfc:	01414204 	movi	r5,1288
10003c00:	01000084 	movi	r4,2
10003c04:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003c08:	0009883a 	mov	r4,zero
10003c0c:	00003640 	call	10000364 <IO_read>
10003c10:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10003c14:	d0a6d78b 	ldhu	r2,-25762(gp)
10003c18:	10bfffcc 	andi	r2,r2,65535
10003c1c:	100b883a 	mov	r5,r2
10003c20:	01040074 	movhi	r4,4097
10003c24:	21103504 	addi	r4,r4,16596
10003c28:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03)
10003c2c:	00000206 	br	10003c38 <usb_init+0x670>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003c30:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10003c34:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003c38:	d0a6d78b 	ldhu	r2,-25762(gp)
10003c3c:	10bfffcc 	andi	r2,r2,65535
10003c40:	108000d8 	cmpnei	r2,r2,3
10003c44:	103ffa1e 	bne	r2,zero,10003c30 <__alt_data_end+0xf8003c30>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10003c48:	01040074 	movhi	r4,4097
10003c4c:	21104104 	addi	r4,r4,16644
10003c50:	00053d00 	call	100053d0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10003c54:	0002b540 	call	10002b54 <UsbGetConfigDesc2>

	usleep(100*1000);
10003c58:	010000b4 	movhi	r4,2
10003c5c:	2121a804 	addi	r4,r4,-31072
10003c60:	0011df80 	call	10011df8 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003c64:	00000306 	br	10003c74 <usb_init+0x6ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10003c68:	0002b540 	call	10002b54 <UsbGetConfigDesc2>
		usleep(10*1000);
10003c6c:	0109c404 	movi	r4,10000
10003c70:	0011df80 	call	10011df8 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003c74:	010000c4 	movi	r4,3
10003c78:	00003640 	call	10000364 <IO_read>
10003c7c:	10bfffcc 	andi	r2,r2,65535
10003c80:	1080040c 	andi	r2,r2,16
10003c84:	103ff826 	beq	r2,zero,10003c68 <__alt_data_end+0xf8003c68>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003c88:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003c8c:	01414184 	movi	r5,1286
10003c90:	01000084 	movi	r4,2
10003c94:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003c98:	0009883a 	mov	r4,zero
10003c9c:	00003640 	call	10000364 <IO_read>
10003ca0:	10bfffcc 	andi	r2,r2,65535
10003ca4:	100b883a 	mov	r5,r2
10003ca8:	01040074 	movhi	r4,4097
10003cac:	21105404 	addi	r4,r4,16720
10003cb0:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508);
10003cb4:	01414204 	movi	r5,1288
10003cb8:	01000084 	movi	r4,2
10003cbc:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003cc0:	0009883a 	mov	r4,zero
10003cc4:	00003640 	call	10000364 <IO_read>
10003cc8:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10003ccc:	d0a6d78b 	ldhu	r2,-25762(gp)
10003cd0:	10bfffcc 	andi	r2,r2,65535
10003cd4:	100b883a 	mov	r5,r2
10003cd8:	01040074 	movhi	r4,4097
10003cdc:	21105f04 	addi	r4,r4,16764
10003ce0:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03)
10003ce4:	00000206 	br	10003cf0 <usb_init+0x728>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003ce8:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10003cec:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003cf0:	d0a6d78b 	ldhu	r2,-25762(gp)
10003cf4:	10bfffcc 	andi	r2,r2,65535
10003cf8:	108000d8 	cmpnei	r2,r2,3
10003cfc:	103ffa1e 	bne	r2,zero,10003ce8 <__alt_data_end+0xf8003ce8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10003d00:	01040074 	movhi	r4,4097
10003d04:	21106b04 	addi	r4,r4,16812
10003d08:	00053d00 	call	100053d0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10003d0c:	01415b04 	movi	r5,1388
10003d10:	01000084 	movi	r4,2
10003d14:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
10003d18:	0009883a 	mov	r4,zero
10003d1c:	00003640 	call	10000364 <IO_read>
10003d20:	d0a6d98d 	sth	r2,-25754(gp)
	code = code & 0x003;
10003d24:	d0a6d98b 	ldhu	r2,-25754(gp)
10003d28:	108000cc 	andi	r2,r2,3
10003d2c:	d0a6d98d 	sth	r2,-25754(gp)
	printf("\ncode = %x\n", code);
10003d30:	d0a6d98b 	ldhu	r2,-25754(gp)
10003d34:	10bfffcc 	andi	r2,r2,65535
10003d38:	100b883a 	mov	r5,r2
10003d3c:	01040074 	movhi	r4,4097
10003d40:	21107e04 	addi	r4,r4,16888
10003d44:	00052d40 	call	100052d4 <printf>

	if (code == 0x01)
10003d48:	d0a6d98b 	ldhu	r2,-25754(gp)
10003d4c:	10bfffcc 	andi	r2,r2,65535
10003d50:	10800058 	cmpnei	r2,r2,1
10003d54:	1000041e 	bne	r2,zero,10003d68 <usb_init+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10003d58:	01040074 	movhi	r4,4097
10003d5c:	21108104 	addi	r4,r4,16900
10003d60:	00053d00 	call	100053d0 <puts>
10003d64:	00000306 	br	10003d74 <usb_init+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10003d68:	01040074 	movhi	r4,4097
10003d6c:	21109004 	addi	r4,r4,16960
10003d70:	00053d00 	call	100053d0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10003d74:	01415d84 	movi	r5,1398
10003d78:	01000084 	movi	r4,2
10003d7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
10003d80:	0141cfc4 	movi	r5,1855
10003d84:	0009883a 	mov	r4,zero
10003d88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10003d8c:	01604154 	movui	r5,33029
10003d90:	0009883a 	mov	r4,zero
10003d94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10003d98:	014000c4 	movi	r5,3
10003d9c:	0009883a 	mov	r4,zero
10003da0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10003da4:	01400204 	movi	r5,8
10003da8:	0009883a 	mov	r4,zero
10003dac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10003db0:	016b0294 	movui	r5,44042
10003db4:	0009883a 	mov	r4,zero
10003db8:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10003dbc:	01415d84 	movi	r5,1398
10003dc0:	01006c04 	movi	r4,432
10003dc4:	00024540 	call	10002454 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10003dc8:	01415f04 	movi	r5,1404
10003dcc:	01000084 	movi	r4,2
10003dd0:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10003dd4:	0009883a 	mov	r4,zero
10003dd8:	00003640 	call	10000364 <IO_read>
10003ddc:	d0a6d805 	stb	r2,-25760(gp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10003de0:	d0a6d803 	ldbu	r2,-25760(gp)
10003de4:	10803fcc 	andi	r2,r2,255
10003de8:	100b883a 	mov	r5,r2
10003dec:	01040074 	movhi	r4,4097
10003df0:	21109904 	addi	r4,r4,16996
10003df4:	00052d40 	call	100052d4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10003df8:	0002dbc0 	call	10002dbc <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003dfc:	00000306 	br	10003e0c <usb_init+0x844>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10003e00:	0002dbc0 	call	10002dbc <UsbSetConfig>
		usleep(10*1000);
10003e04:	0109c404 	movi	r4,10000
10003e08:	0011df80 	call	10011df8 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003e0c:	010000c4 	movi	r4,3
10003e10:	00003640 	call	10000364 <IO_read>
10003e14:	10bfffcc 	andi	r2,r2,65535
10003e18:	1080040c 	andi	r2,r2,16
10003e1c:	103ff826 	beq	r2,zero,10003e00 <__alt_data_end+0xf8003e00>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003e20:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003e24:	01414184 	movi	r5,1286
10003e28:	01000084 	movi	r4,2
10003e2c:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003e30:	0009883a 	mov	r4,zero
10003e34:	00003640 	call	10000364 <IO_read>
10003e38:	10bfffcc 	andi	r2,r2,65535
10003e3c:	100b883a 	mov	r5,r2
10003e40:	01040074 	movhi	r4,4097
10003e44:	2110a304 	addi	r4,r4,17036
10003e48:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508);
10003e4c:	01414204 	movi	r5,1288
10003e50:	01000084 	movi	r4,2
10003e54:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003e58:	0009883a 	mov	r4,zero
10003e5c:	00003640 	call	10000364 <IO_read>
10003e60:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10003e64:	d0a6d78b 	ldhu	r2,-25762(gp)
10003e68:	10bfffcc 	andi	r2,r2,65535
10003e6c:	100b883a 	mov	r5,r2
10003e70:	01040074 	movhi	r4,4097
10003e74:	2110ae04 	addi	r4,r4,17080
10003e78:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03)
10003e7c:	00000206 	br	10003e88 <usb_init+0x8c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003e80:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10003e84:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003e88:	d0a6d78b 	ldhu	r2,-25762(gp)
10003e8c:	10bfffcc 	andi	r2,r2,65535
10003e90:	108000d8 	cmpnei	r2,r2,3
10003e94:	103ffa1e 	bne	r2,zero,10003e80 <__alt_data_end+0xf8003e80>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10003e98:	01040074 	movhi	r4,4097
10003e9c:	2110ba04 	addi	r4,r4,17128
10003ea0:	00053d00 	call	100053d0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10003ea4:	0002ebc0 	call	10002ebc <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003ea8:	00000306 	br	10003eb8 <usb_init+0x8f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10003eac:	0002ebc0 	call	10002ebc <UsbClassRequest>
		usleep(10*1000);
10003eb0:	0109c404 	movi	r4,10000
10003eb4:	0011df80 	call	10011df8 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003eb8:	010000c4 	movi	r4,3
10003ebc:	00003640 	call	10000364 <IO_read>
10003ec0:	10bfffcc 	andi	r2,r2,65535
10003ec4:	1080040c 	andi	r2,r2,16
10003ec8:	103ff826 	beq	r2,zero,10003eac <__alt_data_end+0xf8003eac>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003ecc:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003ed0:	01414184 	movi	r5,1286
10003ed4:	01000084 	movi	r4,2
10003ed8:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003edc:	0009883a 	mov	r4,zero
10003ee0:	00003640 	call	10000364 <IO_read>
10003ee4:	10bfffcc 	andi	r2,r2,65535
10003ee8:	100b883a 	mov	r5,r2
10003eec:	01040074 	movhi	r4,4097
10003ef0:	2110cc04 	addi	r4,r4,17200
10003ef4:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508);
10003ef8:	01414204 	movi	r5,1288
10003efc:	01000084 	movi	r4,2
10003f00:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003f04:	0009883a 	mov	r4,zero
10003f08:	00003640 	call	10000364 <IO_read>
10003f0c:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10003f10:	d0a6d78b 	ldhu	r2,-25762(gp)
10003f14:	10bfffcc 	andi	r2,r2,65535
10003f18:	100b883a 	mov	r5,r2
10003f1c:	01040074 	movhi	r4,4097
10003f20:	2110d704 	addi	r4,r4,17244
10003f24:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03)
10003f28:	00000206 	br	10003f34 <usb_init+0x96c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003f2c:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10003f30:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003f34:	d0a6d78b 	ldhu	r2,-25762(gp)
10003f38:	10bfffcc 	andi	r2,r2,65535
10003f3c:	108000d8 	cmpnei	r2,r2,3
10003f40:	103ffa1e 	bne	r2,zero,10003f2c <__alt_data_end+0xf8003f2c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10003f44:	01040074 	movhi	r4,4097
10003f48:	2110e304 	addi	r4,r4,17292
10003f4c:	00053d00 	call	100053d0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10003f50:	0002fbc0 	call	10002fbc <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003f54:	00000306 	br	10003f64 <usb_init+0x99c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10003f58:	0002fbc0 	call	10002fbc <UsbGetHidDesc>
		usleep(10*1000);
10003f5c:	0109c404 	movi	r4,10000
10003f60:	0011df80 	call	10011df8 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003f64:	010000c4 	movi	r4,3
10003f68:	00003640 	call	10000364 <IO_read>
10003f6c:	10bfffcc 	andi	r2,r2,65535
10003f70:	1080040c 	andi	r2,r2,16
10003f74:	103ff826 	beq	r2,zero,10003f58 <__alt_data_end+0xf8003f58>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10003f78:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10003f7c:	01414184 	movi	r5,1286
10003f80:	01000084 	movi	r4,2
10003f84:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10003f88:	0009883a 	mov	r4,zero
10003f8c:	00003640 	call	10000364 <IO_read>
10003f90:	10bfffcc 	andi	r2,r2,65535
10003f94:	100b883a 	mov	r5,r2
10003f98:	01040074 	movhi	r4,4097
10003f9c:	2110cc04 	addi	r4,r4,17200
10003fa0:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508);
10003fa4:	01414204 	movi	r5,1288
10003fa8:	01000084 	movi	r4,2
10003fac:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003fb0:	0009883a 	mov	r4,zero
10003fb4:	00003640 	call	10000364 <IO_read>
10003fb8:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10003fbc:	d0a6d78b 	ldhu	r2,-25762(gp)
10003fc0:	10bfffcc 	andi	r2,r2,65535
10003fc4:	100b883a 	mov	r5,r2
10003fc8:	01040074 	movhi	r4,4097
10003fcc:	2110d704 	addi	r4,r4,17244
10003fd0:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03)
10003fd4:	00000206 	br	10003fe0 <usb_init+0xa18>
	{
		usb_ctl_val = UsbGetRetryCnt();
10003fd8:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10003fdc:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10003fe0:	d0a6d78b 	ldhu	r2,-25762(gp)
10003fe4:	10bfffcc 	andi	r2,r2,65535
10003fe8:	108000d8 	cmpnei	r2,r2,3
10003fec:	103ffa1e 	bne	r2,zero,10003fd8 <__alt_data_end+0xf8003fd8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10003ff0:	01040074 	movhi	r4,4097
10003ff4:	2110f504 	addi	r4,r4,17364
10003ff8:	00053d00 	call	100053d0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10003ffc:	00031040 	call	10003104 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004000:	00000306 	br	10004010 <usb_init+0xa48>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10004004:	00031040 	call	10003104 <UsbGetReportDesc>
		usleep(10*1000);
10004008:	0109c404 	movi	r4,10000
1000400c:	0011df80 	call	10011df8 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004010:	010000c4 	movi	r4,3
10004014:	00003640 	call	10000364 <IO_read>
10004018:	10bfffcc 	andi	r2,r2,65535
1000401c:	1080040c 	andi	r2,r2,16
10004020:	103ff826 	beq	r2,zero,10004004 <__alt_data_end+0xf8004004>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10004024:	00034440 	call	10003444 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10004028:	01414184 	movi	r5,1286
1000402c:	01000084 	movi	r4,2
10004030:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10004034:	0009883a 	mov	r4,zero
10004038:	00003640 	call	10000364 <IO_read>
1000403c:	10bfffcc 	andi	r2,r2,65535
10004040:	100b883a 	mov	r5,r2
10004044:	01040074 	movhi	r4,4097
10004048:	21110904 	addi	r4,r4,17444
1000404c:	00052d40 	call	100052d4 <printf>

	IO_write(HPI_ADDR,0x0508);
10004050:	01414204 	movi	r5,1288
10004054:	01000084 	movi	r4,2
10004058:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000405c:	0009883a 	mov	r4,zero
10004060:	00003640 	call	10000364 <IO_read>
10004064:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10004068:	d0a6d78b 	ldhu	r2,-25762(gp)
1000406c:	10bfffcc 	andi	r2,r2,65535
10004070:	100b883a 	mov	r5,r2
10004074:	01040074 	movhi	r4,4097
10004078:	21111504 	addi	r4,r4,17492
1000407c:	00052d40 	call	100052d4 <printf>
	while (usb_ctl_val != 0x03)
10004080:	00000206 	br	1000408c <usb_init+0xac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10004084:	00034c80 	call	100034c8 <UsbGetRetryCnt>
10004088:	d0a6d78d 	sth	r2,-25762(gp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000408c:	d0a6d78b 	ldhu	r2,-25762(gp)
10004090:	10bfffcc 	andi	r2,r2,65535
10004094:	108000d8 	cmpnei	r2,r2,3
10004098:	103ffa1e 	bne	r2,zero,10004084 <__alt_data_end+0xf8004084>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
1000409c:	01040074 	movhi	r4,4097
100040a0:	21112104 	addi	r4,r4,17540
100040a4:	00053d00 	call	100053d0 <puts>
	usleep(10000);
100040a8:	0109c404 	movi	r4,10000
100040ac:	0011df80 	call	10011df8 <usleep>
	return 0;
100040b0:	0005883a 	mov	r2,zero
}
100040b4:	e037883a 	mov	sp,fp
100040b8:	dfc00117 	ldw	ra,4(sp)
100040bc:	df000017 	ldw	fp,0(sp)
100040c0:	dec00204 	addi	sp,sp,8
100040c4:	f800283a 	ret

100040c8 <get_keycode>:

	//-----------------------------------get keycode value------------------------------------------------//
unsigned long get_keycode(void){
100040c8:	defffb04 	addi	sp,sp,-20
100040cc:	dfc00415 	stw	ra,16(sp)
100040d0:	df000315 	stw	fp,12(sp)
100040d4:	df000304 	addi	fp,sp,12
	unsigned long keycode = 0; // return value: 4 key codes
100040d8:	e03ffd15 	stw	zero,-12(fp)
	int keycode1 = 0; // first two key codes
100040dc:	e03ffe15 	stw	zero,-8(fp)
	int keycode2 = 0; // second two key codes
100040e0:	e03fff15 	stw	zero,-4(fp)
	toggle++;
100040e4:	d0a6d703 	ldbu	r2,-25764(gp)
100040e8:	10800044 	addi	r2,r2,1
100040ec:	d0a6d705 	stb	r2,-25764(gp)
	IO_write(HPI_ADDR,0x0500); //the start address
100040f0:	01414004 	movi	r5,1280
100040f4:	01000084 	movi	r4,2
100040f8:	00002f40 	call	100002f4 <IO_write>
	//data phase IN-1
	IO_write(HPI_DATA,0x051c); //500
100040fc:	01414704 	movi	r5,1308
10004100:	0009883a 	mov	r4,zero
10004104:	00002f40 	call	100002f4 <IO_write>

	IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004108:	d0a6d803 	ldbu	r2,-25760(gp)
1000410c:	10803fcc 	andi	r2,r2,255
10004110:	108003cc 	andi	r2,r2,15
10004114:	100b883a 	mov	r5,r2
10004118:	0009883a 	mov	r4,zero
1000411c:	00002f40 	call	100002f4 <IO_write>

	IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10004120:	0140a444 	movi	r5,657
10004124:	0009883a 	mov	r4,zero
10004128:	00002f40 	call	100002f4 <IO_write>
	if(toggle%2)
1000412c:	d0a6d703 	ldbu	r2,-25764(gp)
10004130:	1080004c 	andi	r2,r2,1
10004134:	10803fcc 	andi	r2,r2,255
10004138:	10000426 	beq	r2,zero,1000414c <get_keycode+0x84>
	{
		IO_write(HPI_DATA,0x0001);//6 //data 1
1000413c:	01400044 	movi	r5,1
10004140:	0009883a 	mov	r4,zero
10004144:	00002f40 	call	100002f4 <IO_write>
10004148:	00000306 	br	10004158 <get_keycode+0x90>
	}
	else
	{
		IO_write(HPI_DATA,0x0041);//6 //data 1
1000414c:	01401044 	movi	r5,65
10004150:	0009883a 	mov	r4,zero
10004154:	00002f40 	call	100002f4 <IO_write>
	}
	IO_write(HPI_DATA,0x0013);//8
10004158:	014004c4 	movi	r5,19
1000415c:	0009883a 	mov	r4,zero
10004160:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10004164:	000b883a 	mov	r5,zero
10004168:	0009883a 	mov	r4,zero
1000416c:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004170:	01414004 	movi	r5,1280
10004174:	01006c04 	movi	r4,432
10004178:	00024540 	call	10002454 <UsbWrite>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000417c:	00002506 	br	10004214 <get_keycode+0x14c>
	{
		IO_write(HPI_ADDR,0x0500); //the start address
10004180:	01414004 	movi	r5,1280
10004184:	01000084 	movi	r4,2
10004188:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
1000418c:	01414704 	movi	r5,1308
10004190:	0009883a 	mov	r4,zero
10004194:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10004198:	d0a6d803 	ldbu	r2,-25760(gp)
1000419c:	10803fcc 	andi	r2,r2,255
100041a0:	108003cc 	andi	r2,r2,15
100041a4:	100b883a 	mov	r5,r2
100041a8:	0009883a 	mov	r4,zero
100041ac:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100041b0:	0140a444 	movi	r5,657
100041b4:	0009883a 	mov	r4,zero
100041b8:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
100041bc:	d0a6d703 	ldbu	r2,-25764(gp)
100041c0:	1080004c 	andi	r2,r2,1
100041c4:	10803fcc 	andi	r2,r2,255
100041c8:	10000426 	beq	r2,zero,100041dc <get_keycode+0x114>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
100041cc:	01400044 	movi	r5,1
100041d0:	0009883a 	mov	r4,zero
100041d4:	00002f40 	call	100002f4 <IO_write>
100041d8:	00000306 	br	100041e8 <get_keycode+0x120>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
100041dc:	01401044 	movi	r5,65
100041e0:	0009883a 	mov	r4,zero
100041e4:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
100041e8:	014004c4 	movi	r5,19
100041ec:	0009883a 	mov	r4,zero
100041f0:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//
100041f4:	000b883a 	mov	r5,zero
100041f8:	0009883a 	mov	r4,zero
100041fc:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004200:	01414004 	movi	r5,1280
10004204:	01006c04 	movi	r4,432
10004208:	00024540 	call	10002454 <UsbWrite>
		usleep(10*1000);
1000420c:	0109c404 	movi	r4,10000
10004210:	0011df80 	call	10011df8 <usleep>
	}
	IO_write(HPI_DATA,0x0013);//8
	IO_write(HPI_DATA,0x0000);//a
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10004214:	010000c4 	movi	r4,3
10004218:	00003640 	call	10000364 <IO_read>
1000421c:	10bfffcc 	andi	r2,r2,65535
10004220:	1080040c 	andi	r2,r2,16
10004224:	103fd626 	beq	r2,zero,10004180 <__alt_data_end+0xf8004180>
		IO_write(HPI_DATA,0x0000);//
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		usleep(10*1000);
	}//end while

	usb_ctl_val = UsbWaitTDListDone();
10004228:	00034440 	call	10003444 <UsbWaitTDListDone>
1000422c:	d0a6d78d 	sth	r2,-25762(gp)

	// The first two keycodes are stored in 0x051E. Other keycodes are in
	// subsequent addresses.
	keycode1 = UsbRead(0x051e);
10004230:	01014784 	movi	r4,1310
10004234:	00024ac0 	call	100024ac <UsbRead>
10004238:	10bfffcc 	andi	r2,r2,65535
1000423c:	e0bffe15 	stw	r2,-8(fp)
	keycode2 = UsbRead(0x0520);
10004240:	01014804 	movi	r4,1312
10004244:	00024ac0 	call	100024ac <UsbRead>
10004248:	10bfffcc 	andi	r2,r2,65535
1000424c:	e0bfff15 	stw	r2,-4(fp)
//	printf("\nfirst two keycode values are %04x\n",keycode1);
//	printf("second two keycode values are %04x\n",keycode2);
	// We only need the first keycode, which is at the lower byte of keycode.
	// Send the keycode to hardware via PIO.
	*keycode_base = keycode1 & 0xff;
10004250:	00802004 	movi	r2,128
10004254:	e0fffe17 	ldw	r3,-8(fp)
10004258:	10c00005 	stb	r3,0(r2)

	usleep(200);//usleep(5000);
1000425c:	01003204 	movi	r4,200
10004260:	0011df80 	call	10011df8 <usleep>
	usb_ctl_val = UsbRead(ctl_reg);
10004264:	d0a6d40b 	ldhu	r2,-25776(gp)
10004268:	10bfffcc 	andi	r2,r2,65535
1000426c:	1009883a 	mov	r4,r2
10004270:	00024ac0 	call	100024ac <UsbRead>
10004274:	d0a6d78d 	sth	r2,-25762(gp)

	if(!(usb_ctl_val & no_device))
10004278:	d0e6d78b 	ldhu	r3,-25762(gp)
1000427c:	d0a6d48b 	ldhu	r2,-25774(gp)
10004280:	1884703a 	and	r2,r3,r2
10004284:	10bfffcc 	andi	r2,r2,65535
10004288:	1000401e 	bne	r2,zero,1000438c <get_keycode+0x2c4>
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000428c:	d026d905 	stb	zero,-25756(gp)
10004290:	00000f06 	br	100042d0 <get_keycode+0x208>
		{
			usleep(5*1000);
10004294:	0104e204 	movi	r4,5000
10004298:	0011df80 	call	10011df8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000429c:	d0a6d40b 	ldhu	r2,-25776(gp)
100042a0:	10bfffcc 	andi	r2,r2,65535
100042a4:	1009883a 	mov	r4,r2
100042a8:	00024ac0 	call	100024ac <UsbRead>
100042ac:	d0a6d78d 	sth	r2,-25762(gp)
			if(usb_ctl_val & no_device) break;
100042b0:	d0e6d78b 	ldhu	r3,-25762(gp)
100042b4:	d0a6d48b 	ldhu	r2,-25774(gp)
100042b8:	1884703a 	and	r2,r3,r2
100042bc:	10bfffcc 	andi	r2,r2,65535
100042c0:	1000081e 	bne	r2,zero,100042e4 <get_keycode+0x21c>
	usb_ctl_val = UsbRead(ctl_reg);

	if(!(usb_ctl_val & no_device))
	{
		//USB hot plug routine
		for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100042c4:	d0a6d903 	ldbu	r2,-25756(gp)
100042c8:	10800044 	addi	r2,r2,1
100042cc:	d0a6d905 	stb	r2,-25756(gp)
100042d0:	d0a6d903 	ldbu	r2,-25756(gp)
100042d4:	10803fcc 	andi	r2,r2,255
100042d8:	108001f0 	cmpltui	r2,r2,7
100042dc:	103fed1e 	bne	r2,zero,10004294 <__alt_data_end+0xf8004294>
100042e0:	00000106 	br	100042e8 <get_keycode+0x220>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100042e4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100042e8:	d0e6d78b 	ldhu	r3,-25762(gp)
100042ec:	d0a6d48b 	ldhu	r2,-25774(gp)
100042f0:	1884703a 	and	r2,r3,r2
100042f4:	10bfffcc 	andi	r2,r2,65535
100042f8:	1000241e 	bne	r2,zero,1000438c <get_keycode+0x2c4>
		{
			printf("\n[INFO]: the keyboard has been removed!!! \n");
100042fc:	01040074 	movhi	r4,4097
10004300:	21113504 	addi	r4,r4,17620
10004304:	00053d00 	call	100053d0 <puts>
			printf("[INFO]: please insert again!!! \n");
10004308:	01040074 	movhi	r4,4097
1000430c:	21114004 	addi	r4,r4,17664
10004310:	00053d00 	call	100053d0 <puts>
		}
	}

	while (!(usb_ctl_val & no_device))
10004314:	00001d06 	br	1000438c <get_keycode+0x2c4>
	{

		usb_ctl_val = UsbRead(ctl_reg);
10004318:	d0a6d40b 	ldhu	r2,-25776(gp)
1000431c:	10bfffcc 	andi	r2,r2,65535
10004320:	1009883a 	mov	r4,r2
10004324:	00024ac0 	call	100024ac <UsbRead>
10004328:	d0a6d78d 	sth	r2,-25762(gp)
		usleep(5*1000);
1000432c:	0104e204 	movi	r4,5000
10004330:	0011df80 	call	10011df8 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10004334:	d0a6d40b 	ldhu	r2,-25776(gp)
10004338:	10bfffcc 	andi	r2,r2,65535
1000433c:	1009883a 	mov	r4,r2
10004340:	00024ac0 	call	100024ac <UsbRead>
10004344:	d0a6d78d 	sth	r2,-25762(gp)
		usleep(5*1000);
10004348:	0104e204 	movi	r4,5000
1000434c:	0011df80 	call	10011df8 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10004350:	d0a6d40b 	ldhu	r2,-25776(gp)
10004354:	10bfffcc 	andi	r2,r2,65535
10004358:	1009883a 	mov	r4,r2
1000435c:	00024ac0 	call	100024ac <UsbRead>
10004360:	d0a6d78d 	sth	r2,-25762(gp)
		usleep(5*1000);
10004364:	0104e204 	movi	r4,5000
10004368:	0011df80 	call	10011df8 <usleep>

		if(usb_ctl_val & no_device)
1000436c:	d0e6d78b 	ldhu	r3,-25762(gp)
10004370:	d0a6d48b 	ldhu	r2,-25774(gp)
10004374:	1884703a 	and	r2,r3,r2
10004378:	10bfffcc 	andi	r2,r2,65535
1000437c:	10000126 	beq	r2,zero,10004384 <get_keycode+0x2bc>
			usb_init();
10004380:	00035c80 	call	100035c8 <usb_init>
//			goto USB_HOT_PLUG;

		usleep(200);
10004384:	01003204 	movi	r4,200
10004388:	0011df80 	call	10011df8 <usleep>
			printf("\n[INFO]: the keyboard has been removed!!! \n");
			printf("[INFO]: please insert again!!! \n");
		}
	}

	while (!(usb_ctl_val & no_device))
1000438c:	d0e6d78b 	ldhu	r3,-25762(gp)
10004390:	d0a6d48b 	ldhu	r2,-25774(gp)
10004394:	1884703a 	and	r2,r3,r2
10004398:	10bfffcc 	andi	r2,r2,65535
1000439c:	103fde26 	beq	r2,zero,10004318 <__alt_data_end+0xf8004318>
//			goto USB_HOT_PLUG;

		usleep(200);
	}

	keycode = (unsigned long)(keycode1<<16) + (unsigned long)keycode2;
100043a0:	e0bffe17 	ldw	r2,-8(fp)
100043a4:	1004943a 	slli	r2,r2,16
100043a8:	1007883a 	mov	r3,r2
100043ac:	e0bfff17 	ldw	r2,-4(fp)
100043b0:	1885883a 	add	r2,r3,r2
100043b4:	e0bffd15 	stw	r2,-12(fp)
	return keycode;
100043b8:	e0bffd17 	ldw	r2,-12(fp)
}
100043bc:	e037883a 	mov	sp,fp
100043c0:	dfc00117 	ldw	ra,4(sp)
100043c4:	df000017 	ldw	fp,0(sp)
100043c8:	dec00204 	addi	sp,sp,8
100043cc:	f800283a 	ret

100043d0 <__divsi3>:
100043d0:	20001b16 	blt	r4,zero,10004440 <__divsi3+0x70>
100043d4:	000f883a 	mov	r7,zero
100043d8:	28001616 	blt	r5,zero,10004434 <__divsi3+0x64>
100043dc:	200d883a 	mov	r6,r4
100043e0:	29001a2e 	bgeu	r5,r4,1000444c <__divsi3+0x7c>
100043e4:	00800804 	movi	r2,32
100043e8:	00c00044 	movi	r3,1
100043ec:	00000106 	br	100043f4 <__divsi3+0x24>
100043f0:	10000d26 	beq	r2,zero,10004428 <__divsi3+0x58>
100043f4:	294b883a 	add	r5,r5,r5
100043f8:	10bfffc4 	addi	r2,r2,-1
100043fc:	18c7883a 	add	r3,r3,r3
10004400:	293ffb36 	bltu	r5,r4,100043f0 <__alt_data_end+0xf80043f0>
10004404:	0005883a 	mov	r2,zero
10004408:	18000726 	beq	r3,zero,10004428 <__divsi3+0x58>
1000440c:	0005883a 	mov	r2,zero
10004410:	31400236 	bltu	r6,r5,1000441c <__divsi3+0x4c>
10004414:	314dc83a 	sub	r6,r6,r5
10004418:	10c4b03a 	or	r2,r2,r3
1000441c:	1806d07a 	srli	r3,r3,1
10004420:	280ad07a 	srli	r5,r5,1
10004424:	183ffa1e 	bne	r3,zero,10004410 <__alt_data_end+0xf8004410>
10004428:	38000126 	beq	r7,zero,10004430 <__divsi3+0x60>
1000442c:	0085c83a 	sub	r2,zero,r2
10004430:	f800283a 	ret
10004434:	014bc83a 	sub	r5,zero,r5
10004438:	39c0005c 	xori	r7,r7,1
1000443c:	003fe706 	br	100043dc <__alt_data_end+0xf80043dc>
10004440:	0109c83a 	sub	r4,zero,r4
10004444:	01c00044 	movi	r7,1
10004448:	003fe306 	br	100043d8 <__alt_data_end+0xf80043d8>
1000444c:	00c00044 	movi	r3,1
10004450:	003fee06 	br	1000440c <__alt_data_end+0xf800440c>

10004454 <__modsi3>:
10004454:	20001716 	blt	r4,zero,100044b4 <__modsi3+0x60>
10004458:	000f883a 	mov	r7,zero
1000445c:	2005883a 	mov	r2,r4
10004460:	28001216 	blt	r5,zero,100044ac <__modsi3+0x58>
10004464:	2900162e 	bgeu	r5,r4,100044c0 <__modsi3+0x6c>
10004468:	01800804 	movi	r6,32
1000446c:	00c00044 	movi	r3,1
10004470:	00000106 	br	10004478 <__modsi3+0x24>
10004474:	30000a26 	beq	r6,zero,100044a0 <__modsi3+0x4c>
10004478:	294b883a 	add	r5,r5,r5
1000447c:	31bfffc4 	addi	r6,r6,-1
10004480:	18c7883a 	add	r3,r3,r3
10004484:	293ffb36 	bltu	r5,r4,10004474 <__alt_data_end+0xf8004474>
10004488:	18000526 	beq	r3,zero,100044a0 <__modsi3+0x4c>
1000448c:	1806d07a 	srli	r3,r3,1
10004490:	11400136 	bltu	r2,r5,10004498 <__modsi3+0x44>
10004494:	1145c83a 	sub	r2,r2,r5
10004498:	280ad07a 	srli	r5,r5,1
1000449c:	183ffb1e 	bne	r3,zero,1000448c <__alt_data_end+0xf800448c>
100044a0:	38000126 	beq	r7,zero,100044a8 <__modsi3+0x54>
100044a4:	0085c83a 	sub	r2,zero,r2
100044a8:	f800283a 	ret
100044ac:	014bc83a 	sub	r5,zero,r5
100044b0:	003fec06 	br	10004464 <__alt_data_end+0xf8004464>
100044b4:	0109c83a 	sub	r4,zero,r4
100044b8:	01c00044 	movi	r7,1
100044bc:	003fe706 	br	1000445c <__alt_data_end+0xf800445c>
100044c0:	00c00044 	movi	r3,1
100044c4:	003ff106 	br	1000448c <__alt_data_end+0xf800448c>

100044c8 <__udivsi3>:
100044c8:	200d883a 	mov	r6,r4
100044cc:	2900152e 	bgeu	r5,r4,10004524 <__udivsi3+0x5c>
100044d0:	28001416 	blt	r5,zero,10004524 <__udivsi3+0x5c>
100044d4:	00800804 	movi	r2,32
100044d8:	00c00044 	movi	r3,1
100044dc:	00000206 	br	100044e8 <__udivsi3+0x20>
100044e0:	10000e26 	beq	r2,zero,1000451c <__udivsi3+0x54>
100044e4:	28000516 	blt	r5,zero,100044fc <__udivsi3+0x34>
100044e8:	294b883a 	add	r5,r5,r5
100044ec:	10bfffc4 	addi	r2,r2,-1
100044f0:	18c7883a 	add	r3,r3,r3
100044f4:	293ffa36 	bltu	r5,r4,100044e0 <__alt_data_end+0xf80044e0>
100044f8:	18000826 	beq	r3,zero,1000451c <__udivsi3+0x54>
100044fc:	0005883a 	mov	r2,zero
10004500:	31400236 	bltu	r6,r5,1000450c <__udivsi3+0x44>
10004504:	314dc83a 	sub	r6,r6,r5
10004508:	10c4b03a 	or	r2,r2,r3
1000450c:	1806d07a 	srli	r3,r3,1
10004510:	280ad07a 	srli	r5,r5,1
10004514:	183ffa1e 	bne	r3,zero,10004500 <__alt_data_end+0xf8004500>
10004518:	f800283a 	ret
1000451c:	0005883a 	mov	r2,zero
10004520:	f800283a 	ret
10004524:	00c00044 	movi	r3,1
10004528:	003ff406 	br	100044fc <__alt_data_end+0xf80044fc>

1000452c <__umodsi3>:
1000452c:	2005883a 	mov	r2,r4
10004530:	2900122e 	bgeu	r5,r4,1000457c <__umodsi3+0x50>
10004534:	28001116 	blt	r5,zero,1000457c <__umodsi3+0x50>
10004538:	01800804 	movi	r6,32
1000453c:	00c00044 	movi	r3,1
10004540:	00000206 	br	1000454c <__umodsi3+0x20>
10004544:	30000c26 	beq	r6,zero,10004578 <__umodsi3+0x4c>
10004548:	28000516 	blt	r5,zero,10004560 <__umodsi3+0x34>
1000454c:	294b883a 	add	r5,r5,r5
10004550:	31bfffc4 	addi	r6,r6,-1
10004554:	18c7883a 	add	r3,r3,r3
10004558:	293ffa36 	bltu	r5,r4,10004544 <__alt_data_end+0xf8004544>
1000455c:	18000626 	beq	r3,zero,10004578 <__umodsi3+0x4c>
10004560:	1806d07a 	srli	r3,r3,1
10004564:	11400136 	bltu	r2,r5,1000456c <__umodsi3+0x40>
10004568:	1145c83a 	sub	r2,r2,r5
1000456c:	280ad07a 	srli	r5,r5,1
10004570:	183ffb1e 	bne	r3,zero,10004560 <__alt_data_end+0xf8004560>
10004574:	f800283a 	ret
10004578:	f800283a 	ret
1000457c:	00c00044 	movi	r3,1
10004580:	003ff706 	br	10004560 <__alt_data_end+0xf8004560>

10004584 <__divdf3>:
10004584:	defff004 	addi	sp,sp,-64
10004588:	dc800815 	stw	r18,32(sp)
1000458c:	2824d53a 	srli	r18,r5,20
10004590:	dd800c15 	stw	r22,48(sp)
10004594:	282cd7fa 	srli	r22,r5,31
10004598:	dc000615 	stw	r16,24(sp)
1000459c:	04000434 	movhi	r16,16
100045a0:	843fffc4 	addi	r16,r16,-1
100045a4:	dfc00f15 	stw	ra,60(sp)
100045a8:	df000e15 	stw	fp,56(sp)
100045ac:	ddc00d15 	stw	r23,52(sp)
100045b0:	dd400b15 	stw	r21,44(sp)
100045b4:	dd000a15 	stw	r20,40(sp)
100045b8:	dcc00915 	stw	r19,36(sp)
100045bc:	dc400715 	stw	r17,28(sp)
100045c0:	9481ffcc 	andi	r18,r18,2047
100045c4:	2c20703a 	and	r16,r5,r16
100045c8:	b2003fcc 	andi	r8,r22,255
100045cc:	90006126 	beq	r18,zero,10004754 <__divdf3+0x1d0>
100045d0:	0081ffc4 	movi	r2,2047
100045d4:	202b883a 	mov	r21,r4
100045d8:	90803726 	beq	r18,r2,100046b8 <__divdf3+0x134>
100045dc:	80800434 	orhi	r2,r16,16
100045e0:	100490fa 	slli	r2,r2,3
100045e4:	2020d77a 	srli	r16,r4,29
100045e8:	202a90fa 	slli	r21,r4,3
100045ec:	94bf0044 	addi	r18,r18,-1023
100045f0:	80a0b03a 	or	r16,r16,r2
100045f4:	0013883a 	mov	r9,zero
100045f8:	000b883a 	mov	r5,zero
100045fc:	3806d53a 	srli	r3,r7,20
10004600:	382ed7fa 	srli	r23,r7,31
10004604:	04400434 	movhi	r17,16
10004608:	8c7fffc4 	addi	r17,r17,-1
1000460c:	18c1ffcc 	andi	r3,r3,2047
10004610:	3029883a 	mov	r20,r6
10004614:	3c62703a 	and	r17,r7,r17
10004618:	bf003fcc 	andi	fp,r23,255
1000461c:	18006e26 	beq	r3,zero,100047d8 <__divdf3+0x254>
10004620:	0081ffc4 	movi	r2,2047
10004624:	18806626 	beq	r3,r2,100047c0 <__divdf3+0x23c>
10004628:	88800434 	orhi	r2,r17,16
1000462c:	100490fa 	slli	r2,r2,3
10004630:	3022d77a 	srli	r17,r6,29
10004634:	302890fa 	slli	r20,r6,3
10004638:	18ff0044 	addi	r3,r3,-1023
1000463c:	88a2b03a 	or	r17,r17,r2
10004640:	000f883a 	mov	r7,zero
10004644:	b5e6f03a 	xor	r19,r22,r23
10004648:	3a4cb03a 	or	r6,r7,r9
1000464c:	008003c4 	movi	r2,15
10004650:	9809883a 	mov	r4,r19
10004654:	90c7c83a 	sub	r3,r18,r3
10004658:	9cc03fcc 	andi	r19,r19,255
1000465c:	11809636 	bltu	r2,r6,100048b8 <__divdf3+0x334>
10004660:	300c90ba 	slli	r6,r6,2
10004664:	00840034 	movhi	r2,4096
10004668:	10919e04 	addi	r2,r2,18040
1000466c:	308d883a 	add	r6,r6,r2
10004670:	30800017 	ldw	r2,0(r6)
10004674:	1000683a 	jmp	r2
10004678:	100048b8 	rdprs	zero,r2,290
1000467c:	100046f0 	cmpltui	zero,r2,283
10004680:	100048a8 	cmpgeui	zero,r2,290
10004684:	100046e4 	muli	zero,r2,283
10004688:	100048a8 	cmpgeui	zero,r2,290
1000468c:	1000487c 	xorhi	zero,r2,289
10004690:	100048a8 	cmpgeui	zero,r2,290
10004694:	100046e4 	muli	zero,r2,283
10004698:	100046f0 	cmpltui	zero,r2,283
1000469c:	100046f0 	cmpltui	zero,r2,283
100046a0:	1000487c 	xorhi	zero,r2,289
100046a4:	100046e4 	muli	zero,r2,283
100046a8:	100046d4 	ori	zero,r2,283
100046ac:	100046d4 	ori	zero,r2,283
100046b0:	100046d4 	ori	zero,r2,283
100046b4:	10004c40 	call	110004c4 <_gp+0xfe21f8>
100046b8:	2404b03a 	or	r2,r4,r16
100046bc:	10006c1e 	bne	r2,zero,10004870 <__divdf3+0x2ec>
100046c0:	02400204 	movi	r9,8
100046c4:	0021883a 	mov	r16,zero
100046c8:	002b883a 	mov	r21,zero
100046cc:	01400084 	movi	r5,2
100046d0:	003fca06 	br	100045fc <__alt_data_end+0xf80045fc>
100046d4:	8023883a 	mov	r17,r16
100046d8:	a829883a 	mov	r20,r21
100046dc:	4039883a 	mov	fp,r8
100046e0:	280f883a 	mov	r7,r5
100046e4:	00800084 	movi	r2,2
100046e8:	3881601e 	bne	r7,r2,10004c6c <__divdf3+0x6e8>
100046ec:	e027883a 	mov	r19,fp
100046f0:	9900004c 	andi	r4,r19,1
100046f4:	0081ffc4 	movi	r2,2047
100046f8:	0021883a 	mov	r16,zero
100046fc:	002b883a 	mov	r21,zero
10004700:	1004953a 	slli	r2,r2,20
10004704:	20c03fcc 	andi	r3,r4,255
10004708:	01400434 	movhi	r5,16
1000470c:	297fffc4 	addi	r5,r5,-1
10004710:	180697fa 	slli	r3,r3,31
10004714:	8160703a 	and	r16,r16,r5
10004718:	80a0b03a 	or	r16,r16,r2
1000471c:	80c6b03a 	or	r3,r16,r3
10004720:	a805883a 	mov	r2,r21
10004724:	dfc00f17 	ldw	ra,60(sp)
10004728:	df000e17 	ldw	fp,56(sp)
1000472c:	ddc00d17 	ldw	r23,52(sp)
10004730:	dd800c17 	ldw	r22,48(sp)
10004734:	dd400b17 	ldw	r21,44(sp)
10004738:	dd000a17 	ldw	r20,40(sp)
1000473c:	dcc00917 	ldw	r19,36(sp)
10004740:	dc800817 	ldw	r18,32(sp)
10004744:	dc400717 	ldw	r17,28(sp)
10004748:	dc000617 	ldw	r16,24(sp)
1000474c:	dec01004 	addi	sp,sp,64
10004750:	f800283a 	ret
10004754:	2404b03a 	or	r2,r4,r16
10004758:	2023883a 	mov	r17,r4
1000475c:	10003f26 	beq	r2,zero,1000485c <__divdf3+0x2d8>
10004760:	80015e26 	beq	r16,zero,10004cdc <__divdf3+0x758>
10004764:	8009883a 	mov	r4,r16
10004768:	d9800215 	stw	r6,8(sp)
1000476c:	d9c00515 	stw	r7,20(sp)
10004770:	da000415 	stw	r8,16(sp)
10004774:	00051cc0 	call	100051cc <__clzsi2>
10004778:	d9800217 	ldw	r6,8(sp)
1000477c:	d9c00517 	ldw	r7,20(sp)
10004780:	da000417 	ldw	r8,16(sp)
10004784:	113ffd44 	addi	r4,r2,-11
10004788:	00c00704 	movi	r3,28
1000478c:	19014f16 	blt	r3,r4,10004ccc <__divdf3+0x748>
10004790:	00c00744 	movi	r3,29
10004794:	157ffe04 	addi	r21,r2,-8
10004798:	1907c83a 	sub	r3,r3,r4
1000479c:	8560983a 	sll	r16,r16,r21
100047a0:	88c6d83a 	srl	r3,r17,r3
100047a4:	8d6a983a 	sll	r21,r17,r21
100047a8:	1c20b03a 	or	r16,r3,r16
100047ac:	1080fcc4 	addi	r2,r2,1011
100047b0:	00a5c83a 	sub	r18,zero,r2
100047b4:	0013883a 	mov	r9,zero
100047b8:	000b883a 	mov	r5,zero
100047bc:	003f8f06 	br	100045fc <__alt_data_end+0xf80045fc>
100047c0:	3444b03a 	or	r2,r6,r17
100047c4:	1000231e 	bne	r2,zero,10004854 <__divdf3+0x2d0>
100047c8:	0023883a 	mov	r17,zero
100047cc:	0029883a 	mov	r20,zero
100047d0:	01c00084 	movi	r7,2
100047d4:	003f9b06 	br	10004644 <__alt_data_end+0xf8004644>
100047d8:	3444b03a 	or	r2,r6,r17
100047dc:	10001926 	beq	r2,zero,10004844 <__divdf3+0x2c0>
100047e0:	88014b26 	beq	r17,zero,10004d10 <__divdf3+0x78c>
100047e4:	8809883a 	mov	r4,r17
100047e8:	d9400115 	stw	r5,4(sp)
100047ec:	d9800215 	stw	r6,8(sp)
100047f0:	da000415 	stw	r8,16(sp)
100047f4:	da400315 	stw	r9,12(sp)
100047f8:	00051cc0 	call	100051cc <__clzsi2>
100047fc:	d9400117 	ldw	r5,4(sp)
10004800:	d9800217 	ldw	r6,8(sp)
10004804:	da000417 	ldw	r8,16(sp)
10004808:	da400317 	ldw	r9,12(sp)
1000480c:	113ffd44 	addi	r4,r2,-11
10004810:	00c00704 	movi	r3,28
10004814:	19013a16 	blt	r3,r4,10004d00 <__divdf3+0x77c>
10004818:	00c00744 	movi	r3,29
1000481c:	153ffe04 	addi	r20,r2,-8
10004820:	1907c83a 	sub	r3,r3,r4
10004824:	8d22983a 	sll	r17,r17,r20
10004828:	30c6d83a 	srl	r3,r6,r3
1000482c:	3528983a 	sll	r20,r6,r20
10004830:	1c62b03a 	or	r17,r3,r17
10004834:	1080fcc4 	addi	r2,r2,1011
10004838:	0087c83a 	sub	r3,zero,r2
1000483c:	000f883a 	mov	r7,zero
10004840:	003f8006 	br	10004644 <__alt_data_end+0xf8004644>
10004844:	0023883a 	mov	r17,zero
10004848:	0029883a 	mov	r20,zero
1000484c:	01c00044 	movi	r7,1
10004850:	003f7c06 	br	10004644 <__alt_data_end+0xf8004644>
10004854:	01c000c4 	movi	r7,3
10004858:	003f7a06 	br	10004644 <__alt_data_end+0xf8004644>
1000485c:	02400104 	movi	r9,4
10004860:	0021883a 	mov	r16,zero
10004864:	002b883a 	mov	r21,zero
10004868:	01400044 	movi	r5,1
1000486c:	003f6306 	br	100045fc <__alt_data_end+0xf80045fc>
10004870:	02400304 	movi	r9,12
10004874:	014000c4 	movi	r5,3
10004878:	003f6006 	br	100045fc <__alt_data_end+0xf80045fc>
1000487c:	04000434 	movhi	r16,16
10004880:	0009883a 	mov	r4,zero
10004884:	843fffc4 	addi	r16,r16,-1
10004888:	057fffc4 	movi	r21,-1
1000488c:	0081ffc4 	movi	r2,2047
10004890:	003f9b06 	br	10004700 <__alt_data_end+0xf8004700>
10004894:	00c00044 	movi	r3,1
10004898:	1887c83a 	sub	r3,r3,r2
1000489c:	01000e04 	movi	r4,56
100048a0:	20c1530e 	bge	r4,r3,10004df0 <__divdf3+0x86c>
100048a4:	9900004c 	andi	r4,r19,1
100048a8:	0005883a 	mov	r2,zero
100048ac:	0021883a 	mov	r16,zero
100048b0:	002b883a 	mov	r21,zero
100048b4:	003f9206 	br	10004700 <__alt_data_end+0xf8004700>
100048b8:	8c012e36 	bltu	r17,r16,10004d74 <__divdf3+0x7f0>
100048bc:	84412c26 	beq	r16,r17,10004d70 <__divdf3+0x7ec>
100048c0:	a82f883a 	mov	r23,r21
100048c4:	18ffffc4 	addi	r3,r3,-1
100048c8:	002b883a 	mov	r21,zero
100048cc:	a004d63a 	srli	r2,r20,24
100048d0:	8822923a 	slli	r17,r17,8
100048d4:	a028923a 	slli	r20,r20,8
100048d8:	8009883a 	mov	r4,r16
100048dc:	88acb03a 	or	r22,r17,r2
100048e0:	dd000015 	stw	r20,0(sp)
100048e4:	b028d43a 	srli	r20,r22,16
100048e8:	d8c00215 	stw	r3,8(sp)
100048ec:	b4bfffcc 	andi	r18,r22,65535
100048f0:	a00b883a 	mov	r5,r20
100048f4:	00044c80 	call	100044c8 <__udivsi3>
100048f8:	100b883a 	mov	r5,r2
100048fc:	9009883a 	mov	r4,r18
10004900:	1023883a 	mov	r17,r2
10004904:	00052300 	call	10005230 <__mulsi3>
10004908:	8009883a 	mov	r4,r16
1000490c:	a00b883a 	mov	r5,r20
10004910:	1039883a 	mov	fp,r2
10004914:	000452c0 	call	1000452c <__umodsi3>
10004918:	1004943a 	slli	r2,r2,16
1000491c:	b808d43a 	srli	r4,r23,16
10004920:	d8c00217 	ldw	r3,8(sp)
10004924:	2084b03a 	or	r2,r4,r2
10004928:	1700062e 	bgeu	r2,fp,10004944 <__divdf3+0x3c0>
1000492c:	1585883a 	add	r2,r2,r22
10004930:	893fffc4 	addi	r4,r17,-1
10004934:	15811d36 	bltu	r2,r22,10004dac <__divdf3+0x828>
10004938:	17011c2e 	bgeu	r2,fp,10004dac <__divdf3+0x828>
1000493c:	8c7fff84 	addi	r17,r17,-2
10004940:	1585883a 	add	r2,r2,r22
10004944:	1739c83a 	sub	fp,r2,fp
10004948:	a00b883a 	mov	r5,r20
1000494c:	e009883a 	mov	r4,fp
10004950:	d8c00215 	stw	r3,8(sp)
10004954:	00044c80 	call	100044c8 <__udivsi3>
10004958:	100b883a 	mov	r5,r2
1000495c:	9009883a 	mov	r4,r18
10004960:	1021883a 	mov	r16,r2
10004964:	00052300 	call	10005230 <__mulsi3>
10004968:	a00b883a 	mov	r5,r20
1000496c:	e009883a 	mov	r4,fp
10004970:	d8800415 	stw	r2,16(sp)
10004974:	000452c0 	call	1000452c <__umodsi3>
10004978:	1004943a 	slli	r2,r2,16
1000497c:	da000417 	ldw	r8,16(sp)
10004980:	bdffffcc 	andi	r23,r23,65535
10004984:	b884b03a 	or	r2,r23,r2
10004988:	d8c00217 	ldw	r3,8(sp)
1000498c:	1200062e 	bgeu	r2,r8,100049a8 <__divdf3+0x424>
10004990:	1585883a 	add	r2,r2,r22
10004994:	813fffc4 	addi	r4,r16,-1
10004998:	15810236 	bltu	r2,r22,10004da4 <__divdf3+0x820>
1000499c:	1201012e 	bgeu	r2,r8,10004da4 <__divdf3+0x820>
100049a0:	843fff84 	addi	r16,r16,-2
100049a4:	1585883a 	add	r2,r2,r22
100049a8:	8822943a 	slli	r17,r17,16
100049ac:	d9800017 	ldw	r6,0(sp)
100049b0:	1211c83a 	sub	r8,r2,r8
100049b4:	8c22b03a 	or	r17,r17,r16
100049b8:	373fffcc 	andi	fp,r6,65535
100049bc:	8abfffcc 	andi	r10,r17,65535
100049c0:	8820d43a 	srli	r16,r17,16
100049c4:	5009883a 	mov	r4,r10
100049c8:	e00b883a 	mov	r5,fp
100049cc:	302ed43a 	srli	r23,r6,16
100049d0:	d8c00215 	stw	r3,8(sp)
100049d4:	da000415 	stw	r8,16(sp)
100049d8:	da800115 	stw	r10,4(sp)
100049dc:	00052300 	call	10005230 <__mulsi3>
100049e0:	800b883a 	mov	r5,r16
100049e4:	e009883a 	mov	r4,fp
100049e8:	d8800515 	stw	r2,20(sp)
100049ec:	00052300 	call	10005230 <__mulsi3>
100049f0:	8009883a 	mov	r4,r16
100049f4:	b80b883a 	mov	r5,r23
100049f8:	d8800315 	stw	r2,12(sp)
100049fc:	00052300 	call	10005230 <__mulsi3>
10004a00:	da800117 	ldw	r10,4(sp)
10004a04:	b80b883a 	mov	r5,r23
10004a08:	1021883a 	mov	r16,r2
10004a0c:	5009883a 	mov	r4,r10
10004a10:	00052300 	call	10005230 <__mulsi3>
10004a14:	d9c00517 	ldw	r7,20(sp)
10004a18:	da400317 	ldw	r9,12(sp)
10004a1c:	d8c00217 	ldw	r3,8(sp)
10004a20:	3808d43a 	srli	r4,r7,16
10004a24:	1245883a 	add	r2,r2,r9
10004a28:	da000417 	ldw	r8,16(sp)
10004a2c:	2085883a 	add	r2,r4,r2
10004a30:	1240022e 	bgeu	r2,r9,10004a3c <__divdf3+0x4b8>
10004a34:	01000074 	movhi	r4,1
10004a38:	8121883a 	add	r16,r16,r4
10004a3c:	1008d43a 	srli	r4,r2,16
10004a40:	1004943a 	slli	r2,r2,16
10004a44:	39ffffcc 	andi	r7,r7,65535
10004a48:	2409883a 	add	r4,r4,r16
10004a4c:	11c5883a 	add	r2,r2,r7
10004a50:	4100bb36 	bltu	r8,r4,10004d40 <__divdf3+0x7bc>
10004a54:	4100d726 	beq	r8,r4,10004db4 <__divdf3+0x830>
10004a58:	4109c83a 	sub	r4,r8,r4
10004a5c:	a8a1c83a 	sub	r16,r21,r2
10004a60:	ac2b803a 	cmpltu	r21,r21,r16
10004a64:	256bc83a 	sub	r21,r4,r21
10004a68:	b540d926 	beq	r22,r21,10004dd0 <__divdf3+0x84c>
10004a6c:	a00b883a 	mov	r5,r20
10004a70:	a809883a 	mov	r4,r21
10004a74:	d8c00215 	stw	r3,8(sp)
10004a78:	00044c80 	call	100044c8 <__udivsi3>
10004a7c:	100b883a 	mov	r5,r2
10004a80:	9009883a 	mov	r4,r18
10004a84:	d8800515 	stw	r2,20(sp)
10004a88:	00052300 	call	10005230 <__mulsi3>
10004a8c:	a809883a 	mov	r4,r21
10004a90:	a00b883a 	mov	r5,r20
10004a94:	d8800415 	stw	r2,16(sp)
10004a98:	000452c0 	call	1000452c <__umodsi3>
10004a9c:	1004943a 	slli	r2,r2,16
10004aa0:	8008d43a 	srli	r4,r16,16
10004aa4:	da000417 	ldw	r8,16(sp)
10004aa8:	d8c00217 	ldw	r3,8(sp)
10004aac:	2084b03a 	or	r2,r4,r2
10004ab0:	d9c00517 	ldw	r7,20(sp)
10004ab4:	1200062e 	bgeu	r2,r8,10004ad0 <__divdf3+0x54c>
10004ab8:	1585883a 	add	r2,r2,r22
10004abc:	393fffc4 	addi	r4,r7,-1
10004ac0:	1580c536 	bltu	r2,r22,10004dd8 <__divdf3+0x854>
10004ac4:	1200c42e 	bgeu	r2,r8,10004dd8 <__divdf3+0x854>
10004ac8:	39ffff84 	addi	r7,r7,-2
10004acc:	1585883a 	add	r2,r2,r22
10004ad0:	122bc83a 	sub	r21,r2,r8
10004ad4:	a00b883a 	mov	r5,r20
10004ad8:	a809883a 	mov	r4,r21
10004adc:	d8c00215 	stw	r3,8(sp)
10004ae0:	d9c00515 	stw	r7,20(sp)
10004ae4:	00044c80 	call	100044c8 <__udivsi3>
10004ae8:	9009883a 	mov	r4,r18
10004aec:	100b883a 	mov	r5,r2
10004af0:	d8800415 	stw	r2,16(sp)
10004af4:	00052300 	call	10005230 <__mulsi3>
10004af8:	a809883a 	mov	r4,r21
10004afc:	a00b883a 	mov	r5,r20
10004b00:	1025883a 	mov	r18,r2
10004b04:	000452c0 	call	1000452c <__umodsi3>
10004b08:	1004943a 	slli	r2,r2,16
10004b0c:	813fffcc 	andi	r4,r16,65535
10004b10:	d8c00217 	ldw	r3,8(sp)
10004b14:	20a0b03a 	or	r16,r4,r2
10004b18:	d9c00517 	ldw	r7,20(sp)
10004b1c:	da000417 	ldw	r8,16(sp)
10004b20:	8480062e 	bgeu	r16,r18,10004b3c <__divdf3+0x5b8>
10004b24:	85a1883a 	add	r16,r16,r22
10004b28:	40bfffc4 	addi	r2,r8,-1
10004b2c:	8580ac36 	bltu	r16,r22,10004de0 <__divdf3+0x85c>
10004b30:	8480ab2e 	bgeu	r16,r18,10004de0 <__divdf3+0x85c>
10004b34:	423fff84 	addi	r8,r8,-2
10004b38:	85a1883a 	add	r16,r16,r22
10004b3c:	3804943a 	slli	r2,r7,16
10004b40:	84a1c83a 	sub	r16,r16,r18
10004b44:	e009883a 	mov	r4,fp
10004b48:	1228b03a 	or	r20,r2,r8
10004b4c:	a1ffffcc 	andi	r7,r20,65535
10004b50:	a024d43a 	srli	r18,r20,16
10004b54:	380b883a 	mov	r5,r7
10004b58:	d8c00215 	stw	r3,8(sp)
10004b5c:	d9c00515 	stw	r7,20(sp)
10004b60:	00052300 	call	10005230 <__mulsi3>
10004b64:	900b883a 	mov	r5,r18
10004b68:	e009883a 	mov	r4,fp
10004b6c:	102b883a 	mov	r21,r2
10004b70:	00052300 	call	10005230 <__mulsi3>
10004b74:	900b883a 	mov	r5,r18
10004b78:	b809883a 	mov	r4,r23
10004b7c:	1039883a 	mov	fp,r2
10004b80:	00052300 	call	10005230 <__mulsi3>
10004b84:	d9c00517 	ldw	r7,20(sp)
10004b88:	b80b883a 	mov	r5,r23
10004b8c:	1025883a 	mov	r18,r2
10004b90:	3809883a 	mov	r4,r7
10004b94:	00052300 	call	10005230 <__mulsi3>
10004b98:	a808d43a 	srli	r4,r21,16
10004b9c:	1705883a 	add	r2,r2,fp
10004ba0:	d8c00217 	ldw	r3,8(sp)
10004ba4:	2085883a 	add	r2,r4,r2
10004ba8:	1700022e 	bgeu	r2,fp,10004bb4 <__divdf3+0x630>
10004bac:	01000074 	movhi	r4,1
10004bb0:	9125883a 	add	r18,r18,r4
10004bb4:	1008d43a 	srli	r4,r2,16
10004bb8:	1004943a 	slli	r2,r2,16
10004bbc:	ad7fffcc 	andi	r21,r21,65535
10004bc0:	2489883a 	add	r4,r4,r18
10004bc4:	1545883a 	add	r2,r2,r21
10004bc8:	81003836 	bltu	r16,r4,10004cac <__divdf3+0x728>
10004bcc:	81003626 	beq	r16,r4,10004ca8 <__divdf3+0x724>
10004bd0:	a5000054 	ori	r20,r20,1
10004bd4:	1880ffc4 	addi	r2,r3,1023
10004bd8:	00bf2e0e 	bge	zero,r2,10004894 <__alt_data_end+0xf8004894>
10004bdc:	a10001cc 	andi	r4,r20,7
10004be0:	20000726 	beq	r4,zero,10004c00 <__divdf3+0x67c>
10004be4:	a10003cc 	andi	r4,r20,15
10004be8:	01400104 	movi	r5,4
10004bec:	21400426 	beq	r4,r5,10004c00 <__divdf3+0x67c>
10004bf0:	a149883a 	add	r4,r20,r5
10004bf4:	2529803a 	cmpltu	r20,r4,r20
10004bf8:	8d23883a 	add	r17,r17,r20
10004bfc:	2029883a 	mov	r20,r4
10004c00:	8900402c 	andhi	r4,r17,256
10004c04:	20000426 	beq	r4,zero,10004c18 <__divdf3+0x694>
10004c08:	18810004 	addi	r2,r3,1024
10004c0c:	00ffc034 	movhi	r3,65280
10004c10:	18ffffc4 	addi	r3,r3,-1
10004c14:	88e2703a 	and	r17,r17,r3
10004c18:	00c1ff84 	movi	r3,2046
10004c1c:	18beb416 	blt	r3,r2,100046f0 <__alt_data_end+0xf80046f0>
10004c20:	a028d0fa 	srli	r20,r20,3
10004c24:	882a977a 	slli	r21,r17,29
10004c28:	8820927a 	slli	r16,r17,9
10004c2c:	1081ffcc 	andi	r2,r2,2047
10004c30:	ad2ab03a 	or	r21,r21,r20
10004c34:	8020d33a 	srli	r16,r16,12
10004c38:	9900004c 	andi	r4,r19,1
10004c3c:	003eb006 	br	10004700 <__alt_data_end+0xf8004700>
10004c40:	8080022c 	andhi	r2,r16,8
10004c44:	10001226 	beq	r2,zero,10004c90 <__divdf3+0x70c>
10004c48:	8880022c 	andhi	r2,r17,8
10004c4c:	1000101e 	bne	r2,zero,10004c90 <__divdf3+0x70c>
10004c50:	00800434 	movhi	r2,16
10004c54:	8c000234 	orhi	r16,r17,8
10004c58:	10bfffc4 	addi	r2,r2,-1
10004c5c:	b809883a 	mov	r4,r23
10004c60:	80a0703a 	and	r16,r16,r2
10004c64:	a02b883a 	mov	r21,r20
10004c68:	003f0806 	br	1000488c <__alt_data_end+0xf800488c>
10004c6c:	008000c4 	movi	r2,3
10004c70:	3880b126 	beq	r7,r2,10004f38 <__divdf3+0x9b4>
10004c74:	00800044 	movi	r2,1
10004c78:	38805b1e 	bne	r7,r2,10004de8 <__divdf3+0x864>
10004c7c:	e009883a 	mov	r4,fp
10004c80:	0005883a 	mov	r2,zero
10004c84:	0021883a 	mov	r16,zero
10004c88:	002b883a 	mov	r21,zero
10004c8c:	003e9c06 	br	10004700 <__alt_data_end+0xf8004700>
10004c90:	00800434 	movhi	r2,16
10004c94:	84000234 	orhi	r16,r16,8
10004c98:	10bfffc4 	addi	r2,r2,-1
10004c9c:	b009883a 	mov	r4,r22
10004ca0:	80a0703a 	and	r16,r16,r2
10004ca4:	003ef906 	br	1000488c <__alt_data_end+0xf800488c>
10004ca8:	103fca26 	beq	r2,zero,10004bd4 <__alt_data_end+0xf8004bd4>
10004cac:	b421883a 	add	r16,r22,r16
10004cb0:	a17fffc4 	addi	r5,r20,-1
10004cb4:	8580422e 	bgeu	r16,r22,10004dc0 <__divdf3+0x83c>
10004cb8:	2829883a 	mov	r20,r5
10004cbc:	813fc41e 	bne	r16,r4,10004bd0 <__alt_data_end+0xf8004bd0>
10004cc0:	d9800017 	ldw	r6,0(sp)
10004cc4:	30bfc21e 	bne	r6,r2,10004bd0 <__alt_data_end+0xf8004bd0>
10004cc8:	003fc206 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004ccc:	143ff604 	addi	r16,r2,-40
10004cd0:	8c20983a 	sll	r16,r17,r16
10004cd4:	002b883a 	mov	r21,zero
10004cd8:	003eb406 	br	100047ac <__alt_data_end+0xf80047ac>
10004cdc:	d9800215 	stw	r6,8(sp)
10004ce0:	d9c00515 	stw	r7,20(sp)
10004ce4:	da000415 	stw	r8,16(sp)
10004ce8:	00051cc0 	call	100051cc <__clzsi2>
10004cec:	10800804 	addi	r2,r2,32
10004cf0:	da000417 	ldw	r8,16(sp)
10004cf4:	d9c00517 	ldw	r7,20(sp)
10004cf8:	d9800217 	ldw	r6,8(sp)
10004cfc:	003ea106 	br	10004784 <__alt_data_end+0xf8004784>
10004d00:	147ff604 	addi	r17,r2,-40
10004d04:	3462983a 	sll	r17,r6,r17
10004d08:	0029883a 	mov	r20,zero
10004d0c:	003ec906 	br	10004834 <__alt_data_end+0xf8004834>
10004d10:	3009883a 	mov	r4,r6
10004d14:	d9400115 	stw	r5,4(sp)
10004d18:	d9800215 	stw	r6,8(sp)
10004d1c:	da000415 	stw	r8,16(sp)
10004d20:	da400315 	stw	r9,12(sp)
10004d24:	00051cc0 	call	100051cc <__clzsi2>
10004d28:	10800804 	addi	r2,r2,32
10004d2c:	da400317 	ldw	r9,12(sp)
10004d30:	da000417 	ldw	r8,16(sp)
10004d34:	d9800217 	ldw	r6,8(sp)
10004d38:	d9400117 	ldw	r5,4(sp)
10004d3c:	003eb306 	br	1000480c <__alt_data_end+0xf800480c>
10004d40:	d9800017 	ldw	r6,0(sp)
10004d44:	a9ab883a 	add	r21,r21,r6
10004d48:	a98b803a 	cmpltu	r5,r21,r6
10004d4c:	2d8b883a 	add	r5,r5,r22
10004d50:	2a11883a 	add	r8,r5,r8
10004d54:	897fffc4 	addi	r5,r17,-1
10004d58:	b2000c2e 	bgeu	r22,r8,10004d8c <__divdf3+0x808>
10004d5c:	41003f36 	bltu	r8,r4,10004e5c <__divdf3+0x8d8>
10004d60:	22006c26 	beq	r4,r8,10004f14 <__divdf3+0x990>
10004d64:	4109c83a 	sub	r4,r8,r4
10004d68:	2823883a 	mov	r17,r5
10004d6c:	003f3b06 	br	10004a5c <__alt_data_end+0xf8004a5c>
10004d70:	ad3ed336 	bltu	r21,r20,100048c0 <__alt_data_end+0xf80048c0>
10004d74:	a804d07a 	srli	r2,r21,1
10004d78:	802e97fa 	slli	r23,r16,31
10004d7c:	a82a97fa 	slli	r21,r21,31
10004d80:	8020d07a 	srli	r16,r16,1
10004d84:	b8aeb03a 	or	r23,r23,r2
10004d88:	003ed006 	br	100048cc <__alt_data_end+0xf80048cc>
10004d8c:	b23ff51e 	bne	r22,r8,10004d64 <__alt_data_end+0xf8004d64>
10004d90:	d9800017 	ldw	r6,0(sp)
10004d94:	a9bff12e 	bgeu	r21,r6,10004d5c <__alt_data_end+0xf8004d5c>
10004d98:	b109c83a 	sub	r4,r22,r4
10004d9c:	2823883a 	mov	r17,r5
10004da0:	003f2e06 	br	10004a5c <__alt_data_end+0xf8004a5c>
10004da4:	2021883a 	mov	r16,r4
10004da8:	003eff06 	br	100049a8 <__alt_data_end+0xf80049a8>
10004dac:	2023883a 	mov	r17,r4
10004db0:	003ee406 	br	10004944 <__alt_data_end+0xf8004944>
10004db4:	a8bfe236 	bltu	r21,r2,10004d40 <__alt_data_end+0xf8004d40>
10004db8:	0009883a 	mov	r4,zero
10004dbc:	003f2706 	br	10004a5c <__alt_data_end+0xf8004a5c>
10004dc0:	81002d36 	bltu	r16,r4,10004e78 <__divdf3+0x8f4>
10004dc4:	24005626 	beq	r4,r16,10004f20 <__divdf3+0x99c>
10004dc8:	2829883a 	mov	r20,r5
10004dcc:	003f8006 	br	10004bd0 <__alt_data_end+0xf8004bd0>
10004dd0:	053fffc4 	movi	r20,-1
10004dd4:	003f7f06 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004dd8:	200f883a 	mov	r7,r4
10004ddc:	003f3c06 	br	10004ad0 <__alt_data_end+0xf8004ad0>
10004de0:	1011883a 	mov	r8,r2
10004de4:	003f5506 	br	10004b3c <__alt_data_end+0xf8004b3c>
10004de8:	e027883a 	mov	r19,fp
10004dec:	003f7906 	br	10004bd4 <__alt_data_end+0xf8004bd4>
10004df0:	010007c4 	movi	r4,31
10004df4:	20c02816 	blt	r4,r3,10004e98 <__divdf3+0x914>
10004df8:	00800804 	movi	r2,32
10004dfc:	10c5c83a 	sub	r2,r2,r3
10004e00:	888a983a 	sll	r5,r17,r2
10004e04:	a0c8d83a 	srl	r4,r20,r3
10004e08:	a084983a 	sll	r2,r20,r2
10004e0c:	88e2d83a 	srl	r17,r17,r3
10004e10:	2906b03a 	or	r3,r5,r4
10004e14:	1004c03a 	cmpne	r2,r2,zero
10004e18:	1886b03a 	or	r3,r3,r2
10004e1c:	188001cc 	andi	r2,r3,7
10004e20:	10000726 	beq	r2,zero,10004e40 <__divdf3+0x8bc>
10004e24:	188003cc 	andi	r2,r3,15
10004e28:	01000104 	movi	r4,4
10004e2c:	11000426 	beq	r2,r4,10004e40 <__divdf3+0x8bc>
10004e30:	1805883a 	mov	r2,r3
10004e34:	10c00104 	addi	r3,r2,4
10004e38:	1885803a 	cmpltu	r2,r3,r2
10004e3c:	88a3883a 	add	r17,r17,r2
10004e40:	8880202c 	andhi	r2,r17,128
10004e44:	10002926 	beq	r2,zero,10004eec <__divdf3+0x968>
10004e48:	9900004c 	andi	r4,r19,1
10004e4c:	00800044 	movi	r2,1
10004e50:	0021883a 	mov	r16,zero
10004e54:	002b883a 	mov	r21,zero
10004e58:	003e2906 	br	10004700 <__alt_data_end+0xf8004700>
10004e5c:	d9800017 	ldw	r6,0(sp)
10004e60:	8c7fff84 	addi	r17,r17,-2
10004e64:	a9ab883a 	add	r21,r21,r6
10004e68:	a98b803a 	cmpltu	r5,r21,r6
10004e6c:	2d8b883a 	add	r5,r5,r22
10004e70:	2a11883a 	add	r8,r5,r8
10004e74:	003ef806 	br	10004a58 <__alt_data_end+0xf8004a58>
10004e78:	d9800017 	ldw	r6,0(sp)
10004e7c:	318f883a 	add	r7,r6,r6
10004e80:	398b803a 	cmpltu	r5,r7,r6
10004e84:	2d8d883a 	add	r6,r5,r22
10004e88:	81a1883a 	add	r16,r16,r6
10004e8c:	a17fff84 	addi	r5,r20,-2
10004e90:	d9c00015 	stw	r7,0(sp)
10004e94:	003f8806 	br	10004cb8 <__alt_data_end+0xf8004cb8>
10004e98:	013ff844 	movi	r4,-31
10004e9c:	2085c83a 	sub	r2,r4,r2
10004ea0:	8888d83a 	srl	r4,r17,r2
10004ea4:	00800804 	movi	r2,32
10004ea8:	18802126 	beq	r3,r2,10004f30 <__divdf3+0x9ac>
10004eac:	04001004 	movi	r16,64
10004eb0:	80c7c83a 	sub	r3,r16,r3
10004eb4:	88e0983a 	sll	r16,r17,r3
10004eb8:	8504b03a 	or	r2,r16,r20
10004ebc:	1004c03a 	cmpne	r2,r2,zero
10004ec0:	2084b03a 	or	r2,r4,r2
10004ec4:	144001cc 	andi	r17,r2,7
10004ec8:	88000d1e 	bne	r17,zero,10004f00 <__divdf3+0x97c>
10004ecc:	0021883a 	mov	r16,zero
10004ed0:	102ad0fa 	srli	r21,r2,3
10004ed4:	9900004c 	andi	r4,r19,1
10004ed8:	0005883a 	mov	r2,zero
10004edc:	ac6ab03a 	or	r21,r21,r17
10004ee0:	003e0706 	br	10004700 <__alt_data_end+0xf8004700>
10004ee4:	1007883a 	mov	r3,r2
10004ee8:	0023883a 	mov	r17,zero
10004eec:	8820927a 	slli	r16,r17,9
10004ef0:	1805883a 	mov	r2,r3
10004ef4:	8822977a 	slli	r17,r17,29
10004ef8:	8020d33a 	srli	r16,r16,12
10004efc:	003ff406 	br	10004ed0 <__alt_data_end+0xf8004ed0>
10004f00:	10c003cc 	andi	r3,r2,15
10004f04:	01000104 	movi	r4,4
10004f08:	193ff626 	beq	r3,r4,10004ee4 <__alt_data_end+0xf8004ee4>
10004f0c:	0023883a 	mov	r17,zero
10004f10:	003fc806 	br	10004e34 <__alt_data_end+0xf8004e34>
10004f14:	a8bfd136 	bltu	r21,r2,10004e5c <__alt_data_end+0xf8004e5c>
10004f18:	2823883a 	mov	r17,r5
10004f1c:	003fa606 	br	10004db8 <__alt_data_end+0xf8004db8>
10004f20:	d9800017 	ldw	r6,0(sp)
10004f24:	30bfd436 	bltu	r6,r2,10004e78 <__alt_data_end+0xf8004e78>
10004f28:	2829883a 	mov	r20,r5
10004f2c:	003f6406 	br	10004cc0 <__alt_data_end+0xf8004cc0>
10004f30:	0021883a 	mov	r16,zero
10004f34:	003fe006 	br	10004eb8 <__alt_data_end+0xf8004eb8>
10004f38:	00800434 	movhi	r2,16
10004f3c:	8c000234 	orhi	r16,r17,8
10004f40:	10bfffc4 	addi	r2,r2,-1
10004f44:	e009883a 	mov	r4,fp
10004f48:	80a0703a 	and	r16,r16,r2
10004f4c:	a02b883a 	mov	r21,r20
10004f50:	003e4e06 	br	1000488c <__alt_data_end+0xf800488c>

10004f54 <__ledf2>:
10004f54:	2804d53a 	srli	r2,r5,20
10004f58:	3810d53a 	srli	r8,r7,20
10004f5c:	00c00434 	movhi	r3,16
10004f60:	18ffffc4 	addi	r3,r3,-1
10004f64:	1081ffcc 	andi	r2,r2,2047
10004f68:	0241ffc4 	movi	r9,2047
10004f6c:	28d4703a 	and	r10,r5,r3
10004f70:	4201ffcc 	andi	r8,r8,2047
10004f74:	38c6703a 	and	r3,r7,r3
10004f78:	280ad7fa 	srli	r5,r5,31
10004f7c:	380ed7fa 	srli	r7,r7,31
10004f80:	12401f26 	beq	r2,r9,10005000 <__ledf2+0xac>
10004f84:	0241ffc4 	movi	r9,2047
10004f88:	42401426 	beq	r8,r9,10004fdc <__ledf2+0x88>
10004f8c:	1000091e 	bne	r2,zero,10004fb4 <__ledf2+0x60>
10004f90:	2296b03a 	or	r11,r4,r10
10004f94:	5813003a 	cmpeq	r9,r11,zero
10004f98:	29403fcc 	andi	r5,r5,255
10004f9c:	40000a1e 	bne	r8,zero,10004fc8 <__ledf2+0x74>
10004fa0:	30d8b03a 	or	r12,r6,r3
10004fa4:	6000081e 	bne	r12,zero,10004fc8 <__ledf2+0x74>
10004fa8:	0005883a 	mov	r2,zero
10004fac:	5800111e 	bne	r11,zero,10004ff4 <__ledf2+0xa0>
10004fb0:	f800283a 	ret
10004fb4:	29403fcc 	andi	r5,r5,255
10004fb8:	40000c1e 	bne	r8,zero,10004fec <__ledf2+0x98>
10004fbc:	30d2b03a 	or	r9,r6,r3
10004fc0:	48000c26 	beq	r9,zero,10004ff4 <__ledf2+0xa0>
10004fc4:	0013883a 	mov	r9,zero
10004fc8:	39c03fcc 	andi	r7,r7,255
10004fcc:	48000826 	beq	r9,zero,10004ff0 <__ledf2+0x9c>
10004fd0:	38001126 	beq	r7,zero,10005018 <__ledf2+0xc4>
10004fd4:	00800044 	movi	r2,1
10004fd8:	f800283a 	ret
10004fdc:	30d2b03a 	or	r9,r6,r3
10004fe0:	483fea26 	beq	r9,zero,10004f8c <__alt_data_end+0xf8004f8c>
10004fe4:	00800084 	movi	r2,2
10004fe8:	f800283a 	ret
10004fec:	39c03fcc 	andi	r7,r7,255
10004ff0:	39400726 	beq	r7,r5,10005010 <__ledf2+0xbc>
10004ff4:	2800081e 	bne	r5,zero,10005018 <__ledf2+0xc4>
10004ff8:	00800044 	movi	r2,1
10004ffc:	f800283a 	ret
10005000:	2292b03a 	or	r9,r4,r10
10005004:	483fdf26 	beq	r9,zero,10004f84 <__alt_data_end+0xf8004f84>
10005008:	00800084 	movi	r2,2
1000500c:	f800283a 	ret
10005010:	4080030e 	bge	r8,r2,10005020 <__ledf2+0xcc>
10005014:	383fef26 	beq	r7,zero,10004fd4 <__alt_data_end+0xf8004fd4>
10005018:	00bfffc4 	movi	r2,-1
1000501c:	f800283a 	ret
10005020:	123feb16 	blt	r2,r8,10004fd0 <__alt_data_end+0xf8004fd0>
10005024:	1abff336 	bltu	r3,r10,10004ff4 <__alt_data_end+0xf8004ff4>
10005028:	50c00326 	beq	r10,r3,10005038 <__ledf2+0xe4>
1000502c:	50c0042e 	bgeu	r10,r3,10005040 <__ledf2+0xec>
10005030:	283fe81e 	bne	r5,zero,10004fd4 <__alt_data_end+0xf8004fd4>
10005034:	003ff806 	br	10005018 <__alt_data_end+0xf8005018>
10005038:	313fee36 	bltu	r6,r4,10004ff4 <__alt_data_end+0xf8004ff4>
1000503c:	21bffc36 	bltu	r4,r6,10005030 <__alt_data_end+0xf8005030>
10005040:	0005883a 	mov	r2,zero
10005044:	f800283a 	ret

10005048 <__floatsidf>:
10005048:	defffd04 	addi	sp,sp,-12
1000504c:	dfc00215 	stw	ra,8(sp)
10005050:	dc400115 	stw	r17,4(sp)
10005054:	dc000015 	stw	r16,0(sp)
10005058:	20002b26 	beq	r4,zero,10005108 <__floatsidf+0xc0>
1000505c:	2023883a 	mov	r17,r4
10005060:	2020d7fa 	srli	r16,r4,31
10005064:	20002d16 	blt	r4,zero,1000511c <__floatsidf+0xd4>
10005068:	8809883a 	mov	r4,r17
1000506c:	00051cc0 	call	100051cc <__clzsi2>
10005070:	01410784 	movi	r5,1054
10005074:	288bc83a 	sub	r5,r5,r2
10005078:	01010cc4 	movi	r4,1075
1000507c:	2149c83a 	sub	r4,r4,r5
10005080:	00c007c4 	movi	r3,31
10005084:	1900160e 	bge	r3,r4,100050e0 <__floatsidf+0x98>
10005088:	00c104c4 	movi	r3,1043
1000508c:	1947c83a 	sub	r3,r3,r5
10005090:	88c6983a 	sll	r3,r17,r3
10005094:	00800434 	movhi	r2,16
10005098:	10bfffc4 	addi	r2,r2,-1
1000509c:	1886703a 	and	r3,r3,r2
100050a0:	2941ffcc 	andi	r5,r5,2047
100050a4:	800d883a 	mov	r6,r16
100050a8:	0005883a 	mov	r2,zero
100050ac:	280a953a 	slli	r5,r5,20
100050b0:	31803fcc 	andi	r6,r6,255
100050b4:	01000434 	movhi	r4,16
100050b8:	300c97fa 	slli	r6,r6,31
100050bc:	213fffc4 	addi	r4,r4,-1
100050c0:	1906703a 	and	r3,r3,r4
100050c4:	1946b03a 	or	r3,r3,r5
100050c8:	1986b03a 	or	r3,r3,r6
100050cc:	dfc00217 	ldw	ra,8(sp)
100050d0:	dc400117 	ldw	r17,4(sp)
100050d4:	dc000017 	ldw	r16,0(sp)
100050d8:	dec00304 	addi	sp,sp,12
100050dc:	f800283a 	ret
100050e0:	00c002c4 	movi	r3,11
100050e4:	1887c83a 	sub	r3,r3,r2
100050e8:	88c6d83a 	srl	r3,r17,r3
100050ec:	8904983a 	sll	r2,r17,r4
100050f0:	01000434 	movhi	r4,16
100050f4:	213fffc4 	addi	r4,r4,-1
100050f8:	2941ffcc 	andi	r5,r5,2047
100050fc:	1906703a 	and	r3,r3,r4
10005100:	800d883a 	mov	r6,r16
10005104:	003fe906 	br	100050ac <__alt_data_end+0xf80050ac>
10005108:	000d883a 	mov	r6,zero
1000510c:	000b883a 	mov	r5,zero
10005110:	0007883a 	mov	r3,zero
10005114:	0005883a 	mov	r2,zero
10005118:	003fe406 	br	100050ac <__alt_data_end+0xf80050ac>
1000511c:	0123c83a 	sub	r17,zero,r4
10005120:	003fd106 	br	10005068 <__alt_data_end+0xf8005068>

10005124 <__floatunsidf>:
10005124:	defffe04 	addi	sp,sp,-8
10005128:	dc000015 	stw	r16,0(sp)
1000512c:	dfc00115 	stw	ra,4(sp)
10005130:	2021883a 	mov	r16,r4
10005134:	20002226 	beq	r4,zero,100051c0 <__floatunsidf+0x9c>
10005138:	00051cc0 	call	100051cc <__clzsi2>
1000513c:	01010784 	movi	r4,1054
10005140:	2089c83a 	sub	r4,r4,r2
10005144:	01810cc4 	movi	r6,1075
10005148:	310dc83a 	sub	r6,r6,r4
1000514c:	00c007c4 	movi	r3,31
10005150:	1980120e 	bge	r3,r6,1000519c <__floatunsidf+0x78>
10005154:	00c104c4 	movi	r3,1043
10005158:	1907c83a 	sub	r3,r3,r4
1000515c:	80ca983a 	sll	r5,r16,r3
10005160:	00800434 	movhi	r2,16
10005164:	10bfffc4 	addi	r2,r2,-1
10005168:	2101ffcc 	andi	r4,r4,2047
1000516c:	0021883a 	mov	r16,zero
10005170:	288a703a 	and	r5,r5,r2
10005174:	2008953a 	slli	r4,r4,20
10005178:	00c00434 	movhi	r3,16
1000517c:	18ffffc4 	addi	r3,r3,-1
10005180:	28c6703a 	and	r3,r5,r3
10005184:	8005883a 	mov	r2,r16
10005188:	1906b03a 	or	r3,r3,r4
1000518c:	dfc00117 	ldw	ra,4(sp)
10005190:	dc000017 	ldw	r16,0(sp)
10005194:	dec00204 	addi	sp,sp,8
10005198:	f800283a 	ret
1000519c:	00c002c4 	movi	r3,11
100051a0:	188bc83a 	sub	r5,r3,r2
100051a4:	814ad83a 	srl	r5,r16,r5
100051a8:	00c00434 	movhi	r3,16
100051ac:	18ffffc4 	addi	r3,r3,-1
100051b0:	81a0983a 	sll	r16,r16,r6
100051b4:	2101ffcc 	andi	r4,r4,2047
100051b8:	28ca703a 	and	r5,r5,r3
100051bc:	003fed06 	br	10005174 <__alt_data_end+0xf8005174>
100051c0:	0009883a 	mov	r4,zero
100051c4:	000b883a 	mov	r5,zero
100051c8:	003fea06 	br	10005174 <__alt_data_end+0xf8005174>

100051cc <__clzsi2>:
100051cc:	00bfffd4 	movui	r2,65535
100051d0:	11000536 	bltu	r2,r4,100051e8 <__clzsi2+0x1c>
100051d4:	00803fc4 	movi	r2,255
100051d8:	11000f36 	bltu	r2,r4,10005218 <__clzsi2+0x4c>
100051dc:	00800804 	movi	r2,32
100051e0:	0007883a 	mov	r3,zero
100051e4:	00000506 	br	100051fc <__clzsi2+0x30>
100051e8:	00804034 	movhi	r2,256
100051ec:	10bfffc4 	addi	r2,r2,-1
100051f0:	11000c2e 	bgeu	r2,r4,10005224 <__clzsi2+0x58>
100051f4:	00800204 	movi	r2,8
100051f8:	00c00604 	movi	r3,24
100051fc:	20c8d83a 	srl	r4,r4,r3
10005200:	00c40074 	movhi	r3,4097
10005204:	18d14804 	addi	r3,r3,17696
10005208:	1909883a 	add	r4,r3,r4
1000520c:	20c00003 	ldbu	r3,0(r4)
10005210:	10c5c83a 	sub	r2,r2,r3
10005214:	f800283a 	ret
10005218:	00800604 	movi	r2,24
1000521c:	00c00204 	movi	r3,8
10005220:	003ff606 	br	100051fc <__alt_data_end+0xf80051fc>
10005224:	00800404 	movi	r2,16
10005228:	1007883a 	mov	r3,r2
1000522c:	003ff306 	br	100051fc <__alt_data_end+0xf80051fc>

10005230 <__mulsi3>:
10005230:	0005883a 	mov	r2,zero
10005234:	20000726 	beq	r4,zero,10005254 <__mulsi3+0x24>
10005238:	20c0004c 	andi	r3,r4,1
1000523c:	2008d07a 	srli	r4,r4,1
10005240:	18000126 	beq	r3,zero,10005248 <__mulsi3+0x18>
10005244:	1145883a 	add	r2,r2,r5
10005248:	294b883a 	add	r5,r5,r5
1000524c:	203ffa1e 	bne	r4,zero,10005238 <__alt_data_end+0xf8005238>
10005250:	f800283a 	ret
10005254:	f800283a 	ret

10005258 <clock>:
10005258:	00840074 	movhi	r2,4097
1000525c:	1098b504 	addi	r2,r2,25300
10005260:	11000017 	ldw	r4,0(r2)
10005264:	defffb04 	addi	sp,sp,-20
10005268:	d80b883a 	mov	r5,sp
1000526c:	dfc00415 	stw	ra,16(sp)
10005270:	00054f80 	call	100054f8 <_times_r>
10005274:	00ffffc4 	movi	r3,-1
10005278:	10c00726 	beq	r2,r3,10005298 <clock+0x40>
1000527c:	d8c00017 	ldw	r3,0(sp)
10005280:	d8800117 	ldw	r2,4(sp)
10005284:	1885883a 	add	r2,r3,r2
10005288:	d8c00217 	ldw	r3,8(sp)
1000528c:	10c7883a 	add	r3,r2,r3
10005290:	d8800317 	ldw	r2,12(sp)
10005294:	1885883a 	add	r2,r3,r2
10005298:	dfc00417 	ldw	ra,16(sp)
1000529c:	dec00504 	addi	sp,sp,20
100052a0:	f800283a 	ret

100052a4 <_printf_r>:
100052a4:	defffd04 	addi	sp,sp,-12
100052a8:	2805883a 	mov	r2,r5
100052ac:	dfc00015 	stw	ra,0(sp)
100052b0:	d9800115 	stw	r6,4(sp)
100052b4:	d9c00215 	stw	r7,8(sp)
100052b8:	21400217 	ldw	r5,8(r4)
100052bc:	d9c00104 	addi	r7,sp,4
100052c0:	100d883a 	mov	r6,r2
100052c4:	00055000 	call	10005500 <___vfprintf_internal_r>
100052c8:	dfc00017 	ldw	ra,0(sp)
100052cc:	dec00304 	addi	sp,sp,12
100052d0:	f800283a 	ret

100052d4 <printf>:
100052d4:	defffc04 	addi	sp,sp,-16
100052d8:	dfc00015 	stw	ra,0(sp)
100052dc:	d9400115 	stw	r5,4(sp)
100052e0:	d9800215 	stw	r6,8(sp)
100052e4:	d9c00315 	stw	r7,12(sp)
100052e8:	00840074 	movhi	r2,4097
100052ec:	1098b504 	addi	r2,r2,25300
100052f0:	10800017 	ldw	r2,0(r2)
100052f4:	200b883a 	mov	r5,r4
100052f8:	d9800104 	addi	r6,sp,4
100052fc:	11000217 	ldw	r4,8(r2)
10005300:	00077dc0 	call	100077dc <__vfprintf_internal>
10005304:	dfc00017 	ldw	ra,0(sp)
10005308:	dec00404 	addi	sp,sp,16
1000530c:	f800283a 	ret

10005310 <_puts_r>:
10005310:	defff604 	addi	sp,sp,-40
10005314:	dc000715 	stw	r16,28(sp)
10005318:	2021883a 	mov	r16,r4
1000531c:	2809883a 	mov	r4,r5
10005320:	dc400815 	stw	r17,32(sp)
10005324:	dfc00915 	stw	ra,36(sp)
10005328:	2823883a 	mov	r17,r5
1000532c:	00054600 	call	10005460 <strlen>
10005330:	10c00044 	addi	r3,r2,1
10005334:	d8800115 	stw	r2,4(sp)
10005338:	00840074 	movhi	r2,4097
1000533c:	10918904 	addi	r2,r2,17956
10005340:	d8800215 	stw	r2,8(sp)
10005344:	00800044 	movi	r2,1
10005348:	d8800315 	stw	r2,12(sp)
1000534c:	00800084 	movi	r2,2
10005350:	dc400015 	stw	r17,0(sp)
10005354:	d8c00615 	stw	r3,24(sp)
10005358:	dec00415 	stw	sp,16(sp)
1000535c:	d8800515 	stw	r2,20(sp)
10005360:	80000226 	beq	r16,zero,1000536c <_puts_r+0x5c>
10005364:	80800e17 	ldw	r2,56(r16)
10005368:	10001426 	beq	r2,zero,100053bc <_puts_r+0xac>
1000536c:	81400217 	ldw	r5,8(r16)
10005370:	2880030b 	ldhu	r2,12(r5)
10005374:	10c8000c 	andi	r3,r2,8192
10005378:	1800061e 	bne	r3,zero,10005394 <_puts_r+0x84>
1000537c:	29001917 	ldw	r4,100(r5)
10005380:	00f7ffc4 	movi	r3,-8193
10005384:	10880014 	ori	r2,r2,8192
10005388:	20c6703a 	and	r3,r4,r3
1000538c:	2880030d 	sth	r2,12(r5)
10005390:	28c01915 	stw	r3,100(r5)
10005394:	d9800404 	addi	r6,sp,16
10005398:	8009883a 	mov	r4,r16
1000539c:	0009d440 	call	10009d44 <__sfvwrite_r>
100053a0:	1000091e 	bne	r2,zero,100053c8 <_puts_r+0xb8>
100053a4:	00800284 	movi	r2,10
100053a8:	dfc00917 	ldw	ra,36(sp)
100053ac:	dc400817 	ldw	r17,32(sp)
100053b0:	dc000717 	ldw	r16,28(sp)
100053b4:	dec00a04 	addi	sp,sp,40
100053b8:	f800283a 	ret
100053bc:	8009883a 	mov	r4,r16
100053c0:	00098c00 	call	100098c0 <__sinit>
100053c4:	003fe906 	br	1000536c <__alt_data_end+0xf800536c>
100053c8:	00bfffc4 	movi	r2,-1
100053cc:	003ff606 	br	100053a8 <__alt_data_end+0xf80053a8>

100053d0 <puts>:
100053d0:	00840074 	movhi	r2,4097
100053d4:	1098b504 	addi	r2,r2,25300
100053d8:	200b883a 	mov	r5,r4
100053dc:	11000017 	ldw	r4,0(r2)
100053e0:	00053101 	jmpi	10005310 <_puts_r>

100053e4 <srand>:
100053e4:	00840074 	movhi	r2,4097
100053e8:	1098b504 	addi	r2,r2,25300
100053ec:	10800017 	ldw	r2,0(r2)
100053f0:	11002915 	stw	r4,164(r2)
100053f4:	10002a15 	stw	zero,168(r2)
100053f8:	f800283a 	ret

100053fc <rand>:
100053fc:	00840074 	movhi	r2,4097
10005400:	defffe04 	addi	sp,sp,-8
10005404:	1098b504 	addi	r2,r2,25300
10005408:	dc000015 	stw	r16,0(sp)
1000540c:	14000017 	ldw	r16,0(r2)
10005410:	dfc00115 	stw	ra,4(sp)
10005414:	01932574 	movhi	r6,19605
10005418:	81002917 	ldw	r4,164(r16)
1000541c:	81402a17 	ldw	r5,168(r16)
10005420:	01d614b4 	movhi	r7,22610
10005424:	319fcb44 	addi	r6,r6,32557
10005428:	39fd0b44 	addi	r7,r7,-3027
1000542c:	000ec280 	call	1000ec28 <__muldi3>
10005430:	11000044 	addi	r4,r2,1
10005434:	2085803a 	cmpltu	r2,r4,r2
10005438:	10c7883a 	add	r3,r2,r3
1000543c:	00a00034 	movhi	r2,32768
10005440:	10bfffc4 	addi	r2,r2,-1
10005444:	1884703a 	and	r2,r3,r2
10005448:	81002915 	stw	r4,164(r16)
1000544c:	80c02a15 	stw	r3,168(r16)
10005450:	dfc00117 	ldw	ra,4(sp)
10005454:	dc000017 	ldw	r16,0(sp)
10005458:	dec00204 	addi	sp,sp,8
1000545c:	f800283a 	ret

10005460 <strlen>:
10005460:	208000cc 	andi	r2,r4,3
10005464:	10002026 	beq	r2,zero,100054e8 <strlen+0x88>
10005468:	20800007 	ldb	r2,0(r4)
1000546c:	10002026 	beq	r2,zero,100054f0 <strlen+0x90>
10005470:	2005883a 	mov	r2,r4
10005474:	00000206 	br	10005480 <strlen+0x20>
10005478:	10c00007 	ldb	r3,0(r2)
1000547c:	18001826 	beq	r3,zero,100054e0 <strlen+0x80>
10005480:	10800044 	addi	r2,r2,1
10005484:	10c000cc 	andi	r3,r2,3
10005488:	183ffb1e 	bne	r3,zero,10005478 <__alt_data_end+0xf8005478>
1000548c:	10c00017 	ldw	r3,0(r2)
10005490:	01ffbff4 	movhi	r7,65279
10005494:	39ffbfc4 	addi	r7,r7,-257
10005498:	00ca303a 	nor	r5,zero,r3
1000549c:	01a02074 	movhi	r6,32897
100054a0:	19c7883a 	add	r3,r3,r7
100054a4:	31a02004 	addi	r6,r6,-32640
100054a8:	1946703a 	and	r3,r3,r5
100054ac:	1986703a 	and	r3,r3,r6
100054b0:	1800091e 	bne	r3,zero,100054d8 <strlen+0x78>
100054b4:	10800104 	addi	r2,r2,4
100054b8:	10c00017 	ldw	r3,0(r2)
100054bc:	19cb883a 	add	r5,r3,r7
100054c0:	00c6303a 	nor	r3,zero,r3
100054c4:	28c6703a 	and	r3,r5,r3
100054c8:	1986703a 	and	r3,r3,r6
100054cc:	183ff926 	beq	r3,zero,100054b4 <__alt_data_end+0xf80054b4>
100054d0:	00000106 	br	100054d8 <strlen+0x78>
100054d4:	10800044 	addi	r2,r2,1
100054d8:	10c00007 	ldb	r3,0(r2)
100054dc:	183ffd1e 	bne	r3,zero,100054d4 <__alt_data_end+0xf80054d4>
100054e0:	1105c83a 	sub	r2,r2,r4
100054e4:	f800283a 	ret
100054e8:	2005883a 	mov	r2,r4
100054ec:	003fe706 	br	1000548c <__alt_data_end+0xf800548c>
100054f0:	0005883a 	mov	r2,zero
100054f4:	f800283a 	ret

100054f8 <_times_r>:
100054f8:	2809883a 	mov	r4,r5
100054fc:	0011d801 	jmpi	10011d80 <times>

10005500 <___vfprintf_internal_r>:
10005500:	deffb804 	addi	sp,sp,-288
10005504:	dfc04715 	stw	ra,284(sp)
10005508:	ddc04515 	stw	r23,276(sp)
1000550c:	dd404315 	stw	r21,268(sp)
10005510:	d9002d15 	stw	r4,180(sp)
10005514:	282f883a 	mov	r23,r5
10005518:	302b883a 	mov	r21,r6
1000551c:	d9c02e15 	stw	r7,184(sp)
10005520:	df004615 	stw	fp,280(sp)
10005524:	dd804415 	stw	r22,272(sp)
10005528:	dd004215 	stw	r20,264(sp)
1000552c:	dcc04115 	stw	r19,260(sp)
10005530:	dc804015 	stw	r18,256(sp)
10005534:	dc403f15 	stw	r17,252(sp)
10005538:	dc003e15 	stw	r16,248(sp)
1000553c:	000a4400 	call	1000a440 <_localeconv_r>
10005540:	10800017 	ldw	r2,0(r2)
10005544:	1009883a 	mov	r4,r2
10005548:	d8803415 	stw	r2,208(sp)
1000554c:	00054600 	call	10005460 <strlen>
10005550:	d8803715 	stw	r2,220(sp)
10005554:	d8802d17 	ldw	r2,180(sp)
10005558:	10000226 	beq	r2,zero,10005564 <___vfprintf_internal_r+0x64>
1000555c:	10800e17 	ldw	r2,56(r2)
10005560:	1000fb26 	beq	r2,zero,10005950 <___vfprintf_internal_r+0x450>
10005564:	b880030b 	ldhu	r2,12(r23)
10005568:	10c8000c 	andi	r3,r2,8192
1000556c:	1800061e 	bne	r3,zero,10005588 <___vfprintf_internal_r+0x88>
10005570:	b9001917 	ldw	r4,100(r23)
10005574:	00f7ffc4 	movi	r3,-8193
10005578:	10880014 	ori	r2,r2,8192
1000557c:	20c6703a 	and	r3,r4,r3
10005580:	b880030d 	sth	r2,12(r23)
10005584:	b8c01915 	stw	r3,100(r23)
10005588:	10c0020c 	andi	r3,r2,8
1000558c:	1800c326 	beq	r3,zero,1000589c <___vfprintf_internal_r+0x39c>
10005590:	b8c00417 	ldw	r3,16(r23)
10005594:	1800c126 	beq	r3,zero,1000589c <___vfprintf_internal_r+0x39c>
10005598:	1080068c 	andi	r2,r2,26
1000559c:	00c00284 	movi	r3,10
100055a0:	10c0c626 	beq	r2,r3,100058bc <___vfprintf_internal_r+0x3bc>
100055a4:	d8c00404 	addi	r3,sp,16
100055a8:	05040074 	movhi	r20,4097
100055ac:	d9001e04 	addi	r4,sp,120
100055b0:	a5119a84 	addi	r20,r20,18026
100055b4:	d8c01e15 	stw	r3,120(sp)
100055b8:	d8002015 	stw	zero,128(sp)
100055bc:	d8001f15 	stw	zero,124(sp)
100055c0:	d8003315 	stw	zero,204(sp)
100055c4:	d8003615 	stw	zero,216(sp)
100055c8:	d8003815 	stw	zero,224(sp)
100055cc:	1811883a 	mov	r8,r3
100055d0:	d8003915 	stw	zero,228(sp)
100055d4:	d8003a15 	stw	zero,232(sp)
100055d8:	d8002f15 	stw	zero,188(sp)
100055dc:	d9002815 	stw	r4,160(sp)
100055e0:	a8800007 	ldb	r2,0(r21)
100055e4:	10028b26 	beq	r2,zero,10006014 <___vfprintf_internal_r+0xb14>
100055e8:	00c00944 	movi	r3,37
100055ec:	a823883a 	mov	r17,r21
100055f0:	10c0021e 	bne	r2,r3,100055fc <___vfprintf_internal_r+0xfc>
100055f4:	00001406 	br	10005648 <___vfprintf_internal_r+0x148>
100055f8:	10c00326 	beq	r2,r3,10005608 <___vfprintf_internal_r+0x108>
100055fc:	8c400044 	addi	r17,r17,1
10005600:	88800007 	ldb	r2,0(r17)
10005604:	103ffc1e 	bne	r2,zero,100055f8 <__alt_data_end+0xf80055f8>
10005608:	8d61c83a 	sub	r16,r17,r21
1000560c:	80000e26 	beq	r16,zero,10005648 <___vfprintf_internal_r+0x148>
10005610:	d8c02017 	ldw	r3,128(sp)
10005614:	d8801f17 	ldw	r2,124(sp)
10005618:	45400015 	stw	r21,0(r8)
1000561c:	1c07883a 	add	r3,r3,r16
10005620:	10800044 	addi	r2,r2,1
10005624:	d8c02015 	stw	r3,128(sp)
10005628:	44000115 	stw	r16,4(r8)
1000562c:	d8801f15 	stw	r2,124(sp)
10005630:	00c001c4 	movi	r3,7
10005634:	1880a916 	blt	r3,r2,100058dc <___vfprintf_internal_r+0x3dc>
10005638:	42000204 	addi	r8,r8,8
1000563c:	d9402f17 	ldw	r5,188(sp)
10005640:	2c0b883a 	add	r5,r5,r16
10005644:	d9402f15 	stw	r5,188(sp)
10005648:	88800007 	ldb	r2,0(r17)
1000564c:	1000aa26 	beq	r2,zero,100058f8 <___vfprintf_internal_r+0x3f8>
10005650:	8d400044 	addi	r21,r17,1
10005654:	8c400047 	ldb	r17,1(r17)
10005658:	0021883a 	mov	r16,zero
1000565c:	00bfffc4 	movi	r2,-1
10005660:	0025883a 	mov	r18,zero
10005664:	dc002905 	stb	r16,164(sp)
10005668:	d8002785 	stb	zero,158(sp)
1000566c:	d8002b05 	stb	zero,172(sp)
10005670:	d8802a15 	stw	r2,168(sp)
10005674:	d8003115 	stw	zero,196(sp)
10005678:	04c01604 	movi	r19,88
1000567c:	05800244 	movi	r22,9
10005680:	9021883a 	mov	r16,r18
10005684:	4039883a 	mov	fp,r8
10005688:	ad400044 	addi	r21,r21,1
1000568c:	88bff804 	addi	r2,r17,-32
10005690:	98833236 	bltu	r19,r2,1000635c <___vfprintf_internal_r+0xe5c>
10005694:	100490ba 	slli	r2,r2,2
10005698:	00c40034 	movhi	r3,4096
1000569c:	18d5ab04 	addi	r3,r3,22188
100056a0:	10c5883a 	add	r2,r2,r3
100056a4:	10800017 	ldw	r2,0(r2)
100056a8:	1000683a 	jmp	r2
100056ac:	10006254 	ori	zero,r2,393
100056b0:	1000635c 	xori	zero,r2,397
100056b4:	1000635c 	xori	zero,r2,397
100056b8:	10006274 	orhi	zero,r2,393
100056bc:	1000635c 	xori	zero,r2,397
100056c0:	1000635c 	xori	zero,r2,397
100056c4:	1000635c 	xori	zero,r2,397
100056c8:	1000635c 	xori	zero,r2,397
100056cc:	1000635c 	xori	zero,r2,397
100056d0:	1000635c 	xori	zero,r2,397
100056d4:	1000595c 	xori	zero,r2,357
100056d8:	10006164 	muli	zero,r2,389
100056dc:	1000635c 	xori	zero,r2,397
100056e0:	10005820 	cmpeqi	zero,r2,352
100056e4:	10005980 	call	11000598 <_gp+0xfe22cc>
100056e8:	1000635c 	xori	zero,r2,397
100056ec:	100059d0 	cmplti	zero,r2,359
100056f0:	100059dc 	xori	zero,r2,359
100056f4:	100059dc 	xori	zero,r2,359
100056f8:	100059dc 	xori	zero,r2,359
100056fc:	100059dc 	xori	zero,r2,359
10005700:	100059dc 	xori	zero,r2,359
10005704:	100059dc 	xori	zero,r2,359
10005708:	100059dc 	xori	zero,r2,359
1000570c:	100059dc 	xori	zero,r2,359
10005710:	100059dc 	xori	zero,r2,359
10005714:	1000635c 	xori	zero,r2,397
10005718:	1000635c 	xori	zero,r2,397
1000571c:	1000635c 	xori	zero,r2,397
10005720:	1000635c 	xori	zero,r2,397
10005724:	1000635c 	xori	zero,r2,397
10005728:	1000635c 	xori	zero,r2,397
1000572c:	1000635c 	xori	zero,r2,397
10005730:	1000635c 	xori	zero,r2,397
10005734:	1000635c 	xori	zero,r2,397
10005738:	1000635c 	xori	zero,r2,397
1000573c:	10005a18 	cmpnei	zero,r2,360
10005740:	10005ae0 	cmpeqi	zero,r2,363
10005744:	1000635c 	xori	zero,r2,397
10005748:	10005ae0 	cmpeqi	zero,r2,363
1000574c:	1000635c 	xori	zero,r2,397
10005750:	1000635c 	xori	zero,r2,397
10005754:	1000635c 	xori	zero,r2,397
10005758:	1000635c 	xori	zero,r2,397
1000575c:	10005b8c 	andi	zero,r2,366
10005760:	1000635c 	xori	zero,r2,397
10005764:	1000635c 	xori	zero,r2,397
10005768:	10005b98 	cmpnei	zero,r2,366
1000576c:	1000635c 	xori	zero,r2,397
10005770:	1000635c 	xori	zero,r2,397
10005774:	1000635c 	xori	zero,r2,397
10005778:	1000635c 	xori	zero,r2,397
1000577c:	1000635c 	xori	zero,r2,397
10005780:	1000601c 	xori	zero,r2,384
10005784:	1000635c 	xori	zero,r2,397
10005788:	1000635c 	xori	zero,r2,397
1000578c:	10006088 	cmpgei	zero,r2,386
10005790:	1000635c 	xori	zero,r2,397
10005794:	1000635c 	xori	zero,r2,397
10005798:	1000635c 	xori	zero,r2,397
1000579c:	1000635c 	xori	zero,r2,397
100057a0:	1000635c 	xori	zero,r2,397
100057a4:	1000635c 	xori	zero,r2,397
100057a8:	1000635c 	xori	zero,r2,397
100057ac:	1000635c 	xori	zero,r2,397
100057b0:	1000635c 	xori	zero,r2,397
100057b4:	1000635c 	xori	zero,r2,397
100057b8:	10006300 	call	11000630 <_gp+0xfe2364>
100057bc:	10006280 	call	11000628 <_gp+0xfe235c>
100057c0:	10005ae0 	cmpeqi	zero,r2,363
100057c4:	10005ae0 	cmpeqi	zero,r2,363
100057c8:	10005ae0 	cmpeqi	zero,r2,363
100057cc:	100062a0 	cmpeqi	zero,r2,394
100057d0:	10006280 	call	11000628 <_gp+0xfe235c>
100057d4:	1000635c 	xori	zero,r2,397
100057d8:	1000635c 	xori	zero,r2,397
100057dc:	100062ac 	andhi	zero,r2,394
100057e0:	1000635c 	xori	zero,r2,397
100057e4:	100062c0 	call	1100062c <_gp+0xfe2360>
100057e8:	10006144 	addi	zero,r2,389
100057ec:	1000582c 	andhi	zero,r2,352
100057f0:	1000617c 	xorhi	zero,r2,389
100057f4:	1000635c 	xori	zero,r2,397
100057f8:	10006188 	cmpgei	zero,r2,390
100057fc:	1000635c 	xori	zero,r2,397
10005800:	100061ec 	andhi	zero,r2,391
10005804:	1000635c 	xori	zero,r2,397
10005808:	1000635c 	xori	zero,r2,397
1000580c:	1000620c 	andi	zero,r2,392
10005810:	d8c03117 	ldw	r3,196(sp)
10005814:	d8802e15 	stw	r2,184(sp)
10005818:	00c7c83a 	sub	r3,zero,r3
1000581c:	d8c03115 	stw	r3,196(sp)
10005820:	84000114 	ori	r16,r16,4
10005824:	ac400007 	ldb	r17,0(r21)
10005828:	003f9706 	br	10005688 <__alt_data_end+0xf8005688>
1000582c:	00800c04 	movi	r2,48
10005830:	d8802705 	stb	r2,156(sp)
10005834:	00801e04 	movi	r2,120
10005838:	d8802745 	stb	r2,157(sp)
1000583c:	d9002a17 	ldw	r4,168(sp)
10005840:	d8802e17 	ldw	r2,184(sp)
10005844:	d8002785 	stb	zero,158(sp)
10005848:	e011883a 	mov	r8,fp
1000584c:	10c00104 	addi	r3,r2,4
10005850:	14c00017 	ldw	r19,0(r2)
10005854:	002d883a 	mov	r22,zero
10005858:	80800094 	ori	r2,r16,2
1000585c:	2002ca16 	blt	r4,zero,10006388 <___vfprintf_internal_r+0xe88>
10005860:	00bfdfc4 	movi	r2,-129
10005864:	80a4703a 	and	r18,r16,r2
10005868:	d8c02e15 	stw	r3,184(sp)
1000586c:	94800094 	ori	r18,r18,2
10005870:	9802b41e 	bne	r19,zero,10006344 <___vfprintf_internal_r+0xe44>
10005874:	01440074 	movhi	r5,4097
10005878:	29519304 	addi	r5,r5,17996
1000587c:	d9403915 	stw	r5,228(sp)
10005880:	04401e04 	movi	r17,120
10005884:	d8802a17 	ldw	r2,168(sp)
10005888:	0039883a 	mov	fp,zero
1000588c:	1001fa26 	beq	r2,zero,10006078 <___vfprintf_internal_r+0xb78>
10005890:	0027883a 	mov	r19,zero
10005894:	002d883a 	mov	r22,zero
10005898:	00021906 	br	10006100 <___vfprintf_internal_r+0xc00>
1000589c:	d9002d17 	ldw	r4,180(sp)
100058a0:	b80b883a 	mov	r5,r23
100058a4:	00078b40 	call	100078b4 <__swsetup_r>
100058a8:	1005dc1e 	bne	r2,zero,1000701c <___vfprintf_internal_r+0x1b1c>
100058ac:	b880030b 	ldhu	r2,12(r23)
100058b0:	00c00284 	movi	r3,10
100058b4:	1080068c 	andi	r2,r2,26
100058b8:	10ff3a1e 	bne	r2,r3,100055a4 <__alt_data_end+0xf80055a4>
100058bc:	b880038f 	ldh	r2,14(r23)
100058c0:	103f3816 	blt	r2,zero,100055a4 <__alt_data_end+0xf80055a4>
100058c4:	d9c02e17 	ldw	r7,184(sp)
100058c8:	d9002d17 	ldw	r4,180(sp)
100058cc:	a80d883a 	mov	r6,r21
100058d0:	b80b883a 	mov	r5,r23
100058d4:	00077f80 	call	100077f8 <__sbprintf>
100058d8:	00001106 	br	10005920 <___vfprintf_internal_r+0x420>
100058dc:	d9002d17 	ldw	r4,180(sp)
100058e0:	d9801e04 	addi	r6,sp,120
100058e4:	b80b883a 	mov	r5,r23
100058e8:	000cce00 	call	1000cce0 <__sprint_r>
100058ec:	1000081e 	bne	r2,zero,10005910 <___vfprintf_internal_r+0x410>
100058f0:	da000404 	addi	r8,sp,16
100058f4:	003f5106 	br	1000563c <__alt_data_end+0xf800563c>
100058f8:	d8802017 	ldw	r2,128(sp)
100058fc:	10000426 	beq	r2,zero,10005910 <___vfprintf_internal_r+0x410>
10005900:	d9002d17 	ldw	r4,180(sp)
10005904:	d9801e04 	addi	r6,sp,120
10005908:	b80b883a 	mov	r5,r23
1000590c:	000cce00 	call	1000cce0 <__sprint_r>
10005910:	b880030b 	ldhu	r2,12(r23)
10005914:	1080100c 	andi	r2,r2,64
10005918:	1005c01e 	bne	r2,zero,1000701c <___vfprintf_internal_r+0x1b1c>
1000591c:	d8802f17 	ldw	r2,188(sp)
10005920:	dfc04717 	ldw	ra,284(sp)
10005924:	df004617 	ldw	fp,280(sp)
10005928:	ddc04517 	ldw	r23,276(sp)
1000592c:	dd804417 	ldw	r22,272(sp)
10005930:	dd404317 	ldw	r21,268(sp)
10005934:	dd004217 	ldw	r20,264(sp)
10005938:	dcc04117 	ldw	r19,260(sp)
1000593c:	dc804017 	ldw	r18,256(sp)
10005940:	dc403f17 	ldw	r17,252(sp)
10005944:	dc003e17 	ldw	r16,248(sp)
10005948:	dec04804 	addi	sp,sp,288
1000594c:	f800283a 	ret
10005950:	d9002d17 	ldw	r4,180(sp)
10005954:	00098c00 	call	100098c0 <__sinit>
10005958:	003f0206 	br	10005564 <__alt_data_end+0xf8005564>
1000595c:	d9002e17 	ldw	r4,184(sp)
10005960:	d9402e17 	ldw	r5,184(sp)
10005964:	21000017 	ldw	r4,0(r4)
10005968:	28800104 	addi	r2,r5,4
1000596c:	d9003115 	stw	r4,196(sp)
10005970:	203fa716 	blt	r4,zero,10005810 <__alt_data_end+0xf8005810>
10005974:	d8802e15 	stw	r2,184(sp)
10005978:	ac400007 	ldb	r17,0(r21)
1000597c:	003f4206 	br	10005688 <__alt_data_end+0xf8005688>
10005980:	ac400007 	ldb	r17,0(r21)
10005984:	01000a84 	movi	r4,42
10005988:	a8c00044 	addi	r3,r21,1
1000598c:	89075826 	beq	r17,r4,100076f0 <___vfprintf_internal_r+0x21f0>
10005990:	8cbff404 	addi	r18,r17,-48
10005994:	b486ae36 	bltu	r22,r18,10007450 <___vfprintf_internal_r+0x1f50>
10005998:	0009883a 	mov	r4,zero
1000599c:	1823883a 	mov	r17,r3
100059a0:	01400284 	movi	r5,10
100059a4:	00052300 	call	10005230 <__mulsi3>
100059a8:	88c00007 	ldb	r3,0(r17)
100059ac:	1489883a 	add	r4,r2,r18
100059b0:	8d400044 	addi	r21,r17,1
100059b4:	1cbff404 	addi	r18,r3,-48
100059b8:	a823883a 	mov	r17,r21
100059bc:	b4bff82e 	bgeu	r22,r18,100059a0 <__alt_data_end+0xf80059a0>
100059c0:	1823883a 	mov	r17,r3
100059c4:	2005f616 	blt	r4,zero,100071a0 <___vfprintf_internal_r+0x1ca0>
100059c8:	d9002a15 	stw	r4,168(sp)
100059cc:	003f2f06 	br	1000568c <__alt_data_end+0xf800568c>
100059d0:	84002014 	ori	r16,r16,128
100059d4:	ac400007 	ldb	r17,0(r21)
100059d8:	003f2b06 	br	10005688 <__alt_data_end+0xf8005688>
100059dc:	8cbff404 	addi	r18,r17,-48
100059e0:	d8003115 	stw	zero,196(sp)
100059e4:	0009883a 	mov	r4,zero
100059e8:	a823883a 	mov	r17,r21
100059ec:	01400284 	movi	r5,10
100059f0:	00052300 	call	10005230 <__mulsi3>
100059f4:	88c00007 	ldb	r3,0(r17)
100059f8:	9089883a 	add	r4,r18,r2
100059fc:	ad400044 	addi	r21,r21,1
10005a00:	1cbff404 	addi	r18,r3,-48
10005a04:	a823883a 	mov	r17,r21
10005a08:	b4bff82e 	bgeu	r22,r18,100059ec <__alt_data_end+0xf80059ec>
10005a0c:	1823883a 	mov	r17,r3
10005a10:	d9003115 	stw	r4,196(sp)
10005a14:	003f1d06 	br	1000568c <__alt_data_end+0xf800568c>
10005a18:	8025883a 	mov	r18,r16
10005a1c:	dc002903 	ldbu	r16,164(sp)
10005a20:	e011883a 	mov	r8,fp
10005a24:	84003fcc 	andi	r16,r16,255
10005a28:	8007531e 	bne	r16,zero,10007778 <___vfprintf_internal_r+0x2278>
10005a2c:	94800414 	ori	r18,r18,16
10005a30:	9080080c 	andi	r2,r18,32
10005a34:	1003a326 	beq	r2,zero,100068c4 <___vfprintf_internal_r+0x13c4>
10005a38:	d9002e17 	ldw	r4,184(sp)
10005a3c:	20800117 	ldw	r2,4(r4)
10005a40:	24c00017 	ldw	r19,0(r4)
10005a44:	21000204 	addi	r4,r4,8
10005a48:	d9002e15 	stw	r4,184(sp)
10005a4c:	102d883a 	mov	r22,r2
10005a50:	10047316 	blt	r2,zero,10006c20 <___vfprintf_internal_r+0x1720>
10005a54:	d9002a17 	ldw	r4,168(sp)
10005a58:	df002783 	ldbu	fp,158(sp)
10005a5c:	2003e416 	blt	r4,zero,100069f0 <___vfprintf_internal_r+0x14f0>
10005a60:	00ffdfc4 	movi	r3,-129
10005a64:	9d84b03a 	or	r2,r19,r22
10005a68:	90e4703a 	and	r18,r18,r3
10005a6c:	10018026 	beq	r2,zero,10006070 <___vfprintf_internal_r+0xb70>
10005a70:	b003ab26 	beq	r22,zero,10006920 <___vfprintf_internal_r+0x1420>
10005a74:	dc402915 	stw	r17,164(sp)
10005a78:	dc001e04 	addi	r16,sp,120
10005a7c:	b023883a 	mov	r17,r22
10005a80:	402d883a 	mov	r22,r8
10005a84:	9809883a 	mov	r4,r19
10005a88:	880b883a 	mov	r5,r17
10005a8c:	01800284 	movi	r6,10
10005a90:	000f883a 	mov	r7,zero
10005a94:	000f3300 	call	1000f330 <__umoddi3>
10005a98:	10800c04 	addi	r2,r2,48
10005a9c:	843fffc4 	addi	r16,r16,-1
10005aa0:	9809883a 	mov	r4,r19
10005aa4:	880b883a 	mov	r5,r17
10005aa8:	80800005 	stb	r2,0(r16)
10005aac:	01800284 	movi	r6,10
10005ab0:	000f883a 	mov	r7,zero
10005ab4:	000ed340 	call	1000ed34 <__udivdi3>
10005ab8:	1027883a 	mov	r19,r2
10005abc:	10c4b03a 	or	r2,r2,r3
10005ac0:	1823883a 	mov	r17,r3
10005ac4:	103fef1e 	bne	r2,zero,10005a84 <__alt_data_end+0xf8005a84>
10005ac8:	d8c02817 	ldw	r3,160(sp)
10005acc:	dc402917 	ldw	r17,164(sp)
10005ad0:	b011883a 	mov	r8,r22
10005ad4:	1c07c83a 	sub	r3,r3,r16
10005ad8:	d8c02b15 	stw	r3,172(sp)
10005adc:	00005f06 	br	10005c5c <___vfprintf_internal_r+0x75c>
10005ae0:	8025883a 	mov	r18,r16
10005ae4:	dc002903 	ldbu	r16,164(sp)
10005ae8:	e011883a 	mov	r8,fp
10005aec:	84003fcc 	andi	r16,r16,255
10005af0:	80071e1e 	bne	r16,zero,1000776c <___vfprintf_internal_r+0x226c>
10005af4:	9080020c 	andi	r2,r18,8
10005af8:	1004af26 	beq	r2,zero,10006db8 <___vfprintf_internal_r+0x18b8>
10005afc:	d9002e17 	ldw	r4,184(sp)
10005b00:	d9402e17 	ldw	r5,184(sp)
10005b04:	d8802e17 	ldw	r2,184(sp)
10005b08:	21000017 	ldw	r4,0(r4)
10005b0c:	29400117 	ldw	r5,4(r5)
10005b10:	10800204 	addi	r2,r2,8
10005b14:	d9003615 	stw	r4,216(sp)
10005b18:	d9403815 	stw	r5,224(sp)
10005b1c:	d8802e15 	stw	r2,184(sp)
10005b20:	d9003617 	ldw	r4,216(sp)
10005b24:	d9403817 	ldw	r5,224(sp)
10005b28:	da003d15 	stw	r8,244(sp)
10005b2c:	04000044 	movi	r16,1
10005b30:	000c9040 	call	1000c904 <__fpclassifyd>
10005b34:	da003d17 	ldw	r8,244(sp)
10005b38:	1404441e 	bne	r2,r16,10006c4c <___vfprintf_internal_r+0x174c>
10005b3c:	d9003617 	ldw	r4,216(sp)
10005b40:	d9403817 	ldw	r5,224(sp)
10005b44:	000d883a 	mov	r6,zero
10005b48:	000f883a 	mov	r7,zero
10005b4c:	0004f540 	call	10004f54 <__ledf2>
10005b50:	da003d17 	ldw	r8,244(sp)
10005b54:	1005e316 	blt	r2,zero,100072e4 <___vfprintf_internal_r+0x1de4>
10005b58:	df002783 	ldbu	fp,158(sp)
10005b5c:	008011c4 	movi	r2,71
10005b60:	1445580e 	bge	r2,r17,100070c4 <___vfprintf_internal_r+0x1bc4>
10005b64:	04040074 	movhi	r16,4097
10005b68:	84118b04 	addi	r16,r16,17964
10005b6c:	00c000c4 	movi	r3,3
10005b70:	00bfdfc4 	movi	r2,-129
10005b74:	d8c02915 	stw	r3,164(sp)
10005b78:	90a4703a 	and	r18,r18,r2
10005b7c:	d8c02b15 	stw	r3,172(sp)
10005b80:	d8002a15 	stw	zero,168(sp)
10005b84:	d8003215 	stw	zero,200(sp)
10005b88:	00003a06 	br	10005c74 <___vfprintf_internal_r+0x774>
10005b8c:	84000214 	ori	r16,r16,8
10005b90:	ac400007 	ldb	r17,0(r21)
10005b94:	003ebc06 	br	10005688 <__alt_data_end+0xf8005688>
10005b98:	8025883a 	mov	r18,r16
10005b9c:	dc002903 	ldbu	r16,164(sp)
10005ba0:	e011883a 	mov	r8,fp
10005ba4:	84003fcc 	andi	r16,r16,255
10005ba8:	8007001e 	bne	r16,zero,100077ac <___vfprintf_internal_r+0x22ac>
10005bac:	94800414 	ori	r18,r18,16
10005bb0:	9080080c 	andi	r2,r18,32
10005bb4:	1002fa26 	beq	r2,zero,100067a0 <___vfprintf_internal_r+0x12a0>
10005bb8:	d9002e17 	ldw	r4,184(sp)
10005bbc:	d9402a17 	ldw	r5,168(sp)
10005bc0:	d8002785 	stb	zero,158(sp)
10005bc4:	20800204 	addi	r2,r4,8
10005bc8:	24c00017 	ldw	r19,0(r4)
10005bcc:	25800117 	ldw	r22,4(r4)
10005bd0:	2804b116 	blt	r5,zero,10006e98 <___vfprintf_internal_r+0x1998>
10005bd4:	013fdfc4 	movi	r4,-129
10005bd8:	9d86b03a 	or	r3,r19,r22
10005bdc:	d8802e15 	stw	r2,184(sp)
10005be0:	9124703a 	and	r18,r18,r4
10005be4:	1802fb1e 	bne	r3,zero,100067d4 <___vfprintf_internal_r+0x12d4>
10005be8:	d8c02a17 	ldw	r3,168(sp)
10005bec:	0039883a 	mov	fp,zero
10005bf0:	1805e526 	beq	r3,zero,10007388 <___vfprintf_internal_r+0x1e88>
10005bf4:	0027883a 	mov	r19,zero
10005bf8:	002d883a 	mov	r22,zero
10005bfc:	dc001e04 	addi	r16,sp,120
10005c00:	9806d0fa 	srli	r3,r19,3
10005c04:	b008977a 	slli	r4,r22,29
10005c08:	b02cd0fa 	srli	r22,r22,3
10005c0c:	9cc001cc 	andi	r19,r19,7
10005c10:	98800c04 	addi	r2,r19,48
10005c14:	843fffc4 	addi	r16,r16,-1
10005c18:	20e6b03a 	or	r19,r4,r3
10005c1c:	80800005 	stb	r2,0(r16)
10005c20:	9d86b03a 	or	r3,r19,r22
10005c24:	183ff61e 	bne	r3,zero,10005c00 <__alt_data_end+0xf8005c00>
10005c28:	90c0004c 	andi	r3,r18,1
10005c2c:	18014126 	beq	r3,zero,10006134 <___vfprintf_internal_r+0xc34>
10005c30:	10803fcc 	andi	r2,r2,255
10005c34:	1080201c 	xori	r2,r2,128
10005c38:	10bfe004 	addi	r2,r2,-128
10005c3c:	00c00c04 	movi	r3,48
10005c40:	10c13c26 	beq	r2,r3,10006134 <___vfprintf_internal_r+0xc34>
10005c44:	80ffffc5 	stb	r3,-1(r16)
10005c48:	d8c02817 	ldw	r3,160(sp)
10005c4c:	80bfffc4 	addi	r2,r16,-1
10005c50:	1021883a 	mov	r16,r2
10005c54:	1887c83a 	sub	r3,r3,r2
10005c58:	d8c02b15 	stw	r3,172(sp)
10005c5c:	d8802b17 	ldw	r2,172(sp)
10005c60:	d9002a17 	ldw	r4,168(sp)
10005c64:	1100010e 	bge	r2,r4,10005c6c <___vfprintf_internal_r+0x76c>
10005c68:	2005883a 	mov	r2,r4
10005c6c:	d8802915 	stw	r2,164(sp)
10005c70:	d8003215 	stw	zero,200(sp)
10005c74:	e7003fcc 	andi	fp,fp,255
10005c78:	e700201c 	xori	fp,fp,128
10005c7c:	e73fe004 	addi	fp,fp,-128
10005c80:	e0000326 	beq	fp,zero,10005c90 <___vfprintf_internal_r+0x790>
10005c84:	d8c02917 	ldw	r3,164(sp)
10005c88:	18c00044 	addi	r3,r3,1
10005c8c:	d8c02915 	stw	r3,164(sp)
10005c90:	90c0008c 	andi	r3,r18,2
10005c94:	d8c02c15 	stw	r3,176(sp)
10005c98:	18000326 	beq	r3,zero,10005ca8 <___vfprintf_internal_r+0x7a8>
10005c9c:	d8c02917 	ldw	r3,164(sp)
10005ca0:	18c00084 	addi	r3,r3,2
10005ca4:	d8c02915 	stw	r3,164(sp)
10005ca8:	90c0210c 	andi	r3,r18,132
10005cac:	d8c03015 	stw	r3,192(sp)
10005cb0:	1801c51e 	bne	r3,zero,100063c8 <___vfprintf_internal_r+0xec8>
10005cb4:	d9003117 	ldw	r4,196(sp)
10005cb8:	d8c02917 	ldw	r3,164(sp)
10005cbc:	20e7c83a 	sub	r19,r4,r3
10005cc0:	04c1c10e 	bge	zero,r19,100063c8 <___vfprintf_internal_r+0xec8>
10005cc4:	02400404 	movi	r9,16
10005cc8:	d8c02017 	ldw	r3,128(sp)
10005ccc:	d8801f17 	ldw	r2,124(sp)
10005cd0:	4cc52f0e 	bge	r9,r19,10007190 <___vfprintf_internal_r+0x1c90>
10005cd4:	01440074 	movhi	r5,4097
10005cd8:	29519e84 	addi	r5,r5,18042
10005cdc:	dc403b15 	stw	r17,236(sp)
10005ce0:	d9403515 	stw	r5,212(sp)
10005ce4:	9823883a 	mov	r17,r19
10005ce8:	482d883a 	mov	r22,r9
10005cec:	9027883a 	mov	r19,r18
10005cf0:	070001c4 	movi	fp,7
10005cf4:	8025883a 	mov	r18,r16
10005cf8:	dc002d17 	ldw	r16,180(sp)
10005cfc:	00000306 	br	10005d0c <___vfprintf_internal_r+0x80c>
10005d00:	8c7ffc04 	addi	r17,r17,-16
10005d04:	42000204 	addi	r8,r8,8
10005d08:	b440130e 	bge	r22,r17,10005d58 <___vfprintf_internal_r+0x858>
10005d0c:	01040074 	movhi	r4,4097
10005d10:	18c00404 	addi	r3,r3,16
10005d14:	10800044 	addi	r2,r2,1
10005d18:	21119e84 	addi	r4,r4,18042
10005d1c:	41000015 	stw	r4,0(r8)
10005d20:	45800115 	stw	r22,4(r8)
10005d24:	d8c02015 	stw	r3,128(sp)
10005d28:	d8801f15 	stw	r2,124(sp)
10005d2c:	e0bff40e 	bge	fp,r2,10005d00 <__alt_data_end+0xf8005d00>
10005d30:	d9801e04 	addi	r6,sp,120
10005d34:	b80b883a 	mov	r5,r23
10005d38:	8009883a 	mov	r4,r16
10005d3c:	000cce00 	call	1000cce0 <__sprint_r>
10005d40:	103ef31e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10005d44:	8c7ffc04 	addi	r17,r17,-16
10005d48:	d8c02017 	ldw	r3,128(sp)
10005d4c:	d8801f17 	ldw	r2,124(sp)
10005d50:	da000404 	addi	r8,sp,16
10005d54:	b47fed16 	blt	r22,r17,10005d0c <__alt_data_end+0xf8005d0c>
10005d58:	9021883a 	mov	r16,r18
10005d5c:	9825883a 	mov	r18,r19
10005d60:	8827883a 	mov	r19,r17
10005d64:	dc403b17 	ldw	r17,236(sp)
10005d68:	d9403517 	ldw	r5,212(sp)
10005d6c:	98c7883a 	add	r3,r19,r3
10005d70:	10800044 	addi	r2,r2,1
10005d74:	41400015 	stw	r5,0(r8)
10005d78:	44c00115 	stw	r19,4(r8)
10005d7c:	d8c02015 	stw	r3,128(sp)
10005d80:	d8801f15 	stw	r2,124(sp)
10005d84:	010001c4 	movi	r4,7
10005d88:	2082c516 	blt	r4,r2,100068a0 <___vfprintf_internal_r+0x13a0>
10005d8c:	df002787 	ldb	fp,158(sp)
10005d90:	42000204 	addi	r8,r8,8
10005d94:	e0000c26 	beq	fp,zero,10005dc8 <___vfprintf_internal_r+0x8c8>
10005d98:	d8801f17 	ldw	r2,124(sp)
10005d9c:	d9002784 	addi	r4,sp,158
10005da0:	18c00044 	addi	r3,r3,1
10005da4:	10800044 	addi	r2,r2,1
10005da8:	41000015 	stw	r4,0(r8)
10005dac:	01000044 	movi	r4,1
10005db0:	41000115 	stw	r4,4(r8)
10005db4:	d8c02015 	stw	r3,128(sp)
10005db8:	d8801f15 	stw	r2,124(sp)
10005dbc:	010001c4 	movi	r4,7
10005dc0:	20825e16 	blt	r4,r2,1000673c <___vfprintf_internal_r+0x123c>
10005dc4:	42000204 	addi	r8,r8,8
10005dc8:	d8802c17 	ldw	r2,176(sp)
10005dcc:	10000c26 	beq	r2,zero,10005e00 <___vfprintf_internal_r+0x900>
10005dd0:	d8801f17 	ldw	r2,124(sp)
10005dd4:	d9002704 	addi	r4,sp,156
10005dd8:	18c00084 	addi	r3,r3,2
10005ddc:	10800044 	addi	r2,r2,1
10005de0:	41000015 	stw	r4,0(r8)
10005de4:	01000084 	movi	r4,2
10005de8:	41000115 	stw	r4,4(r8)
10005dec:	d8c02015 	stw	r3,128(sp)
10005df0:	d8801f15 	stw	r2,124(sp)
10005df4:	010001c4 	movi	r4,7
10005df8:	20825816 	blt	r4,r2,1000675c <___vfprintf_internal_r+0x125c>
10005dfc:	42000204 	addi	r8,r8,8
10005e00:	d9003017 	ldw	r4,192(sp)
10005e04:	00802004 	movi	r2,128
10005e08:	2081bb26 	beq	r4,r2,100064f8 <___vfprintf_internal_r+0xff8>
10005e0c:	d9402a17 	ldw	r5,168(sp)
10005e10:	d8802b17 	ldw	r2,172(sp)
10005e14:	28adc83a 	sub	r22,r5,r2
10005e18:	0580310e 	bge	zero,r22,10005ee0 <___vfprintf_internal_r+0x9e0>
10005e1c:	07000404 	movi	fp,16
10005e20:	d8801f17 	ldw	r2,124(sp)
10005e24:	e584360e 	bge	fp,r22,10006f00 <___vfprintf_internal_r+0x1a00>
10005e28:	01440074 	movhi	r5,4097
10005e2c:	29519a84 	addi	r5,r5,18026
10005e30:	dc402a15 	stw	r17,168(sp)
10005e34:	d9402c15 	stw	r5,176(sp)
10005e38:	b023883a 	mov	r17,r22
10005e3c:	04c001c4 	movi	r19,7
10005e40:	a82d883a 	mov	r22,r21
10005e44:	902b883a 	mov	r21,r18
10005e48:	8025883a 	mov	r18,r16
10005e4c:	dc002d17 	ldw	r16,180(sp)
10005e50:	00000306 	br	10005e60 <___vfprintf_internal_r+0x960>
10005e54:	8c7ffc04 	addi	r17,r17,-16
10005e58:	42000204 	addi	r8,r8,8
10005e5c:	e440110e 	bge	fp,r17,10005ea4 <___vfprintf_internal_r+0x9a4>
10005e60:	18c00404 	addi	r3,r3,16
10005e64:	10800044 	addi	r2,r2,1
10005e68:	45000015 	stw	r20,0(r8)
10005e6c:	47000115 	stw	fp,4(r8)
10005e70:	d8c02015 	stw	r3,128(sp)
10005e74:	d8801f15 	stw	r2,124(sp)
10005e78:	98bff60e 	bge	r19,r2,10005e54 <__alt_data_end+0xf8005e54>
10005e7c:	d9801e04 	addi	r6,sp,120
10005e80:	b80b883a 	mov	r5,r23
10005e84:	8009883a 	mov	r4,r16
10005e88:	000cce00 	call	1000cce0 <__sprint_r>
10005e8c:	103ea01e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10005e90:	8c7ffc04 	addi	r17,r17,-16
10005e94:	d8c02017 	ldw	r3,128(sp)
10005e98:	d8801f17 	ldw	r2,124(sp)
10005e9c:	da000404 	addi	r8,sp,16
10005ea0:	e47fef16 	blt	fp,r17,10005e60 <__alt_data_end+0xf8005e60>
10005ea4:	9021883a 	mov	r16,r18
10005ea8:	a825883a 	mov	r18,r21
10005eac:	b02b883a 	mov	r21,r22
10005eb0:	882d883a 	mov	r22,r17
10005eb4:	dc402a17 	ldw	r17,168(sp)
10005eb8:	d9002c17 	ldw	r4,176(sp)
10005ebc:	1d87883a 	add	r3,r3,r22
10005ec0:	10800044 	addi	r2,r2,1
10005ec4:	41000015 	stw	r4,0(r8)
10005ec8:	45800115 	stw	r22,4(r8)
10005ecc:	d8c02015 	stw	r3,128(sp)
10005ed0:	d8801f15 	stw	r2,124(sp)
10005ed4:	010001c4 	movi	r4,7
10005ed8:	20821016 	blt	r4,r2,1000671c <___vfprintf_internal_r+0x121c>
10005edc:	42000204 	addi	r8,r8,8
10005ee0:	9080400c 	andi	r2,r18,256
10005ee4:	10013a1e 	bne	r2,zero,100063d0 <___vfprintf_internal_r+0xed0>
10005ee8:	d9402b17 	ldw	r5,172(sp)
10005eec:	d8801f17 	ldw	r2,124(sp)
10005ef0:	44000015 	stw	r16,0(r8)
10005ef4:	1947883a 	add	r3,r3,r5
10005ef8:	10800044 	addi	r2,r2,1
10005efc:	41400115 	stw	r5,4(r8)
10005f00:	d8c02015 	stw	r3,128(sp)
10005f04:	d8801f15 	stw	r2,124(sp)
10005f08:	010001c4 	movi	r4,7
10005f0c:	2081f516 	blt	r4,r2,100066e4 <___vfprintf_internal_r+0x11e4>
10005f10:	42000204 	addi	r8,r8,8
10005f14:	9480010c 	andi	r18,r18,4
10005f18:	90003226 	beq	r18,zero,10005fe4 <___vfprintf_internal_r+0xae4>
10005f1c:	d9403117 	ldw	r5,196(sp)
10005f20:	d8802917 	ldw	r2,164(sp)
10005f24:	28a1c83a 	sub	r16,r5,r2
10005f28:	04002e0e 	bge	zero,r16,10005fe4 <___vfprintf_internal_r+0xae4>
10005f2c:	04400404 	movi	r17,16
10005f30:	d8801f17 	ldw	r2,124(sp)
10005f34:	8c04c40e 	bge	r17,r16,10007248 <___vfprintf_internal_r+0x1d48>
10005f38:	01440074 	movhi	r5,4097
10005f3c:	29519e84 	addi	r5,r5,18042
10005f40:	d9403515 	stw	r5,212(sp)
10005f44:	048001c4 	movi	r18,7
10005f48:	dcc02d17 	ldw	r19,180(sp)
10005f4c:	00000306 	br	10005f5c <___vfprintf_internal_r+0xa5c>
10005f50:	843ffc04 	addi	r16,r16,-16
10005f54:	42000204 	addi	r8,r8,8
10005f58:	8c00130e 	bge	r17,r16,10005fa8 <___vfprintf_internal_r+0xaa8>
10005f5c:	01040074 	movhi	r4,4097
10005f60:	18c00404 	addi	r3,r3,16
10005f64:	10800044 	addi	r2,r2,1
10005f68:	21119e84 	addi	r4,r4,18042
10005f6c:	41000015 	stw	r4,0(r8)
10005f70:	44400115 	stw	r17,4(r8)
10005f74:	d8c02015 	stw	r3,128(sp)
10005f78:	d8801f15 	stw	r2,124(sp)
10005f7c:	90bff40e 	bge	r18,r2,10005f50 <__alt_data_end+0xf8005f50>
10005f80:	d9801e04 	addi	r6,sp,120
10005f84:	b80b883a 	mov	r5,r23
10005f88:	9809883a 	mov	r4,r19
10005f8c:	000cce00 	call	1000cce0 <__sprint_r>
10005f90:	103e5f1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10005f94:	843ffc04 	addi	r16,r16,-16
10005f98:	d8c02017 	ldw	r3,128(sp)
10005f9c:	d8801f17 	ldw	r2,124(sp)
10005fa0:	da000404 	addi	r8,sp,16
10005fa4:	8c3fed16 	blt	r17,r16,10005f5c <__alt_data_end+0xf8005f5c>
10005fa8:	d9403517 	ldw	r5,212(sp)
10005fac:	1c07883a 	add	r3,r3,r16
10005fb0:	10800044 	addi	r2,r2,1
10005fb4:	41400015 	stw	r5,0(r8)
10005fb8:	44000115 	stw	r16,4(r8)
10005fbc:	d8c02015 	stw	r3,128(sp)
10005fc0:	d8801f15 	stw	r2,124(sp)
10005fc4:	010001c4 	movi	r4,7
10005fc8:	2080060e 	bge	r4,r2,10005fe4 <___vfprintf_internal_r+0xae4>
10005fcc:	d9002d17 	ldw	r4,180(sp)
10005fd0:	d9801e04 	addi	r6,sp,120
10005fd4:	b80b883a 	mov	r5,r23
10005fd8:	000cce00 	call	1000cce0 <__sprint_r>
10005fdc:	103e4c1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10005fe0:	d8c02017 	ldw	r3,128(sp)
10005fe4:	d8803117 	ldw	r2,196(sp)
10005fe8:	d9002917 	ldw	r4,164(sp)
10005fec:	1100010e 	bge	r2,r4,10005ff4 <___vfprintf_internal_r+0xaf4>
10005ff0:	2005883a 	mov	r2,r4
10005ff4:	d9402f17 	ldw	r5,188(sp)
10005ff8:	288b883a 	add	r5,r5,r2
10005ffc:	d9402f15 	stw	r5,188(sp)
10006000:	1801c01e 	bne	r3,zero,10006704 <___vfprintf_internal_r+0x1204>
10006004:	a8800007 	ldb	r2,0(r21)
10006008:	d8001f15 	stw	zero,124(sp)
1000600c:	da000404 	addi	r8,sp,16
10006010:	103d751e 	bne	r2,zero,100055e8 <__alt_data_end+0xf80055e8>
10006014:	a823883a 	mov	r17,r21
10006018:	003d8b06 	br	10005648 <__alt_data_end+0xf8005648>
1000601c:	8025883a 	mov	r18,r16
10006020:	dc002903 	ldbu	r16,164(sp)
10006024:	e011883a 	mov	r8,fp
10006028:	84003fcc 	andi	r16,r16,255
1000602c:	8005e51e 	bne	r16,zero,100077c4 <___vfprintf_internal_r+0x22c4>
10006030:	94800414 	ori	r18,r18,16
10006034:	9080080c 	andi	r2,r18,32
10006038:	10022b26 	beq	r2,zero,100068e8 <___vfprintf_internal_r+0x13e8>
1000603c:	d9002e17 	ldw	r4,184(sp)
10006040:	d9402a17 	ldw	r5,168(sp)
10006044:	d8002785 	stb	zero,158(sp)
10006048:	20c00204 	addi	r3,r4,8
1000604c:	24c00017 	ldw	r19,0(r4)
10006050:	25800117 	ldw	r22,4(r4)
10006054:	28042e16 	blt	r5,zero,10007110 <___vfprintf_internal_r+0x1c10>
10006058:	013fdfc4 	movi	r4,-129
1000605c:	9d84b03a 	or	r2,r19,r22
10006060:	d8c02e15 	stw	r3,184(sp)
10006064:	9124703a 	and	r18,r18,r4
10006068:	0039883a 	mov	fp,zero
1000606c:	103e801e 	bne	r2,zero,10005a70 <__alt_data_end+0xf8005a70>
10006070:	d9002a17 	ldw	r4,168(sp)
10006074:	2002e01e 	bne	r4,zero,10006bf8 <___vfprintf_internal_r+0x16f8>
10006078:	d8002a15 	stw	zero,168(sp)
1000607c:	d8002b15 	stw	zero,172(sp)
10006080:	dc001e04 	addi	r16,sp,120
10006084:	003ef506 	br	10005c5c <__alt_data_end+0xf8005c5c>
10006088:	8025883a 	mov	r18,r16
1000608c:	dc002903 	ldbu	r16,164(sp)
10006090:	e011883a 	mov	r8,fp
10006094:	84003fcc 	andi	r16,r16,255
10006098:	8005ba1e 	bne	r16,zero,10007784 <___vfprintf_internal_r+0x2284>
1000609c:	01040074 	movhi	r4,4097
100060a0:	21118e04 	addi	r4,r4,17976
100060a4:	d9003915 	stw	r4,228(sp)
100060a8:	9080080c 	andi	r2,r18,32
100060ac:	10006126 	beq	r2,zero,10006234 <___vfprintf_internal_r+0xd34>
100060b0:	d9402e17 	ldw	r5,184(sp)
100060b4:	2cc00017 	ldw	r19,0(r5)
100060b8:	2d800117 	ldw	r22,4(r5)
100060bc:	29400204 	addi	r5,r5,8
100060c0:	d9402e15 	stw	r5,184(sp)
100060c4:	9080004c 	andi	r2,r18,1
100060c8:	1001ac26 	beq	r2,zero,1000677c <___vfprintf_internal_r+0x127c>
100060cc:	9d84b03a 	or	r2,r19,r22
100060d0:	10038526 	beq	r2,zero,10006ee8 <___vfprintf_internal_r+0x19e8>
100060d4:	d8c02a17 	ldw	r3,168(sp)
100060d8:	00800c04 	movi	r2,48
100060dc:	d8802705 	stb	r2,156(sp)
100060e0:	dc402745 	stb	r17,157(sp)
100060e4:	d8002785 	stb	zero,158(sp)
100060e8:	90800094 	ori	r2,r18,2
100060ec:	18047916 	blt	r3,zero,100072d4 <___vfprintf_internal_r+0x1dd4>
100060f0:	00bfdfc4 	movi	r2,-129
100060f4:	90a4703a 	and	r18,r18,r2
100060f8:	94800094 	ori	r18,r18,2
100060fc:	0039883a 	mov	fp,zero
10006100:	d9003917 	ldw	r4,228(sp)
10006104:	dc001e04 	addi	r16,sp,120
10006108:	988003cc 	andi	r2,r19,15
1000610c:	b006973a 	slli	r3,r22,28
10006110:	2085883a 	add	r2,r4,r2
10006114:	9826d13a 	srli	r19,r19,4
10006118:	10800003 	ldbu	r2,0(r2)
1000611c:	b02cd13a 	srli	r22,r22,4
10006120:	843fffc4 	addi	r16,r16,-1
10006124:	1ce6b03a 	or	r19,r3,r19
10006128:	80800005 	stb	r2,0(r16)
1000612c:	9d84b03a 	or	r2,r19,r22
10006130:	103ff51e 	bne	r2,zero,10006108 <__alt_data_end+0xf8006108>
10006134:	d8c02817 	ldw	r3,160(sp)
10006138:	1c07c83a 	sub	r3,r3,r16
1000613c:	d8c02b15 	stw	r3,172(sp)
10006140:	003ec606 	br	10005c5c <__alt_data_end+0xf8005c5c>
10006144:	8025883a 	mov	r18,r16
10006148:	dc002903 	ldbu	r16,164(sp)
1000614c:	e011883a 	mov	r8,fp
10006150:	84003fcc 	andi	r16,r16,255
10006154:	803e9626 	beq	r16,zero,10005bb0 <__alt_data_end+0xf8005bb0>
10006158:	d8c02b03 	ldbu	r3,172(sp)
1000615c:	d8c02785 	stb	r3,158(sp)
10006160:	003e9306 	br	10005bb0 <__alt_data_end+0xf8005bb0>
10006164:	00c00044 	movi	r3,1
10006168:	d8c02905 	stb	r3,164(sp)
1000616c:	00c00ac4 	movi	r3,43
10006170:	d8c02b05 	stb	r3,172(sp)
10006174:	ac400007 	ldb	r17,0(r21)
10006178:	003d4306 	br	10005688 <__alt_data_end+0xf8005688>
1000617c:	84000814 	ori	r16,r16,32
10006180:	ac400007 	ldb	r17,0(r21)
10006184:	003d4006 	br	10005688 <__alt_data_end+0xf8005688>
10006188:	d8802e17 	ldw	r2,184(sp)
1000618c:	8025883a 	mov	r18,r16
10006190:	d8002785 	stb	zero,158(sp)
10006194:	14000017 	ldw	r16,0(r2)
10006198:	e011883a 	mov	r8,fp
1000619c:	14c00104 	addi	r19,r2,4
100061a0:	80042d26 	beq	r16,zero,10007258 <___vfprintf_internal_r+0x1d58>
100061a4:	d8c02a17 	ldw	r3,168(sp)
100061a8:	1803e416 	blt	r3,zero,1000713c <___vfprintf_internal_r+0x1c3c>
100061ac:	180d883a 	mov	r6,r3
100061b0:	000b883a 	mov	r5,zero
100061b4:	8009883a 	mov	r4,r16
100061b8:	df003d15 	stw	fp,244(sp)
100061bc:	000ae380 	call	1000ae38 <memchr>
100061c0:	da003d17 	ldw	r8,244(sp)
100061c4:	10046826 	beq	r2,zero,10007368 <___vfprintf_internal_r+0x1e68>
100061c8:	1405c83a 	sub	r2,r2,r16
100061cc:	d8802b15 	stw	r2,172(sp)
100061d0:	1003e016 	blt	r2,zero,10007154 <___vfprintf_internal_r+0x1c54>
100061d4:	df002783 	ldbu	fp,158(sp)
100061d8:	d8802915 	stw	r2,164(sp)
100061dc:	dcc02e15 	stw	r19,184(sp)
100061e0:	d8002a15 	stw	zero,168(sp)
100061e4:	d8003215 	stw	zero,200(sp)
100061e8:	003ea206 	br	10005c74 <__alt_data_end+0xf8005c74>
100061ec:	8025883a 	mov	r18,r16
100061f0:	dc002903 	ldbu	r16,164(sp)
100061f4:	e011883a 	mov	r8,fp
100061f8:	84003fcc 	andi	r16,r16,255
100061fc:	803f8d26 	beq	r16,zero,10006034 <__alt_data_end+0xf8006034>
10006200:	d8c02b03 	ldbu	r3,172(sp)
10006204:	d8c02785 	stb	r3,158(sp)
10006208:	003f8a06 	br	10006034 <__alt_data_end+0xf8006034>
1000620c:	8025883a 	mov	r18,r16
10006210:	dc002903 	ldbu	r16,164(sp)
10006214:	e011883a 	mov	r8,fp
10006218:	84003fcc 	andi	r16,r16,255
1000621c:	8005661e 	bne	r16,zero,100077b8 <___vfprintf_internal_r+0x22b8>
10006220:	01040074 	movhi	r4,4097
10006224:	21119304 	addi	r4,r4,17996
10006228:	d9003915 	stw	r4,228(sp)
1000622c:	9080080c 	andi	r2,r18,32
10006230:	103f9f1e 	bne	r2,zero,100060b0 <__alt_data_end+0xf80060b0>
10006234:	9080040c 	andi	r2,r18,16
10006238:	1002eb26 	beq	r2,zero,10006de8 <___vfprintf_internal_r+0x18e8>
1000623c:	d8802e17 	ldw	r2,184(sp)
10006240:	002d883a 	mov	r22,zero
10006244:	14c00017 	ldw	r19,0(r2)
10006248:	10800104 	addi	r2,r2,4
1000624c:	d8802e15 	stw	r2,184(sp)
10006250:	003f9c06 	br	100060c4 <__alt_data_end+0xf80060c4>
10006254:	d8802b07 	ldb	r2,172(sp)
10006258:	1002e11e 	bne	r2,zero,10006de0 <___vfprintf_internal_r+0x18e0>
1000625c:	00c00044 	movi	r3,1
10006260:	d8c02905 	stb	r3,164(sp)
10006264:	00c00804 	movi	r3,32
10006268:	d8c02b05 	stb	r3,172(sp)
1000626c:	ac400007 	ldb	r17,0(r21)
10006270:	003d0506 	br	10005688 <__alt_data_end+0xf8005688>
10006274:	84000054 	ori	r16,r16,1
10006278:	ac400007 	ldb	r17,0(r21)
1000627c:	003d0206 	br	10005688 <__alt_data_end+0xf8005688>
10006280:	8025883a 	mov	r18,r16
10006284:	dc002903 	ldbu	r16,164(sp)
10006288:	e011883a 	mov	r8,fp
1000628c:	84003fcc 	andi	r16,r16,255
10006290:	803de726 	beq	r16,zero,10005a30 <__alt_data_end+0xf8005a30>
10006294:	d8c02b03 	ldbu	r3,172(sp)
10006298:	d8c02785 	stb	r3,158(sp)
1000629c:	003de406 	br	10005a30 <__alt_data_end+0xf8005a30>
100062a0:	84001014 	ori	r16,r16,64
100062a4:	ac400007 	ldb	r17,0(r21)
100062a8:	003cf706 	br	10005688 <__alt_data_end+0xf8005688>
100062ac:	ac400007 	ldb	r17,0(r21)
100062b0:	00801b04 	movi	r2,108
100062b4:	88838f26 	beq	r17,r2,100070f4 <___vfprintf_internal_r+0x1bf4>
100062b8:	84000414 	ori	r16,r16,16
100062bc:	003cf206 	br	10005688 <__alt_data_end+0xf8005688>
100062c0:	8025883a 	mov	r18,r16
100062c4:	dc002903 	ldbu	r16,164(sp)
100062c8:	e011883a 	mov	r8,fp
100062cc:	84003fcc 	andi	r16,r16,255
100062d0:	80053f1e 	bne	r16,zero,100077d0 <___vfprintf_internal_r+0x22d0>
100062d4:	9080080c 	andi	r2,r18,32
100062d8:	1002d226 	beq	r2,zero,10006e24 <___vfprintf_internal_r+0x1924>
100062dc:	d9002e17 	ldw	r4,184(sp)
100062e0:	d9402f17 	ldw	r5,188(sp)
100062e4:	20800017 	ldw	r2,0(r4)
100062e8:	2807d7fa 	srai	r3,r5,31
100062ec:	21000104 	addi	r4,r4,4
100062f0:	d9002e15 	stw	r4,184(sp)
100062f4:	11400015 	stw	r5,0(r2)
100062f8:	10c00115 	stw	r3,4(r2)
100062fc:	003cb806 	br	100055e0 <__alt_data_end+0xf80055e0>
10006300:	d8c02e17 	ldw	r3,184(sp)
10006304:	d9002e17 	ldw	r4,184(sp)
10006308:	8025883a 	mov	r18,r16
1000630c:	18800017 	ldw	r2,0(r3)
10006310:	21000104 	addi	r4,r4,4
10006314:	00c00044 	movi	r3,1
10006318:	e011883a 	mov	r8,fp
1000631c:	d8c02915 	stw	r3,164(sp)
10006320:	d8002785 	stb	zero,158(sp)
10006324:	d8801405 	stb	r2,80(sp)
10006328:	d9002e15 	stw	r4,184(sp)
1000632c:	d8c02b15 	stw	r3,172(sp)
10006330:	d8002a15 	stw	zero,168(sp)
10006334:	d8003215 	stw	zero,200(sp)
10006338:	dc001404 	addi	r16,sp,80
1000633c:	0039883a 	mov	fp,zero
10006340:	003e5306 	br	10005c90 <__alt_data_end+0xf8005c90>
10006344:	01040074 	movhi	r4,4097
10006348:	21119304 	addi	r4,r4,17996
1000634c:	0039883a 	mov	fp,zero
10006350:	d9003915 	stw	r4,228(sp)
10006354:	04401e04 	movi	r17,120
10006358:	003f6906 	br	10006100 <__alt_data_end+0xf8006100>
1000635c:	8025883a 	mov	r18,r16
10006360:	dc002903 	ldbu	r16,164(sp)
10006364:	e011883a 	mov	r8,fp
10006368:	84003fcc 	andi	r16,r16,255
1000636c:	8005081e 	bne	r16,zero,10007790 <___vfprintf_internal_r+0x2290>
10006370:	883d6126 	beq	r17,zero,100058f8 <__alt_data_end+0xf80058f8>
10006374:	00c00044 	movi	r3,1
10006378:	d8c02915 	stw	r3,164(sp)
1000637c:	dc401405 	stb	r17,80(sp)
10006380:	d8002785 	stb	zero,158(sp)
10006384:	003fe906 	br	1000632c <__alt_data_end+0xf800632c>
10006388:	01440074 	movhi	r5,4097
1000638c:	29519304 	addi	r5,r5,17996
10006390:	d9403915 	stw	r5,228(sp)
10006394:	d8c02e15 	stw	r3,184(sp)
10006398:	1025883a 	mov	r18,r2
1000639c:	04401e04 	movi	r17,120
100063a0:	9d84b03a 	or	r2,r19,r22
100063a4:	1000fc1e 	bne	r2,zero,10006798 <___vfprintf_internal_r+0x1298>
100063a8:	0039883a 	mov	fp,zero
100063ac:	00800084 	movi	r2,2
100063b0:	10803fcc 	andi	r2,r2,255
100063b4:	00c00044 	movi	r3,1
100063b8:	10c20f26 	beq	r2,r3,10006bf8 <___vfprintf_internal_r+0x16f8>
100063bc:	00c00084 	movi	r3,2
100063c0:	10fd3326 	beq	r2,r3,10005890 <__alt_data_end+0xf8005890>
100063c4:	003e0b06 	br	10005bf4 <__alt_data_end+0xf8005bf4>
100063c8:	d8c02017 	ldw	r3,128(sp)
100063cc:	003e7106 	br	10005d94 <__alt_data_end+0xf8005d94>
100063d0:	00801944 	movi	r2,101
100063d4:	14407e0e 	bge	r2,r17,100065d0 <___vfprintf_internal_r+0x10d0>
100063d8:	d9003617 	ldw	r4,216(sp)
100063dc:	d9403817 	ldw	r5,224(sp)
100063e0:	000d883a 	mov	r6,zero
100063e4:	000f883a 	mov	r7,zero
100063e8:	d8c03c15 	stw	r3,240(sp)
100063ec:	da003d15 	stw	r8,244(sp)
100063f0:	00101a00 	call	100101a0 <__eqdf2>
100063f4:	d8c03c17 	ldw	r3,240(sp)
100063f8:	da003d17 	ldw	r8,244(sp)
100063fc:	1000f71e 	bne	r2,zero,100067dc <___vfprintf_internal_r+0x12dc>
10006400:	d8801f17 	ldw	r2,124(sp)
10006404:	01040074 	movhi	r4,4097
10006408:	21119a04 	addi	r4,r4,18024
1000640c:	18c00044 	addi	r3,r3,1
10006410:	10800044 	addi	r2,r2,1
10006414:	41000015 	stw	r4,0(r8)
10006418:	01000044 	movi	r4,1
1000641c:	41000115 	stw	r4,4(r8)
10006420:	d8c02015 	stw	r3,128(sp)
10006424:	d8801f15 	stw	r2,124(sp)
10006428:	010001c4 	movi	r4,7
1000642c:	2082b816 	blt	r4,r2,10006f10 <___vfprintf_internal_r+0x1a10>
10006430:	42000204 	addi	r8,r8,8
10006434:	d8802617 	ldw	r2,152(sp)
10006438:	d9403317 	ldw	r5,204(sp)
1000643c:	11400216 	blt	r2,r5,10006448 <___vfprintf_internal_r+0xf48>
10006440:	9080004c 	andi	r2,r18,1
10006444:	103eb326 	beq	r2,zero,10005f14 <__alt_data_end+0xf8005f14>
10006448:	d8803717 	ldw	r2,220(sp)
1000644c:	d9003417 	ldw	r4,208(sp)
10006450:	d9403717 	ldw	r5,220(sp)
10006454:	1887883a 	add	r3,r3,r2
10006458:	d8801f17 	ldw	r2,124(sp)
1000645c:	41000015 	stw	r4,0(r8)
10006460:	41400115 	stw	r5,4(r8)
10006464:	10800044 	addi	r2,r2,1
10006468:	d8c02015 	stw	r3,128(sp)
1000646c:	d8801f15 	stw	r2,124(sp)
10006470:	010001c4 	movi	r4,7
10006474:	20832916 	blt	r4,r2,1000711c <___vfprintf_internal_r+0x1c1c>
10006478:	42000204 	addi	r8,r8,8
1000647c:	d8803317 	ldw	r2,204(sp)
10006480:	143fffc4 	addi	r16,r2,-1
10006484:	043ea30e 	bge	zero,r16,10005f14 <__alt_data_end+0xf8005f14>
10006488:	04400404 	movi	r17,16
1000648c:	d8801f17 	ldw	r2,124(sp)
10006490:	8c00880e 	bge	r17,r16,100066b4 <___vfprintf_internal_r+0x11b4>
10006494:	01440074 	movhi	r5,4097
10006498:	29519a84 	addi	r5,r5,18026
1000649c:	d9402c15 	stw	r5,176(sp)
100064a0:	058001c4 	movi	r22,7
100064a4:	dcc02d17 	ldw	r19,180(sp)
100064a8:	00000306 	br	100064b8 <___vfprintf_internal_r+0xfb8>
100064ac:	42000204 	addi	r8,r8,8
100064b0:	843ffc04 	addi	r16,r16,-16
100064b4:	8c00820e 	bge	r17,r16,100066c0 <___vfprintf_internal_r+0x11c0>
100064b8:	18c00404 	addi	r3,r3,16
100064bc:	10800044 	addi	r2,r2,1
100064c0:	45000015 	stw	r20,0(r8)
100064c4:	44400115 	stw	r17,4(r8)
100064c8:	d8c02015 	stw	r3,128(sp)
100064cc:	d8801f15 	stw	r2,124(sp)
100064d0:	b0bff60e 	bge	r22,r2,100064ac <__alt_data_end+0xf80064ac>
100064d4:	d9801e04 	addi	r6,sp,120
100064d8:	b80b883a 	mov	r5,r23
100064dc:	9809883a 	mov	r4,r19
100064e0:	000cce00 	call	1000cce0 <__sprint_r>
100064e4:	103d0a1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
100064e8:	d8c02017 	ldw	r3,128(sp)
100064ec:	d8801f17 	ldw	r2,124(sp)
100064f0:	da000404 	addi	r8,sp,16
100064f4:	003fee06 	br	100064b0 <__alt_data_end+0xf80064b0>
100064f8:	d9403117 	ldw	r5,196(sp)
100064fc:	d8802917 	ldw	r2,164(sp)
10006500:	28adc83a 	sub	r22,r5,r2
10006504:	05be410e 	bge	zero,r22,10005e0c <__alt_data_end+0xf8005e0c>
10006508:	07000404 	movi	fp,16
1000650c:	d8801f17 	ldw	r2,124(sp)
10006510:	e5838f0e 	bge	fp,r22,10007350 <___vfprintf_internal_r+0x1e50>
10006514:	01440074 	movhi	r5,4097
10006518:	29519a84 	addi	r5,r5,18026
1000651c:	dc403015 	stw	r17,192(sp)
10006520:	d9402c15 	stw	r5,176(sp)
10006524:	b023883a 	mov	r17,r22
10006528:	04c001c4 	movi	r19,7
1000652c:	a82d883a 	mov	r22,r21
10006530:	902b883a 	mov	r21,r18
10006534:	8025883a 	mov	r18,r16
10006538:	dc002d17 	ldw	r16,180(sp)
1000653c:	00000306 	br	1000654c <___vfprintf_internal_r+0x104c>
10006540:	8c7ffc04 	addi	r17,r17,-16
10006544:	42000204 	addi	r8,r8,8
10006548:	e440110e 	bge	fp,r17,10006590 <___vfprintf_internal_r+0x1090>
1000654c:	18c00404 	addi	r3,r3,16
10006550:	10800044 	addi	r2,r2,1
10006554:	45000015 	stw	r20,0(r8)
10006558:	47000115 	stw	fp,4(r8)
1000655c:	d8c02015 	stw	r3,128(sp)
10006560:	d8801f15 	stw	r2,124(sp)
10006564:	98bff60e 	bge	r19,r2,10006540 <__alt_data_end+0xf8006540>
10006568:	d9801e04 	addi	r6,sp,120
1000656c:	b80b883a 	mov	r5,r23
10006570:	8009883a 	mov	r4,r16
10006574:	000cce00 	call	1000cce0 <__sprint_r>
10006578:	103ce51e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
1000657c:	8c7ffc04 	addi	r17,r17,-16
10006580:	d8c02017 	ldw	r3,128(sp)
10006584:	d8801f17 	ldw	r2,124(sp)
10006588:	da000404 	addi	r8,sp,16
1000658c:	e47fef16 	blt	fp,r17,1000654c <__alt_data_end+0xf800654c>
10006590:	9021883a 	mov	r16,r18
10006594:	a825883a 	mov	r18,r21
10006598:	b02b883a 	mov	r21,r22
1000659c:	882d883a 	mov	r22,r17
100065a0:	dc403017 	ldw	r17,192(sp)
100065a4:	d9002c17 	ldw	r4,176(sp)
100065a8:	1d87883a 	add	r3,r3,r22
100065ac:	10800044 	addi	r2,r2,1
100065b0:	41000015 	stw	r4,0(r8)
100065b4:	45800115 	stw	r22,4(r8)
100065b8:	d8c02015 	stw	r3,128(sp)
100065bc:	d8801f15 	stw	r2,124(sp)
100065c0:	010001c4 	movi	r4,7
100065c4:	20818e16 	blt	r4,r2,10006c00 <___vfprintf_internal_r+0x1700>
100065c8:	42000204 	addi	r8,r8,8
100065cc:	003e0f06 	br	10005e0c <__alt_data_end+0xf8005e0c>
100065d0:	d9403317 	ldw	r5,204(sp)
100065d4:	00800044 	movi	r2,1
100065d8:	18c00044 	addi	r3,r3,1
100065dc:	1141530e 	bge	r2,r5,10006b2c <___vfprintf_internal_r+0x162c>
100065e0:	dc401f17 	ldw	r17,124(sp)
100065e4:	00800044 	movi	r2,1
100065e8:	40800115 	stw	r2,4(r8)
100065ec:	8c400044 	addi	r17,r17,1
100065f0:	44000015 	stw	r16,0(r8)
100065f4:	d8c02015 	stw	r3,128(sp)
100065f8:	dc401f15 	stw	r17,124(sp)
100065fc:	008001c4 	movi	r2,7
10006600:	14416b16 	blt	r2,r17,10006bb0 <___vfprintf_internal_r+0x16b0>
10006604:	42000204 	addi	r8,r8,8
10006608:	d8803717 	ldw	r2,220(sp)
1000660c:	d9003417 	ldw	r4,208(sp)
10006610:	8c400044 	addi	r17,r17,1
10006614:	10c7883a 	add	r3,r2,r3
10006618:	40800115 	stw	r2,4(r8)
1000661c:	41000015 	stw	r4,0(r8)
10006620:	d8c02015 	stw	r3,128(sp)
10006624:	dc401f15 	stw	r17,124(sp)
10006628:	008001c4 	movi	r2,7
1000662c:	14416916 	blt	r2,r17,10006bd4 <___vfprintf_internal_r+0x16d4>
10006630:	45800204 	addi	r22,r8,8
10006634:	d9003617 	ldw	r4,216(sp)
10006638:	d9403817 	ldw	r5,224(sp)
1000663c:	000d883a 	mov	r6,zero
10006640:	000f883a 	mov	r7,zero
10006644:	d8c03c15 	stw	r3,240(sp)
10006648:	00101a00 	call	100101a0 <__eqdf2>
1000664c:	d8c03c17 	ldw	r3,240(sp)
10006650:	1000bc26 	beq	r2,zero,10006944 <___vfprintf_internal_r+0x1444>
10006654:	d9403317 	ldw	r5,204(sp)
10006658:	84000044 	addi	r16,r16,1
1000665c:	8c400044 	addi	r17,r17,1
10006660:	28bfffc4 	addi	r2,r5,-1
10006664:	1887883a 	add	r3,r3,r2
10006668:	b0800115 	stw	r2,4(r22)
1000666c:	b4000015 	stw	r16,0(r22)
10006670:	d8c02015 	stw	r3,128(sp)
10006674:	dc401f15 	stw	r17,124(sp)
10006678:	008001c4 	movi	r2,7
1000667c:	14414316 	blt	r2,r17,10006b8c <___vfprintf_internal_r+0x168c>
10006680:	b5800204 	addi	r22,r22,8
10006684:	d9003a17 	ldw	r4,232(sp)
10006688:	df0022c4 	addi	fp,sp,139
1000668c:	8c400044 	addi	r17,r17,1
10006690:	20c7883a 	add	r3,r4,r3
10006694:	b7000015 	stw	fp,0(r22)
10006698:	b1000115 	stw	r4,4(r22)
1000669c:	d8c02015 	stw	r3,128(sp)
100066a0:	dc401f15 	stw	r17,124(sp)
100066a4:	008001c4 	movi	r2,7
100066a8:	14400e16 	blt	r2,r17,100066e4 <___vfprintf_internal_r+0x11e4>
100066ac:	b2000204 	addi	r8,r22,8
100066b0:	003e1806 	br	10005f14 <__alt_data_end+0xf8005f14>
100066b4:	01040074 	movhi	r4,4097
100066b8:	21119a84 	addi	r4,r4,18026
100066bc:	d9002c15 	stw	r4,176(sp)
100066c0:	d9002c17 	ldw	r4,176(sp)
100066c4:	1c07883a 	add	r3,r3,r16
100066c8:	44000115 	stw	r16,4(r8)
100066cc:	41000015 	stw	r4,0(r8)
100066d0:	10800044 	addi	r2,r2,1
100066d4:	d8c02015 	stw	r3,128(sp)
100066d8:	d8801f15 	stw	r2,124(sp)
100066dc:	010001c4 	movi	r4,7
100066e0:	20be0b0e 	bge	r4,r2,10005f10 <__alt_data_end+0xf8005f10>
100066e4:	d9002d17 	ldw	r4,180(sp)
100066e8:	d9801e04 	addi	r6,sp,120
100066ec:	b80b883a 	mov	r5,r23
100066f0:	000cce00 	call	1000cce0 <__sprint_r>
100066f4:	103c861e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
100066f8:	d8c02017 	ldw	r3,128(sp)
100066fc:	da000404 	addi	r8,sp,16
10006700:	003e0406 	br	10005f14 <__alt_data_end+0xf8005f14>
10006704:	d9002d17 	ldw	r4,180(sp)
10006708:	d9801e04 	addi	r6,sp,120
1000670c:	b80b883a 	mov	r5,r23
10006710:	000cce00 	call	1000cce0 <__sprint_r>
10006714:	103e3b26 	beq	r2,zero,10006004 <__alt_data_end+0xf8006004>
10006718:	003c7d06 	br	10005910 <__alt_data_end+0xf8005910>
1000671c:	d9002d17 	ldw	r4,180(sp)
10006720:	d9801e04 	addi	r6,sp,120
10006724:	b80b883a 	mov	r5,r23
10006728:	000cce00 	call	1000cce0 <__sprint_r>
1000672c:	103c781e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006730:	d8c02017 	ldw	r3,128(sp)
10006734:	da000404 	addi	r8,sp,16
10006738:	003de906 	br	10005ee0 <__alt_data_end+0xf8005ee0>
1000673c:	d9002d17 	ldw	r4,180(sp)
10006740:	d9801e04 	addi	r6,sp,120
10006744:	b80b883a 	mov	r5,r23
10006748:	000cce00 	call	1000cce0 <__sprint_r>
1000674c:	103c701e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006750:	d8c02017 	ldw	r3,128(sp)
10006754:	da000404 	addi	r8,sp,16
10006758:	003d9b06 	br	10005dc8 <__alt_data_end+0xf8005dc8>
1000675c:	d9002d17 	ldw	r4,180(sp)
10006760:	d9801e04 	addi	r6,sp,120
10006764:	b80b883a 	mov	r5,r23
10006768:	000cce00 	call	1000cce0 <__sprint_r>
1000676c:	103c681e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006770:	d8c02017 	ldw	r3,128(sp)
10006774:	da000404 	addi	r8,sp,16
10006778:	003da106 	br	10005e00 <__alt_data_end+0xf8005e00>
1000677c:	d9402a17 	ldw	r5,168(sp)
10006780:	d8002785 	stb	zero,158(sp)
10006784:	283f0616 	blt	r5,zero,100063a0 <__alt_data_end+0xf80063a0>
10006788:	00ffdfc4 	movi	r3,-129
1000678c:	9d84b03a 	or	r2,r19,r22
10006790:	90e4703a 	and	r18,r18,r3
10006794:	103c3b26 	beq	r2,zero,10005884 <__alt_data_end+0xf8005884>
10006798:	0039883a 	mov	fp,zero
1000679c:	003e5806 	br	10006100 <__alt_data_end+0xf8006100>
100067a0:	9080040c 	andi	r2,r18,16
100067a4:	1001b326 	beq	r2,zero,10006e74 <___vfprintf_internal_r+0x1974>
100067a8:	d8c02e17 	ldw	r3,184(sp)
100067ac:	d9002a17 	ldw	r4,168(sp)
100067b0:	d8002785 	stb	zero,158(sp)
100067b4:	18800104 	addi	r2,r3,4
100067b8:	1cc00017 	ldw	r19,0(r3)
100067bc:	002d883a 	mov	r22,zero
100067c0:	2001b516 	blt	r4,zero,10006e98 <___vfprintf_internal_r+0x1998>
100067c4:	00ffdfc4 	movi	r3,-129
100067c8:	d8802e15 	stw	r2,184(sp)
100067cc:	90e4703a 	and	r18,r18,r3
100067d0:	983d0526 	beq	r19,zero,10005be8 <__alt_data_end+0xf8005be8>
100067d4:	0039883a 	mov	fp,zero
100067d8:	003d0806 	br	10005bfc <__alt_data_end+0xf8005bfc>
100067dc:	dc402617 	ldw	r17,152(sp)
100067e0:	0441d30e 	bge	zero,r17,10006f30 <___vfprintf_internal_r+0x1a30>
100067e4:	dc403217 	ldw	r17,200(sp)
100067e8:	d8803317 	ldw	r2,204(sp)
100067ec:	1440010e 	bge	r2,r17,100067f4 <___vfprintf_internal_r+0x12f4>
100067f0:	1023883a 	mov	r17,r2
100067f4:	04400a0e 	bge	zero,r17,10006820 <___vfprintf_internal_r+0x1320>
100067f8:	d8801f17 	ldw	r2,124(sp)
100067fc:	1c47883a 	add	r3,r3,r17
10006800:	44000015 	stw	r16,0(r8)
10006804:	10800044 	addi	r2,r2,1
10006808:	44400115 	stw	r17,4(r8)
1000680c:	d8c02015 	stw	r3,128(sp)
10006810:	d8801f15 	stw	r2,124(sp)
10006814:	010001c4 	movi	r4,7
10006818:	20826516 	blt	r4,r2,100071b0 <___vfprintf_internal_r+0x1cb0>
1000681c:	42000204 	addi	r8,r8,8
10006820:	88026116 	blt	r17,zero,100071a8 <___vfprintf_internal_r+0x1ca8>
10006824:	d9003217 	ldw	r4,200(sp)
10006828:	2463c83a 	sub	r17,r4,r17
1000682c:	04407b0e 	bge	zero,r17,10006a1c <___vfprintf_internal_r+0x151c>
10006830:	05800404 	movi	r22,16
10006834:	d8801f17 	ldw	r2,124(sp)
10006838:	b4419d0e 	bge	r22,r17,10006eb0 <___vfprintf_internal_r+0x19b0>
1000683c:	01040074 	movhi	r4,4097
10006840:	21119a84 	addi	r4,r4,18026
10006844:	d9002c15 	stw	r4,176(sp)
10006848:	070001c4 	movi	fp,7
1000684c:	dcc02d17 	ldw	r19,180(sp)
10006850:	00000306 	br	10006860 <___vfprintf_internal_r+0x1360>
10006854:	42000204 	addi	r8,r8,8
10006858:	8c7ffc04 	addi	r17,r17,-16
1000685c:	b441970e 	bge	r22,r17,10006ebc <___vfprintf_internal_r+0x19bc>
10006860:	18c00404 	addi	r3,r3,16
10006864:	10800044 	addi	r2,r2,1
10006868:	45000015 	stw	r20,0(r8)
1000686c:	45800115 	stw	r22,4(r8)
10006870:	d8c02015 	stw	r3,128(sp)
10006874:	d8801f15 	stw	r2,124(sp)
10006878:	e0bff60e 	bge	fp,r2,10006854 <__alt_data_end+0xf8006854>
1000687c:	d9801e04 	addi	r6,sp,120
10006880:	b80b883a 	mov	r5,r23
10006884:	9809883a 	mov	r4,r19
10006888:	000cce00 	call	1000cce0 <__sprint_r>
1000688c:	103c201e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006890:	d8c02017 	ldw	r3,128(sp)
10006894:	d8801f17 	ldw	r2,124(sp)
10006898:	da000404 	addi	r8,sp,16
1000689c:	003fee06 	br	10006858 <__alt_data_end+0xf8006858>
100068a0:	d9002d17 	ldw	r4,180(sp)
100068a4:	d9801e04 	addi	r6,sp,120
100068a8:	b80b883a 	mov	r5,r23
100068ac:	000cce00 	call	1000cce0 <__sprint_r>
100068b0:	103c171e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
100068b4:	d8c02017 	ldw	r3,128(sp)
100068b8:	df002787 	ldb	fp,158(sp)
100068bc:	da000404 	addi	r8,sp,16
100068c0:	003d3406 	br	10005d94 <__alt_data_end+0xf8005d94>
100068c4:	9080040c 	andi	r2,r18,16
100068c8:	10016126 	beq	r2,zero,10006e50 <___vfprintf_internal_r+0x1950>
100068cc:	d9402e17 	ldw	r5,184(sp)
100068d0:	2cc00017 	ldw	r19,0(r5)
100068d4:	29400104 	addi	r5,r5,4
100068d8:	d9402e15 	stw	r5,184(sp)
100068dc:	982dd7fa 	srai	r22,r19,31
100068e0:	b005883a 	mov	r2,r22
100068e4:	003c5a06 	br	10005a50 <__alt_data_end+0xf8005a50>
100068e8:	9080040c 	andi	r2,r18,16
100068ec:	10003526 	beq	r2,zero,100069c4 <___vfprintf_internal_r+0x14c4>
100068f0:	d8c02e17 	ldw	r3,184(sp)
100068f4:	d9002a17 	ldw	r4,168(sp)
100068f8:	d8002785 	stb	zero,158(sp)
100068fc:	18800104 	addi	r2,r3,4
10006900:	1cc00017 	ldw	r19,0(r3)
10006904:	002d883a 	mov	r22,zero
10006908:	20003716 	blt	r4,zero,100069e8 <___vfprintf_internal_r+0x14e8>
1000690c:	00ffdfc4 	movi	r3,-129
10006910:	d8802e15 	stw	r2,184(sp)
10006914:	90e4703a 	and	r18,r18,r3
10006918:	0039883a 	mov	fp,zero
1000691c:	983dd426 	beq	r19,zero,10006070 <__alt_data_end+0xf8006070>
10006920:	00800244 	movi	r2,9
10006924:	14fc5336 	bltu	r2,r19,10005a74 <__alt_data_end+0xf8005a74>
10006928:	d8c02817 	ldw	r3,160(sp)
1000692c:	dc001dc4 	addi	r16,sp,119
10006930:	9cc00c04 	addi	r19,r19,48
10006934:	1c07c83a 	sub	r3,r3,r16
10006938:	dcc01dc5 	stb	r19,119(sp)
1000693c:	d8c02b15 	stw	r3,172(sp)
10006940:	003cc606 	br	10005c5c <__alt_data_end+0xf8005c5c>
10006944:	d8803317 	ldw	r2,204(sp)
10006948:	143fffc4 	addi	r16,r2,-1
1000694c:	043f4d0e 	bge	zero,r16,10006684 <__alt_data_end+0xf8006684>
10006950:	07000404 	movi	fp,16
10006954:	e400810e 	bge	fp,r16,10006b5c <___vfprintf_internal_r+0x165c>
10006958:	01440074 	movhi	r5,4097
1000695c:	29519a84 	addi	r5,r5,18026
10006960:	d9402c15 	stw	r5,176(sp)
10006964:	01c001c4 	movi	r7,7
10006968:	dcc02d17 	ldw	r19,180(sp)
1000696c:	00000306 	br	1000697c <___vfprintf_internal_r+0x147c>
10006970:	b5800204 	addi	r22,r22,8
10006974:	843ffc04 	addi	r16,r16,-16
10006978:	e4007b0e 	bge	fp,r16,10006b68 <___vfprintf_internal_r+0x1668>
1000697c:	18c00404 	addi	r3,r3,16
10006980:	8c400044 	addi	r17,r17,1
10006984:	b5000015 	stw	r20,0(r22)
10006988:	b7000115 	stw	fp,4(r22)
1000698c:	d8c02015 	stw	r3,128(sp)
10006990:	dc401f15 	stw	r17,124(sp)
10006994:	3c7ff60e 	bge	r7,r17,10006970 <__alt_data_end+0xf8006970>
10006998:	d9801e04 	addi	r6,sp,120
1000699c:	b80b883a 	mov	r5,r23
100069a0:	9809883a 	mov	r4,r19
100069a4:	d9c03c15 	stw	r7,240(sp)
100069a8:	000cce00 	call	1000cce0 <__sprint_r>
100069ac:	d9c03c17 	ldw	r7,240(sp)
100069b0:	103bd71e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
100069b4:	d8c02017 	ldw	r3,128(sp)
100069b8:	dc401f17 	ldw	r17,124(sp)
100069bc:	dd800404 	addi	r22,sp,16
100069c0:	003fec06 	br	10006974 <__alt_data_end+0xf8006974>
100069c4:	9080100c 	andi	r2,r18,64
100069c8:	d8002785 	stb	zero,158(sp)
100069cc:	10010e26 	beq	r2,zero,10006e08 <___vfprintf_internal_r+0x1908>
100069d0:	d9402e17 	ldw	r5,184(sp)
100069d4:	d8c02a17 	ldw	r3,168(sp)
100069d8:	002d883a 	mov	r22,zero
100069dc:	28800104 	addi	r2,r5,4
100069e0:	2cc0000b 	ldhu	r19,0(r5)
100069e4:	183fc90e 	bge	r3,zero,1000690c <__alt_data_end+0xf800690c>
100069e8:	d8802e15 	stw	r2,184(sp)
100069ec:	0039883a 	mov	fp,zero
100069f0:	9d84b03a 	or	r2,r19,r22
100069f4:	103c1e1e 	bne	r2,zero,10005a70 <__alt_data_end+0xf8005a70>
100069f8:	00800044 	movi	r2,1
100069fc:	003e6c06 	br	100063b0 <__alt_data_end+0xf80063b0>
10006a00:	d9002d17 	ldw	r4,180(sp)
10006a04:	d9801e04 	addi	r6,sp,120
10006a08:	b80b883a 	mov	r5,r23
10006a0c:	000cce00 	call	1000cce0 <__sprint_r>
10006a10:	103bbf1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006a14:	d8c02017 	ldw	r3,128(sp)
10006a18:	da000404 	addi	r8,sp,16
10006a1c:	d9003217 	ldw	r4,200(sp)
10006a20:	d8802617 	ldw	r2,152(sp)
10006a24:	d9403317 	ldw	r5,204(sp)
10006a28:	8123883a 	add	r17,r16,r4
10006a2c:	11400216 	blt	r2,r5,10006a38 <___vfprintf_internal_r+0x1538>
10006a30:	9100004c 	andi	r4,r18,1
10006a34:	20000d26 	beq	r4,zero,10006a6c <___vfprintf_internal_r+0x156c>
10006a38:	d9003717 	ldw	r4,220(sp)
10006a3c:	d9403417 	ldw	r5,208(sp)
10006a40:	1907883a 	add	r3,r3,r4
10006a44:	d9001f17 	ldw	r4,124(sp)
10006a48:	41400015 	stw	r5,0(r8)
10006a4c:	d9403717 	ldw	r5,220(sp)
10006a50:	21000044 	addi	r4,r4,1
10006a54:	d8c02015 	stw	r3,128(sp)
10006a58:	41400115 	stw	r5,4(r8)
10006a5c:	d9001f15 	stw	r4,124(sp)
10006a60:	014001c4 	movi	r5,7
10006a64:	2901e816 	blt	r5,r4,10007208 <___vfprintf_internal_r+0x1d08>
10006a68:	42000204 	addi	r8,r8,8
10006a6c:	d9003317 	ldw	r4,204(sp)
10006a70:	8121883a 	add	r16,r16,r4
10006a74:	2085c83a 	sub	r2,r4,r2
10006a78:	8461c83a 	sub	r16,r16,r17
10006a7c:	1400010e 	bge	r2,r16,10006a84 <___vfprintf_internal_r+0x1584>
10006a80:	1021883a 	mov	r16,r2
10006a84:	04000a0e 	bge	zero,r16,10006ab0 <___vfprintf_internal_r+0x15b0>
10006a88:	d9001f17 	ldw	r4,124(sp)
10006a8c:	1c07883a 	add	r3,r3,r16
10006a90:	44400015 	stw	r17,0(r8)
10006a94:	21000044 	addi	r4,r4,1
10006a98:	44000115 	stw	r16,4(r8)
10006a9c:	d8c02015 	stw	r3,128(sp)
10006aa0:	d9001f15 	stw	r4,124(sp)
10006aa4:	014001c4 	movi	r5,7
10006aa8:	2901fb16 	blt	r5,r4,10007298 <___vfprintf_internal_r+0x1d98>
10006aac:	42000204 	addi	r8,r8,8
10006ab0:	8001f716 	blt	r16,zero,10007290 <___vfprintf_internal_r+0x1d90>
10006ab4:	1421c83a 	sub	r16,r2,r16
10006ab8:	043d160e 	bge	zero,r16,10005f14 <__alt_data_end+0xf8005f14>
10006abc:	04400404 	movi	r17,16
10006ac0:	d8801f17 	ldw	r2,124(sp)
10006ac4:	8c3efb0e 	bge	r17,r16,100066b4 <__alt_data_end+0xf80066b4>
10006ac8:	01440074 	movhi	r5,4097
10006acc:	29519a84 	addi	r5,r5,18026
10006ad0:	d9402c15 	stw	r5,176(sp)
10006ad4:	058001c4 	movi	r22,7
10006ad8:	dcc02d17 	ldw	r19,180(sp)
10006adc:	00000306 	br	10006aec <___vfprintf_internal_r+0x15ec>
10006ae0:	42000204 	addi	r8,r8,8
10006ae4:	843ffc04 	addi	r16,r16,-16
10006ae8:	8c3ef50e 	bge	r17,r16,100066c0 <__alt_data_end+0xf80066c0>
10006aec:	18c00404 	addi	r3,r3,16
10006af0:	10800044 	addi	r2,r2,1
10006af4:	45000015 	stw	r20,0(r8)
10006af8:	44400115 	stw	r17,4(r8)
10006afc:	d8c02015 	stw	r3,128(sp)
10006b00:	d8801f15 	stw	r2,124(sp)
10006b04:	b0bff60e 	bge	r22,r2,10006ae0 <__alt_data_end+0xf8006ae0>
10006b08:	d9801e04 	addi	r6,sp,120
10006b0c:	b80b883a 	mov	r5,r23
10006b10:	9809883a 	mov	r4,r19
10006b14:	000cce00 	call	1000cce0 <__sprint_r>
10006b18:	103b7d1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006b1c:	d8c02017 	ldw	r3,128(sp)
10006b20:	d8801f17 	ldw	r2,124(sp)
10006b24:	da000404 	addi	r8,sp,16
10006b28:	003fee06 	br	10006ae4 <__alt_data_end+0xf8006ae4>
10006b2c:	9088703a 	and	r4,r18,r2
10006b30:	203eab1e 	bne	r4,zero,100065e0 <__alt_data_end+0xf80065e0>
10006b34:	dc401f17 	ldw	r17,124(sp)
10006b38:	40800115 	stw	r2,4(r8)
10006b3c:	44000015 	stw	r16,0(r8)
10006b40:	8c400044 	addi	r17,r17,1
10006b44:	d8c02015 	stw	r3,128(sp)
10006b48:	dc401f15 	stw	r17,124(sp)
10006b4c:	008001c4 	movi	r2,7
10006b50:	14400e16 	blt	r2,r17,10006b8c <___vfprintf_internal_r+0x168c>
10006b54:	45800204 	addi	r22,r8,8
10006b58:	003eca06 	br	10006684 <__alt_data_end+0xf8006684>
10006b5c:	01040074 	movhi	r4,4097
10006b60:	21119a84 	addi	r4,r4,18026
10006b64:	d9002c15 	stw	r4,176(sp)
10006b68:	d8802c17 	ldw	r2,176(sp)
10006b6c:	1c07883a 	add	r3,r3,r16
10006b70:	8c400044 	addi	r17,r17,1
10006b74:	b0800015 	stw	r2,0(r22)
10006b78:	b4000115 	stw	r16,4(r22)
10006b7c:	d8c02015 	stw	r3,128(sp)
10006b80:	dc401f15 	stw	r17,124(sp)
10006b84:	008001c4 	movi	r2,7
10006b88:	147ebd0e 	bge	r2,r17,10006680 <__alt_data_end+0xf8006680>
10006b8c:	d9002d17 	ldw	r4,180(sp)
10006b90:	d9801e04 	addi	r6,sp,120
10006b94:	b80b883a 	mov	r5,r23
10006b98:	000cce00 	call	1000cce0 <__sprint_r>
10006b9c:	103b5c1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006ba0:	d8c02017 	ldw	r3,128(sp)
10006ba4:	dc401f17 	ldw	r17,124(sp)
10006ba8:	dd800404 	addi	r22,sp,16
10006bac:	003eb506 	br	10006684 <__alt_data_end+0xf8006684>
10006bb0:	d9002d17 	ldw	r4,180(sp)
10006bb4:	d9801e04 	addi	r6,sp,120
10006bb8:	b80b883a 	mov	r5,r23
10006bbc:	000cce00 	call	1000cce0 <__sprint_r>
10006bc0:	103b531e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006bc4:	d8c02017 	ldw	r3,128(sp)
10006bc8:	dc401f17 	ldw	r17,124(sp)
10006bcc:	da000404 	addi	r8,sp,16
10006bd0:	003e8d06 	br	10006608 <__alt_data_end+0xf8006608>
10006bd4:	d9002d17 	ldw	r4,180(sp)
10006bd8:	d9801e04 	addi	r6,sp,120
10006bdc:	b80b883a 	mov	r5,r23
10006be0:	000cce00 	call	1000cce0 <__sprint_r>
10006be4:	103b4a1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006be8:	d8c02017 	ldw	r3,128(sp)
10006bec:	dc401f17 	ldw	r17,124(sp)
10006bf0:	dd800404 	addi	r22,sp,16
10006bf4:	003e8f06 	br	10006634 <__alt_data_end+0xf8006634>
10006bf8:	0027883a 	mov	r19,zero
10006bfc:	003f4a06 	br	10006928 <__alt_data_end+0xf8006928>
10006c00:	d9002d17 	ldw	r4,180(sp)
10006c04:	d9801e04 	addi	r6,sp,120
10006c08:	b80b883a 	mov	r5,r23
10006c0c:	000cce00 	call	1000cce0 <__sprint_r>
10006c10:	103b3f1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006c14:	d8c02017 	ldw	r3,128(sp)
10006c18:	da000404 	addi	r8,sp,16
10006c1c:	003c7b06 	br	10005e0c <__alt_data_end+0xf8005e0c>
10006c20:	d9402a17 	ldw	r5,168(sp)
10006c24:	04e7c83a 	sub	r19,zero,r19
10006c28:	07000b44 	movi	fp,45
10006c2c:	9804c03a 	cmpne	r2,r19,zero
10006c30:	05adc83a 	sub	r22,zero,r22
10006c34:	df002785 	stb	fp,158(sp)
10006c38:	b0adc83a 	sub	r22,r22,r2
10006c3c:	28017b16 	blt	r5,zero,1000722c <___vfprintf_internal_r+0x1d2c>
10006c40:	00bfdfc4 	movi	r2,-129
10006c44:	90a4703a 	and	r18,r18,r2
10006c48:	003b8906 	br	10005a70 <__alt_data_end+0xf8005a70>
10006c4c:	d9003617 	ldw	r4,216(sp)
10006c50:	d9403817 	ldw	r5,224(sp)
10006c54:	da003d15 	stw	r8,244(sp)
10006c58:	000c9040 	call	1000c904 <__fpclassifyd>
10006c5c:	da003d17 	ldw	r8,244(sp)
10006c60:	1000f026 	beq	r2,zero,10007024 <___vfprintf_internal_r+0x1b24>
10006c64:	d9002a17 	ldw	r4,168(sp)
10006c68:	05bff7c4 	movi	r22,-33
10006c6c:	00bfffc4 	movi	r2,-1
10006c70:	8dac703a 	and	r22,r17,r22
10006c74:	20820026 	beq	r4,r2,10007478 <___vfprintf_internal_r+0x1f78>
10006c78:	008011c4 	movi	r2,71
10006c7c:	b081f726 	beq	r22,r2,1000745c <___vfprintf_internal_r+0x1f5c>
10006c80:	d9003817 	ldw	r4,224(sp)
10006c84:	90c04014 	ori	r3,r18,256
10006c88:	d8c02c15 	stw	r3,176(sp)
10006c8c:	20021516 	blt	r4,zero,100074e4 <___vfprintf_internal_r+0x1fe4>
10006c90:	dcc03817 	ldw	r19,224(sp)
10006c94:	d8002905 	stb	zero,164(sp)
10006c98:	00801984 	movi	r2,102
10006c9c:	8881f926 	beq	r17,r2,10007484 <___vfprintf_internal_r+0x1f84>
10006ca0:	00801184 	movi	r2,70
10006ca4:	88821c26 	beq	r17,r2,10007518 <___vfprintf_internal_r+0x2018>
10006ca8:	00801144 	movi	r2,69
10006cac:	b081ef26 	beq	r22,r2,1000746c <___vfprintf_internal_r+0x1f6c>
10006cb0:	d8c02a17 	ldw	r3,168(sp)
10006cb4:	d8802104 	addi	r2,sp,132
10006cb8:	d8800315 	stw	r2,12(sp)
10006cbc:	d9403617 	ldw	r5,216(sp)
10006cc0:	d8802504 	addi	r2,sp,148
10006cc4:	d9002d17 	ldw	r4,180(sp)
10006cc8:	d8800215 	stw	r2,8(sp)
10006ccc:	d8802604 	addi	r2,sp,152
10006cd0:	d8c00015 	stw	r3,0(sp)
10006cd4:	d8800115 	stw	r2,4(sp)
10006cd8:	01c00084 	movi	r7,2
10006cdc:	980d883a 	mov	r6,r19
10006ce0:	d8c03c15 	stw	r3,240(sp)
10006ce4:	da003d15 	stw	r8,244(sp)
10006ce8:	0007c300 	call	10007c30 <_dtoa_r>
10006cec:	1021883a 	mov	r16,r2
10006cf0:	008019c4 	movi	r2,103
10006cf4:	d8c03c17 	ldw	r3,240(sp)
10006cf8:	da003d17 	ldw	r8,244(sp)
10006cfc:	88817126 	beq	r17,r2,100072c4 <___vfprintf_internal_r+0x1dc4>
10006d00:	008011c4 	movi	r2,71
10006d04:	88829126 	beq	r17,r2,1000774c <___vfprintf_internal_r+0x224c>
10006d08:	80f9883a 	add	fp,r16,r3
10006d0c:	d9003617 	ldw	r4,216(sp)
10006d10:	000d883a 	mov	r6,zero
10006d14:	000f883a 	mov	r7,zero
10006d18:	980b883a 	mov	r5,r19
10006d1c:	da003d15 	stw	r8,244(sp)
10006d20:	00101a00 	call	100101a0 <__eqdf2>
10006d24:	da003d17 	ldw	r8,244(sp)
10006d28:	10018d26 	beq	r2,zero,10007360 <___vfprintf_internal_r+0x1e60>
10006d2c:	d8802117 	ldw	r2,132(sp)
10006d30:	1700062e 	bgeu	r2,fp,10006d4c <___vfprintf_internal_r+0x184c>
10006d34:	01000c04 	movi	r4,48
10006d38:	10c00044 	addi	r3,r2,1
10006d3c:	d8c02115 	stw	r3,132(sp)
10006d40:	11000005 	stb	r4,0(r2)
10006d44:	d8802117 	ldw	r2,132(sp)
10006d48:	173ffb36 	bltu	r2,fp,10006d38 <__alt_data_end+0xf8006d38>
10006d4c:	1405c83a 	sub	r2,r2,r16
10006d50:	d8803315 	stw	r2,204(sp)
10006d54:	008011c4 	movi	r2,71
10006d58:	b0817626 	beq	r22,r2,10007334 <___vfprintf_internal_r+0x1e34>
10006d5c:	00801944 	movi	r2,101
10006d60:	1442800e 	bge	r2,r17,10007764 <___vfprintf_internal_r+0x2264>
10006d64:	d8c02617 	ldw	r3,152(sp)
10006d68:	00801984 	movi	r2,102
10006d6c:	d8c03215 	stw	r3,200(sp)
10006d70:	8881fe26 	beq	r17,r2,1000756c <___vfprintf_internal_r+0x206c>
10006d74:	d8c03217 	ldw	r3,200(sp)
10006d78:	d9003317 	ldw	r4,204(sp)
10006d7c:	1901dd16 	blt	r3,r4,100074f4 <___vfprintf_internal_r+0x1ff4>
10006d80:	9480004c 	andi	r18,r18,1
10006d84:	90022b1e 	bne	r18,zero,10007634 <___vfprintf_internal_r+0x2134>
10006d88:	1805883a 	mov	r2,r3
10006d8c:	18028316 	blt	r3,zero,1000779c <___vfprintf_internal_r+0x229c>
10006d90:	d8c03217 	ldw	r3,200(sp)
10006d94:	044019c4 	movi	r17,103
10006d98:	d8c02b15 	stw	r3,172(sp)
10006d9c:	df002907 	ldb	fp,164(sp)
10006da0:	e001531e 	bne	fp,zero,100072f0 <___vfprintf_internal_r+0x1df0>
10006da4:	df002783 	ldbu	fp,158(sp)
10006da8:	d8802915 	stw	r2,164(sp)
10006dac:	dc802c17 	ldw	r18,176(sp)
10006db0:	d8002a15 	stw	zero,168(sp)
10006db4:	003baf06 	br	10005c74 <__alt_data_end+0xf8005c74>
10006db8:	d8c02e17 	ldw	r3,184(sp)
10006dbc:	d9002e17 	ldw	r4,184(sp)
10006dc0:	d9402e17 	ldw	r5,184(sp)
10006dc4:	18c00017 	ldw	r3,0(r3)
10006dc8:	21000117 	ldw	r4,4(r4)
10006dcc:	29400204 	addi	r5,r5,8
10006dd0:	d8c03615 	stw	r3,216(sp)
10006dd4:	d9003815 	stw	r4,224(sp)
10006dd8:	d9402e15 	stw	r5,184(sp)
10006ddc:	003b5006 	br	10005b20 <__alt_data_end+0xf8005b20>
10006de0:	ac400007 	ldb	r17,0(r21)
10006de4:	003a2806 	br	10005688 <__alt_data_end+0xf8005688>
10006de8:	9080100c 	andi	r2,r18,64
10006dec:	1000a826 	beq	r2,zero,10007090 <___vfprintf_internal_r+0x1b90>
10006df0:	d8c02e17 	ldw	r3,184(sp)
10006df4:	002d883a 	mov	r22,zero
10006df8:	1cc0000b 	ldhu	r19,0(r3)
10006dfc:	18c00104 	addi	r3,r3,4
10006e00:	d8c02e15 	stw	r3,184(sp)
10006e04:	003caf06 	br	100060c4 <__alt_data_end+0xf80060c4>
10006e08:	d9002e17 	ldw	r4,184(sp)
10006e0c:	d9402a17 	ldw	r5,168(sp)
10006e10:	002d883a 	mov	r22,zero
10006e14:	20800104 	addi	r2,r4,4
10006e18:	24c00017 	ldw	r19,0(r4)
10006e1c:	283ebb0e 	bge	r5,zero,1000690c <__alt_data_end+0xf800690c>
10006e20:	003ef106 	br	100069e8 <__alt_data_end+0xf80069e8>
10006e24:	9080040c 	andi	r2,r18,16
10006e28:	1000921e 	bne	r2,zero,10007074 <___vfprintf_internal_r+0x1b74>
10006e2c:	9480100c 	andi	r18,r18,64
10006e30:	90013926 	beq	r18,zero,10007318 <___vfprintf_internal_r+0x1e18>
10006e34:	d9402e17 	ldw	r5,184(sp)
10006e38:	d8c02f17 	ldw	r3,188(sp)
10006e3c:	28800017 	ldw	r2,0(r5)
10006e40:	29400104 	addi	r5,r5,4
10006e44:	d9402e15 	stw	r5,184(sp)
10006e48:	10c0000d 	sth	r3,0(r2)
10006e4c:	0039e406 	br	100055e0 <__alt_data_end+0xf80055e0>
10006e50:	9080100c 	andi	r2,r18,64
10006e54:	10008026 	beq	r2,zero,10007058 <___vfprintf_internal_r+0x1b58>
10006e58:	d8802e17 	ldw	r2,184(sp)
10006e5c:	14c0000f 	ldh	r19,0(r2)
10006e60:	10800104 	addi	r2,r2,4
10006e64:	d8802e15 	stw	r2,184(sp)
10006e68:	982dd7fa 	srai	r22,r19,31
10006e6c:	b005883a 	mov	r2,r22
10006e70:	003af706 	br	10005a50 <__alt_data_end+0xf8005a50>
10006e74:	9080100c 	andi	r2,r18,64
10006e78:	d8002785 	stb	zero,158(sp)
10006e7c:	10008a1e 	bne	r2,zero,100070a8 <___vfprintf_internal_r+0x1ba8>
10006e80:	d9002e17 	ldw	r4,184(sp)
10006e84:	d9402a17 	ldw	r5,168(sp)
10006e88:	002d883a 	mov	r22,zero
10006e8c:	20800104 	addi	r2,r4,4
10006e90:	24c00017 	ldw	r19,0(r4)
10006e94:	283e4b0e 	bge	r5,zero,100067c4 <__alt_data_end+0xf80067c4>
10006e98:	9d86b03a 	or	r3,r19,r22
10006e9c:	d8802e15 	stw	r2,184(sp)
10006ea0:	183e4c1e 	bne	r3,zero,100067d4 <__alt_data_end+0xf80067d4>
10006ea4:	0039883a 	mov	fp,zero
10006ea8:	0005883a 	mov	r2,zero
10006eac:	003d4006 	br	100063b0 <__alt_data_end+0xf80063b0>
10006eb0:	01440074 	movhi	r5,4097
10006eb4:	29519a84 	addi	r5,r5,18026
10006eb8:	d9402c15 	stw	r5,176(sp)
10006ebc:	d9402c17 	ldw	r5,176(sp)
10006ec0:	1c47883a 	add	r3,r3,r17
10006ec4:	10800044 	addi	r2,r2,1
10006ec8:	41400015 	stw	r5,0(r8)
10006ecc:	44400115 	stw	r17,4(r8)
10006ed0:	d8c02015 	stw	r3,128(sp)
10006ed4:	d8801f15 	stw	r2,124(sp)
10006ed8:	010001c4 	movi	r4,7
10006edc:	20bec816 	blt	r4,r2,10006a00 <__alt_data_end+0xf8006a00>
10006ee0:	42000204 	addi	r8,r8,8
10006ee4:	003ecd06 	br	10006a1c <__alt_data_end+0xf8006a1c>
10006ee8:	d9002a17 	ldw	r4,168(sp)
10006eec:	d8002785 	stb	zero,158(sp)
10006ef0:	203d2d16 	blt	r4,zero,100063a8 <__alt_data_end+0xf80063a8>
10006ef4:	00bfdfc4 	movi	r2,-129
10006ef8:	90a4703a 	and	r18,r18,r2
10006efc:	003a6106 	br	10005884 <__alt_data_end+0xf8005884>
10006f00:	01040074 	movhi	r4,4097
10006f04:	21119a84 	addi	r4,r4,18026
10006f08:	d9002c15 	stw	r4,176(sp)
10006f0c:	003bea06 	br	10005eb8 <__alt_data_end+0xf8005eb8>
10006f10:	d9002d17 	ldw	r4,180(sp)
10006f14:	d9801e04 	addi	r6,sp,120
10006f18:	b80b883a 	mov	r5,r23
10006f1c:	000cce00 	call	1000cce0 <__sprint_r>
10006f20:	103a7b1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10006f24:	d8c02017 	ldw	r3,128(sp)
10006f28:	da000404 	addi	r8,sp,16
10006f2c:	003d4106 	br	10006434 <__alt_data_end+0xf8006434>
10006f30:	d8801f17 	ldw	r2,124(sp)
10006f34:	01440074 	movhi	r5,4097
10006f38:	01000044 	movi	r4,1
10006f3c:	18c00044 	addi	r3,r3,1
10006f40:	10800044 	addi	r2,r2,1
10006f44:	29519a04 	addi	r5,r5,18024
10006f48:	41000115 	stw	r4,4(r8)
10006f4c:	41400015 	stw	r5,0(r8)
10006f50:	d8c02015 	stw	r3,128(sp)
10006f54:	d8801f15 	stw	r2,124(sp)
10006f58:	010001c4 	movi	r4,7
10006f5c:	20805c16 	blt	r4,r2,100070d0 <___vfprintf_internal_r+0x1bd0>
10006f60:	42000204 	addi	r8,r8,8
10006f64:	8800041e 	bne	r17,zero,10006f78 <___vfprintf_internal_r+0x1a78>
10006f68:	d8803317 	ldw	r2,204(sp)
10006f6c:	1000021e 	bne	r2,zero,10006f78 <___vfprintf_internal_r+0x1a78>
10006f70:	9080004c 	andi	r2,r18,1
10006f74:	103be726 	beq	r2,zero,10005f14 <__alt_data_end+0xf8005f14>
10006f78:	d9003717 	ldw	r4,220(sp)
10006f7c:	d8801f17 	ldw	r2,124(sp)
10006f80:	d9403417 	ldw	r5,208(sp)
10006f84:	20c7883a 	add	r3,r4,r3
10006f88:	10800044 	addi	r2,r2,1
10006f8c:	41000115 	stw	r4,4(r8)
10006f90:	41400015 	stw	r5,0(r8)
10006f94:	d8c02015 	stw	r3,128(sp)
10006f98:	d8801f15 	stw	r2,124(sp)
10006f9c:	010001c4 	movi	r4,7
10006fa0:	20812116 	blt	r4,r2,10007428 <___vfprintf_internal_r+0x1f28>
10006fa4:	42000204 	addi	r8,r8,8
10006fa8:	0463c83a 	sub	r17,zero,r17
10006fac:	0440730e 	bge	zero,r17,1000717c <___vfprintf_internal_r+0x1c7c>
10006fb0:	05800404 	movi	r22,16
10006fb4:	b440860e 	bge	r22,r17,100071d0 <___vfprintf_internal_r+0x1cd0>
10006fb8:	01440074 	movhi	r5,4097
10006fbc:	29519a84 	addi	r5,r5,18026
10006fc0:	d9402c15 	stw	r5,176(sp)
10006fc4:	070001c4 	movi	fp,7
10006fc8:	dcc02d17 	ldw	r19,180(sp)
10006fcc:	00000306 	br	10006fdc <___vfprintf_internal_r+0x1adc>
10006fd0:	42000204 	addi	r8,r8,8
10006fd4:	8c7ffc04 	addi	r17,r17,-16
10006fd8:	b440800e 	bge	r22,r17,100071dc <___vfprintf_internal_r+0x1cdc>
10006fdc:	18c00404 	addi	r3,r3,16
10006fe0:	10800044 	addi	r2,r2,1
10006fe4:	45000015 	stw	r20,0(r8)
10006fe8:	45800115 	stw	r22,4(r8)
10006fec:	d8c02015 	stw	r3,128(sp)
10006ff0:	d8801f15 	stw	r2,124(sp)
10006ff4:	e0bff60e 	bge	fp,r2,10006fd0 <__alt_data_end+0xf8006fd0>
10006ff8:	d9801e04 	addi	r6,sp,120
10006ffc:	b80b883a 	mov	r5,r23
10007000:	9809883a 	mov	r4,r19
10007004:	000cce00 	call	1000cce0 <__sprint_r>
10007008:	103a411e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
1000700c:	d8c02017 	ldw	r3,128(sp)
10007010:	d8801f17 	ldw	r2,124(sp)
10007014:	da000404 	addi	r8,sp,16
10007018:	003fee06 	br	10006fd4 <__alt_data_end+0xf8006fd4>
1000701c:	00bfffc4 	movi	r2,-1
10007020:	003a3f06 	br	10005920 <__alt_data_end+0xf8005920>
10007024:	008011c4 	movi	r2,71
10007028:	1440b816 	blt	r2,r17,1000730c <___vfprintf_internal_r+0x1e0c>
1000702c:	04040074 	movhi	r16,4097
10007030:	84118c04 	addi	r16,r16,17968
10007034:	00c000c4 	movi	r3,3
10007038:	00bfdfc4 	movi	r2,-129
1000703c:	d8c02915 	stw	r3,164(sp)
10007040:	90a4703a 	and	r18,r18,r2
10007044:	df002783 	ldbu	fp,158(sp)
10007048:	d8c02b15 	stw	r3,172(sp)
1000704c:	d8002a15 	stw	zero,168(sp)
10007050:	d8003215 	stw	zero,200(sp)
10007054:	003b0706 	br	10005c74 <__alt_data_end+0xf8005c74>
10007058:	d8c02e17 	ldw	r3,184(sp)
1000705c:	1cc00017 	ldw	r19,0(r3)
10007060:	18c00104 	addi	r3,r3,4
10007064:	d8c02e15 	stw	r3,184(sp)
10007068:	982dd7fa 	srai	r22,r19,31
1000706c:	b005883a 	mov	r2,r22
10007070:	003a7706 	br	10005a50 <__alt_data_end+0xf8005a50>
10007074:	d8c02e17 	ldw	r3,184(sp)
10007078:	d9002f17 	ldw	r4,188(sp)
1000707c:	18800017 	ldw	r2,0(r3)
10007080:	18c00104 	addi	r3,r3,4
10007084:	d8c02e15 	stw	r3,184(sp)
10007088:	11000015 	stw	r4,0(r2)
1000708c:	00395406 	br	100055e0 <__alt_data_end+0xf80055e0>
10007090:	d9002e17 	ldw	r4,184(sp)
10007094:	002d883a 	mov	r22,zero
10007098:	24c00017 	ldw	r19,0(r4)
1000709c:	21000104 	addi	r4,r4,4
100070a0:	d9002e15 	stw	r4,184(sp)
100070a4:	003c0706 	br	100060c4 <__alt_data_end+0xf80060c4>
100070a8:	d9402e17 	ldw	r5,184(sp)
100070ac:	d8c02a17 	ldw	r3,168(sp)
100070b0:	002d883a 	mov	r22,zero
100070b4:	28800104 	addi	r2,r5,4
100070b8:	2cc0000b 	ldhu	r19,0(r5)
100070bc:	183dc10e 	bge	r3,zero,100067c4 <__alt_data_end+0xf80067c4>
100070c0:	003f7506 	br	10006e98 <__alt_data_end+0xf8006e98>
100070c4:	04040074 	movhi	r16,4097
100070c8:	84118a04 	addi	r16,r16,17960
100070cc:	003aa706 	br	10005b6c <__alt_data_end+0xf8005b6c>
100070d0:	d9002d17 	ldw	r4,180(sp)
100070d4:	d9801e04 	addi	r6,sp,120
100070d8:	b80b883a 	mov	r5,r23
100070dc:	000cce00 	call	1000cce0 <__sprint_r>
100070e0:	103a0b1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
100070e4:	dc402617 	ldw	r17,152(sp)
100070e8:	d8c02017 	ldw	r3,128(sp)
100070ec:	da000404 	addi	r8,sp,16
100070f0:	003f9c06 	br	10006f64 <__alt_data_end+0xf8006f64>
100070f4:	ac400043 	ldbu	r17,1(r21)
100070f8:	84000814 	ori	r16,r16,32
100070fc:	ad400044 	addi	r21,r21,1
10007100:	8c403fcc 	andi	r17,r17,255
10007104:	8c40201c 	xori	r17,r17,128
10007108:	8c7fe004 	addi	r17,r17,-128
1000710c:	00395e06 	br	10005688 <__alt_data_end+0xf8005688>
10007110:	d8c02e15 	stw	r3,184(sp)
10007114:	0039883a 	mov	fp,zero
10007118:	003e3506 	br	100069f0 <__alt_data_end+0xf80069f0>
1000711c:	d9002d17 	ldw	r4,180(sp)
10007120:	d9801e04 	addi	r6,sp,120
10007124:	b80b883a 	mov	r5,r23
10007128:	000cce00 	call	1000cce0 <__sprint_r>
1000712c:	1039f81e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10007130:	d8c02017 	ldw	r3,128(sp)
10007134:	da000404 	addi	r8,sp,16
10007138:	003cd006 	br	1000647c <__alt_data_end+0xf800647c>
1000713c:	8009883a 	mov	r4,r16
10007140:	df003d15 	stw	fp,244(sp)
10007144:	00054600 	call	10005460 <strlen>
10007148:	d8802b15 	stw	r2,172(sp)
1000714c:	da003d17 	ldw	r8,244(sp)
10007150:	103c200e 	bge	r2,zero,100061d4 <__alt_data_end+0xf80061d4>
10007154:	0005883a 	mov	r2,zero
10007158:	003c1e06 	br	100061d4 <__alt_data_end+0xf80061d4>
1000715c:	d9002d17 	ldw	r4,180(sp)
10007160:	d9801e04 	addi	r6,sp,120
10007164:	b80b883a 	mov	r5,r23
10007168:	000cce00 	call	1000cce0 <__sprint_r>
1000716c:	1039e81e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
10007170:	d8c02017 	ldw	r3,128(sp)
10007174:	d8801f17 	ldw	r2,124(sp)
10007178:	da000404 	addi	r8,sp,16
1000717c:	d9403317 	ldw	r5,204(sp)
10007180:	10800044 	addi	r2,r2,1
10007184:	44000015 	stw	r16,0(r8)
10007188:	28c7883a 	add	r3,r5,r3
1000718c:	003b5b06 	br	10005efc <__alt_data_end+0xf8005efc>
10007190:	01040074 	movhi	r4,4097
10007194:	21119e84 	addi	r4,r4,18042
10007198:	d9003515 	stw	r4,212(sp)
1000719c:	003af206 	br	10005d68 <__alt_data_end+0xf8005d68>
100071a0:	013fffc4 	movi	r4,-1
100071a4:	003a0806 	br	100059c8 <__alt_data_end+0xf80059c8>
100071a8:	0023883a 	mov	r17,zero
100071ac:	003d9d06 	br	10006824 <__alt_data_end+0xf8006824>
100071b0:	d9002d17 	ldw	r4,180(sp)
100071b4:	d9801e04 	addi	r6,sp,120
100071b8:	b80b883a 	mov	r5,r23
100071bc:	000cce00 	call	1000cce0 <__sprint_r>
100071c0:	1039d31e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
100071c4:	d8c02017 	ldw	r3,128(sp)
100071c8:	da000404 	addi	r8,sp,16
100071cc:	003d9406 	br	10006820 <__alt_data_end+0xf8006820>
100071d0:	01040074 	movhi	r4,4097
100071d4:	21119a84 	addi	r4,r4,18026
100071d8:	d9002c15 	stw	r4,176(sp)
100071dc:	d9002c17 	ldw	r4,176(sp)
100071e0:	1c47883a 	add	r3,r3,r17
100071e4:	10800044 	addi	r2,r2,1
100071e8:	41000015 	stw	r4,0(r8)
100071ec:	44400115 	stw	r17,4(r8)
100071f0:	d8c02015 	stw	r3,128(sp)
100071f4:	d8801f15 	stw	r2,124(sp)
100071f8:	010001c4 	movi	r4,7
100071fc:	20bfd716 	blt	r4,r2,1000715c <__alt_data_end+0xf800715c>
10007200:	42000204 	addi	r8,r8,8
10007204:	003fdd06 	br	1000717c <__alt_data_end+0xf800717c>
10007208:	d9002d17 	ldw	r4,180(sp)
1000720c:	d9801e04 	addi	r6,sp,120
10007210:	b80b883a 	mov	r5,r23
10007214:	000cce00 	call	1000cce0 <__sprint_r>
10007218:	1039bd1e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
1000721c:	d8802617 	ldw	r2,152(sp)
10007220:	d8c02017 	ldw	r3,128(sp)
10007224:	da000404 	addi	r8,sp,16
10007228:	003e1006 	br	10006a6c <__alt_data_end+0xf8006a6c>
1000722c:	00800044 	movi	r2,1
10007230:	10803fcc 	andi	r2,r2,255
10007234:	00c00044 	movi	r3,1
10007238:	10fa0d26 	beq	r2,r3,10005a70 <__alt_data_end+0xf8005a70>
1000723c:	00c00084 	movi	r3,2
10007240:	10fbaf26 	beq	r2,r3,10006100 <__alt_data_end+0xf8006100>
10007244:	003a6d06 	br	10005bfc <__alt_data_end+0xf8005bfc>
10007248:	01040074 	movhi	r4,4097
1000724c:	21119e84 	addi	r4,r4,18042
10007250:	d9003515 	stw	r4,212(sp)
10007254:	003b5406 	br	10005fa8 <__alt_data_end+0xf8005fa8>
10007258:	d8802a17 	ldw	r2,168(sp)
1000725c:	00c00184 	movi	r3,6
10007260:	1880012e 	bgeu	r3,r2,10007268 <___vfprintf_internal_r+0x1d68>
10007264:	1805883a 	mov	r2,r3
10007268:	d8802b15 	stw	r2,172(sp)
1000726c:	1000ef16 	blt	r2,zero,1000762c <___vfprintf_internal_r+0x212c>
10007270:	04040074 	movhi	r16,4097
10007274:	d8802915 	stw	r2,164(sp)
10007278:	dcc02e15 	stw	r19,184(sp)
1000727c:	d8002a15 	stw	zero,168(sp)
10007280:	d8003215 	stw	zero,200(sp)
10007284:	84119804 	addi	r16,r16,18016
10007288:	0039883a 	mov	fp,zero
1000728c:	003a8006 	br	10005c90 <__alt_data_end+0xf8005c90>
10007290:	0021883a 	mov	r16,zero
10007294:	003e0706 	br	10006ab4 <__alt_data_end+0xf8006ab4>
10007298:	d9002d17 	ldw	r4,180(sp)
1000729c:	d9801e04 	addi	r6,sp,120
100072a0:	b80b883a 	mov	r5,r23
100072a4:	000cce00 	call	1000cce0 <__sprint_r>
100072a8:	1039991e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
100072ac:	d8802617 	ldw	r2,152(sp)
100072b0:	d9403317 	ldw	r5,204(sp)
100072b4:	d8c02017 	ldw	r3,128(sp)
100072b8:	da000404 	addi	r8,sp,16
100072bc:	2885c83a 	sub	r2,r5,r2
100072c0:	003dfb06 	br	10006ab0 <__alt_data_end+0xf8006ab0>
100072c4:	9080004c 	andi	r2,r18,1
100072c8:	103e8f1e 	bne	r2,zero,10006d08 <__alt_data_end+0xf8006d08>
100072cc:	d8802117 	ldw	r2,132(sp)
100072d0:	003e9e06 	br	10006d4c <__alt_data_end+0xf8006d4c>
100072d4:	1025883a 	mov	r18,r2
100072d8:	0039883a 	mov	fp,zero
100072dc:	00800084 	movi	r2,2
100072e0:	003fd306 	br	10007230 <__alt_data_end+0xf8007230>
100072e4:	07000b44 	movi	fp,45
100072e8:	df002785 	stb	fp,158(sp)
100072ec:	003a1b06 	br	10005b5c <__alt_data_end+0xf8005b5c>
100072f0:	00c00b44 	movi	r3,45
100072f4:	d8c02785 	stb	r3,158(sp)
100072f8:	d8802915 	stw	r2,164(sp)
100072fc:	dc802c17 	ldw	r18,176(sp)
10007300:	d8002a15 	stw	zero,168(sp)
10007304:	07000b44 	movi	fp,45
10007308:	003a5e06 	br	10005c84 <__alt_data_end+0xf8005c84>
1000730c:	04040074 	movhi	r16,4097
10007310:	84118d04 	addi	r16,r16,17972
10007314:	003f4706 	br	10007034 <__alt_data_end+0xf8007034>
10007318:	d9002e17 	ldw	r4,184(sp)
1000731c:	d9402f17 	ldw	r5,188(sp)
10007320:	20800017 	ldw	r2,0(r4)
10007324:	21000104 	addi	r4,r4,4
10007328:	d9002e15 	stw	r4,184(sp)
1000732c:	11400015 	stw	r5,0(r2)
10007330:	0038ab06 	br	100055e0 <__alt_data_end+0xf80055e0>
10007334:	dd802617 	ldw	r22,152(sp)
10007338:	00bfff44 	movi	r2,-3
1000733c:	b0801c16 	blt	r22,r2,100073b0 <___vfprintf_internal_r+0x1eb0>
10007340:	d9402a17 	ldw	r5,168(sp)
10007344:	2d801a16 	blt	r5,r22,100073b0 <___vfprintf_internal_r+0x1eb0>
10007348:	dd803215 	stw	r22,200(sp)
1000734c:	003e8906 	br	10006d74 <__alt_data_end+0xf8006d74>
10007350:	01040074 	movhi	r4,4097
10007354:	21119a84 	addi	r4,r4,18026
10007358:	d9002c15 	stw	r4,176(sp)
1000735c:	003c9106 	br	100065a4 <__alt_data_end+0xf80065a4>
10007360:	e005883a 	mov	r2,fp
10007364:	003e7906 	br	10006d4c <__alt_data_end+0xf8006d4c>
10007368:	d9002a17 	ldw	r4,168(sp)
1000736c:	df002783 	ldbu	fp,158(sp)
10007370:	dcc02e15 	stw	r19,184(sp)
10007374:	d9002915 	stw	r4,164(sp)
10007378:	d9002b15 	stw	r4,172(sp)
1000737c:	d8002a15 	stw	zero,168(sp)
10007380:	d8003215 	stw	zero,200(sp)
10007384:	003a3b06 	br	10005c74 <__alt_data_end+0xf8005c74>
10007388:	9080004c 	andi	r2,r18,1
1000738c:	0039883a 	mov	fp,zero
10007390:	10000426 	beq	r2,zero,100073a4 <___vfprintf_internal_r+0x1ea4>
10007394:	00800c04 	movi	r2,48
10007398:	dc001dc4 	addi	r16,sp,119
1000739c:	d8801dc5 	stb	r2,119(sp)
100073a0:	003b6406 	br	10006134 <__alt_data_end+0xf8006134>
100073a4:	d8002b15 	stw	zero,172(sp)
100073a8:	dc001e04 	addi	r16,sp,120
100073ac:	003a2b06 	br	10005c5c <__alt_data_end+0xf8005c5c>
100073b0:	8c7fff84 	addi	r17,r17,-2
100073b4:	b5bfffc4 	addi	r22,r22,-1
100073b8:	dd802615 	stw	r22,152(sp)
100073bc:	dc4022c5 	stb	r17,139(sp)
100073c0:	b000bf16 	blt	r22,zero,100076c0 <___vfprintf_internal_r+0x21c0>
100073c4:	00800ac4 	movi	r2,43
100073c8:	d8802305 	stb	r2,140(sp)
100073cc:	00800244 	movi	r2,9
100073d0:	15807016 	blt	r2,r22,10007594 <___vfprintf_internal_r+0x2094>
100073d4:	00800c04 	movi	r2,48
100073d8:	b5800c04 	addi	r22,r22,48
100073dc:	d8802345 	stb	r2,141(sp)
100073e0:	dd802385 	stb	r22,142(sp)
100073e4:	d88023c4 	addi	r2,sp,143
100073e8:	df0022c4 	addi	fp,sp,139
100073ec:	d8c03317 	ldw	r3,204(sp)
100073f0:	1739c83a 	sub	fp,r2,fp
100073f4:	d9003317 	ldw	r4,204(sp)
100073f8:	e0c7883a 	add	r3,fp,r3
100073fc:	df003a15 	stw	fp,232(sp)
10007400:	d8c02b15 	stw	r3,172(sp)
10007404:	00800044 	movi	r2,1
10007408:	1100b30e 	bge	r2,r4,100076d8 <___vfprintf_internal_r+0x21d8>
1000740c:	d8c02b17 	ldw	r3,172(sp)
10007410:	18c00044 	addi	r3,r3,1
10007414:	d8c02b15 	stw	r3,172(sp)
10007418:	1805883a 	mov	r2,r3
1000741c:	1800ac16 	blt	r3,zero,100076d0 <___vfprintf_internal_r+0x21d0>
10007420:	d8003215 	stw	zero,200(sp)
10007424:	003e5d06 	br	10006d9c <__alt_data_end+0xf8006d9c>
10007428:	d9002d17 	ldw	r4,180(sp)
1000742c:	d9801e04 	addi	r6,sp,120
10007430:	b80b883a 	mov	r5,r23
10007434:	000cce00 	call	1000cce0 <__sprint_r>
10007438:	1039351e 	bne	r2,zero,10005910 <__alt_data_end+0xf8005910>
1000743c:	dc402617 	ldw	r17,152(sp)
10007440:	d8c02017 	ldw	r3,128(sp)
10007444:	d8801f17 	ldw	r2,124(sp)
10007448:	da000404 	addi	r8,sp,16
1000744c:	003ed606 	br	10006fa8 <__alt_data_end+0xf8006fa8>
10007450:	182b883a 	mov	r21,r3
10007454:	d8002a15 	stw	zero,168(sp)
10007458:	00388c06 	br	1000568c <__alt_data_end+0xf800568c>
1000745c:	d8802a17 	ldw	r2,168(sp)
10007460:	103e071e 	bne	r2,zero,10006c80 <__alt_data_end+0xf8006c80>
10007464:	dc002a15 	stw	r16,168(sp)
10007468:	003e0506 	br	10006c80 <__alt_data_end+0xf8006c80>
1000746c:	d9002a17 	ldw	r4,168(sp)
10007470:	20c00044 	addi	r3,r4,1
10007474:	003e0f06 	br	10006cb4 <__alt_data_end+0xf8006cb4>
10007478:	01400184 	movi	r5,6
1000747c:	d9402a15 	stw	r5,168(sp)
10007480:	003dff06 	br	10006c80 <__alt_data_end+0xf8006c80>
10007484:	d8802104 	addi	r2,sp,132
10007488:	d8800315 	stw	r2,12(sp)
1000748c:	d8802504 	addi	r2,sp,148
10007490:	d8800215 	stw	r2,8(sp)
10007494:	d8802604 	addi	r2,sp,152
10007498:	d8800115 	stw	r2,4(sp)
1000749c:	d8802a17 	ldw	r2,168(sp)
100074a0:	d9403617 	ldw	r5,216(sp)
100074a4:	d9002d17 	ldw	r4,180(sp)
100074a8:	d8800015 	stw	r2,0(sp)
100074ac:	01c000c4 	movi	r7,3
100074b0:	980d883a 	mov	r6,r19
100074b4:	da003d15 	stw	r8,244(sp)
100074b8:	0007c300 	call	10007c30 <_dtoa_r>
100074bc:	d8c02a17 	ldw	r3,168(sp)
100074c0:	da003d17 	ldw	r8,244(sp)
100074c4:	1021883a 	mov	r16,r2
100074c8:	10f9883a 	add	fp,r2,r3
100074cc:	81000007 	ldb	r4,0(r16)
100074d0:	00800c04 	movi	r2,48
100074d4:	20805e26 	beq	r4,r2,10007650 <___vfprintf_internal_r+0x2150>
100074d8:	d8c02617 	ldw	r3,152(sp)
100074dc:	e0f9883a 	add	fp,fp,r3
100074e0:	003e0a06 	br	10006d0c <__alt_data_end+0xf8006d0c>
100074e4:	00c00b44 	movi	r3,45
100074e8:	24e0003c 	xorhi	r19,r4,32768
100074ec:	d8c02905 	stb	r3,164(sp)
100074f0:	003de906 	br	10006c98 <__alt_data_end+0xf8006c98>
100074f4:	d8c03217 	ldw	r3,200(sp)
100074f8:	00c07a0e 	bge	zero,r3,100076e4 <___vfprintf_internal_r+0x21e4>
100074fc:	00800044 	movi	r2,1
10007500:	d9003317 	ldw	r4,204(sp)
10007504:	1105883a 	add	r2,r2,r4
10007508:	d8802b15 	stw	r2,172(sp)
1000750c:	10004e16 	blt	r2,zero,10007648 <___vfprintf_internal_r+0x2148>
10007510:	044019c4 	movi	r17,103
10007514:	003e2106 	br	10006d9c <__alt_data_end+0xf8006d9c>
10007518:	d9002a17 	ldw	r4,168(sp)
1000751c:	d8802104 	addi	r2,sp,132
10007520:	d8800315 	stw	r2,12(sp)
10007524:	d9000015 	stw	r4,0(sp)
10007528:	d8802504 	addi	r2,sp,148
1000752c:	d9403617 	ldw	r5,216(sp)
10007530:	d9002d17 	ldw	r4,180(sp)
10007534:	d8800215 	stw	r2,8(sp)
10007538:	d8802604 	addi	r2,sp,152
1000753c:	d8800115 	stw	r2,4(sp)
10007540:	01c000c4 	movi	r7,3
10007544:	980d883a 	mov	r6,r19
10007548:	da003d15 	stw	r8,244(sp)
1000754c:	0007c300 	call	10007c30 <_dtoa_r>
10007550:	d8c02a17 	ldw	r3,168(sp)
10007554:	da003d17 	ldw	r8,244(sp)
10007558:	1021883a 	mov	r16,r2
1000755c:	00801184 	movi	r2,70
10007560:	80f9883a 	add	fp,r16,r3
10007564:	88bfd926 	beq	r17,r2,100074cc <__alt_data_end+0xf80074cc>
10007568:	003de806 	br	10006d0c <__alt_data_end+0xf8006d0c>
1000756c:	d9002a17 	ldw	r4,168(sp)
10007570:	00c04d0e 	bge	zero,r3,100076a8 <___vfprintf_internal_r+0x21a8>
10007574:	2000441e 	bne	r4,zero,10007688 <___vfprintf_internal_r+0x2188>
10007578:	9480004c 	andi	r18,r18,1
1000757c:	9000421e 	bne	r18,zero,10007688 <___vfprintf_internal_r+0x2188>
10007580:	1805883a 	mov	r2,r3
10007584:	18006f16 	blt	r3,zero,10007744 <___vfprintf_internal_r+0x2244>
10007588:	d8c03217 	ldw	r3,200(sp)
1000758c:	d8c02b15 	stw	r3,172(sp)
10007590:	003e0206 	br	10006d9c <__alt_data_end+0xf8006d9c>
10007594:	df0022c4 	addi	fp,sp,139
10007598:	dc002a15 	stw	r16,168(sp)
1000759c:	4027883a 	mov	r19,r8
100075a0:	e021883a 	mov	r16,fp
100075a4:	b009883a 	mov	r4,r22
100075a8:	01400284 	movi	r5,10
100075ac:	00044540 	call	10004454 <__modsi3>
100075b0:	10800c04 	addi	r2,r2,48
100075b4:	843fffc4 	addi	r16,r16,-1
100075b8:	b009883a 	mov	r4,r22
100075bc:	01400284 	movi	r5,10
100075c0:	80800005 	stb	r2,0(r16)
100075c4:	00043d00 	call	100043d0 <__divsi3>
100075c8:	102d883a 	mov	r22,r2
100075cc:	00800244 	movi	r2,9
100075d0:	15bff416 	blt	r2,r22,100075a4 <__alt_data_end+0xf80075a4>
100075d4:	9811883a 	mov	r8,r19
100075d8:	b0800c04 	addi	r2,r22,48
100075dc:	8027883a 	mov	r19,r16
100075e0:	997fffc4 	addi	r5,r19,-1
100075e4:	98bfffc5 	stb	r2,-1(r19)
100075e8:	dc002a17 	ldw	r16,168(sp)
100075ec:	2f006d2e 	bgeu	r5,fp,100077a4 <___vfprintf_internal_r+0x22a4>
100075f0:	d9c02384 	addi	r7,sp,142
100075f4:	3ccfc83a 	sub	r7,r7,r19
100075f8:	d9002344 	addi	r4,sp,141
100075fc:	e1cf883a 	add	r7,fp,r7
10007600:	00000106 	br	10007608 <___vfprintf_internal_r+0x2108>
10007604:	28800003 	ldbu	r2,0(r5)
10007608:	20800005 	stb	r2,0(r4)
1000760c:	21000044 	addi	r4,r4,1
10007610:	29400044 	addi	r5,r5,1
10007614:	393ffb1e 	bne	r7,r4,10007604 <__alt_data_end+0xf8007604>
10007618:	d8802304 	addi	r2,sp,140
1000761c:	14c5c83a 	sub	r2,r2,r19
10007620:	d8c02344 	addi	r3,sp,141
10007624:	1885883a 	add	r2,r3,r2
10007628:	003f7006 	br	100073ec <__alt_data_end+0xf80073ec>
1000762c:	0005883a 	mov	r2,zero
10007630:	003f0f06 	br	10007270 <__alt_data_end+0xf8007270>
10007634:	d8c03217 	ldw	r3,200(sp)
10007638:	18c00044 	addi	r3,r3,1
1000763c:	d8c02b15 	stw	r3,172(sp)
10007640:	1805883a 	mov	r2,r3
10007644:	183fb20e 	bge	r3,zero,10007510 <__alt_data_end+0xf8007510>
10007648:	0005883a 	mov	r2,zero
1000764c:	003fb006 	br	10007510 <__alt_data_end+0xf8007510>
10007650:	d9003617 	ldw	r4,216(sp)
10007654:	000d883a 	mov	r6,zero
10007658:	000f883a 	mov	r7,zero
1000765c:	980b883a 	mov	r5,r19
10007660:	d8c03c15 	stw	r3,240(sp)
10007664:	da003d15 	stw	r8,244(sp)
10007668:	00101a00 	call	100101a0 <__eqdf2>
1000766c:	d8c03c17 	ldw	r3,240(sp)
10007670:	da003d17 	ldw	r8,244(sp)
10007674:	103f9826 	beq	r2,zero,100074d8 <__alt_data_end+0xf80074d8>
10007678:	00800044 	movi	r2,1
1000767c:	10c7c83a 	sub	r3,r2,r3
10007680:	d8c02615 	stw	r3,152(sp)
10007684:	003f9506 	br	100074dc <__alt_data_end+0xf80074dc>
10007688:	d9002a17 	ldw	r4,168(sp)
1000768c:	d8c03217 	ldw	r3,200(sp)
10007690:	20800044 	addi	r2,r4,1
10007694:	1885883a 	add	r2,r3,r2
10007698:	d8802b15 	stw	r2,172(sp)
1000769c:	103dbf0e 	bge	r2,zero,10006d9c <__alt_data_end+0xf8006d9c>
100076a0:	0005883a 	mov	r2,zero
100076a4:	003dbd06 	br	10006d9c <__alt_data_end+0xf8006d9c>
100076a8:	2000201e 	bne	r4,zero,1000772c <___vfprintf_internal_r+0x222c>
100076ac:	9480004c 	andi	r18,r18,1
100076b0:	90001e1e 	bne	r18,zero,1000772c <___vfprintf_internal_r+0x222c>
100076b4:	00800044 	movi	r2,1
100076b8:	d8802b15 	stw	r2,172(sp)
100076bc:	003db706 	br	10006d9c <__alt_data_end+0xf8006d9c>
100076c0:	00800b44 	movi	r2,45
100076c4:	05adc83a 	sub	r22,zero,r22
100076c8:	d8802305 	stb	r2,140(sp)
100076cc:	003f3f06 	br	100073cc <__alt_data_end+0xf80073cc>
100076d0:	0005883a 	mov	r2,zero
100076d4:	003f5206 	br	10007420 <__alt_data_end+0xf8007420>
100076d8:	90a4703a 	and	r18,r18,r2
100076dc:	903f4e26 	beq	r18,zero,10007418 <__alt_data_end+0xf8007418>
100076e0:	003f4a06 	br	1000740c <__alt_data_end+0xf800740c>
100076e4:	00800084 	movi	r2,2
100076e8:	10c5c83a 	sub	r2,r2,r3
100076ec:	003f8406 	br	10007500 <__alt_data_end+0xf8007500>
100076f0:	d9402e17 	ldw	r5,184(sp)
100076f4:	d9002e17 	ldw	r4,184(sp)
100076f8:	ac400043 	ldbu	r17,1(r21)
100076fc:	29400017 	ldw	r5,0(r5)
10007700:	20800104 	addi	r2,r4,4
10007704:	d8802e15 	stw	r2,184(sp)
10007708:	d9402a15 	stw	r5,168(sp)
1000770c:	182b883a 	mov	r21,r3
10007710:	283e7b0e 	bge	r5,zero,10007100 <__alt_data_end+0xf8007100>
10007714:	8c403fcc 	andi	r17,r17,255
10007718:	017fffc4 	movi	r5,-1
1000771c:	8c40201c 	xori	r17,r17,128
10007720:	d9402a15 	stw	r5,168(sp)
10007724:	8c7fe004 	addi	r17,r17,-128
10007728:	0037d706 	br	10005688 <__alt_data_end+0xf8005688>
1000772c:	d8c02a17 	ldw	r3,168(sp)
10007730:	18c00084 	addi	r3,r3,2
10007734:	d8c02b15 	stw	r3,172(sp)
10007738:	1805883a 	mov	r2,r3
1000773c:	183d970e 	bge	r3,zero,10006d9c <__alt_data_end+0xf8006d9c>
10007740:	003fd706 	br	100076a0 <__alt_data_end+0xf80076a0>
10007744:	0005883a 	mov	r2,zero
10007748:	003f8f06 	br	10007588 <__alt_data_end+0xf8007588>
1000774c:	9080004c 	andi	r2,r18,1
10007750:	103f821e 	bne	r2,zero,1000755c <__alt_data_end+0xf800755c>
10007754:	d8802117 	ldw	r2,132(sp)
10007758:	1405c83a 	sub	r2,r2,r16
1000775c:	d8803315 	stw	r2,204(sp)
10007760:	b47ef426 	beq	r22,r17,10007334 <__alt_data_end+0xf8007334>
10007764:	dd802617 	ldw	r22,152(sp)
10007768:	003f1206 	br	100073b4 <__alt_data_end+0xf80073b4>
1000776c:	d8c02b03 	ldbu	r3,172(sp)
10007770:	d8c02785 	stb	r3,158(sp)
10007774:	0038df06 	br	10005af4 <__alt_data_end+0xf8005af4>
10007778:	d8c02b03 	ldbu	r3,172(sp)
1000777c:	d8c02785 	stb	r3,158(sp)
10007780:	0038aa06 	br	10005a2c <__alt_data_end+0xf8005a2c>
10007784:	d8c02b03 	ldbu	r3,172(sp)
10007788:	d8c02785 	stb	r3,158(sp)
1000778c:	003a4306 	br	1000609c <__alt_data_end+0xf800609c>
10007790:	d8c02b03 	ldbu	r3,172(sp)
10007794:	d8c02785 	stb	r3,158(sp)
10007798:	003af506 	br	10006370 <__alt_data_end+0xf8006370>
1000779c:	0005883a 	mov	r2,zero
100077a0:	003d7b06 	br	10006d90 <__alt_data_end+0xf8006d90>
100077a4:	d8802344 	addi	r2,sp,141
100077a8:	003f1006 	br	100073ec <__alt_data_end+0xf80073ec>
100077ac:	d8c02b03 	ldbu	r3,172(sp)
100077b0:	d8c02785 	stb	r3,158(sp)
100077b4:	0038fd06 	br	10005bac <__alt_data_end+0xf8005bac>
100077b8:	d8c02b03 	ldbu	r3,172(sp)
100077bc:	d8c02785 	stb	r3,158(sp)
100077c0:	003a9706 	br	10006220 <__alt_data_end+0xf8006220>
100077c4:	d8c02b03 	ldbu	r3,172(sp)
100077c8:	d8c02785 	stb	r3,158(sp)
100077cc:	003a1806 	br	10006030 <__alt_data_end+0xf8006030>
100077d0:	d8c02b03 	ldbu	r3,172(sp)
100077d4:	d8c02785 	stb	r3,158(sp)
100077d8:	003abe06 	br	100062d4 <__alt_data_end+0xf80062d4>

100077dc <__vfprintf_internal>:
100077dc:	00840074 	movhi	r2,4097
100077e0:	1098b504 	addi	r2,r2,25300
100077e4:	300f883a 	mov	r7,r6
100077e8:	280d883a 	mov	r6,r5
100077ec:	200b883a 	mov	r5,r4
100077f0:	11000017 	ldw	r4,0(r2)
100077f4:	00055001 	jmpi	10005500 <___vfprintf_internal_r>

100077f8 <__sbprintf>:
100077f8:	2880030b 	ldhu	r2,12(r5)
100077fc:	2ac01917 	ldw	r11,100(r5)
10007800:	2a80038b 	ldhu	r10,14(r5)
10007804:	2a400717 	ldw	r9,28(r5)
10007808:	2a000917 	ldw	r8,36(r5)
1000780c:	defee204 	addi	sp,sp,-1144
10007810:	00c10004 	movi	r3,1024
10007814:	dc011a15 	stw	r16,1128(sp)
10007818:	10bfff4c 	andi	r2,r2,65533
1000781c:	2821883a 	mov	r16,r5
10007820:	d8cb883a 	add	r5,sp,r3
10007824:	dc811c15 	stw	r18,1136(sp)
10007828:	dc411b15 	stw	r17,1132(sp)
1000782c:	dfc11d15 	stw	ra,1140(sp)
10007830:	2025883a 	mov	r18,r4
10007834:	d881030d 	sth	r2,1036(sp)
10007838:	dac11915 	stw	r11,1124(sp)
1000783c:	da81038d 	sth	r10,1038(sp)
10007840:	da410715 	stw	r9,1052(sp)
10007844:	da010915 	stw	r8,1060(sp)
10007848:	dec10015 	stw	sp,1024(sp)
1000784c:	dec10415 	stw	sp,1040(sp)
10007850:	d8c10215 	stw	r3,1032(sp)
10007854:	d8c10515 	stw	r3,1044(sp)
10007858:	d8010615 	stw	zero,1048(sp)
1000785c:	00055000 	call	10005500 <___vfprintf_internal_r>
10007860:	1023883a 	mov	r17,r2
10007864:	10000416 	blt	r2,zero,10007878 <__sbprintf+0x80>
10007868:	d9410004 	addi	r5,sp,1024
1000786c:	9009883a 	mov	r4,r18
10007870:	00094d40 	call	100094d4 <_fflush_r>
10007874:	10000d1e 	bne	r2,zero,100078ac <__sbprintf+0xb4>
10007878:	d881030b 	ldhu	r2,1036(sp)
1000787c:	1080100c 	andi	r2,r2,64
10007880:	10000326 	beq	r2,zero,10007890 <__sbprintf+0x98>
10007884:	8080030b 	ldhu	r2,12(r16)
10007888:	10801014 	ori	r2,r2,64
1000788c:	8080030d 	sth	r2,12(r16)
10007890:	8805883a 	mov	r2,r17
10007894:	dfc11d17 	ldw	ra,1140(sp)
10007898:	dc811c17 	ldw	r18,1136(sp)
1000789c:	dc411b17 	ldw	r17,1132(sp)
100078a0:	dc011a17 	ldw	r16,1128(sp)
100078a4:	dec11e04 	addi	sp,sp,1144
100078a8:	f800283a 	ret
100078ac:	047fffc4 	movi	r17,-1
100078b0:	003ff106 	br	10007878 <__alt_data_end+0xf8007878>

100078b4 <__swsetup_r>:
100078b4:	00840074 	movhi	r2,4097
100078b8:	defffd04 	addi	sp,sp,-12
100078bc:	1098b504 	addi	r2,r2,25300
100078c0:	dc400115 	stw	r17,4(sp)
100078c4:	2023883a 	mov	r17,r4
100078c8:	11000017 	ldw	r4,0(r2)
100078cc:	dc000015 	stw	r16,0(sp)
100078d0:	dfc00215 	stw	ra,8(sp)
100078d4:	2821883a 	mov	r16,r5
100078d8:	20000226 	beq	r4,zero,100078e4 <__swsetup_r+0x30>
100078dc:	20800e17 	ldw	r2,56(r4)
100078e0:	10003126 	beq	r2,zero,100079a8 <__swsetup_r+0xf4>
100078e4:	8080030b 	ldhu	r2,12(r16)
100078e8:	10c0020c 	andi	r3,r2,8
100078ec:	1009883a 	mov	r4,r2
100078f0:	18000f26 	beq	r3,zero,10007930 <__swsetup_r+0x7c>
100078f4:	80c00417 	ldw	r3,16(r16)
100078f8:	18001526 	beq	r3,zero,10007950 <__swsetup_r+0x9c>
100078fc:	1100004c 	andi	r4,r2,1
10007900:	20001c1e 	bne	r4,zero,10007974 <__swsetup_r+0xc0>
10007904:	1080008c 	andi	r2,r2,2
10007908:	1000291e 	bne	r2,zero,100079b0 <__swsetup_r+0xfc>
1000790c:	80800517 	ldw	r2,20(r16)
10007910:	80800215 	stw	r2,8(r16)
10007914:	18001c26 	beq	r3,zero,10007988 <__swsetup_r+0xd4>
10007918:	0005883a 	mov	r2,zero
1000791c:	dfc00217 	ldw	ra,8(sp)
10007920:	dc400117 	ldw	r17,4(sp)
10007924:	dc000017 	ldw	r16,0(sp)
10007928:	dec00304 	addi	sp,sp,12
1000792c:	f800283a 	ret
10007930:	2080040c 	andi	r2,r4,16
10007934:	10002e26 	beq	r2,zero,100079f0 <__swsetup_r+0x13c>
10007938:	2080010c 	andi	r2,r4,4
1000793c:	10001e1e 	bne	r2,zero,100079b8 <__swsetup_r+0x104>
10007940:	80c00417 	ldw	r3,16(r16)
10007944:	20800214 	ori	r2,r4,8
10007948:	8080030d 	sth	r2,12(r16)
1000794c:	183feb1e 	bne	r3,zero,100078fc <__alt_data_end+0xf80078fc>
10007950:	1100a00c 	andi	r4,r2,640
10007954:	01408004 	movi	r5,512
10007958:	217fe826 	beq	r4,r5,100078fc <__alt_data_end+0xf80078fc>
1000795c:	800b883a 	mov	r5,r16
10007960:	8809883a 	mov	r4,r17
10007964:	000a4700 	call	1000a470 <__smakebuf_r>
10007968:	8080030b 	ldhu	r2,12(r16)
1000796c:	80c00417 	ldw	r3,16(r16)
10007970:	003fe206 	br	100078fc <__alt_data_end+0xf80078fc>
10007974:	80800517 	ldw	r2,20(r16)
10007978:	80000215 	stw	zero,8(r16)
1000797c:	0085c83a 	sub	r2,zero,r2
10007980:	80800615 	stw	r2,24(r16)
10007984:	183fe41e 	bne	r3,zero,10007918 <__alt_data_end+0xf8007918>
10007988:	80c0030b 	ldhu	r3,12(r16)
1000798c:	0005883a 	mov	r2,zero
10007990:	1900200c 	andi	r4,r3,128
10007994:	203fe126 	beq	r4,zero,1000791c <__alt_data_end+0xf800791c>
10007998:	18c01014 	ori	r3,r3,64
1000799c:	80c0030d 	sth	r3,12(r16)
100079a0:	00bfffc4 	movi	r2,-1
100079a4:	003fdd06 	br	1000791c <__alt_data_end+0xf800791c>
100079a8:	00098c00 	call	100098c0 <__sinit>
100079ac:	003fcd06 	br	100078e4 <__alt_data_end+0xf80078e4>
100079b0:	0005883a 	mov	r2,zero
100079b4:	003fd606 	br	10007910 <__alt_data_end+0xf8007910>
100079b8:	81400c17 	ldw	r5,48(r16)
100079bc:	28000626 	beq	r5,zero,100079d8 <__swsetup_r+0x124>
100079c0:	80801004 	addi	r2,r16,64
100079c4:	28800326 	beq	r5,r2,100079d4 <__swsetup_r+0x120>
100079c8:	8809883a 	mov	r4,r17
100079cc:	0009a340 	call	10009a34 <_free_r>
100079d0:	8100030b 	ldhu	r4,12(r16)
100079d4:	80000c15 	stw	zero,48(r16)
100079d8:	80c00417 	ldw	r3,16(r16)
100079dc:	00bff6c4 	movi	r2,-37
100079e0:	1108703a 	and	r4,r2,r4
100079e4:	80000115 	stw	zero,4(r16)
100079e8:	80c00015 	stw	r3,0(r16)
100079ec:	003fd506 	br	10007944 <__alt_data_end+0xf8007944>
100079f0:	00800244 	movi	r2,9
100079f4:	88800015 	stw	r2,0(r17)
100079f8:	20801014 	ori	r2,r4,64
100079fc:	8080030d 	sth	r2,12(r16)
10007a00:	00bfffc4 	movi	r2,-1
10007a04:	003fc506 	br	1000791c <__alt_data_end+0xf800791c>

10007a08 <quorem>:
10007a08:	defff204 	addi	sp,sp,-56
10007a0c:	ddc00b15 	stw	r23,44(sp)
10007a10:	20800417 	ldw	r2,16(r4)
10007a14:	2dc00417 	ldw	r23,16(r5)
10007a18:	dfc00d15 	stw	ra,52(sp)
10007a1c:	df000c15 	stw	fp,48(sp)
10007a20:	dd800a15 	stw	r22,40(sp)
10007a24:	dd400915 	stw	r21,36(sp)
10007a28:	dd000815 	stw	r20,32(sp)
10007a2c:	dcc00715 	stw	r19,28(sp)
10007a30:	dc800615 	stw	r18,24(sp)
10007a34:	dc400515 	stw	r17,20(sp)
10007a38:	dc000415 	stw	r16,16(sp)
10007a3c:	15c07a16 	blt	r2,r23,10007c28 <quorem+0x220>
10007a40:	bdffffc4 	addi	r23,r23,-1
10007a44:	bde9883a 	add	r20,r23,r23
10007a48:	28c00504 	addi	r3,r5,20
10007a4c:	a529883a 	add	r20,r20,r20
10007a50:	1d39883a 	add	fp,r3,r20
10007a54:	24c00504 	addi	r19,r4,20
10007a58:	d9400215 	stw	r5,8(sp)
10007a5c:	9d29883a 	add	r20,r19,r20
10007a60:	e1400017 	ldw	r5,0(fp)
10007a64:	d9000015 	stw	r4,0(sp)
10007a68:	a1000017 	ldw	r4,0(r20)
10007a6c:	29400044 	addi	r5,r5,1
10007a70:	d8c00115 	stw	r3,4(sp)
10007a74:	dd000315 	stw	r20,12(sp)
10007a78:	00044c80 	call	100044c8 <__udivsi3>
10007a7c:	1025883a 	mov	r18,r2
10007a80:	10003026 	beq	r2,zero,10007b44 <quorem+0x13c>
10007a84:	dc400117 	ldw	r17,4(sp)
10007a88:	9829883a 	mov	r20,r19
10007a8c:	002d883a 	mov	r22,zero
10007a90:	0021883a 	mov	r16,zero
10007a94:	8d400017 	ldw	r21,0(r17)
10007a98:	900b883a 	mov	r5,r18
10007a9c:	8c400104 	addi	r17,r17,4
10007aa0:	a93fffcc 	andi	r4,r21,65535
10007aa4:	00052300 	call	10005230 <__mulsi3>
10007aa8:	a808d43a 	srli	r4,r21,16
10007aac:	900b883a 	mov	r5,r18
10007ab0:	15ad883a 	add	r22,r2,r22
10007ab4:	00052300 	call	10005230 <__mulsi3>
10007ab8:	a1000017 	ldw	r4,0(r20)
10007abc:	b00cd43a 	srli	r6,r22,16
10007ac0:	b0ffffcc 	andi	r3,r22,65535
10007ac4:	217fffcc 	andi	r5,r4,65535
10007ac8:	2c21883a 	add	r16,r5,r16
10007acc:	80c7c83a 	sub	r3,r16,r3
10007ad0:	2008d43a 	srli	r4,r4,16
10007ad4:	1185883a 	add	r2,r2,r6
10007ad8:	1821d43a 	srai	r16,r3,16
10007adc:	117fffcc 	andi	r5,r2,65535
10007ae0:	2149c83a 	sub	r4,r4,r5
10007ae4:	2421883a 	add	r16,r4,r16
10007ae8:	8008943a 	slli	r4,r16,16
10007aec:	18ffffcc 	andi	r3,r3,65535
10007af0:	102cd43a 	srli	r22,r2,16
10007af4:	20c8b03a 	or	r4,r4,r3
10007af8:	a1000015 	stw	r4,0(r20)
10007afc:	8021d43a 	srai	r16,r16,16
10007b00:	a5000104 	addi	r20,r20,4
10007b04:	e47fe32e 	bgeu	fp,r17,10007a94 <__alt_data_end+0xf8007a94>
10007b08:	d8c00317 	ldw	r3,12(sp)
10007b0c:	18800017 	ldw	r2,0(r3)
10007b10:	10000c1e 	bne	r2,zero,10007b44 <quorem+0x13c>
10007b14:	18bfff04 	addi	r2,r3,-4
10007b18:	9880082e 	bgeu	r19,r2,10007b3c <quorem+0x134>
10007b1c:	18ffff17 	ldw	r3,-4(r3)
10007b20:	18000326 	beq	r3,zero,10007b30 <quorem+0x128>
10007b24:	00000506 	br	10007b3c <quorem+0x134>
10007b28:	10c00017 	ldw	r3,0(r2)
10007b2c:	1800031e 	bne	r3,zero,10007b3c <quorem+0x134>
10007b30:	10bfff04 	addi	r2,r2,-4
10007b34:	bdffffc4 	addi	r23,r23,-1
10007b38:	98bffb36 	bltu	r19,r2,10007b28 <__alt_data_end+0xf8007b28>
10007b3c:	d8c00017 	ldw	r3,0(sp)
10007b40:	1dc00415 	stw	r23,16(r3)
10007b44:	d9400217 	ldw	r5,8(sp)
10007b48:	d9000017 	ldw	r4,0(sp)
10007b4c:	000bc6c0 	call	1000bc6c <__mcmp>
10007b50:	10002816 	blt	r2,zero,10007bf4 <quorem+0x1ec>
10007b54:	dc400117 	ldw	r17,4(sp)
10007b58:	94800044 	addi	r18,r18,1
10007b5c:	980d883a 	mov	r6,r19
10007b60:	0007883a 	mov	r3,zero
10007b64:	31000017 	ldw	r4,0(r6)
10007b68:	89400017 	ldw	r5,0(r17)
10007b6c:	31800104 	addi	r6,r6,4
10007b70:	20bfffcc 	andi	r2,r4,65535
10007b74:	10c7883a 	add	r3,r2,r3
10007b78:	28bfffcc 	andi	r2,r5,65535
10007b7c:	1885c83a 	sub	r2,r3,r2
10007b80:	280ad43a 	srli	r5,r5,16
10007b84:	2008d43a 	srli	r4,r4,16
10007b88:	1007d43a 	srai	r3,r2,16
10007b8c:	10bfffcc 	andi	r2,r2,65535
10007b90:	2149c83a 	sub	r4,r4,r5
10007b94:	20c9883a 	add	r4,r4,r3
10007b98:	200a943a 	slli	r5,r4,16
10007b9c:	8c400104 	addi	r17,r17,4
10007ba0:	2007d43a 	srai	r3,r4,16
10007ba4:	2884b03a 	or	r2,r5,r2
10007ba8:	30bfff15 	stw	r2,-4(r6)
10007bac:	e47fed2e 	bgeu	fp,r17,10007b64 <__alt_data_end+0xf8007b64>
10007bb0:	bdc5883a 	add	r2,r23,r23
10007bb4:	1085883a 	add	r2,r2,r2
10007bb8:	9887883a 	add	r3,r19,r2
10007bbc:	18800017 	ldw	r2,0(r3)
10007bc0:	10000c1e 	bne	r2,zero,10007bf4 <quorem+0x1ec>
10007bc4:	18bfff04 	addi	r2,r3,-4
10007bc8:	9880082e 	bgeu	r19,r2,10007bec <quorem+0x1e4>
10007bcc:	18ffff17 	ldw	r3,-4(r3)
10007bd0:	18000326 	beq	r3,zero,10007be0 <quorem+0x1d8>
10007bd4:	00000506 	br	10007bec <quorem+0x1e4>
10007bd8:	10c00017 	ldw	r3,0(r2)
10007bdc:	1800031e 	bne	r3,zero,10007bec <quorem+0x1e4>
10007be0:	10bfff04 	addi	r2,r2,-4
10007be4:	bdffffc4 	addi	r23,r23,-1
10007be8:	98bffb36 	bltu	r19,r2,10007bd8 <__alt_data_end+0xf8007bd8>
10007bec:	d8c00017 	ldw	r3,0(sp)
10007bf0:	1dc00415 	stw	r23,16(r3)
10007bf4:	9005883a 	mov	r2,r18
10007bf8:	dfc00d17 	ldw	ra,52(sp)
10007bfc:	df000c17 	ldw	fp,48(sp)
10007c00:	ddc00b17 	ldw	r23,44(sp)
10007c04:	dd800a17 	ldw	r22,40(sp)
10007c08:	dd400917 	ldw	r21,36(sp)
10007c0c:	dd000817 	ldw	r20,32(sp)
10007c10:	dcc00717 	ldw	r19,28(sp)
10007c14:	dc800617 	ldw	r18,24(sp)
10007c18:	dc400517 	ldw	r17,20(sp)
10007c1c:	dc000417 	ldw	r16,16(sp)
10007c20:	dec00e04 	addi	sp,sp,56
10007c24:	f800283a 	ret
10007c28:	0005883a 	mov	r2,zero
10007c2c:	003ff206 	br	10007bf8 <__alt_data_end+0xf8007bf8>

10007c30 <_dtoa_r>:
10007c30:	20801017 	ldw	r2,64(r4)
10007c34:	deffde04 	addi	sp,sp,-136
10007c38:	df002015 	stw	fp,128(sp)
10007c3c:	dcc01b15 	stw	r19,108(sp)
10007c40:	dc801a15 	stw	r18,104(sp)
10007c44:	dc401915 	stw	r17,100(sp)
10007c48:	dc001815 	stw	r16,96(sp)
10007c4c:	dfc02115 	stw	ra,132(sp)
10007c50:	ddc01f15 	stw	r23,124(sp)
10007c54:	dd801e15 	stw	r22,120(sp)
10007c58:	dd401d15 	stw	r21,116(sp)
10007c5c:	dd001c15 	stw	r20,112(sp)
10007c60:	d9c00315 	stw	r7,12(sp)
10007c64:	2039883a 	mov	fp,r4
10007c68:	3023883a 	mov	r17,r6
10007c6c:	2825883a 	mov	r18,r5
10007c70:	dc002417 	ldw	r16,144(sp)
10007c74:	3027883a 	mov	r19,r6
10007c78:	10000826 	beq	r2,zero,10007c9c <_dtoa_r+0x6c>
10007c7c:	21801117 	ldw	r6,68(r4)
10007c80:	00c00044 	movi	r3,1
10007c84:	100b883a 	mov	r5,r2
10007c88:	1986983a 	sll	r3,r3,r6
10007c8c:	11800115 	stw	r6,4(r2)
10007c90:	10c00215 	stw	r3,8(r2)
10007c94:	000b3900 	call	1000b390 <_Bfree>
10007c98:	e0001015 	stw	zero,64(fp)
10007c9c:	88002e16 	blt	r17,zero,10007d58 <_dtoa_r+0x128>
10007ca0:	80000015 	stw	zero,0(r16)
10007ca4:	889ffc2c 	andhi	r2,r17,32752
10007ca8:	00dffc34 	movhi	r3,32752
10007cac:	10c01c26 	beq	r2,r3,10007d20 <_dtoa_r+0xf0>
10007cb0:	000d883a 	mov	r6,zero
10007cb4:	000f883a 	mov	r7,zero
10007cb8:	9009883a 	mov	r4,r18
10007cbc:	980b883a 	mov	r5,r19
10007cc0:	00101a00 	call	100101a0 <__eqdf2>
10007cc4:	10002b1e 	bne	r2,zero,10007d74 <_dtoa_r+0x144>
10007cc8:	d9c02317 	ldw	r7,140(sp)
10007ccc:	00800044 	movi	r2,1
10007cd0:	38800015 	stw	r2,0(r7)
10007cd4:	d8802517 	ldw	r2,148(sp)
10007cd8:	10019e26 	beq	r2,zero,10008354 <_dtoa_r+0x724>
10007cdc:	d8c02517 	ldw	r3,148(sp)
10007ce0:	00840074 	movhi	r2,4097
10007ce4:	10919a44 	addi	r2,r2,18025
10007ce8:	18800015 	stw	r2,0(r3)
10007cec:	10bfffc4 	addi	r2,r2,-1
10007cf0:	dfc02117 	ldw	ra,132(sp)
10007cf4:	df002017 	ldw	fp,128(sp)
10007cf8:	ddc01f17 	ldw	r23,124(sp)
10007cfc:	dd801e17 	ldw	r22,120(sp)
10007d00:	dd401d17 	ldw	r21,116(sp)
10007d04:	dd001c17 	ldw	r20,112(sp)
10007d08:	dcc01b17 	ldw	r19,108(sp)
10007d0c:	dc801a17 	ldw	r18,104(sp)
10007d10:	dc401917 	ldw	r17,100(sp)
10007d14:	dc001817 	ldw	r16,96(sp)
10007d18:	dec02204 	addi	sp,sp,136
10007d1c:	f800283a 	ret
10007d20:	d8c02317 	ldw	r3,140(sp)
10007d24:	0089c3c4 	movi	r2,9999
10007d28:	18800015 	stw	r2,0(r3)
10007d2c:	90017726 	beq	r18,zero,1000830c <_dtoa_r+0x6dc>
10007d30:	00840074 	movhi	r2,4097
10007d34:	1091a604 	addi	r2,r2,18072
10007d38:	d9002517 	ldw	r4,148(sp)
10007d3c:	203fec26 	beq	r4,zero,10007cf0 <__alt_data_end+0xf8007cf0>
10007d40:	10c000c7 	ldb	r3,3(r2)
10007d44:	1801781e 	bne	r3,zero,10008328 <_dtoa_r+0x6f8>
10007d48:	10c000c4 	addi	r3,r2,3
10007d4c:	d9802517 	ldw	r6,148(sp)
10007d50:	30c00015 	stw	r3,0(r6)
10007d54:	003fe606 	br	10007cf0 <__alt_data_end+0xf8007cf0>
10007d58:	04e00034 	movhi	r19,32768
10007d5c:	9cffffc4 	addi	r19,r19,-1
10007d60:	00800044 	movi	r2,1
10007d64:	8ce6703a 	and	r19,r17,r19
10007d68:	80800015 	stw	r2,0(r16)
10007d6c:	9823883a 	mov	r17,r19
10007d70:	003fcc06 	br	10007ca4 <__alt_data_end+0xf8007ca4>
10007d74:	d8800204 	addi	r2,sp,8
10007d78:	d8800015 	stw	r2,0(sp)
10007d7c:	d9c00104 	addi	r7,sp,4
10007d80:	900b883a 	mov	r5,r18
10007d84:	980d883a 	mov	r6,r19
10007d88:	e009883a 	mov	r4,fp
10007d8c:	8820d53a 	srli	r16,r17,20
10007d90:	000c0380 	call	1000c038 <__d2b>
10007d94:	d8800915 	stw	r2,36(sp)
10007d98:	8001651e 	bne	r16,zero,10008330 <_dtoa_r+0x700>
10007d9c:	dd800217 	ldw	r22,8(sp)
10007da0:	dc000117 	ldw	r16,4(sp)
10007da4:	00800804 	movi	r2,32
10007da8:	b421883a 	add	r16,r22,r16
10007dac:	80c10c84 	addi	r3,r16,1074
10007db0:	10c2d10e 	bge	r2,r3,100088f8 <_dtoa_r+0xcc8>
10007db4:	00801004 	movi	r2,64
10007db8:	81010484 	addi	r4,r16,1042
10007dbc:	10c7c83a 	sub	r3,r2,r3
10007dc0:	9108d83a 	srl	r4,r18,r4
10007dc4:	88e2983a 	sll	r17,r17,r3
10007dc8:	2448b03a 	or	r4,r4,r17
10007dcc:	00051240 	call	10005124 <__floatunsidf>
10007dd0:	017f8434 	movhi	r5,65040
10007dd4:	01800044 	movi	r6,1
10007dd8:	1009883a 	mov	r4,r2
10007ddc:	194b883a 	add	r5,r3,r5
10007de0:	843fffc4 	addi	r16,r16,-1
10007de4:	d9801115 	stw	r6,68(sp)
10007de8:	000d883a 	mov	r6,zero
10007dec:	01cffe34 	movhi	r7,16376
10007df0:	0010b700 	call	10010b70 <__subdf3>
10007df4:	0198dbf4 	movhi	r6,25455
10007df8:	01cff4f4 	movhi	r7,16339
10007dfc:	3190d844 	addi	r6,r6,17249
10007e00:	39e1e9c4 	addi	r7,r7,-30809
10007e04:	1009883a 	mov	r4,r2
10007e08:	180b883a 	mov	r5,r3
10007e0c:	00103040 	call	10010304 <__muldf3>
10007e10:	01a2d874 	movhi	r6,35681
10007e14:	01cff1f4 	movhi	r7,16327
10007e18:	31b22cc4 	addi	r6,r6,-14157
10007e1c:	39e28a04 	addi	r7,r7,-30168
10007e20:	180b883a 	mov	r5,r3
10007e24:	1009883a 	mov	r4,r2
10007e28:	000f8f40 	call	1000f8f4 <__adddf3>
10007e2c:	8009883a 	mov	r4,r16
10007e30:	1029883a 	mov	r20,r2
10007e34:	1823883a 	mov	r17,r3
10007e38:	00050480 	call	10005048 <__floatsidf>
10007e3c:	019427f4 	movhi	r6,20639
10007e40:	01cff4f4 	movhi	r7,16339
10007e44:	319e7ec4 	addi	r6,r6,31227
10007e48:	39d104c4 	addi	r7,r7,17427
10007e4c:	1009883a 	mov	r4,r2
10007e50:	180b883a 	mov	r5,r3
10007e54:	00103040 	call	10010304 <__muldf3>
10007e58:	100d883a 	mov	r6,r2
10007e5c:	180f883a 	mov	r7,r3
10007e60:	a009883a 	mov	r4,r20
10007e64:	880b883a 	mov	r5,r17
10007e68:	000f8f40 	call	1000f8f4 <__adddf3>
10007e6c:	1009883a 	mov	r4,r2
10007e70:	180b883a 	mov	r5,r3
10007e74:	1029883a 	mov	r20,r2
10007e78:	1823883a 	mov	r17,r3
10007e7c:	001146c0 	call	1001146c <__fixdfsi>
10007e80:	000d883a 	mov	r6,zero
10007e84:	000f883a 	mov	r7,zero
10007e88:	a009883a 	mov	r4,r20
10007e8c:	880b883a 	mov	r5,r17
10007e90:	d8800515 	stw	r2,20(sp)
10007e94:	0004f540 	call	10004f54 <__ledf2>
10007e98:	10028716 	blt	r2,zero,100088b8 <_dtoa_r+0xc88>
10007e9c:	d8c00517 	ldw	r3,20(sp)
10007ea0:	00800584 	movi	r2,22
10007ea4:	10c27536 	bltu	r2,r3,1000887c <_dtoa_r+0xc4c>
10007ea8:	180490fa 	slli	r2,r3,3
10007eac:	00c40074 	movhi	r3,4097
10007eb0:	18d1c104 	addi	r3,r3,18180
10007eb4:	1885883a 	add	r2,r3,r2
10007eb8:	11000017 	ldw	r4,0(r2)
10007ebc:	11400117 	ldw	r5,4(r2)
10007ec0:	900d883a 	mov	r6,r18
10007ec4:	980f883a 	mov	r7,r19
10007ec8:	00102280 	call	10010228 <__gedf2>
10007ecc:	00828d0e 	bge	zero,r2,10008904 <_dtoa_r+0xcd4>
10007ed0:	d9000517 	ldw	r4,20(sp)
10007ed4:	d8000e15 	stw	zero,56(sp)
10007ed8:	213fffc4 	addi	r4,r4,-1
10007edc:	d9000515 	stw	r4,20(sp)
10007ee0:	b42dc83a 	sub	r22,r22,r16
10007ee4:	b5bfffc4 	addi	r22,r22,-1
10007ee8:	b0026f16 	blt	r22,zero,100088a8 <_dtoa_r+0xc78>
10007eec:	d8000815 	stw	zero,32(sp)
10007ef0:	d9c00517 	ldw	r7,20(sp)
10007ef4:	38026416 	blt	r7,zero,10008888 <_dtoa_r+0xc58>
10007ef8:	b1ed883a 	add	r22,r22,r7
10007efc:	d9c00d15 	stw	r7,52(sp)
10007f00:	d8000a15 	stw	zero,40(sp)
10007f04:	d9800317 	ldw	r6,12(sp)
10007f08:	00800244 	movi	r2,9
10007f0c:	11811436 	bltu	r2,r6,10008360 <_dtoa_r+0x730>
10007f10:	00800144 	movi	r2,5
10007f14:	1184e10e 	bge	r2,r6,1000929c <_dtoa_r+0x166c>
10007f18:	31bfff04 	addi	r6,r6,-4
10007f1c:	d9800315 	stw	r6,12(sp)
10007f20:	0023883a 	mov	r17,zero
10007f24:	d9800317 	ldw	r6,12(sp)
10007f28:	008000c4 	movi	r2,3
10007f2c:	30836726 	beq	r6,r2,10008ccc <_dtoa_r+0x109c>
10007f30:	1183410e 	bge	r2,r6,10008c38 <_dtoa_r+0x1008>
10007f34:	d9c00317 	ldw	r7,12(sp)
10007f38:	00800104 	movi	r2,4
10007f3c:	38827c26 	beq	r7,r2,10008930 <_dtoa_r+0xd00>
10007f40:	00800144 	movi	r2,5
10007f44:	3884c41e 	bne	r7,r2,10009258 <_dtoa_r+0x1628>
10007f48:	00800044 	movi	r2,1
10007f4c:	d8800b15 	stw	r2,44(sp)
10007f50:	d8c00517 	ldw	r3,20(sp)
10007f54:	d9002217 	ldw	r4,136(sp)
10007f58:	1907883a 	add	r3,r3,r4
10007f5c:	19800044 	addi	r6,r3,1
10007f60:	d8c00c15 	stw	r3,48(sp)
10007f64:	d9800615 	stw	r6,24(sp)
10007f68:	0183a40e 	bge	zero,r6,10008dfc <_dtoa_r+0x11cc>
10007f6c:	d9800617 	ldw	r6,24(sp)
10007f70:	3021883a 	mov	r16,r6
10007f74:	e0001115 	stw	zero,68(fp)
10007f78:	008005c4 	movi	r2,23
10007f7c:	1184c92e 	bgeu	r2,r6,100092a4 <_dtoa_r+0x1674>
10007f80:	00c00044 	movi	r3,1
10007f84:	00800104 	movi	r2,4
10007f88:	1085883a 	add	r2,r2,r2
10007f8c:	11000504 	addi	r4,r2,20
10007f90:	180b883a 	mov	r5,r3
10007f94:	18c00044 	addi	r3,r3,1
10007f98:	313ffb2e 	bgeu	r6,r4,10007f88 <__alt_data_end+0xf8007f88>
10007f9c:	e1401115 	stw	r5,68(fp)
10007fa0:	e009883a 	mov	r4,fp
10007fa4:	000b2e80 	call	1000b2e8 <_Balloc>
10007fa8:	d8800715 	stw	r2,28(sp)
10007fac:	e0801015 	stw	r2,64(fp)
10007fb0:	00800384 	movi	r2,14
10007fb4:	1400f736 	bltu	r2,r16,10008394 <_dtoa_r+0x764>
10007fb8:	8800f626 	beq	r17,zero,10008394 <_dtoa_r+0x764>
10007fbc:	d9c00517 	ldw	r7,20(sp)
10007fc0:	01c39a0e 	bge	zero,r7,10008e2c <_dtoa_r+0x11fc>
10007fc4:	388003cc 	andi	r2,r7,15
10007fc8:	100490fa 	slli	r2,r2,3
10007fcc:	382bd13a 	srai	r21,r7,4
10007fd0:	00c40074 	movhi	r3,4097
10007fd4:	18d1c104 	addi	r3,r3,18180
10007fd8:	1885883a 	add	r2,r3,r2
10007fdc:	a8c0040c 	andi	r3,r21,16
10007fe0:	12400017 	ldw	r9,0(r2)
10007fe4:	12000117 	ldw	r8,4(r2)
10007fe8:	18037926 	beq	r3,zero,10008dd0 <_dtoa_r+0x11a0>
10007fec:	00840074 	movhi	r2,4097
10007ff0:	1091b704 	addi	r2,r2,18140
10007ff4:	11800817 	ldw	r6,32(r2)
10007ff8:	11c00917 	ldw	r7,36(r2)
10007ffc:	9009883a 	mov	r4,r18
10008000:	980b883a 	mov	r5,r19
10008004:	da001715 	stw	r8,92(sp)
10008008:	da401615 	stw	r9,88(sp)
1000800c:	00045840 	call	10004584 <__divdf3>
10008010:	da001717 	ldw	r8,92(sp)
10008014:	da401617 	ldw	r9,88(sp)
10008018:	ad4003cc 	andi	r21,r21,15
1000801c:	040000c4 	movi	r16,3
10008020:	1023883a 	mov	r17,r2
10008024:	1829883a 	mov	r20,r3
10008028:	a8001126 	beq	r21,zero,10008070 <_dtoa_r+0x440>
1000802c:	05c40074 	movhi	r23,4097
10008030:	bdd1b704 	addi	r23,r23,18140
10008034:	4805883a 	mov	r2,r9
10008038:	4007883a 	mov	r3,r8
1000803c:	a980004c 	andi	r6,r21,1
10008040:	1009883a 	mov	r4,r2
10008044:	a82bd07a 	srai	r21,r21,1
10008048:	180b883a 	mov	r5,r3
1000804c:	30000426 	beq	r6,zero,10008060 <_dtoa_r+0x430>
10008050:	b9800017 	ldw	r6,0(r23)
10008054:	b9c00117 	ldw	r7,4(r23)
10008058:	84000044 	addi	r16,r16,1
1000805c:	00103040 	call	10010304 <__muldf3>
10008060:	bdc00204 	addi	r23,r23,8
10008064:	a83ff51e 	bne	r21,zero,1000803c <__alt_data_end+0xf800803c>
10008068:	1013883a 	mov	r9,r2
1000806c:	1811883a 	mov	r8,r3
10008070:	480d883a 	mov	r6,r9
10008074:	400f883a 	mov	r7,r8
10008078:	8809883a 	mov	r4,r17
1000807c:	a00b883a 	mov	r5,r20
10008080:	00045840 	call	10004584 <__divdf3>
10008084:	d8800f15 	stw	r2,60(sp)
10008088:	d8c01015 	stw	r3,64(sp)
1000808c:	d8c00e17 	ldw	r3,56(sp)
10008090:	18000626 	beq	r3,zero,100080ac <_dtoa_r+0x47c>
10008094:	d9000f17 	ldw	r4,60(sp)
10008098:	d9401017 	ldw	r5,64(sp)
1000809c:	000d883a 	mov	r6,zero
100080a0:	01cffc34 	movhi	r7,16368
100080a4:	0004f540 	call	10004f54 <__ledf2>
100080a8:	10040b16 	blt	r2,zero,100090d8 <_dtoa_r+0x14a8>
100080ac:	8009883a 	mov	r4,r16
100080b0:	00050480 	call	10005048 <__floatsidf>
100080b4:	d9800f17 	ldw	r6,60(sp)
100080b8:	d9c01017 	ldw	r7,64(sp)
100080bc:	1009883a 	mov	r4,r2
100080c0:	180b883a 	mov	r5,r3
100080c4:	00103040 	call	10010304 <__muldf3>
100080c8:	000d883a 	mov	r6,zero
100080cc:	01d00734 	movhi	r7,16412
100080d0:	1009883a 	mov	r4,r2
100080d4:	180b883a 	mov	r5,r3
100080d8:	000f8f40 	call	1000f8f4 <__adddf3>
100080dc:	1021883a 	mov	r16,r2
100080e0:	d8800617 	ldw	r2,24(sp)
100080e4:	047f3034 	movhi	r17,64704
100080e8:	1c63883a 	add	r17,r3,r17
100080ec:	10031826 	beq	r2,zero,10008d50 <_dtoa_r+0x1120>
100080f0:	d8c00517 	ldw	r3,20(sp)
100080f4:	db000617 	ldw	r12,24(sp)
100080f8:	d8c01315 	stw	r3,76(sp)
100080fc:	d9000b17 	ldw	r4,44(sp)
10008100:	20038f26 	beq	r4,zero,10008f40 <_dtoa_r+0x1310>
10008104:	60bfffc4 	addi	r2,r12,-1
10008108:	100490fa 	slli	r2,r2,3
1000810c:	00c40074 	movhi	r3,4097
10008110:	18d1c104 	addi	r3,r3,18180
10008114:	1885883a 	add	r2,r3,r2
10008118:	11800017 	ldw	r6,0(r2)
1000811c:	11c00117 	ldw	r7,4(r2)
10008120:	d8800717 	ldw	r2,28(sp)
10008124:	0009883a 	mov	r4,zero
10008128:	014ff834 	movhi	r5,16352
1000812c:	db001615 	stw	r12,88(sp)
10008130:	15c00044 	addi	r23,r2,1
10008134:	00045840 	call	10004584 <__divdf3>
10008138:	800d883a 	mov	r6,r16
1000813c:	880f883a 	mov	r7,r17
10008140:	1009883a 	mov	r4,r2
10008144:	180b883a 	mov	r5,r3
10008148:	0010b700 	call	10010b70 <__subdf3>
1000814c:	d9401017 	ldw	r5,64(sp)
10008150:	d9000f17 	ldw	r4,60(sp)
10008154:	102b883a 	mov	r21,r2
10008158:	d8c01215 	stw	r3,72(sp)
1000815c:	001146c0 	call	1001146c <__fixdfsi>
10008160:	1009883a 	mov	r4,r2
10008164:	1029883a 	mov	r20,r2
10008168:	00050480 	call	10005048 <__floatsidf>
1000816c:	d9000f17 	ldw	r4,60(sp)
10008170:	d9401017 	ldw	r5,64(sp)
10008174:	100d883a 	mov	r6,r2
10008178:	180f883a 	mov	r7,r3
1000817c:	0010b700 	call	10010b70 <__subdf3>
10008180:	1823883a 	mov	r17,r3
10008184:	d8c00717 	ldw	r3,28(sp)
10008188:	d9401217 	ldw	r5,72(sp)
1000818c:	a2000c04 	addi	r8,r20,48
10008190:	1021883a 	mov	r16,r2
10008194:	1a000005 	stb	r8,0(r3)
10008198:	800d883a 	mov	r6,r16
1000819c:	880f883a 	mov	r7,r17
100081a0:	a809883a 	mov	r4,r21
100081a4:	4029883a 	mov	r20,r8
100081a8:	00102280 	call	10010228 <__gedf2>
100081ac:	00841d16 	blt	zero,r2,10009224 <_dtoa_r+0x15f4>
100081b0:	800d883a 	mov	r6,r16
100081b4:	880f883a 	mov	r7,r17
100081b8:	0009883a 	mov	r4,zero
100081bc:	014ffc34 	movhi	r5,16368
100081c0:	0010b700 	call	10010b70 <__subdf3>
100081c4:	d9401217 	ldw	r5,72(sp)
100081c8:	100d883a 	mov	r6,r2
100081cc:	180f883a 	mov	r7,r3
100081d0:	a809883a 	mov	r4,r21
100081d4:	00102280 	call	10010228 <__gedf2>
100081d8:	db001617 	ldw	r12,88(sp)
100081dc:	00840e16 	blt	zero,r2,10009218 <_dtoa_r+0x15e8>
100081e0:	00800044 	movi	r2,1
100081e4:	13006b0e 	bge	r2,r12,10008394 <_dtoa_r+0x764>
100081e8:	d9000717 	ldw	r4,28(sp)
100081ec:	dd800f15 	stw	r22,60(sp)
100081f0:	dcc01015 	stw	r19,64(sp)
100081f4:	2319883a 	add	r12,r4,r12
100081f8:	dcc01217 	ldw	r19,72(sp)
100081fc:	602d883a 	mov	r22,r12
10008200:	dc801215 	stw	r18,72(sp)
10008204:	b825883a 	mov	r18,r23
10008208:	00000906 	br	10008230 <_dtoa_r+0x600>
1000820c:	0010b700 	call	10010b70 <__subdf3>
10008210:	a80d883a 	mov	r6,r21
10008214:	980f883a 	mov	r7,r19
10008218:	1009883a 	mov	r4,r2
1000821c:	180b883a 	mov	r5,r3
10008220:	0004f540 	call	10004f54 <__ledf2>
10008224:	1003e816 	blt	r2,zero,100091c8 <_dtoa_r+0x1598>
10008228:	b825883a 	mov	r18,r23
1000822c:	bd83e926 	beq	r23,r22,100091d4 <_dtoa_r+0x15a4>
10008230:	a809883a 	mov	r4,r21
10008234:	980b883a 	mov	r5,r19
10008238:	000d883a 	mov	r6,zero
1000823c:	01d00934 	movhi	r7,16420
10008240:	00103040 	call	10010304 <__muldf3>
10008244:	000d883a 	mov	r6,zero
10008248:	01d00934 	movhi	r7,16420
1000824c:	8009883a 	mov	r4,r16
10008250:	880b883a 	mov	r5,r17
10008254:	102b883a 	mov	r21,r2
10008258:	1827883a 	mov	r19,r3
1000825c:	00103040 	call	10010304 <__muldf3>
10008260:	180b883a 	mov	r5,r3
10008264:	1009883a 	mov	r4,r2
10008268:	1821883a 	mov	r16,r3
1000826c:	1023883a 	mov	r17,r2
10008270:	001146c0 	call	1001146c <__fixdfsi>
10008274:	1009883a 	mov	r4,r2
10008278:	1029883a 	mov	r20,r2
1000827c:	00050480 	call	10005048 <__floatsidf>
10008280:	8809883a 	mov	r4,r17
10008284:	800b883a 	mov	r5,r16
10008288:	100d883a 	mov	r6,r2
1000828c:	180f883a 	mov	r7,r3
10008290:	0010b700 	call	10010b70 <__subdf3>
10008294:	a5000c04 	addi	r20,r20,48
10008298:	a80d883a 	mov	r6,r21
1000829c:	980f883a 	mov	r7,r19
100082a0:	1009883a 	mov	r4,r2
100082a4:	180b883a 	mov	r5,r3
100082a8:	95000005 	stb	r20,0(r18)
100082ac:	1021883a 	mov	r16,r2
100082b0:	1823883a 	mov	r17,r3
100082b4:	0004f540 	call	10004f54 <__ledf2>
100082b8:	bdc00044 	addi	r23,r23,1
100082bc:	800d883a 	mov	r6,r16
100082c0:	880f883a 	mov	r7,r17
100082c4:	0009883a 	mov	r4,zero
100082c8:	014ffc34 	movhi	r5,16368
100082cc:	103fcf0e 	bge	r2,zero,1000820c <__alt_data_end+0xf800820c>
100082d0:	d8c01317 	ldw	r3,76(sp)
100082d4:	d8c00515 	stw	r3,20(sp)
100082d8:	d9400917 	ldw	r5,36(sp)
100082dc:	e009883a 	mov	r4,fp
100082e0:	000b3900 	call	1000b390 <_Bfree>
100082e4:	d9000517 	ldw	r4,20(sp)
100082e8:	d9802317 	ldw	r6,140(sp)
100082ec:	d9c02517 	ldw	r7,148(sp)
100082f0:	b8000005 	stb	zero,0(r23)
100082f4:	20800044 	addi	r2,r4,1
100082f8:	30800015 	stw	r2,0(r6)
100082fc:	3802aa26 	beq	r7,zero,10008da8 <_dtoa_r+0x1178>
10008300:	3dc00015 	stw	r23,0(r7)
10008304:	d8800717 	ldw	r2,28(sp)
10008308:	003e7906 	br	10007cf0 <__alt_data_end+0xf8007cf0>
1000830c:	00800434 	movhi	r2,16
10008310:	10bfffc4 	addi	r2,r2,-1
10008314:	88a2703a 	and	r17,r17,r2
10008318:	883e851e 	bne	r17,zero,10007d30 <__alt_data_end+0xf8007d30>
1000831c:	00840074 	movhi	r2,4097
10008320:	1091a304 	addi	r2,r2,18060
10008324:	003e8406 	br	10007d38 <__alt_data_end+0xf8007d38>
10008328:	10c00204 	addi	r3,r2,8
1000832c:	003e8706 	br	10007d4c <__alt_data_end+0xf8007d4c>
10008330:	01400434 	movhi	r5,16
10008334:	297fffc4 	addi	r5,r5,-1
10008338:	994a703a 	and	r5,r19,r5
1000833c:	9009883a 	mov	r4,r18
10008340:	843f0044 	addi	r16,r16,-1023
10008344:	294ffc34 	orhi	r5,r5,16368
10008348:	dd800217 	ldw	r22,8(sp)
1000834c:	d8001115 	stw	zero,68(sp)
10008350:	003ea506 	br	10007de8 <__alt_data_end+0xf8007de8>
10008354:	00840074 	movhi	r2,4097
10008358:	10919a04 	addi	r2,r2,18024
1000835c:	003e6406 	br	10007cf0 <__alt_data_end+0xf8007cf0>
10008360:	e0001115 	stw	zero,68(fp)
10008364:	000b883a 	mov	r5,zero
10008368:	e009883a 	mov	r4,fp
1000836c:	000b2e80 	call	1000b2e8 <_Balloc>
10008370:	01bfffc4 	movi	r6,-1
10008374:	01c00044 	movi	r7,1
10008378:	d8800715 	stw	r2,28(sp)
1000837c:	d9800c15 	stw	r6,48(sp)
10008380:	e0801015 	stw	r2,64(fp)
10008384:	d8000315 	stw	zero,12(sp)
10008388:	d9c00b15 	stw	r7,44(sp)
1000838c:	d9800615 	stw	r6,24(sp)
10008390:	d8002215 	stw	zero,136(sp)
10008394:	d8800117 	ldw	r2,4(sp)
10008398:	10008916 	blt	r2,zero,100085c0 <_dtoa_r+0x990>
1000839c:	d9000517 	ldw	r4,20(sp)
100083a0:	00c00384 	movi	r3,14
100083a4:	19008616 	blt	r3,r4,100085c0 <_dtoa_r+0x990>
100083a8:	200490fa 	slli	r2,r4,3
100083ac:	00c40074 	movhi	r3,4097
100083b0:	d9802217 	ldw	r6,136(sp)
100083b4:	18d1c104 	addi	r3,r3,18180
100083b8:	1885883a 	add	r2,r3,r2
100083bc:	14000017 	ldw	r16,0(r2)
100083c0:	14400117 	ldw	r17,4(r2)
100083c4:	30016316 	blt	r6,zero,10008954 <_dtoa_r+0xd24>
100083c8:	800d883a 	mov	r6,r16
100083cc:	880f883a 	mov	r7,r17
100083d0:	9009883a 	mov	r4,r18
100083d4:	980b883a 	mov	r5,r19
100083d8:	00045840 	call	10004584 <__divdf3>
100083dc:	180b883a 	mov	r5,r3
100083e0:	1009883a 	mov	r4,r2
100083e4:	001146c0 	call	1001146c <__fixdfsi>
100083e8:	1009883a 	mov	r4,r2
100083ec:	102b883a 	mov	r21,r2
100083f0:	00050480 	call	10005048 <__floatsidf>
100083f4:	800d883a 	mov	r6,r16
100083f8:	880f883a 	mov	r7,r17
100083fc:	1009883a 	mov	r4,r2
10008400:	180b883a 	mov	r5,r3
10008404:	00103040 	call	10010304 <__muldf3>
10008408:	100d883a 	mov	r6,r2
1000840c:	180f883a 	mov	r7,r3
10008410:	9009883a 	mov	r4,r18
10008414:	980b883a 	mov	r5,r19
10008418:	0010b700 	call	10010b70 <__subdf3>
1000841c:	d9c00717 	ldw	r7,28(sp)
10008420:	1009883a 	mov	r4,r2
10008424:	a8800c04 	addi	r2,r21,48
10008428:	38800005 	stb	r2,0(r7)
1000842c:	3dc00044 	addi	r23,r7,1
10008430:	d9c00617 	ldw	r7,24(sp)
10008434:	01800044 	movi	r6,1
10008438:	180b883a 	mov	r5,r3
1000843c:	2005883a 	mov	r2,r4
10008440:	39803826 	beq	r7,r6,10008524 <_dtoa_r+0x8f4>
10008444:	000d883a 	mov	r6,zero
10008448:	01d00934 	movhi	r7,16420
1000844c:	00103040 	call	10010304 <__muldf3>
10008450:	000d883a 	mov	r6,zero
10008454:	000f883a 	mov	r7,zero
10008458:	1009883a 	mov	r4,r2
1000845c:	180b883a 	mov	r5,r3
10008460:	1025883a 	mov	r18,r2
10008464:	1827883a 	mov	r19,r3
10008468:	00101a00 	call	100101a0 <__eqdf2>
1000846c:	103f9a26 	beq	r2,zero,100082d8 <__alt_data_end+0xf80082d8>
10008470:	d9c00617 	ldw	r7,24(sp)
10008474:	d8c00717 	ldw	r3,28(sp)
10008478:	b829883a 	mov	r20,r23
1000847c:	38bfffc4 	addi	r2,r7,-1
10008480:	18ad883a 	add	r22,r3,r2
10008484:	00000a06 	br	100084b0 <_dtoa_r+0x880>
10008488:	00103040 	call	10010304 <__muldf3>
1000848c:	000d883a 	mov	r6,zero
10008490:	000f883a 	mov	r7,zero
10008494:	1009883a 	mov	r4,r2
10008498:	180b883a 	mov	r5,r3
1000849c:	1025883a 	mov	r18,r2
100084a0:	1827883a 	mov	r19,r3
100084a4:	b829883a 	mov	r20,r23
100084a8:	00101a00 	call	100101a0 <__eqdf2>
100084ac:	103f8a26 	beq	r2,zero,100082d8 <__alt_data_end+0xf80082d8>
100084b0:	800d883a 	mov	r6,r16
100084b4:	880f883a 	mov	r7,r17
100084b8:	9009883a 	mov	r4,r18
100084bc:	980b883a 	mov	r5,r19
100084c0:	00045840 	call	10004584 <__divdf3>
100084c4:	180b883a 	mov	r5,r3
100084c8:	1009883a 	mov	r4,r2
100084cc:	001146c0 	call	1001146c <__fixdfsi>
100084d0:	1009883a 	mov	r4,r2
100084d4:	102b883a 	mov	r21,r2
100084d8:	00050480 	call	10005048 <__floatsidf>
100084dc:	800d883a 	mov	r6,r16
100084e0:	880f883a 	mov	r7,r17
100084e4:	1009883a 	mov	r4,r2
100084e8:	180b883a 	mov	r5,r3
100084ec:	00103040 	call	10010304 <__muldf3>
100084f0:	100d883a 	mov	r6,r2
100084f4:	180f883a 	mov	r7,r3
100084f8:	9009883a 	mov	r4,r18
100084fc:	980b883a 	mov	r5,r19
10008500:	0010b700 	call	10010b70 <__subdf3>
10008504:	aa000c04 	addi	r8,r21,48
10008508:	a2000005 	stb	r8,0(r20)
1000850c:	000d883a 	mov	r6,zero
10008510:	01d00934 	movhi	r7,16420
10008514:	1009883a 	mov	r4,r2
10008518:	180b883a 	mov	r5,r3
1000851c:	a5c00044 	addi	r23,r20,1
10008520:	b53fd91e 	bne	r22,r20,10008488 <__alt_data_end+0xf8008488>
10008524:	100d883a 	mov	r6,r2
10008528:	180f883a 	mov	r7,r3
1000852c:	1009883a 	mov	r4,r2
10008530:	180b883a 	mov	r5,r3
10008534:	000f8f40 	call	1000f8f4 <__adddf3>
10008538:	100d883a 	mov	r6,r2
1000853c:	180f883a 	mov	r7,r3
10008540:	8009883a 	mov	r4,r16
10008544:	880b883a 	mov	r5,r17
10008548:	1027883a 	mov	r19,r2
1000854c:	1825883a 	mov	r18,r3
10008550:	0004f540 	call	10004f54 <__ledf2>
10008554:	10000816 	blt	r2,zero,10008578 <_dtoa_r+0x948>
10008558:	980d883a 	mov	r6,r19
1000855c:	900f883a 	mov	r7,r18
10008560:	8009883a 	mov	r4,r16
10008564:	880b883a 	mov	r5,r17
10008568:	00101a00 	call	100101a0 <__eqdf2>
1000856c:	103f5a1e 	bne	r2,zero,100082d8 <__alt_data_end+0xf80082d8>
10008570:	ad40004c 	andi	r21,r21,1
10008574:	a83f5826 	beq	r21,zero,100082d8 <__alt_data_end+0xf80082d8>
10008578:	bd3fffc3 	ldbu	r20,-1(r23)
1000857c:	b8bfffc4 	addi	r2,r23,-1
10008580:	1007883a 	mov	r3,r2
10008584:	01400e44 	movi	r5,57
10008588:	d9800717 	ldw	r6,28(sp)
1000858c:	00000506 	br	100085a4 <_dtoa_r+0x974>
10008590:	18ffffc4 	addi	r3,r3,-1
10008594:	11824726 	beq	r2,r6,10008eb4 <_dtoa_r+0x1284>
10008598:	1d000003 	ldbu	r20,0(r3)
1000859c:	102f883a 	mov	r23,r2
100085a0:	10bfffc4 	addi	r2,r2,-1
100085a4:	a1003fcc 	andi	r4,r20,255
100085a8:	2100201c 	xori	r4,r4,128
100085ac:	213fe004 	addi	r4,r4,-128
100085b0:	217ff726 	beq	r4,r5,10008590 <__alt_data_end+0xf8008590>
100085b4:	a2000044 	addi	r8,r20,1
100085b8:	12000005 	stb	r8,0(r2)
100085bc:	003f4606 	br	100082d8 <__alt_data_end+0xf80082d8>
100085c0:	d9000b17 	ldw	r4,44(sp)
100085c4:	2000c826 	beq	r4,zero,100088e8 <_dtoa_r+0xcb8>
100085c8:	d9800317 	ldw	r6,12(sp)
100085cc:	00c00044 	movi	r3,1
100085d0:	1980f90e 	bge	r3,r6,100089b8 <_dtoa_r+0xd88>
100085d4:	d8800617 	ldw	r2,24(sp)
100085d8:	d8c00a17 	ldw	r3,40(sp)
100085dc:	157fffc4 	addi	r21,r2,-1
100085e0:	1d41f316 	blt	r3,r21,10008db0 <_dtoa_r+0x1180>
100085e4:	1d6bc83a 	sub	r21,r3,r21
100085e8:	d9c00617 	ldw	r7,24(sp)
100085ec:	3802aa16 	blt	r7,zero,10009098 <_dtoa_r+0x1468>
100085f0:	dd000817 	ldw	r20,32(sp)
100085f4:	d8800617 	ldw	r2,24(sp)
100085f8:	d8c00817 	ldw	r3,32(sp)
100085fc:	01400044 	movi	r5,1
10008600:	e009883a 	mov	r4,fp
10008604:	1887883a 	add	r3,r3,r2
10008608:	d8c00815 	stw	r3,32(sp)
1000860c:	b0ad883a 	add	r22,r22,r2
10008610:	000b71c0 	call	1000b71c <__i2b>
10008614:	1023883a 	mov	r17,r2
10008618:	a0000826 	beq	r20,zero,1000863c <_dtoa_r+0xa0c>
1000861c:	0580070e 	bge	zero,r22,1000863c <_dtoa_r+0xa0c>
10008620:	a005883a 	mov	r2,r20
10008624:	b500b916 	blt	r22,r20,1000890c <_dtoa_r+0xcdc>
10008628:	d9000817 	ldw	r4,32(sp)
1000862c:	a0a9c83a 	sub	r20,r20,r2
10008630:	b0adc83a 	sub	r22,r22,r2
10008634:	2089c83a 	sub	r4,r4,r2
10008638:	d9000815 	stw	r4,32(sp)
1000863c:	d9800a17 	ldw	r6,40(sp)
10008640:	0181810e 	bge	zero,r6,10008c48 <_dtoa_r+0x1018>
10008644:	d9c00b17 	ldw	r7,44(sp)
10008648:	3800b326 	beq	r7,zero,10008918 <_dtoa_r+0xce8>
1000864c:	a800b226 	beq	r21,zero,10008918 <_dtoa_r+0xce8>
10008650:	880b883a 	mov	r5,r17
10008654:	a80d883a 	mov	r6,r21
10008658:	e009883a 	mov	r4,fp
1000865c:	000b9e40 	call	1000b9e4 <__pow5mult>
10008660:	d9800917 	ldw	r6,36(sp)
10008664:	100b883a 	mov	r5,r2
10008668:	e009883a 	mov	r4,fp
1000866c:	1023883a 	mov	r17,r2
10008670:	000b7580 	call	1000b758 <__multiply>
10008674:	1021883a 	mov	r16,r2
10008678:	d8800a17 	ldw	r2,40(sp)
1000867c:	d9400917 	ldw	r5,36(sp)
10008680:	e009883a 	mov	r4,fp
10008684:	1545c83a 	sub	r2,r2,r21
10008688:	d8800a15 	stw	r2,40(sp)
1000868c:	000b3900 	call	1000b390 <_Bfree>
10008690:	d8c00a17 	ldw	r3,40(sp)
10008694:	18009f1e 	bne	r3,zero,10008914 <_dtoa_r+0xce4>
10008698:	05c00044 	movi	r23,1
1000869c:	e009883a 	mov	r4,fp
100086a0:	b80b883a 	mov	r5,r23
100086a4:	000b71c0 	call	1000b71c <__i2b>
100086a8:	d9000d17 	ldw	r4,52(sp)
100086ac:	102b883a 	mov	r21,r2
100086b0:	2000ce26 	beq	r4,zero,100089ec <_dtoa_r+0xdbc>
100086b4:	200d883a 	mov	r6,r4
100086b8:	100b883a 	mov	r5,r2
100086bc:	e009883a 	mov	r4,fp
100086c0:	000b9e40 	call	1000b9e4 <__pow5mult>
100086c4:	d9800317 	ldw	r6,12(sp)
100086c8:	102b883a 	mov	r21,r2
100086cc:	b981810e 	bge	r23,r6,10008cd4 <_dtoa_r+0x10a4>
100086d0:	0027883a 	mov	r19,zero
100086d4:	a8800417 	ldw	r2,16(r21)
100086d8:	05c00804 	movi	r23,32
100086dc:	10800104 	addi	r2,r2,4
100086e0:	1085883a 	add	r2,r2,r2
100086e4:	1085883a 	add	r2,r2,r2
100086e8:	a885883a 	add	r2,r21,r2
100086ec:	11000017 	ldw	r4,0(r2)
100086f0:	000b6040 	call	1000b604 <__hi0bits>
100086f4:	b885c83a 	sub	r2,r23,r2
100086f8:	1585883a 	add	r2,r2,r22
100086fc:	108007cc 	andi	r2,r2,31
10008700:	1000b326 	beq	r2,zero,100089d0 <_dtoa_r+0xda0>
10008704:	00c00804 	movi	r3,32
10008708:	1887c83a 	sub	r3,r3,r2
1000870c:	01000104 	movi	r4,4
10008710:	20c2cd0e 	bge	r4,r3,10009248 <_dtoa_r+0x1618>
10008714:	00c00704 	movi	r3,28
10008718:	1885c83a 	sub	r2,r3,r2
1000871c:	d8c00817 	ldw	r3,32(sp)
10008720:	a0a9883a 	add	r20,r20,r2
10008724:	b0ad883a 	add	r22,r22,r2
10008728:	1887883a 	add	r3,r3,r2
1000872c:	d8c00815 	stw	r3,32(sp)
10008730:	d9800817 	ldw	r6,32(sp)
10008734:	0180040e 	bge	zero,r6,10008748 <_dtoa_r+0xb18>
10008738:	800b883a 	mov	r5,r16
1000873c:	e009883a 	mov	r4,fp
10008740:	000bb240 	call	1000bb24 <__lshift>
10008744:	1021883a 	mov	r16,r2
10008748:	0580050e 	bge	zero,r22,10008760 <_dtoa_r+0xb30>
1000874c:	a80b883a 	mov	r5,r21
10008750:	b00d883a 	mov	r6,r22
10008754:	e009883a 	mov	r4,fp
10008758:	000bb240 	call	1000bb24 <__lshift>
1000875c:	102b883a 	mov	r21,r2
10008760:	d9c00e17 	ldw	r7,56(sp)
10008764:	3801211e 	bne	r7,zero,10008bec <_dtoa_r+0xfbc>
10008768:	d9800617 	ldw	r6,24(sp)
1000876c:	0181380e 	bge	zero,r6,10008c50 <_dtoa_r+0x1020>
10008770:	d8c00b17 	ldw	r3,44(sp)
10008774:	1800ab1e 	bne	r3,zero,10008a24 <_dtoa_r+0xdf4>
10008778:	dc800717 	ldw	r18,28(sp)
1000877c:	dcc00617 	ldw	r19,24(sp)
10008780:	9029883a 	mov	r20,r18
10008784:	00000206 	br	10008790 <_dtoa_r+0xb60>
10008788:	000b3b80 	call	1000b3b8 <__multadd>
1000878c:	1021883a 	mov	r16,r2
10008790:	a80b883a 	mov	r5,r21
10008794:	8009883a 	mov	r4,r16
10008798:	0007a080 	call	10007a08 <quorem>
1000879c:	10800c04 	addi	r2,r2,48
100087a0:	90800005 	stb	r2,0(r18)
100087a4:	94800044 	addi	r18,r18,1
100087a8:	9507c83a 	sub	r3,r18,r20
100087ac:	000f883a 	mov	r7,zero
100087b0:	01800284 	movi	r6,10
100087b4:	800b883a 	mov	r5,r16
100087b8:	e009883a 	mov	r4,fp
100087bc:	1cfff216 	blt	r3,r19,10008788 <__alt_data_end+0xf8008788>
100087c0:	1011883a 	mov	r8,r2
100087c4:	d8800617 	ldw	r2,24(sp)
100087c8:	0082370e 	bge	zero,r2,100090a8 <_dtoa_r+0x1478>
100087cc:	d9000717 	ldw	r4,28(sp)
100087d0:	0025883a 	mov	r18,zero
100087d4:	20af883a 	add	r23,r4,r2
100087d8:	01800044 	movi	r6,1
100087dc:	800b883a 	mov	r5,r16
100087e0:	e009883a 	mov	r4,fp
100087e4:	da001715 	stw	r8,92(sp)
100087e8:	000bb240 	call	1000bb24 <__lshift>
100087ec:	a80b883a 	mov	r5,r21
100087f0:	1009883a 	mov	r4,r2
100087f4:	d8800915 	stw	r2,36(sp)
100087f8:	000bc6c0 	call	1000bc6c <__mcmp>
100087fc:	da001717 	ldw	r8,92(sp)
10008800:	0081800e 	bge	zero,r2,10008e04 <_dtoa_r+0x11d4>
10008804:	b93fffc3 	ldbu	r4,-1(r23)
10008808:	b8bfffc4 	addi	r2,r23,-1
1000880c:	1007883a 	mov	r3,r2
10008810:	01800e44 	movi	r6,57
10008814:	d9c00717 	ldw	r7,28(sp)
10008818:	00000506 	br	10008830 <_dtoa_r+0xc00>
1000881c:	18ffffc4 	addi	r3,r3,-1
10008820:	11c12326 	beq	r2,r7,10008cb0 <_dtoa_r+0x1080>
10008824:	19000003 	ldbu	r4,0(r3)
10008828:	102f883a 	mov	r23,r2
1000882c:	10bfffc4 	addi	r2,r2,-1
10008830:	21403fcc 	andi	r5,r4,255
10008834:	2940201c 	xori	r5,r5,128
10008838:	297fe004 	addi	r5,r5,-128
1000883c:	29bff726 	beq	r5,r6,1000881c <__alt_data_end+0xf800881c>
10008840:	21000044 	addi	r4,r4,1
10008844:	11000005 	stb	r4,0(r2)
10008848:	a80b883a 	mov	r5,r21
1000884c:	e009883a 	mov	r4,fp
10008850:	000b3900 	call	1000b390 <_Bfree>
10008854:	883ea026 	beq	r17,zero,100082d8 <__alt_data_end+0xf80082d8>
10008858:	90000426 	beq	r18,zero,1000886c <_dtoa_r+0xc3c>
1000885c:	94400326 	beq	r18,r17,1000886c <_dtoa_r+0xc3c>
10008860:	900b883a 	mov	r5,r18
10008864:	e009883a 	mov	r4,fp
10008868:	000b3900 	call	1000b390 <_Bfree>
1000886c:	880b883a 	mov	r5,r17
10008870:	e009883a 	mov	r4,fp
10008874:	000b3900 	call	1000b390 <_Bfree>
10008878:	003e9706 	br	100082d8 <__alt_data_end+0xf80082d8>
1000887c:	01800044 	movi	r6,1
10008880:	d9800e15 	stw	r6,56(sp)
10008884:	003d9606 	br	10007ee0 <__alt_data_end+0xf8007ee0>
10008888:	d8800817 	ldw	r2,32(sp)
1000888c:	d8c00517 	ldw	r3,20(sp)
10008890:	d8000d15 	stw	zero,52(sp)
10008894:	10c5c83a 	sub	r2,r2,r3
10008898:	00c9c83a 	sub	r4,zero,r3
1000889c:	d8800815 	stw	r2,32(sp)
100088a0:	d9000a15 	stw	r4,40(sp)
100088a4:	003d9706 	br	10007f04 <__alt_data_end+0xf8007f04>
100088a8:	05adc83a 	sub	r22,zero,r22
100088ac:	dd800815 	stw	r22,32(sp)
100088b0:	002d883a 	mov	r22,zero
100088b4:	003d8e06 	br	10007ef0 <__alt_data_end+0xf8007ef0>
100088b8:	d9000517 	ldw	r4,20(sp)
100088bc:	00050480 	call	10005048 <__floatsidf>
100088c0:	100d883a 	mov	r6,r2
100088c4:	180f883a 	mov	r7,r3
100088c8:	a009883a 	mov	r4,r20
100088cc:	880b883a 	mov	r5,r17
100088d0:	00101a00 	call	100101a0 <__eqdf2>
100088d4:	103d7126 	beq	r2,zero,10007e9c <__alt_data_end+0xf8007e9c>
100088d8:	d9c00517 	ldw	r7,20(sp)
100088dc:	39ffffc4 	addi	r7,r7,-1
100088e0:	d9c00515 	stw	r7,20(sp)
100088e4:	003d6d06 	br	10007e9c <__alt_data_end+0xf8007e9c>
100088e8:	dd400a17 	ldw	r21,40(sp)
100088ec:	dd000817 	ldw	r20,32(sp)
100088f0:	0023883a 	mov	r17,zero
100088f4:	003f4806 	br	10008618 <__alt_data_end+0xf8008618>
100088f8:	10e3c83a 	sub	r17,r2,r3
100088fc:	9448983a 	sll	r4,r18,r17
10008900:	003d3206 	br	10007dcc <__alt_data_end+0xf8007dcc>
10008904:	d8000e15 	stw	zero,56(sp)
10008908:	003d7506 	br	10007ee0 <__alt_data_end+0xf8007ee0>
1000890c:	b005883a 	mov	r2,r22
10008910:	003f4506 	br	10008628 <__alt_data_end+0xf8008628>
10008914:	dc000915 	stw	r16,36(sp)
10008918:	d9800a17 	ldw	r6,40(sp)
1000891c:	d9400917 	ldw	r5,36(sp)
10008920:	e009883a 	mov	r4,fp
10008924:	000b9e40 	call	1000b9e4 <__pow5mult>
10008928:	1021883a 	mov	r16,r2
1000892c:	003f5a06 	br	10008698 <__alt_data_end+0xf8008698>
10008930:	01c00044 	movi	r7,1
10008934:	d9c00b15 	stw	r7,44(sp)
10008938:	d8802217 	ldw	r2,136(sp)
1000893c:	0081280e 	bge	zero,r2,10008de0 <_dtoa_r+0x11b0>
10008940:	100d883a 	mov	r6,r2
10008944:	1021883a 	mov	r16,r2
10008948:	d8800c15 	stw	r2,48(sp)
1000894c:	d8800615 	stw	r2,24(sp)
10008950:	003d8806 	br	10007f74 <__alt_data_end+0xf8007f74>
10008954:	d8800617 	ldw	r2,24(sp)
10008958:	00be9b16 	blt	zero,r2,100083c8 <__alt_data_end+0xf80083c8>
1000895c:	10010f1e 	bne	r2,zero,10008d9c <_dtoa_r+0x116c>
10008960:	880b883a 	mov	r5,r17
10008964:	000d883a 	mov	r6,zero
10008968:	01d00534 	movhi	r7,16404
1000896c:	8009883a 	mov	r4,r16
10008970:	00103040 	call	10010304 <__muldf3>
10008974:	900d883a 	mov	r6,r18
10008978:	980f883a 	mov	r7,r19
1000897c:	1009883a 	mov	r4,r2
10008980:	180b883a 	mov	r5,r3
10008984:	00102280 	call	10010228 <__gedf2>
10008988:	002b883a 	mov	r21,zero
1000898c:	0023883a 	mov	r17,zero
10008990:	1000bf16 	blt	r2,zero,10008c90 <_dtoa_r+0x1060>
10008994:	d9802217 	ldw	r6,136(sp)
10008998:	ddc00717 	ldw	r23,28(sp)
1000899c:	018c303a 	nor	r6,zero,r6
100089a0:	d9800515 	stw	r6,20(sp)
100089a4:	a80b883a 	mov	r5,r21
100089a8:	e009883a 	mov	r4,fp
100089ac:	000b3900 	call	1000b390 <_Bfree>
100089b0:	883e4926 	beq	r17,zero,100082d8 <__alt_data_end+0xf80082d8>
100089b4:	003fad06 	br	1000886c <__alt_data_end+0xf800886c>
100089b8:	d9c01117 	ldw	r7,68(sp)
100089bc:	3801bc26 	beq	r7,zero,100090b0 <_dtoa_r+0x1480>
100089c0:	10810cc4 	addi	r2,r2,1075
100089c4:	dd400a17 	ldw	r21,40(sp)
100089c8:	dd000817 	ldw	r20,32(sp)
100089cc:	003f0a06 	br	100085f8 <__alt_data_end+0xf80085f8>
100089d0:	00800704 	movi	r2,28
100089d4:	d9000817 	ldw	r4,32(sp)
100089d8:	a0a9883a 	add	r20,r20,r2
100089dc:	b0ad883a 	add	r22,r22,r2
100089e0:	2089883a 	add	r4,r4,r2
100089e4:	d9000815 	stw	r4,32(sp)
100089e8:	003f5106 	br	10008730 <__alt_data_end+0xf8008730>
100089ec:	d8c00317 	ldw	r3,12(sp)
100089f0:	b8c1fc0e 	bge	r23,r3,100091e4 <_dtoa_r+0x15b4>
100089f4:	0027883a 	mov	r19,zero
100089f8:	b805883a 	mov	r2,r23
100089fc:	003f3e06 	br	100086f8 <__alt_data_end+0xf80086f8>
10008a00:	880b883a 	mov	r5,r17
10008a04:	e009883a 	mov	r4,fp
10008a08:	000f883a 	mov	r7,zero
10008a0c:	01800284 	movi	r6,10
10008a10:	000b3b80 	call	1000b3b8 <__multadd>
10008a14:	d9000c17 	ldw	r4,48(sp)
10008a18:	1023883a 	mov	r17,r2
10008a1c:	0102040e 	bge	zero,r4,10009230 <_dtoa_r+0x1600>
10008a20:	d9000615 	stw	r4,24(sp)
10008a24:	0500050e 	bge	zero,r20,10008a3c <_dtoa_r+0xe0c>
10008a28:	880b883a 	mov	r5,r17
10008a2c:	a00d883a 	mov	r6,r20
10008a30:	e009883a 	mov	r4,fp
10008a34:	000bb240 	call	1000bb24 <__lshift>
10008a38:	1023883a 	mov	r17,r2
10008a3c:	9801241e 	bne	r19,zero,10008ed0 <_dtoa_r+0x12a0>
10008a40:	8829883a 	mov	r20,r17
10008a44:	d9000617 	ldw	r4,24(sp)
10008a48:	dcc00717 	ldw	r19,28(sp)
10008a4c:	9480004c 	andi	r18,r18,1
10008a50:	20bfffc4 	addi	r2,r4,-1
10008a54:	9885883a 	add	r2,r19,r2
10008a58:	d8800415 	stw	r2,16(sp)
10008a5c:	dc800615 	stw	r18,24(sp)
10008a60:	a80b883a 	mov	r5,r21
10008a64:	8009883a 	mov	r4,r16
10008a68:	0007a080 	call	10007a08 <quorem>
10008a6c:	880b883a 	mov	r5,r17
10008a70:	8009883a 	mov	r4,r16
10008a74:	102f883a 	mov	r23,r2
10008a78:	000bc6c0 	call	1000bc6c <__mcmp>
10008a7c:	a80b883a 	mov	r5,r21
10008a80:	a00d883a 	mov	r6,r20
10008a84:	e009883a 	mov	r4,fp
10008a88:	102d883a 	mov	r22,r2
10008a8c:	000bccc0 	call	1000bccc <__mdiff>
10008a90:	1007883a 	mov	r3,r2
10008a94:	10800317 	ldw	r2,12(r2)
10008a98:	bc800c04 	addi	r18,r23,48
10008a9c:	180b883a 	mov	r5,r3
10008aa0:	10004e1e 	bne	r2,zero,10008bdc <_dtoa_r+0xfac>
10008aa4:	8009883a 	mov	r4,r16
10008aa8:	d8c01615 	stw	r3,88(sp)
10008aac:	000bc6c0 	call	1000bc6c <__mcmp>
10008ab0:	d8c01617 	ldw	r3,88(sp)
10008ab4:	e009883a 	mov	r4,fp
10008ab8:	d8801615 	stw	r2,88(sp)
10008abc:	180b883a 	mov	r5,r3
10008ac0:	000b3900 	call	1000b390 <_Bfree>
10008ac4:	d8801617 	ldw	r2,88(sp)
10008ac8:	1000041e 	bne	r2,zero,10008adc <_dtoa_r+0xeac>
10008acc:	d9800317 	ldw	r6,12(sp)
10008ad0:	3000021e 	bne	r6,zero,10008adc <_dtoa_r+0xeac>
10008ad4:	d8c00617 	ldw	r3,24(sp)
10008ad8:	18003726 	beq	r3,zero,10008bb8 <_dtoa_r+0xf88>
10008adc:	b0002016 	blt	r22,zero,10008b60 <_dtoa_r+0xf30>
10008ae0:	b000041e 	bne	r22,zero,10008af4 <_dtoa_r+0xec4>
10008ae4:	d9000317 	ldw	r4,12(sp)
10008ae8:	2000021e 	bne	r4,zero,10008af4 <_dtoa_r+0xec4>
10008aec:	d8c00617 	ldw	r3,24(sp)
10008af0:	18001b26 	beq	r3,zero,10008b60 <_dtoa_r+0xf30>
10008af4:	00810716 	blt	zero,r2,10008f14 <_dtoa_r+0x12e4>
10008af8:	d8c00417 	ldw	r3,16(sp)
10008afc:	9d800044 	addi	r22,r19,1
10008b00:	9c800005 	stb	r18,0(r19)
10008b04:	b02f883a 	mov	r23,r22
10008b08:	98c10626 	beq	r19,r3,10008f24 <_dtoa_r+0x12f4>
10008b0c:	800b883a 	mov	r5,r16
10008b10:	000f883a 	mov	r7,zero
10008b14:	01800284 	movi	r6,10
10008b18:	e009883a 	mov	r4,fp
10008b1c:	000b3b80 	call	1000b3b8 <__multadd>
10008b20:	1021883a 	mov	r16,r2
10008b24:	000f883a 	mov	r7,zero
10008b28:	01800284 	movi	r6,10
10008b2c:	880b883a 	mov	r5,r17
10008b30:	e009883a 	mov	r4,fp
10008b34:	8d002526 	beq	r17,r20,10008bcc <_dtoa_r+0xf9c>
10008b38:	000b3b80 	call	1000b3b8 <__multadd>
10008b3c:	a00b883a 	mov	r5,r20
10008b40:	000f883a 	mov	r7,zero
10008b44:	01800284 	movi	r6,10
10008b48:	e009883a 	mov	r4,fp
10008b4c:	1023883a 	mov	r17,r2
10008b50:	000b3b80 	call	1000b3b8 <__multadd>
10008b54:	1029883a 	mov	r20,r2
10008b58:	b027883a 	mov	r19,r22
10008b5c:	003fc006 	br	10008a60 <__alt_data_end+0xf8008a60>
10008b60:	9011883a 	mov	r8,r18
10008b64:	00800e0e 	bge	zero,r2,10008ba0 <_dtoa_r+0xf70>
10008b68:	800b883a 	mov	r5,r16
10008b6c:	01800044 	movi	r6,1
10008b70:	e009883a 	mov	r4,fp
10008b74:	da001715 	stw	r8,92(sp)
10008b78:	000bb240 	call	1000bb24 <__lshift>
10008b7c:	a80b883a 	mov	r5,r21
10008b80:	1009883a 	mov	r4,r2
10008b84:	1021883a 	mov	r16,r2
10008b88:	000bc6c0 	call	1000bc6c <__mcmp>
10008b8c:	da001717 	ldw	r8,92(sp)
10008b90:	0081960e 	bge	zero,r2,100091ec <_dtoa_r+0x15bc>
10008b94:	00800e44 	movi	r2,57
10008b98:	40817026 	beq	r8,r2,1000915c <_dtoa_r+0x152c>
10008b9c:	ba000c44 	addi	r8,r23,49
10008ba0:	8825883a 	mov	r18,r17
10008ba4:	9dc00044 	addi	r23,r19,1
10008ba8:	9a000005 	stb	r8,0(r19)
10008bac:	a023883a 	mov	r17,r20
10008bb0:	dc000915 	stw	r16,36(sp)
10008bb4:	003f2406 	br	10008848 <__alt_data_end+0xf8008848>
10008bb8:	00800e44 	movi	r2,57
10008bbc:	9011883a 	mov	r8,r18
10008bc0:	90816626 	beq	r18,r2,1000915c <_dtoa_r+0x152c>
10008bc4:	05bff516 	blt	zero,r22,10008b9c <__alt_data_end+0xf8008b9c>
10008bc8:	003ff506 	br	10008ba0 <__alt_data_end+0xf8008ba0>
10008bcc:	000b3b80 	call	1000b3b8 <__multadd>
10008bd0:	1023883a 	mov	r17,r2
10008bd4:	1029883a 	mov	r20,r2
10008bd8:	003fdf06 	br	10008b58 <__alt_data_end+0xf8008b58>
10008bdc:	e009883a 	mov	r4,fp
10008be0:	000b3900 	call	1000b390 <_Bfree>
10008be4:	00800044 	movi	r2,1
10008be8:	003fbc06 	br	10008adc <__alt_data_end+0xf8008adc>
10008bec:	a80b883a 	mov	r5,r21
10008bf0:	8009883a 	mov	r4,r16
10008bf4:	000bc6c0 	call	1000bc6c <__mcmp>
10008bf8:	103edb0e 	bge	r2,zero,10008768 <__alt_data_end+0xf8008768>
10008bfc:	800b883a 	mov	r5,r16
10008c00:	000f883a 	mov	r7,zero
10008c04:	01800284 	movi	r6,10
10008c08:	e009883a 	mov	r4,fp
10008c0c:	000b3b80 	call	1000b3b8 <__multadd>
10008c10:	1021883a 	mov	r16,r2
10008c14:	d8800517 	ldw	r2,20(sp)
10008c18:	d8c00b17 	ldw	r3,44(sp)
10008c1c:	10bfffc4 	addi	r2,r2,-1
10008c20:	d8800515 	stw	r2,20(sp)
10008c24:	183f761e 	bne	r3,zero,10008a00 <__alt_data_end+0xf8008a00>
10008c28:	d9000c17 	ldw	r4,48(sp)
10008c2c:	0101730e 	bge	zero,r4,100091fc <_dtoa_r+0x15cc>
10008c30:	d9000615 	stw	r4,24(sp)
10008c34:	003ed006 	br	10008778 <__alt_data_end+0xf8008778>
10008c38:	00800084 	movi	r2,2
10008c3c:	3081861e 	bne	r6,r2,10009258 <_dtoa_r+0x1628>
10008c40:	d8000b15 	stw	zero,44(sp)
10008c44:	003f3c06 	br	10008938 <__alt_data_end+0xf8008938>
10008c48:	dc000917 	ldw	r16,36(sp)
10008c4c:	003e9206 	br	10008698 <__alt_data_end+0xf8008698>
10008c50:	d9c00317 	ldw	r7,12(sp)
10008c54:	00800084 	movi	r2,2
10008c58:	11fec50e 	bge	r2,r7,10008770 <__alt_data_end+0xf8008770>
10008c5c:	d9000617 	ldw	r4,24(sp)
10008c60:	20013c1e 	bne	r4,zero,10009154 <_dtoa_r+0x1524>
10008c64:	a80b883a 	mov	r5,r21
10008c68:	000f883a 	mov	r7,zero
10008c6c:	01800144 	movi	r6,5
10008c70:	e009883a 	mov	r4,fp
10008c74:	000b3b80 	call	1000b3b8 <__multadd>
10008c78:	100b883a 	mov	r5,r2
10008c7c:	8009883a 	mov	r4,r16
10008c80:	102b883a 	mov	r21,r2
10008c84:	000bc6c0 	call	1000bc6c <__mcmp>
10008c88:	dc000915 	stw	r16,36(sp)
10008c8c:	00bf410e 	bge	zero,r2,10008994 <__alt_data_end+0xf8008994>
10008c90:	d9c00717 	ldw	r7,28(sp)
10008c94:	00800c44 	movi	r2,49
10008c98:	38800005 	stb	r2,0(r7)
10008c9c:	d8800517 	ldw	r2,20(sp)
10008ca0:	3dc00044 	addi	r23,r7,1
10008ca4:	10800044 	addi	r2,r2,1
10008ca8:	d8800515 	stw	r2,20(sp)
10008cac:	003f3d06 	br	100089a4 <__alt_data_end+0xf80089a4>
10008cb0:	d9800517 	ldw	r6,20(sp)
10008cb4:	d9c00717 	ldw	r7,28(sp)
10008cb8:	00800c44 	movi	r2,49
10008cbc:	31800044 	addi	r6,r6,1
10008cc0:	d9800515 	stw	r6,20(sp)
10008cc4:	38800005 	stb	r2,0(r7)
10008cc8:	003edf06 	br	10008848 <__alt_data_end+0xf8008848>
10008ccc:	d8000b15 	stw	zero,44(sp)
10008cd0:	003c9f06 	br	10007f50 <__alt_data_end+0xf8007f50>
10008cd4:	903e7e1e 	bne	r18,zero,100086d0 <__alt_data_end+0xf80086d0>
10008cd8:	00800434 	movhi	r2,16
10008cdc:	10bfffc4 	addi	r2,r2,-1
10008ce0:	9884703a 	and	r2,r19,r2
10008ce4:	1000ea1e 	bne	r2,zero,10009090 <_dtoa_r+0x1460>
10008ce8:	9cdffc2c 	andhi	r19,r19,32752
10008cec:	9800e826 	beq	r19,zero,10009090 <_dtoa_r+0x1460>
10008cf0:	d9c00817 	ldw	r7,32(sp)
10008cf4:	b5800044 	addi	r22,r22,1
10008cf8:	04c00044 	movi	r19,1
10008cfc:	39c00044 	addi	r7,r7,1
10008d00:	d9c00815 	stw	r7,32(sp)
10008d04:	d8800d17 	ldw	r2,52(sp)
10008d08:	103e721e 	bne	r2,zero,100086d4 <__alt_data_end+0xf80086d4>
10008d0c:	00800044 	movi	r2,1
10008d10:	003e7906 	br	100086f8 <__alt_data_end+0xf80086f8>
10008d14:	8009883a 	mov	r4,r16
10008d18:	00050480 	call	10005048 <__floatsidf>
10008d1c:	d9800f17 	ldw	r6,60(sp)
10008d20:	d9c01017 	ldw	r7,64(sp)
10008d24:	1009883a 	mov	r4,r2
10008d28:	180b883a 	mov	r5,r3
10008d2c:	00103040 	call	10010304 <__muldf3>
10008d30:	000d883a 	mov	r6,zero
10008d34:	01d00734 	movhi	r7,16412
10008d38:	1009883a 	mov	r4,r2
10008d3c:	180b883a 	mov	r5,r3
10008d40:	000f8f40 	call	1000f8f4 <__adddf3>
10008d44:	047f3034 	movhi	r17,64704
10008d48:	1021883a 	mov	r16,r2
10008d4c:	1c63883a 	add	r17,r3,r17
10008d50:	d9000f17 	ldw	r4,60(sp)
10008d54:	d9401017 	ldw	r5,64(sp)
10008d58:	000d883a 	mov	r6,zero
10008d5c:	01d00534 	movhi	r7,16404
10008d60:	0010b700 	call	10010b70 <__subdf3>
10008d64:	800d883a 	mov	r6,r16
10008d68:	880f883a 	mov	r7,r17
10008d6c:	1009883a 	mov	r4,r2
10008d70:	180b883a 	mov	r5,r3
10008d74:	102b883a 	mov	r21,r2
10008d78:	1829883a 	mov	r20,r3
10008d7c:	00102280 	call	10010228 <__gedf2>
10008d80:	00806c16 	blt	zero,r2,10008f34 <_dtoa_r+0x1304>
10008d84:	89e0003c 	xorhi	r7,r17,32768
10008d88:	800d883a 	mov	r6,r16
10008d8c:	a809883a 	mov	r4,r21
10008d90:	a00b883a 	mov	r5,r20
10008d94:	0004f540 	call	10004f54 <__ledf2>
10008d98:	103d7e0e 	bge	r2,zero,10008394 <__alt_data_end+0xf8008394>
10008d9c:	002b883a 	mov	r21,zero
10008da0:	0023883a 	mov	r17,zero
10008da4:	003efb06 	br	10008994 <__alt_data_end+0xf8008994>
10008da8:	d8800717 	ldw	r2,28(sp)
10008dac:	003bd006 	br	10007cf0 <__alt_data_end+0xf8007cf0>
10008db0:	d9000a17 	ldw	r4,40(sp)
10008db4:	d9800d17 	ldw	r6,52(sp)
10008db8:	dd400a15 	stw	r21,40(sp)
10008dbc:	a905c83a 	sub	r2,r21,r4
10008dc0:	308d883a 	add	r6,r6,r2
10008dc4:	d9800d15 	stw	r6,52(sp)
10008dc8:	002b883a 	mov	r21,zero
10008dcc:	003e0606 	br	100085e8 <__alt_data_end+0xf80085e8>
10008dd0:	9023883a 	mov	r17,r18
10008dd4:	9829883a 	mov	r20,r19
10008dd8:	04000084 	movi	r16,2
10008ddc:	003c9206 	br	10008028 <__alt_data_end+0xf8008028>
10008de0:	04000044 	movi	r16,1
10008de4:	dc000c15 	stw	r16,48(sp)
10008de8:	dc000615 	stw	r16,24(sp)
10008dec:	dc002215 	stw	r16,136(sp)
10008df0:	e0001115 	stw	zero,68(fp)
10008df4:	000b883a 	mov	r5,zero
10008df8:	003c6906 	br	10007fa0 <__alt_data_end+0xf8007fa0>
10008dfc:	3021883a 	mov	r16,r6
10008e00:	003ffb06 	br	10008df0 <__alt_data_end+0xf8008df0>
10008e04:	1000021e 	bne	r2,zero,10008e10 <_dtoa_r+0x11e0>
10008e08:	4200004c 	andi	r8,r8,1
10008e0c:	403e7d1e 	bne	r8,zero,10008804 <__alt_data_end+0xf8008804>
10008e10:	01000c04 	movi	r4,48
10008e14:	00000106 	br	10008e1c <_dtoa_r+0x11ec>
10008e18:	102f883a 	mov	r23,r2
10008e1c:	b8bfffc4 	addi	r2,r23,-1
10008e20:	10c00007 	ldb	r3,0(r2)
10008e24:	193ffc26 	beq	r3,r4,10008e18 <__alt_data_end+0xf8008e18>
10008e28:	003e8706 	br	10008848 <__alt_data_end+0xf8008848>
10008e2c:	d8800517 	ldw	r2,20(sp)
10008e30:	00a3c83a 	sub	r17,zero,r2
10008e34:	8800a426 	beq	r17,zero,100090c8 <_dtoa_r+0x1498>
10008e38:	888003cc 	andi	r2,r17,15
10008e3c:	100490fa 	slli	r2,r2,3
10008e40:	00c40074 	movhi	r3,4097
10008e44:	18d1c104 	addi	r3,r3,18180
10008e48:	1885883a 	add	r2,r3,r2
10008e4c:	11800017 	ldw	r6,0(r2)
10008e50:	11c00117 	ldw	r7,4(r2)
10008e54:	9009883a 	mov	r4,r18
10008e58:	980b883a 	mov	r5,r19
10008e5c:	8823d13a 	srai	r17,r17,4
10008e60:	00103040 	call	10010304 <__muldf3>
10008e64:	d8800f15 	stw	r2,60(sp)
10008e68:	d8c01015 	stw	r3,64(sp)
10008e6c:	8800e826 	beq	r17,zero,10009210 <_dtoa_r+0x15e0>
10008e70:	05040074 	movhi	r20,4097
10008e74:	a511b704 	addi	r20,r20,18140
10008e78:	04000084 	movi	r16,2
10008e7c:	8980004c 	andi	r6,r17,1
10008e80:	1009883a 	mov	r4,r2
10008e84:	8823d07a 	srai	r17,r17,1
10008e88:	180b883a 	mov	r5,r3
10008e8c:	30000426 	beq	r6,zero,10008ea0 <_dtoa_r+0x1270>
10008e90:	a1800017 	ldw	r6,0(r20)
10008e94:	a1c00117 	ldw	r7,4(r20)
10008e98:	84000044 	addi	r16,r16,1
10008e9c:	00103040 	call	10010304 <__muldf3>
10008ea0:	a5000204 	addi	r20,r20,8
10008ea4:	883ff51e 	bne	r17,zero,10008e7c <__alt_data_end+0xf8008e7c>
10008ea8:	d8800f15 	stw	r2,60(sp)
10008eac:	d8c01015 	stw	r3,64(sp)
10008eb0:	003c7606 	br	1000808c <__alt_data_end+0xf800808c>
10008eb4:	00c00c04 	movi	r3,48
10008eb8:	10c00005 	stb	r3,0(r2)
10008ebc:	d8c00517 	ldw	r3,20(sp)
10008ec0:	bd3fffc3 	ldbu	r20,-1(r23)
10008ec4:	18c00044 	addi	r3,r3,1
10008ec8:	d8c00515 	stw	r3,20(sp)
10008ecc:	003db906 	br	100085b4 <__alt_data_end+0xf80085b4>
10008ed0:	89400117 	ldw	r5,4(r17)
10008ed4:	e009883a 	mov	r4,fp
10008ed8:	000b2e80 	call	1000b2e8 <_Balloc>
10008edc:	89800417 	ldw	r6,16(r17)
10008ee0:	89400304 	addi	r5,r17,12
10008ee4:	11000304 	addi	r4,r2,12
10008ee8:	31800084 	addi	r6,r6,2
10008eec:	318d883a 	add	r6,r6,r6
10008ef0:	318d883a 	add	r6,r6,r6
10008ef4:	1027883a 	mov	r19,r2
10008ef8:	000af1c0 	call	1000af1c <memcpy>
10008efc:	01800044 	movi	r6,1
10008f00:	980b883a 	mov	r5,r19
10008f04:	e009883a 	mov	r4,fp
10008f08:	000bb240 	call	1000bb24 <__lshift>
10008f0c:	1029883a 	mov	r20,r2
10008f10:	003ecc06 	br	10008a44 <__alt_data_end+0xf8008a44>
10008f14:	00800e44 	movi	r2,57
10008f18:	90809026 	beq	r18,r2,1000915c <_dtoa_r+0x152c>
10008f1c:	92000044 	addi	r8,r18,1
10008f20:	003f1f06 	br	10008ba0 <__alt_data_end+0xf8008ba0>
10008f24:	9011883a 	mov	r8,r18
10008f28:	8825883a 	mov	r18,r17
10008f2c:	a023883a 	mov	r17,r20
10008f30:	003e2906 	br	100087d8 <__alt_data_end+0xf80087d8>
10008f34:	002b883a 	mov	r21,zero
10008f38:	0023883a 	mov	r17,zero
10008f3c:	003f5406 	br	10008c90 <__alt_data_end+0xf8008c90>
10008f40:	61bfffc4 	addi	r6,r12,-1
10008f44:	300490fa 	slli	r2,r6,3
10008f48:	00c40074 	movhi	r3,4097
10008f4c:	18d1c104 	addi	r3,r3,18180
10008f50:	1885883a 	add	r2,r3,r2
10008f54:	11000017 	ldw	r4,0(r2)
10008f58:	11400117 	ldw	r5,4(r2)
10008f5c:	d8800717 	ldw	r2,28(sp)
10008f60:	880f883a 	mov	r7,r17
10008f64:	d9801215 	stw	r6,72(sp)
10008f68:	800d883a 	mov	r6,r16
10008f6c:	db001615 	stw	r12,88(sp)
10008f70:	15c00044 	addi	r23,r2,1
10008f74:	00103040 	call	10010304 <__muldf3>
10008f78:	d9401017 	ldw	r5,64(sp)
10008f7c:	d9000f17 	ldw	r4,60(sp)
10008f80:	d8c01515 	stw	r3,84(sp)
10008f84:	d8801415 	stw	r2,80(sp)
10008f88:	001146c0 	call	1001146c <__fixdfsi>
10008f8c:	1009883a 	mov	r4,r2
10008f90:	1021883a 	mov	r16,r2
10008f94:	00050480 	call	10005048 <__floatsidf>
10008f98:	d9000f17 	ldw	r4,60(sp)
10008f9c:	d9401017 	ldw	r5,64(sp)
10008fa0:	100d883a 	mov	r6,r2
10008fa4:	180f883a 	mov	r7,r3
10008fa8:	0010b700 	call	10010b70 <__subdf3>
10008fac:	1829883a 	mov	r20,r3
10008fb0:	d8c00717 	ldw	r3,28(sp)
10008fb4:	84000c04 	addi	r16,r16,48
10008fb8:	1023883a 	mov	r17,r2
10008fbc:	1c000005 	stb	r16,0(r3)
10008fc0:	db001617 	ldw	r12,88(sp)
10008fc4:	00800044 	movi	r2,1
10008fc8:	60802226 	beq	r12,r2,10009054 <_dtoa_r+0x1424>
10008fcc:	d9c00717 	ldw	r7,28(sp)
10008fd0:	8805883a 	mov	r2,r17
10008fd4:	b82b883a 	mov	r21,r23
10008fd8:	3b19883a 	add	r12,r7,r12
10008fdc:	6023883a 	mov	r17,r12
10008fe0:	a007883a 	mov	r3,r20
10008fe4:	dc800f15 	stw	r18,60(sp)
10008fe8:	000d883a 	mov	r6,zero
10008fec:	01d00934 	movhi	r7,16420
10008ff0:	1009883a 	mov	r4,r2
10008ff4:	180b883a 	mov	r5,r3
10008ff8:	00103040 	call	10010304 <__muldf3>
10008ffc:	180b883a 	mov	r5,r3
10009000:	1009883a 	mov	r4,r2
10009004:	1829883a 	mov	r20,r3
10009008:	1025883a 	mov	r18,r2
1000900c:	001146c0 	call	1001146c <__fixdfsi>
10009010:	1009883a 	mov	r4,r2
10009014:	1021883a 	mov	r16,r2
10009018:	00050480 	call	10005048 <__floatsidf>
1000901c:	100d883a 	mov	r6,r2
10009020:	180f883a 	mov	r7,r3
10009024:	9009883a 	mov	r4,r18
10009028:	a00b883a 	mov	r5,r20
1000902c:	84000c04 	addi	r16,r16,48
10009030:	0010b700 	call	10010b70 <__subdf3>
10009034:	ad400044 	addi	r21,r21,1
10009038:	ac3fffc5 	stb	r16,-1(r21)
1000903c:	ac7fea1e 	bne	r21,r17,10008fe8 <__alt_data_end+0xf8008fe8>
10009040:	1023883a 	mov	r17,r2
10009044:	d8801217 	ldw	r2,72(sp)
10009048:	dc800f17 	ldw	r18,60(sp)
1000904c:	1829883a 	mov	r20,r3
10009050:	b8af883a 	add	r23,r23,r2
10009054:	d9001417 	ldw	r4,80(sp)
10009058:	d9401517 	ldw	r5,84(sp)
1000905c:	000d883a 	mov	r6,zero
10009060:	01cff834 	movhi	r7,16352
10009064:	000f8f40 	call	1000f8f4 <__adddf3>
10009068:	880d883a 	mov	r6,r17
1000906c:	a00f883a 	mov	r7,r20
10009070:	1009883a 	mov	r4,r2
10009074:	180b883a 	mov	r5,r3
10009078:	0004f540 	call	10004f54 <__ledf2>
1000907c:	10003e0e 	bge	r2,zero,10009178 <_dtoa_r+0x1548>
10009080:	d9001317 	ldw	r4,76(sp)
10009084:	bd3fffc3 	ldbu	r20,-1(r23)
10009088:	d9000515 	stw	r4,20(sp)
1000908c:	003d3b06 	br	1000857c <__alt_data_end+0xf800857c>
10009090:	0027883a 	mov	r19,zero
10009094:	003f1b06 	br	10008d04 <__alt_data_end+0xf8008d04>
10009098:	d8800817 	ldw	r2,32(sp)
1000909c:	11e9c83a 	sub	r20,r2,r7
100090a0:	0005883a 	mov	r2,zero
100090a4:	003d5406 	br	100085f8 <__alt_data_end+0xf80085f8>
100090a8:	00800044 	movi	r2,1
100090ac:	003dc706 	br	100087cc <__alt_data_end+0xf80087cc>
100090b0:	d8c00217 	ldw	r3,8(sp)
100090b4:	00800d84 	movi	r2,54
100090b8:	dd400a17 	ldw	r21,40(sp)
100090bc:	10c5c83a 	sub	r2,r2,r3
100090c0:	dd000817 	ldw	r20,32(sp)
100090c4:	003d4c06 	br	100085f8 <__alt_data_end+0xf80085f8>
100090c8:	dc800f15 	stw	r18,60(sp)
100090cc:	dcc01015 	stw	r19,64(sp)
100090d0:	04000084 	movi	r16,2
100090d4:	003bed06 	br	1000808c <__alt_data_end+0xf800808c>
100090d8:	d9000617 	ldw	r4,24(sp)
100090dc:	203f0d26 	beq	r4,zero,10008d14 <__alt_data_end+0xf8008d14>
100090e0:	d9800c17 	ldw	r6,48(sp)
100090e4:	01bcab0e 	bge	zero,r6,10008394 <__alt_data_end+0xf8008394>
100090e8:	d9401017 	ldw	r5,64(sp)
100090ec:	d9000f17 	ldw	r4,60(sp)
100090f0:	000d883a 	mov	r6,zero
100090f4:	01d00934 	movhi	r7,16420
100090f8:	00103040 	call	10010304 <__muldf3>
100090fc:	81000044 	addi	r4,r16,1
10009100:	d8800f15 	stw	r2,60(sp)
10009104:	d8c01015 	stw	r3,64(sp)
10009108:	00050480 	call	10005048 <__floatsidf>
1000910c:	d9800f17 	ldw	r6,60(sp)
10009110:	d9c01017 	ldw	r7,64(sp)
10009114:	1009883a 	mov	r4,r2
10009118:	180b883a 	mov	r5,r3
1000911c:	00103040 	call	10010304 <__muldf3>
10009120:	01d00734 	movhi	r7,16412
10009124:	000d883a 	mov	r6,zero
10009128:	1009883a 	mov	r4,r2
1000912c:	180b883a 	mov	r5,r3
10009130:	000f8f40 	call	1000f8f4 <__adddf3>
10009134:	d9c00517 	ldw	r7,20(sp)
10009138:	047f3034 	movhi	r17,64704
1000913c:	1021883a 	mov	r16,r2
10009140:	39ffffc4 	addi	r7,r7,-1
10009144:	d9c01315 	stw	r7,76(sp)
10009148:	1c63883a 	add	r17,r3,r17
1000914c:	db000c17 	ldw	r12,48(sp)
10009150:	003bea06 	br	100080fc <__alt_data_end+0xf80080fc>
10009154:	dc000915 	stw	r16,36(sp)
10009158:	003e0e06 	br	10008994 <__alt_data_end+0xf8008994>
1000915c:	01000e44 	movi	r4,57
10009160:	8825883a 	mov	r18,r17
10009164:	9dc00044 	addi	r23,r19,1
10009168:	99000005 	stb	r4,0(r19)
1000916c:	a023883a 	mov	r17,r20
10009170:	dc000915 	stw	r16,36(sp)
10009174:	003da406 	br	10008808 <__alt_data_end+0xf8008808>
10009178:	d9801417 	ldw	r6,80(sp)
1000917c:	d9c01517 	ldw	r7,84(sp)
10009180:	0009883a 	mov	r4,zero
10009184:	014ff834 	movhi	r5,16352
10009188:	0010b700 	call	10010b70 <__subdf3>
1000918c:	880d883a 	mov	r6,r17
10009190:	a00f883a 	mov	r7,r20
10009194:	1009883a 	mov	r4,r2
10009198:	180b883a 	mov	r5,r3
1000919c:	00102280 	call	10010228 <__gedf2>
100091a0:	00bc7c0e 	bge	zero,r2,10008394 <__alt_data_end+0xf8008394>
100091a4:	01000c04 	movi	r4,48
100091a8:	00000106 	br	100091b0 <_dtoa_r+0x1580>
100091ac:	102f883a 	mov	r23,r2
100091b0:	b8bfffc4 	addi	r2,r23,-1
100091b4:	10c00007 	ldb	r3,0(r2)
100091b8:	193ffc26 	beq	r3,r4,100091ac <__alt_data_end+0xf80091ac>
100091bc:	d9801317 	ldw	r6,76(sp)
100091c0:	d9800515 	stw	r6,20(sp)
100091c4:	003c4406 	br	100082d8 <__alt_data_end+0xf80082d8>
100091c8:	d9801317 	ldw	r6,76(sp)
100091cc:	d9800515 	stw	r6,20(sp)
100091d0:	003cea06 	br	1000857c <__alt_data_end+0xf800857c>
100091d4:	dd800f17 	ldw	r22,60(sp)
100091d8:	dcc01017 	ldw	r19,64(sp)
100091dc:	dc801217 	ldw	r18,72(sp)
100091e0:	003c6c06 	br	10008394 <__alt_data_end+0xf8008394>
100091e4:	903e031e 	bne	r18,zero,100089f4 <__alt_data_end+0xf80089f4>
100091e8:	003ebb06 	br	10008cd8 <__alt_data_end+0xf8008cd8>
100091ec:	103e6c1e 	bne	r2,zero,10008ba0 <__alt_data_end+0xf8008ba0>
100091f0:	4080004c 	andi	r2,r8,1
100091f4:	103e6a26 	beq	r2,zero,10008ba0 <__alt_data_end+0xf8008ba0>
100091f8:	003e6606 	br	10008b94 <__alt_data_end+0xf8008b94>
100091fc:	d8c00317 	ldw	r3,12(sp)
10009200:	00800084 	movi	r2,2
10009204:	10c02916 	blt	r2,r3,100092ac <_dtoa_r+0x167c>
10009208:	d9000c17 	ldw	r4,48(sp)
1000920c:	003e8806 	br	10008c30 <__alt_data_end+0xf8008c30>
10009210:	04000084 	movi	r16,2
10009214:	003b9d06 	br	1000808c <__alt_data_end+0xf800808c>
10009218:	d9001317 	ldw	r4,76(sp)
1000921c:	d9000515 	stw	r4,20(sp)
10009220:	003cd606 	br	1000857c <__alt_data_end+0xf800857c>
10009224:	d8801317 	ldw	r2,76(sp)
10009228:	d8800515 	stw	r2,20(sp)
1000922c:	003c2a06 	br	100082d8 <__alt_data_end+0xf80082d8>
10009230:	d9800317 	ldw	r6,12(sp)
10009234:	00800084 	movi	r2,2
10009238:	11801516 	blt	r2,r6,10009290 <_dtoa_r+0x1660>
1000923c:	d9c00c17 	ldw	r7,48(sp)
10009240:	d9c00615 	stw	r7,24(sp)
10009244:	003df706 	br	10008a24 <__alt_data_end+0xf8008a24>
10009248:	193d3926 	beq	r3,r4,10008730 <__alt_data_end+0xf8008730>
1000924c:	00c00f04 	movi	r3,60
10009250:	1885c83a 	sub	r2,r3,r2
10009254:	003ddf06 	br	100089d4 <__alt_data_end+0xf80089d4>
10009258:	e009883a 	mov	r4,fp
1000925c:	e0001115 	stw	zero,68(fp)
10009260:	000b883a 	mov	r5,zero
10009264:	000b2e80 	call	1000b2e8 <_Balloc>
10009268:	d8800715 	stw	r2,28(sp)
1000926c:	d8c00717 	ldw	r3,28(sp)
10009270:	00bfffc4 	movi	r2,-1
10009274:	01000044 	movi	r4,1
10009278:	d8800c15 	stw	r2,48(sp)
1000927c:	e0c01015 	stw	r3,64(fp)
10009280:	d9000b15 	stw	r4,44(sp)
10009284:	d8800615 	stw	r2,24(sp)
10009288:	d8002215 	stw	zero,136(sp)
1000928c:	003c4106 	br	10008394 <__alt_data_end+0xf8008394>
10009290:	d8c00c17 	ldw	r3,48(sp)
10009294:	d8c00615 	stw	r3,24(sp)
10009298:	003e7006 	br	10008c5c <__alt_data_end+0xf8008c5c>
1000929c:	04400044 	movi	r17,1
100092a0:	003b2006 	br	10007f24 <__alt_data_end+0xf8007f24>
100092a4:	000b883a 	mov	r5,zero
100092a8:	003b3d06 	br	10007fa0 <__alt_data_end+0xf8007fa0>
100092ac:	d8800c17 	ldw	r2,48(sp)
100092b0:	d8800615 	stw	r2,24(sp)
100092b4:	003e6906 	br	10008c5c <__alt_data_end+0xf8008c5c>

100092b8 <__sflush_r>:
100092b8:	2880030b 	ldhu	r2,12(r5)
100092bc:	defffb04 	addi	sp,sp,-20
100092c0:	dcc00315 	stw	r19,12(sp)
100092c4:	dc400115 	stw	r17,4(sp)
100092c8:	dfc00415 	stw	ra,16(sp)
100092cc:	dc800215 	stw	r18,8(sp)
100092d0:	dc000015 	stw	r16,0(sp)
100092d4:	10c0020c 	andi	r3,r2,8
100092d8:	2823883a 	mov	r17,r5
100092dc:	2027883a 	mov	r19,r4
100092e0:	1800311e 	bne	r3,zero,100093a8 <__sflush_r+0xf0>
100092e4:	28c00117 	ldw	r3,4(r5)
100092e8:	10820014 	ori	r2,r2,2048
100092ec:	2880030d 	sth	r2,12(r5)
100092f0:	00c04b0e 	bge	zero,r3,10009420 <__sflush_r+0x168>
100092f4:	8a000a17 	ldw	r8,40(r17)
100092f8:	40002326 	beq	r8,zero,10009388 <__sflush_r+0xd0>
100092fc:	9c000017 	ldw	r16,0(r19)
10009300:	10c4000c 	andi	r3,r2,4096
10009304:	98000015 	stw	zero,0(r19)
10009308:	18004826 	beq	r3,zero,1000942c <__sflush_r+0x174>
1000930c:	89801417 	ldw	r6,80(r17)
10009310:	10c0010c 	andi	r3,r2,4
10009314:	18000626 	beq	r3,zero,10009330 <__sflush_r+0x78>
10009318:	88c00117 	ldw	r3,4(r17)
1000931c:	88800c17 	ldw	r2,48(r17)
10009320:	30cdc83a 	sub	r6,r6,r3
10009324:	10000226 	beq	r2,zero,10009330 <__sflush_r+0x78>
10009328:	88800f17 	ldw	r2,60(r17)
1000932c:	308dc83a 	sub	r6,r6,r2
10009330:	89400717 	ldw	r5,28(r17)
10009334:	000f883a 	mov	r7,zero
10009338:	9809883a 	mov	r4,r19
1000933c:	403ee83a 	callr	r8
10009340:	00ffffc4 	movi	r3,-1
10009344:	10c04426 	beq	r2,r3,10009458 <__sflush_r+0x1a0>
10009348:	88c0030b 	ldhu	r3,12(r17)
1000934c:	89000417 	ldw	r4,16(r17)
10009350:	88000115 	stw	zero,4(r17)
10009354:	197dffcc 	andi	r5,r3,63487
10009358:	8940030d 	sth	r5,12(r17)
1000935c:	89000015 	stw	r4,0(r17)
10009360:	18c4000c 	andi	r3,r3,4096
10009364:	18002c1e 	bne	r3,zero,10009418 <__sflush_r+0x160>
10009368:	89400c17 	ldw	r5,48(r17)
1000936c:	9c000015 	stw	r16,0(r19)
10009370:	28000526 	beq	r5,zero,10009388 <__sflush_r+0xd0>
10009374:	88801004 	addi	r2,r17,64
10009378:	28800226 	beq	r5,r2,10009384 <__sflush_r+0xcc>
1000937c:	9809883a 	mov	r4,r19
10009380:	0009a340 	call	10009a34 <_free_r>
10009384:	88000c15 	stw	zero,48(r17)
10009388:	0005883a 	mov	r2,zero
1000938c:	dfc00417 	ldw	ra,16(sp)
10009390:	dcc00317 	ldw	r19,12(sp)
10009394:	dc800217 	ldw	r18,8(sp)
10009398:	dc400117 	ldw	r17,4(sp)
1000939c:	dc000017 	ldw	r16,0(sp)
100093a0:	dec00504 	addi	sp,sp,20
100093a4:	f800283a 	ret
100093a8:	2c800417 	ldw	r18,16(r5)
100093ac:	903ff626 	beq	r18,zero,10009388 <__alt_data_end+0xf8009388>
100093b0:	2c000017 	ldw	r16,0(r5)
100093b4:	108000cc 	andi	r2,r2,3
100093b8:	2c800015 	stw	r18,0(r5)
100093bc:	84a1c83a 	sub	r16,r16,r18
100093c0:	1000131e 	bne	r2,zero,10009410 <__sflush_r+0x158>
100093c4:	28800517 	ldw	r2,20(r5)
100093c8:	88800215 	stw	r2,8(r17)
100093cc:	04000316 	blt	zero,r16,100093dc <__sflush_r+0x124>
100093d0:	003fed06 	br	10009388 <__alt_data_end+0xf8009388>
100093d4:	90a5883a 	add	r18,r18,r2
100093d8:	043feb0e 	bge	zero,r16,10009388 <__alt_data_end+0xf8009388>
100093dc:	88800917 	ldw	r2,36(r17)
100093e0:	89400717 	ldw	r5,28(r17)
100093e4:	800f883a 	mov	r7,r16
100093e8:	900d883a 	mov	r6,r18
100093ec:	9809883a 	mov	r4,r19
100093f0:	103ee83a 	callr	r2
100093f4:	80a1c83a 	sub	r16,r16,r2
100093f8:	00bff616 	blt	zero,r2,100093d4 <__alt_data_end+0xf80093d4>
100093fc:	88c0030b 	ldhu	r3,12(r17)
10009400:	00bfffc4 	movi	r2,-1
10009404:	18c01014 	ori	r3,r3,64
10009408:	88c0030d 	sth	r3,12(r17)
1000940c:	003fdf06 	br	1000938c <__alt_data_end+0xf800938c>
10009410:	0005883a 	mov	r2,zero
10009414:	003fec06 	br	100093c8 <__alt_data_end+0xf80093c8>
10009418:	88801415 	stw	r2,80(r17)
1000941c:	003fd206 	br	10009368 <__alt_data_end+0xf8009368>
10009420:	28c00f17 	ldw	r3,60(r5)
10009424:	00ffb316 	blt	zero,r3,100092f4 <__alt_data_end+0xf80092f4>
10009428:	003fd706 	br	10009388 <__alt_data_end+0xf8009388>
1000942c:	89400717 	ldw	r5,28(r17)
10009430:	000d883a 	mov	r6,zero
10009434:	01c00044 	movi	r7,1
10009438:	9809883a 	mov	r4,r19
1000943c:	403ee83a 	callr	r8
10009440:	100d883a 	mov	r6,r2
10009444:	00bfffc4 	movi	r2,-1
10009448:	30801426 	beq	r6,r2,1000949c <__sflush_r+0x1e4>
1000944c:	8880030b 	ldhu	r2,12(r17)
10009450:	8a000a17 	ldw	r8,40(r17)
10009454:	003fae06 	br	10009310 <__alt_data_end+0xf8009310>
10009458:	98c00017 	ldw	r3,0(r19)
1000945c:	183fba26 	beq	r3,zero,10009348 <__alt_data_end+0xf8009348>
10009460:	01000744 	movi	r4,29
10009464:	19000626 	beq	r3,r4,10009480 <__sflush_r+0x1c8>
10009468:	01000584 	movi	r4,22
1000946c:	19000426 	beq	r3,r4,10009480 <__sflush_r+0x1c8>
10009470:	88c0030b 	ldhu	r3,12(r17)
10009474:	18c01014 	ori	r3,r3,64
10009478:	88c0030d 	sth	r3,12(r17)
1000947c:	003fc306 	br	1000938c <__alt_data_end+0xf800938c>
10009480:	8880030b 	ldhu	r2,12(r17)
10009484:	88c00417 	ldw	r3,16(r17)
10009488:	88000115 	stw	zero,4(r17)
1000948c:	10bdffcc 	andi	r2,r2,63487
10009490:	8880030d 	sth	r2,12(r17)
10009494:	88c00015 	stw	r3,0(r17)
10009498:	003fb306 	br	10009368 <__alt_data_end+0xf8009368>
1000949c:	98800017 	ldw	r2,0(r19)
100094a0:	103fea26 	beq	r2,zero,1000944c <__alt_data_end+0xf800944c>
100094a4:	00c00744 	movi	r3,29
100094a8:	10c00226 	beq	r2,r3,100094b4 <__sflush_r+0x1fc>
100094ac:	00c00584 	movi	r3,22
100094b0:	10c0031e 	bne	r2,r3,100094c0 <__sflush_r+0x208>
100094b4:	9c000015 	stw	r16,0(r19)
100094b8:	0005883a 	mov	r2,zero
100094bc:	003fb306 	br	1000938c <__alt_data_end+0xf800938c>
100094c0:	88c0030b 	ldhu	r3,12(r17)
100094c4:	3005883a 	mov	r2,r6
100094c8:	18c01014 	ori	r3,r3,64
100094cc:	88c0030d 	sth	r3,12(r17)
100094d0:	003fae06 	br	1000938c <__alt_data_end+0xf800938c>

100094d4 <_fflush_r>:
100094d4:	defffd04 	addi	sp,sp,-12
100094d8:	dc000115 	stw	r16,4(sp)
100094dc:	dfc00215 	stw	ra,8(sp)
100094e0:	2021883a 	mov	r16,r4
100094e4:	20000226 	beq	r4,zero,100094f0 <_fflush_r+0x1c>
100094e8:	20800e17 	ldw	r2,56(r4)
100094ec:	10000c26 	beq	r2,zero,10009520 <_fflush_r+0x4c>
100094f0:	2880030f 	ldh	r2,12(r5)
100094f4:	1000051e 	bne	r2,zero,1000950c <_fflush_r+0x38>
100094f8:	0005883a 	mov	r2,zero
100094fc:	dfc00217 	ldw	ra,8(sp)
10009500:	dc000117 	ldw	r16,4(sp)
10009504:	dec00304 	addi	sp,sp,12
10009508:	f800283a 	ret
1000950c:	8009883a 	mov	r4,r16
10009510:	dfc00217 	ldw	ra,8(sp)
10009514:	dc000117 	ldw	r16,4(sp)
10009518:	dec00304 	addi	sp,sp,12
1000951c:	00092b81 	jmpi	100092b8 <__sflush_r>
10009520:	d9400015 	stw	r5,0(sp)
10009524:	00098c00 	call	100098c0 <__sinit>
10009528:	d9400017 	ldw	r5,0(sp)
1000952c:	003ff006 	br	100094f0 <__alt_data_end+0xf80094f0>

10009530 <fflush>:
10009530:	20000526 	beq	r4,zero,10009548 <fflush+0x18>
10009534:	00840074 	movhi	r2,4097
10009538:	1098b504 	addi	r2,r2,25300
1000953c:	200b883a 	mov	r5,r4
10009540:	11000017 	ldw	r4,0(r2)
10009544:	00094d41 	jmpi	100094d4 <_fflush_r>
10009548:	00840074 	movhi	r2,4097
1000954c:	1098b404 	addi	r2,r2,25296
10009550:	11000017 	ldw	r4,0(r2)
10009554:	01440074 	movhi	r5,4097
10009558:	29653504 	addi	r5,r5,-27436
1000955c:	000a2d01 	jmpi	1000a2d0 <_fwalk_reent>

10009560 <__fp_unlock>:
10009560:	0005883a 	mov	r2,zero
10009564:	f800283a 	ret

10009568 <_cleanup_r>:
10009568:	01440074 	movhi	r5,4097
1000956c:	29791b04 	addi	r5,r5,-7060
10009570:	000a2d01 	jmpi	1000a2d0 <_fwalk_reent>

10009574 <__sinit.part.1>:
10009574:	defff704 	addi	sp,sp,-36
10009578:	00c40074 	movhi	r3,4097
1000957c:	dfc00815 	stw	ra,32(sp)
10009580:	ddc00715 	stw	r23,28(sp)
10009584:	dd800615 	stw	r22,24(sp)
10009588:	dd400515 	stw	r21,20(sp)
1000958c:	dd000415 	stw	r20,16(sp)
10009590:	dcc00315 	stw	r19,12(sp)
10009594:	dc800215 	stw	r18,8(sp)
10009598:	dc400115 	stw	r17,4(sp)
1000959c:	dc000015 	stw	r16,0(sp)
100095a0:	18e55a04 	addi	r3,r3,-27288
100095a4:	24000117 	ldw	r16,4(r4)
100095a8:	20c00f15 	stw	r3,60(r4)
100095ac:	2080bb04 	addi	r2,r4,748
100095b0:	00c000c4 	movi	r3,3
100095b4:	20c0b915 	stw	r3,740(r4)
100095b8:	2080ba15 	stw	r2,744(r4)
100095bc:	2000b815 	stw	zero,736(r4)
100095c0:	05c00204 	movi	r23,8
100095c4:	00800104 	movi	r2,4
100095c8:	2025883a 	mov	r18,r4
100095cc:	b80d883a 	mov	r6,r23
100095d0:	81001704 	addi	r4,r16,92
100095d4:	000b883a 	mov	r5,zero
100095d8:	80000015 	stw	zero,0(r16)
100095dc:	80000115 	stw	zero,4(r16)
100095e0:	80000215 	stw	zero,8(r16)
100095e4:	8080030d 	sth	r2,12(r16)
100095e8:	80001915 	stw	zero,100(r16)
100095ec:	8000038d 	sth	zero,14(r16)
100095f0:	80000415 	stw	zero,16(r16)
100095f4:	80000515 	stw	zero,20(r16)
100095f8:	80000615 	stw	zero,24(r16)
100095fc:	000b1c00 	call	1000b1c0 <memset>
10009600:	05840074 	movhi	r22,4097
10009604:	94400217 	ldw	r17,8(r18)
10009608:	05440074 	movhi	r21,4097
1000960c:	05040074 	movhi	r20,4097
10009610:	04c40074 	movhi	r19,4097
10009614:	b5b27304 	addi	r22,r22,-13876
10009618:	ad728a04 	addi	r21,r21,-13784
1000961c:	a532a904 	addi	r20,r20,-13660
10009620:	9cf2c004 	addi	r19,r19,-13568
10009624:	85800815 	stw	r22,32(r16)
10009628:	85400915 	stw	r21,36(r16)
1000962c:	85000a15 	stw	r20,40(r16)
10009630:	84c00b15 	stw	r19,44(r16)
10009634:	84000715 	stw	r16,28(r16)
10009638:	00800284 	movi	r2,10
1000963c:	8880030d 	sth	r2,12(r17)
10009640:	00800044 	movi	r2,1
10009644:	b80d883a 	mov	r6,r23
10009648:	89001704 	addi	r4,r17,92
1000964c:	000b883a 	mov	r5,zero
10009650:	88000015 	stw	zero,0(r17)
10009654:	88000115 	stw	zero,4(r17)
10009658:	88000215 	stw	zero,8(r17)
1000965c:	88001915 	stw	zero,100(r17)
10009660:	8880038d 	sth	r2,14(r17)
10009664:	88000415 	stw	zero,16(r17)
10009668:	88000515 	stw	zero,20(r17)
1000966c:	88000615 	stw	zero,24(r17)
10009670:	000b1c00 	call	1000b1c0 <memset>
10009674:	94000317 	ldw	r16,12(r18)
10009678:	00800484 	movi	r2,18
1000967c:	8c400715 	stw	r17,28(r17)
10009680:	8d800815 	stw	r22,32(r17)
10009684:	8d400915 	stw	r21,36(r17)
10009688:	8d000a15 	stw	r20,40(r17)
1000968c:	8cc00b15 	stw	r19,44(r17)
10009690:	8080030d 	sth	r2,12(r16)
10009694:	00800084 	movi	r2,2
10009698:	80000015 	stw	zero,0(r16)
1000969c:	80000115 	stw	zero,4(r16)
100096a0:	80000215 	stw	zero,8(r16)
100096a4:	80001915 	stw	zero,100(r16)
100096a8:	8080038d 	sth	r2,14(r16)
100096ac:	80000415 	stw	zero,16(r16)
100096b0:	80000515 	stw	zero,20(r16)
100096b4:	80000615 	stw	zero,24(r16)
100096b8:	b80d883a 	mov	r6,r23
100096bc:	000b883a 	mov	r5,zero
100096c0:	81001704 	addi	r4,r16,92
100096c4:	000b1c00 	call	1000b1c0 <memset>
100096c8:	00800044 	movi	r2,1
100096cc:	84000715 	stw	r16,28(r16)
100096d0:	85800815 	stw	r22,32(r16)
100096d4:	85400915 	stw	r21,36(r16)
100096d8:	85000a15 	stw	r20,40(r16)
100096dc:	84c00b15 	stw	r19,44(r16)
100096e0:	90800e15 	stw	r2,56(r18)
100096e4:	dfc00817 	ldw	ra,32(sp)
100096e8:	ddc00717 	ldw	r23,28(sp)
100096ec:	dd800617 	ldw	r22,24(sp)
100096f0:	dd400517 	ldw	r21,20(sp)
100096f4:	dd000417 	ldw	r20,16(sp)
100096f8:	dcc00317 	ldw	r19,12(sp)
100096fc:	dc800217 	ldw	r18,8(sp)
10009700:	dc400117 	ldw	r17,4(sp)
10009704:	dc000017 	ldw	r16,0(sp)
10009708:	dec00904 	addi	sp,sp,36
1000970c:	f800283a 	ret

10009710 <__fp_lock>:
10009710:	0005883a 	mov	r2,zero
10009714:	f800283a 	ret

10009718 <__sfmoreglue>:
10009718:	defffc04 	addi	sp,sp,-16
1000971c:	dc800215 	stw	r18,8(sp)
10009720:	2825883a 	mov	r18,r5
10009724:	dc000015 	stw	r16,0(sp)
10009728:	01401a04 	movi	r5,104
1000972c:	2021883a 	mov	r16,r4
10009730:	913fffc4 	addi	r4,r18,-1
10009734:	dfc00315 	stw	ra,12(sp)
10009738:	dc400115 	stw	r17,4(sp)
1000973c:	00052300 	call	10005230 <__mulsi3>
10009740:	8009883a 	mov	r4,r16
10009744:	11401d04 	addi	r5,r2,116
10009748:	1023883a 	mov	r17,r2
1000974c:	000a62c0 	call	1000a62c <_malloc_r>
10009750:	1021883a 	mov	r16,r2
10009754:	10000726 	beq	r2,zero,10009774 <__sfmoreglue+0x5c>
10009758:	11000304 	addi	r4,r2,12
1000975c:	10000015 	stw	zero,0(r2)
10009760:	14800115 	stw	r18,4(r2)
10009764:	11000215 	stw	r4,8(r2)
10009768:	89801a04 	addi	r6,r17,104
1000976c:	000b883a 	mov	r5,zero
10009770:	000b1c00 	call	1000b1c0 <memset>
10009774:	8005883a 	mov	r2,r16
10009778:	dfc00317 	ldw	ra,12(sp)
1000977c:	dc800217 	ldw	r18,8(sp)
10009780:	dc400117 	ldw	r17,4(sp)
10009784:	dc000017 	ldw	r16,0(sp)
10009788:	dec00404 	addi	sp,sp,16
1000978c:	f800283a 	ret

10009790 <__sfp>:
10009790:	defffb04 	addi	sp,sp,-20
10009794:	dc000015 	stw	r16,0(sp)
10009798:	04040074 	movhi	r16,4097
1000979c:	8418b404 	addi	r16,r16,25296
100097a0:	dcc00315 	stw	r19,12(sp)
100097a4:	2027883a 	mov	r19,r4
100097a8:	81000017 	ldw	r4,0(r16)
100097ac:	dfc00415 	stw	ra,16(sp)
100097b0:	dc800215 	stw	r18,8(sp)
100097b4:	20800e17 	ldw	r2,56(r4)
100097b8:	dc400115 	stw	r17,4(sp)
100097bc:	1000021e 	bne	r2,zero,100097c8 <__sfp+0x38>
100097c0:	00095740 	call	10009574 <__sinit.part.1>
100097c4:	81000017 	ldw	r4,0(r16)
100097c8:	2480b804 	addi	r18,r4,736
100097cc:	047fffc4 	movi	r17,-1
100097d0:	91000117 	ldw	r4,4(r18)
100097d4:	94000217 	ldw	r16,8(r18)
100097d8:	213fffc4 	addi	r4,r4,-1
100097dc:	20000a16 	blt	r4,zero,10009808 <__sfp+0x78>
100097e0:	8080030f 	ldh	r2,12(r16)
100097e4:	10000c26 	beq	r2,zero,10009818 <__sfp+0x88>
100097e8:	80c01d04 	addi	r3,r16,116
100097ec:	00000206 	br	100097f8 <__sfp+0x68>
100097f0:	18bfe60f 	ldh	r2,-104(r3)
100097f4:	10000826 	beq	r2,zero,10009818 <__sfp+0x88>
100097f8:	213fffc4 	addi	r4,r4,-1
100097fc:	1c3ffd04 	addi	r16,r3,-12
10009800:	18c01a04 	addi	r3,r3,104
10009804:	247ffa1e 	bne	r4,r17,100097f0 <__alt_data_end+0xf80097f0>
10009808:	90800017 	ldw	r2,0(r18)
1000980c:	10001d26 	beq	r2,zero,10009884 <__sfp+0xf4>
10009810:	1025883a 	mov	r18,r2
10009814:	003fee06 	br	100097d0 <__alt_data_end+0xf80097d0>
10009818:	00bfffc4 	movi	r2,-1
1000981c:	8080038d 	sth	r2,14(r16)
10009820:	00800044 	movi	r2,1
10009824:	8080030d 	sth	r2,12(r16)
10009828:	80001915 	stw	zero,100(r16)
1000982c:	80000015 	stw	zero,0(r16)
10009830:	80000215 	stw	zero,8(r16)
10009834:	80000115 	stw	zero,4(r16)
10009838:	80000415 	stw	zero,16(r16)
1000983c:	80000515 	stw	zero,20(r16)
10009840:	80000615 	stw	zero,24(r16)
10009844:	01800204 	movi	r6,8
10009848:	000b883a 	mov	r5,zero
1000984c:	81001704 	addi	r4,r16,92
10009850:	000b1c00 	call	1000b1c0 <memset>
10009854:	8005883a 	mov	r2,r16
10009858:	80000c15 	stw	zero,48(r16)
1000985c:	80000d15 	stw	zero,52(r16)
10009860:	80001115 	stw	zero,68(r16)
10009864:	80001215 	stw	zero,72(r16)
10009868:	dfc00417 	ldw	ra,16(sp)
1000986c:	dcc00317 	ldw	r19,12(sp)
10009870:	dc800217 	ldw	r18,8(sp)
10009874:	dc400117 	ldw	r17,4(sp)
10009878:	dc000017 	ldw	r16,0(sp)
1000987c:	dec00504 	addi	sp,sp,20
10009880:	f800283a 	ret
10009884:	01400104 	movi	r5,4
10009888:	9809883a 	mov	r4,r19
1000988c:	00097180 	call	10009718 <__sfmoreglue>
10009890:	90800015 	stw	r2,0(r18)
10009894:	103fde1e 	bne	r2,zero,10009810 <__alt_data_end+0xf8009810>
10009898:	00800304 	movi	r2,12
1000989c:	98800015 	stw	r2,0(r19)
100098a0:	0005883a 	mov	r2,zero
100098a4:	003ff006 	br	10009868 <__alt_data_end+0xf8009868>

100098a8 <_cleanup>:
100098a8:	00840074 	movhi	r2,4097
100098ac:	1098b404 	addi	r2,r2,25296
100098b0:	11000017 	ldw	r4,0(r2)
100098b4:	01440074 	movhi	r5,4097
100098b8:	29791b04 	addi	r5,r5,-7060
100098bc:	000a2d01 	jmpi	1000a2d0 <_fwalk_reent>

100098c0 <__sinit>:
100098c0:	20800e17 	ldw	r2,56(r4)
100098c4:	10000126 	beq	r2,zero,100098cc <__sinit+0xc>
100098c8:	f800283a 	ret
100098cc:	00095741 	jmpi	10009574 <__sinit.part.1>

100098d0 <__sfp_lock_acquire>:
100098d0:	f800283a 	ret

100098d4 <__sfp_lock_release>:
100098d4:	f800283a 	ret

100098d8 <__sinit_lock_acquire>:
100098d8:	f800283a 	ret

100098dc <__sinit_lock_release>:
100098dc:	f800283a 	ret

100098e0 <__fp_lock_all>:
100098e0:	00840074 	movhi	r2,4097
100098e4:	1098b504 	addi	r2,r2,25300
100098e8:	11000017 	ldw	r4,0(r2)
100098ec:	01440074 	movhi	r5,4097
100098f0:	2965c404 	addi	r5,r5,-26864
100098f4:	000a20c1 	jmpi	1000a20c <_fwalk>

100098f8 <__fp_unlock_all>:
100098f8:	00840074 	movhi	r2,4097
100098fc:	1098b504 	addi	r2,r2,25300
10009900:	11000017 	ldw	r4,0(r2)
10009904:	01440074 	movhi	r5,4097
10009908:	29655804 	addi	r5,r5,-27296
1000990c:	000a20c1 	jmpi	1000a20c <_fwalk>

10009910 <_malloc_trim_r>:
10009910:	defffb04 	addi	sp,sp,-20
10009914:	dcc00315 	stw	r19,12(sp)
10009918:	04c40074 	movhi	r19,4097
1000991c:	dc800215 	stw	r18,8(sp)
10009920:	dc400115 	stw	r17,4(sp)
10009924:	dc000015 	stw	r16,0(sp)
10009928:	dfc00415 	stw	ra,16(sp)
1000992c:	2821883a 	mov	r16,r5
10009930:	9cd32f04 	addi	r19,r19,19644
10009934:	2025883a 	mov	r18,r4
10009938:	0011a880 	call	10011a88 <__malloc_lock>
1000993c:	98800217 	ldw	r2,8(r19)
10009940:	14400117 	ldw	r17,4(r2)
10009944:	00bfff04 	movi	r2,-4
10009948:	88a2703a 	and	r17,r17,r2
1000994c:	8c21c83a 	sub	r16,r17,r16
10009950:	8403fbc4 	addi	r16,r16,4079
10009954:	8020d33a 	srli	r16,r16,12
10009958:	0083ffc4 	movi	r2,4095
1000995c:	843fffc4 	addi	r16,r16,-1
10009960:	8020933a 	slli	r16,r16,12
10009964:	1400060e 	bge	r2,r16,10009980 <_malloc_trim_r+0x70>
10009968:	000b883a 	mov	r5,zero
1000996c:	9009883a 	mov	r4,r18
10009970:	000c9780 	call	1000c978 <_sbrk_r>
10009974:	98c00217 	ldw	r3,8(r19)
10009978:	1c47883a 	add	r3,r3,r17
1000997c:	10c00a26 	beq	r2,r3,100099a8 <_malloc_trim_r+0x98>
10009980:	9009883a 	mov	r4,r18
10009984:	0011aac0 	call	10011aac <__malloc_unlock>
10009988:	0005883a 	mov	r2,zero
1000998c:	dfc00417 	ldw	ra,16(sp)
10009990:	dcc00317 	ldw	r19,12(sp)
10009994:	dc800217 	ldw	r18,8(sp)
10009998:	dc400117 	ldw	r17,4(sp)
1000999c:	dc000017 	ldw	r16,0(sp)
100099a0:	dec00504 	addi	sp,sp,20
100099a4:	f800283a 	ret
100099a8:	040bc83a 	sub	r5,zero,r16
100099ac:	9009883a 	mov	r4,r18
100099b0:	000c9780 	call	1000c978 <_sbrk_r>
100099b4:	00ffffc4 	movi	r3,-1
100099b8:	10c00d26 	beq	r2,r3,100099f0 <_malloc_trim_r+0xe0>
100099bc:	00c40074 	movhi	r3,4097
100099c0:	18df9b04 	addi	r3,r3,32364
100099c4:	18800017 	ldw	r2,0(r3)
100099c8:	99000217 	ldw	r4,8(r19)
100099cc:	8c23c83a 	sub	r17,r17,r16
100099d0:	8c400054 	ori	r17,r17,1
100099d4:	1421c83a 	sub	r16,r2,r16
100099d8:	24400115 	stw	r17,4(r4)
100099dc:	9009883a 	mov	r4,r18
100099e0:	1c000015 	stw	r16,0(r3)
100099e4:	0011aac0 	call	10011aac <__malloc_unlock>
100099e8:	00800044 	movi	r2,1
100099ec:	003fe706 	br	1000998c <__alt_data_end+0xf800998c>
100099f0:	000b883a 	mov	r5,zero
100099f4:	9009883a 	mov	r4,r18
100099f8:	000c9780 	call	1000c978 <_sbrk_r>
100099fc:	99000217 	ldw	r4,8(r19)
10009a00:	014003c4 	movi	r5,15
10009a04:	1107c83a 	sub	r3,r2,r4
10009a08:	28ffdd0e 	bge	r5,r3,10009980 <__alt_data_end+0xf8009980>
10009a0c:	01440074 	movhi	r5,4097
10009a10:	2958b704 	addi	r5,r5,25308
10009a14:	29400017 	ldw	r5,0(r5)
10009a18:	18c00054 	ori	r3,r3,1
10009a1c:	20c00115 	stw	r3,4(r4)
10009a20:	00c40074 	movhi	r3,4097
10009a24:	1145c83a 	sub	r2,r2,r5
10009a28:	18df9b04 	addi	r3,r3,32364
10009a2c:	18800015 	stw	r2,0(r3)
10009a30:	003fd306 	br	10009980 <__alt_data_end+0xf8009980>

10009a34 <_free_r>:
10009a34:	28004126 	beq	r5,zero,10009b3c <_free_r+0x108>
10009a38:	defffd04 	addi	sp,sp,-12
10009a3c:	dc400115 	stw	r17,4(sp)
10009a40:	dc000015 	stw	r16,0(sp)
10009a44:	2023883a 	mov	r17,r4
10009a48:	2821883a 	mov	r16,r5
10009a4c:	dfc00215 	stw	ra,8(sp)
10009a50:	0011a880 	call	10011a88 <__malloc_lock>
10009a54:	81ffff17 	ldw	r7,-4(r16)
10009a58:	00bfff84 	movi	r2,-2
10009a5c:	01040074 	movhi	r4,4097
10009a60:	81bffe04 	addi	r6,r16,-8
10009a64:	3884703a 	and	r2,r7,r2
10009a68:	21132f04 	addi	r4,r4,19644
10009a6c:	308b883a 	add	r5,r6,r2
10009a70:	2a400117 	ldw	r9,4(r5)
10009a74:	22000217 	ldw	r8,8(r4)
10009a78:	00ffff04 	movi	r3,-4
10009a7c:	48c6703a 	and	r3,r9,r3
10009a80:	2a005726 	beq	r5,r8,10009be0 <_free_r+0x1ac>
10009a84:	28c00115 	stw	r3,4(r5)
10009a88:	39c0004c 	andi	r7,r7,1
10009a8c:	3800091e 	bne	r7,zero,10009ab4 <_free_r+0x80>
10009a90:	823ffe17 	ldw	r8,-8(r16)
10009a94:	22400204 	addi	r9,r4,8
10009a98:	320dc83a 	sub	r6,r6,r8
10009a9c:	31c00217 	ldw	r7,8(r6)
10009aa0:	1205883a 	add	r2,r2,r8
10009aa4:	3a406526 	beq	r7,r9,10009c3c <_free_r+0x208>
10009aa8:	32000317 	ldw	r8,12(r6)
10009aac:	3a000315 	stw	r8,12(r7)
10009ab0:	41c00215 	stw	r7,8(r8)
10009ab4:	28cf883a 	add	r7,r5,r3
10009ab8:	39c00117 	ldw	r7,4(r7)
10009abc:	39c0004c 	andi	r7,r7,1
10009ac0:	38003a26 	beq	r7,zero,10009bac <_free_r+0x178>
10009ac4:	10c00054 	ori	r3,r2,1
10009ac8:	30c00115 	stw	r3,4(r6)
10009acc:	3087883a 	add	r3,r6,r2
10009ad0:	18800015 	stw	r2,0(r3)
10009ad4:	00c07fc4 	movi	r3,511
10009ad8:	18801936 	bltu	r3,r2,10009b40 <_free_r+0x10c>
10009adc:	1004d0fa 	srli	r2,r2,3
10009ae0:	01c00044 	movi	r7,1
10009ae4:	21400117 	ldw	r5,4(r4)
10009ae8:	10c00044 	addi	r3,r2,1
10009aec:	18c7883a 	add	r3,r3,r3
10009af0:	1005d0ba 	srai	r2,r2,2
10009af4:	18c7883a 	add	r3,r3,r3
10009af8:	18c7883a 	add	r3,r3,r3
10009afc:	1907883a 	add	r3,r3,r4
10009b00:	3884983a 	sll	r2,r7,r2
10009b04:	19c00017 	ldw	r7,0(r3)
10009b08:	1a3ffe04 	addi	r8,r3,-8
10009b0c:	1144b03a 	or	r2,r2,r5
10009b10:	32000315 	stw	r8,12(r6)
10009b14:	31c00215 	stw	r7,8(r6)
10009b18:	20800115 	stw	r2,4(r4)
10009b1c:	19800015 	stw	r6,0(r3)
10009b20:	39800315 	stw	r6,12(r7)
10009b24:	8809883a 	mov	r4,r17
10009b28:	dfc00217 	ldw	ra,8(sp)
10009b2c:	dc400117 	ldw	r17,4(sp)
10009b30:	dc000017 	ldw	r16,0(sp)
10009b34:	dec00304 	addi	sp,sp,12
10009b38:	0011aac1 	jmpi	10011aac <__malloc_unlock>
10009b3c:	f800283a 	ret
10009b40:	100ad27a 	srli	r5,r2,9
10009b44:	00c00104 	movi	r3,4
10009b48:	19404a36 	bltu	r3,r5,10009c74 <_free_r+0x240>
10009b4c:	100ad1ba 	srli	r5,r2,6
10009b50:	28c00e44 	addi	r3,r5,57
10009b54:	18c7883a 	add	r3,r3,r3
10009b58:	29400e04 	addi	r5,r5,56
10009b5c:	18c7883a 	add	r3,r3,r3
10009b60:	18c7883a 	add	r3,r3,r3
10009b64:	1909883a 	add	r4,r3,r4
10009b68:	20c00017 	ldw	r3,0(r4)
10009b6c:	01c40074 	movhi	r7,4097
10009b70:	213ffe04 	addi	r4,r4,-8
10009b74:	39d32f04 	addi	r7,r7,19644
10009b78:	20c04426 	beq	r4,r3,10009c8c <_free_r+0x258>
10009b7c:	01ffff04 	movi	r7,-4
10009b80:	19400117 	ldw	r5,4(r3)
10009b84:	29ca703a 	and	r5,r5,r7
10009b88:	1140022e 	bgeu	r2,r5,10009b94 <_free_r+0x160>
10009b8c:	18c00217 	ldw	r3,8(r3)
10009b90:	20fffb1e 	bne	r4,r3,10009b80 <__alt_data_end+0xf8009b80>
10009b94:	19000317 	ldw	r4,12(r3)
10009b98:	31000315 	stw	r4,12(r6)
10009b9c:	30c00215 	stw	r3,8(r6)
10009ba0:	21800215 	stw	r6,8(r4)
10009ba4:	19800315 	stw	r6,12(r3)
10009ba8:	003fde06 	br	10009b24 <__alt_data_end+0xf8009b24>
10009bac:	29c00217 	ldw	r7,8(r5)
10009bb0:	10c5883a 	add	r2,r2,r3
10009bb4:	00c40074 	movhi	r3,4097
10009bb8:	18d33104 	addi	r3,r3,19652
10009bbc:	38c03b26 	beq	r7,r3,10009cac <_free_r+0x278>
10009bc0:	2a000317 	ldw	r8,12(r5)
10009bc4:	11400054 	ori	r5,r2,1
10009bc8:	3087883a 	add	r3,r6,r2
10009bcc:	3a000315 	stw	r8,12(r7)
10009bd0:	41c00215 	stw	r7,8(r8)
10009bd4:	31400115 	stw	r5,4(r6)
10009bd8:	18800015 	stw	r2,0(r3)
10009bdc:	003fbd06 	br	10009ad4 <__alt_data_end+0xf8009ad4>
10009be0:	39c0004c 	andi	r7,r7,1
10009be4:	10c5883a 	add	r2,r2,r3
10009be8:	3800071e 	bne	r7,zero,10009c08 <_free_r+0x1d4>
10009bec:	81fffe17 	ldw	r7,-8(r16)
10009bf0:	31cdc83a 	sub	r6,r6,r7
10009bf4:	30c00317 	ldw	r3,12(r6)
10009bf8:	31400217 	ldw	r5,8(r6)
10009bfc:	11c5883a 	add	r2,r2,r7
10009c00:	28c00315 	stw	r3,12(r5)
10009c04:	19400215 	stw	r5,8(r3)
10009c08:	10c00054 	ori	r3,r2,1
10009c0c:	30c00115 	stw	r3,4(r6)
10009c10:	00c40074 	movhi	r3,4097
10009c14:	18d8b804 	addi	r3,r3,25312
10009c18:	18c00017 	ldw	r3,0(r3)
10009c1c:	21800215 	stw	r6,8(r4)
10009c20:	10ffc036 	bltu	r2,r3,10009b24 <__alt_data_end+0xf8009b24>
10009c24:	00840074 	movhi	r2,4097
10009c28:	109f9204 	addi	r2,r2,32328
10009c2c:	11400017 	ldw	r5,0(r2)
10009c30:	8809883a 	mov	r4,r17
10009c34:	00099100 	call	10009910 <_malloc_trim_r>
10009c38:	003fba06 	br	10009b24 <__alt_data_end+0xf8009b24>
10009c3c:	28c9883a 	add	r4,r5,r3
10009c40:	21000117 	ldw	r4,4(r4)
10009c44:	2100004c 	andi	r4,r4,1
10009c48:	2000391e 	bne	r4,zero,10009d30 <_free_r+0x2fc>
10009c4c:	29c00217 	ldw	r7,8(r5)
10009c50:	29000317 	ldw	r4,12(r5)
10009c54:	1885883a 	add	r2,r3,r2
10009c58:	10c00054 	ori	r3,r2,1
10009c5c:	39000315 	stw	r4,12(r7)
10009c60:	21c00215 	stw	r7,8(r4)
10009c64:	30c00115 	stw	r3,4(r6)
10009c68:	308d883a 	add	r6,r6,r2
10009c6c:	30800015 	stw	r2,0(r6)
10009c70:	003fac06 	br	10009b24 <__alt_data_end+0xf8009b24>
10009c74:	00c00504 	movi	r3,20
10009c78:	19401536 	bltu	r3,r5,10009cd0 <_free_r+0x29c>
10009c7c:	28c01704 	addi	r3,r5,92
10009c80:	18c7883a 	add	r3,r3,r3
10009c84:	294016c4 	addi	r5,r5,91
10009c88:	003fb406 	br	10009b5c <__alt_data_end+0xf8009b5c>
10009c8c:	280bd0ba 	srai	r5,r5,2
10009c90:	00c00044 	movi	r3,1
10009c94:	38800117 	ldw	r2,4(r7)
10009c98:	194a983a 	sll	r5,r3,r5
10009c9c:	2007883a 	mov	r3,r4
10009ca0:	2884b03a 	or	r2,r5,r2
10009ca4:	38800115 	stw	r2,4(r7)
10009ca8:	003fbb06 	br	10009b98 <__alt_data_end+0xf8009b98>
10009cac:	21800515 	stw	r6,20(r4)
10009cb0:	21800415 	stw	r6,16(r4)
10009cb4:	10c00054 	ori	r3,r2,1
10009cb8:	31c00315 	stw	r7,12(r6)
10009cbc:	31c00215 	stw	r7,8(r6)
10009cc0:	30c00115 	stw	r3,4(r6)
10009cc4:	308d883a 	add	r6,r6,r2
10009cc8:	30800015 	stw	r2,0(r6)
10009ccc:	003f9506 	br	10009b24 <__alt_data_end+0xf8009b24>
10009cd0:	00c01504 	movi	r3,84
10009cd4:	19400536 	bltu	r3,r5,10009cec <_free_r+0x2b8>
10009cd8:	100ad33a 	srli	r5,r2,12
10009cdc:	28c01bc4 	addi	r3,r5,111
10009ce0:	18c7883a 	add	r3,r3,r3
10009ce4:	29401b84 	addi	r5,r5,110
10009ce8:	003f9c06 	br	10009b5c <__alt_data_end+0xf8009b5c>
10009cec:	00c05504 	movi	r3,340
10009cf0:	19400536 	bltu	r3,r5,10009d08 <_free_r+0x2d4>
10009cf4:	100ad3fa 	srli	r5,r2,15
10009cf8:	28c01e04 	addi	r3,r5,120
10009cfc:	18c7883a 	add	r3,r3,r3
10009d00:	29401dc4 	addi	r5,r5,119
10009d04:	003f9506 	br	10009b5c <__alt_data_end+0xf8009b5c>
10009d08:	00c15504 	movi	r3,1364
10009d0c:	19400536 	bltu	r3,r5,10009d24 <_free_r+0x2f0>
10009d10:	100ad4ba 	srli	r5,r2,18
10009d14:	28c01f44 	addi	r3,r5,125
10009d18:	18c7883a 	add	r3,r3,r3
10009d1c:	29401f04 	addi	r5,r5,124
10009d20:	003f8e06 	br	10009b5c <__alt_data_end+0xf8009b5c>
10009d24:	00c03f84 	movi	r3,254
10009d28:	01401f84 	movi	r5,126
10009d2c:	003f8b06 	br	10009b5c <__alt_data_end+0xf8009b5c>
10009d30:	10c00054 	ori	r3,r2,1
10009d34:	30c00115 	stw	r3,4(r6)
10009d38:	308d883a 	add	r6,r6,r2
10009d3c:	30800015 	stw	r2,0(r6)
10009d40:	003f7806 	br	10009b24 <__alt_data_end+0xf8009b24>

10009d44 <__sfvwrite_r>:
10009d44:	30800217 	ldw	r2,8(r6)
10009d48:	10006726 	beq	r2,zero,10009ee8 <__sfvwrite_r+0x1a4>
10009d4c:	28c0030b 	ldhu	r3,12(r5)
10009d50:	defff404 	addi	sp,sp,-48
10009d54:	dd400715 	stw	r21,28(sp)
10009d58:	dd000615 	stw	r20,24(sp)
10009d5c:	dc000215 	stw	r16,8(sp)
10009d60:	dfc00b15 	stw	ra,44(sp)
10009d64:	df000a15 	stw	fp,40(sp)
10009d68:	ddc00915 	stw	r23,36(sp)
10009d6c:	dd800815 	stw	r22,32(sp)
10009d70:	dcc00515 	stw	r19,20(sp)
10009d74:	dc800415 	stw	r18,16(sp)
10009d78:	dc400315 	stw	r17,12(sp)
10009d7c:	1880020c 	andi	r2,r3,8
10009d80:	2821883a 	mov	r16,r5
10009d84:	202b883a 	mov	r21,r4
10009d88:	3029883a 	mov	r20,r6
10009d8c:	10002726 	beq	r2,zero,10009e2c <__sfvwrite_r+0xe8>
10009d90:	28800417 	ldw	r2,16(r5)
10009d94:	10002526 	beq	r2,zero,10009e2c <__sfvwrite_r+0xe8>
10009d98:	1880008c 	andi	r2,r3,2
10009d9c:	a4400017 	ldw	r17,0(r20)
10009da0:	10002a26 	beq	r2,zero,10009e4c <__sfvwrite_r+0x108>
10009da4:	05a00034 	movhi	r22,32768
10009da8:	0027883a 	mov	r19,zero
10009dac:	0025883a 	mov	r18,zero
10009db0:	b5bf0004 	addi	r22,r22,-1024
10009db4:	980d883a 	mov	r6,r19
10009db8:	a809883a 	mov	r4,r21
10009dbc:	90004626 	beq	r18,zero,10009ed8 <__sfvwrite_r+0x194>
10009dc0:	900f883a 	mov	r7,r18
10009dc4:	b480022e 	bgeu	r22,r18,10009dd0 <__sfvwrite_r+0x8c>
10009dc8:	01e00034 	movhi	r7,32768
10009dcc:	39ff0004 	addi	r7,r7,-1024
10009dd0:	80800917 	ldw	r2,36(r16)
10009dd4:	81400717 	ldw	r5,28(r16)
10009dd8:	103ee83a 	callr	r2
10009ddc:	00805a0e 	bge	zero,r2,10009f48 <__sfvwrite_r+0x204>
10009de0:	a0c00217 	ldw	r3,8(r20)
10009de4:	98a7883a 	add	r19,r19,r2
10009de8:	90a5c83a 	sub	r18,r18,r2
10009dec:	1885c83a 	sub	r2,r3,r2
10009df0:	a0800215 	stw	r2,8(r20)
10009df4:	103fef1e 	bne	r2,zero,10009db4 <__alt_data_end+0xf8009db4>
10009df8:	0005883a 	mov	r2,zero
10009dfc:	dfc00b17 	ldw	ra,44(sp)
10009e00:	df000a17 	ldw	fp,40(sp)
10009e04:	ddc00917 	ldw	r23,36(sp)
10009e08:	dd800817 	ldw	r22,32(sp)
10009e0c:	dd400717 	ldw	r21,28(sp)
10009e10:	dd000617 	ldw	r20,24(sp)
10009e14:	dcc00517 	ldw	r19,20(sp)
10009e18:	dc800417 	ldw	r18,16(sp)
10009e1c:	dc400317 	ldw	r17,12(sp)
10009e20:	dc000217 	ldw	r16,8(sp)
10009e24:	dec00c04 	addi	sp,sp,48
10009e28:	f800283a 	ret
10009e2c:	800b883a 	mov	r5,r16
10009e30:	a809883a 	mov	r4,r21
10009e34:	00078b40 	call	100078b4 <__swsetup_r>
10009e38:	1000ee1e 	bne	r2,zero,1000a1f4 <__sfvwrite_r+0x4b0>
10009e3c:	80c0030b 	ldhu	r3,12(r16)
10009e40:	a4400017 	ldw	r17,0(r20)
10009e44:	1880008c 	andi	r2,r3,2
10009e48:	103fd61e 	bne	r2,zero,10009da4 <__alt_data_end+0xf8009da4>
10009e4c:	1880004c 	andi	r2,r3,1
10009e50:	1000421e 	bne	r2,zero,10009f5c <__sfvwrite_r+0x218>
10009e54:	0039883a 	mov	fp,zero
10009e58:	0025883a 	mov	r18,zero
10009e5c:	90001a26 	beq	r18,zero,10009ec8 <__sfvwrite_r+0x184>
10009e60:	1880800c 	andi	r2,r3,512
10009e64:	84c00217 	ldw	r19,8(r16)
10009e68:	10002126 	beq	r2,zero,10009ef0 <__sfvwrite_r+0x1ac>
10009e6c:	982f883a 	mov	r23,r19
10009e70:	94c09636 	bltu	r18,r19,1000a0cc <__sfvwrite_r+0x388>
10009e74:	1881200c 	andi	r2,r3,1152
10009e78:	1000a11e 	bne	r2,zero,1000a100 <__sfvwrite_r+0x3bc>
10009e7c:	81000017 	ldw	r4,0(r16)
10009e80:	b80d883a 	mov	r6,r23
10009e84:	e00b883a 	mov	r5,fp
10009e88:	000b0640 	call	1000b064 <memmove>
10009e8c:	80c00217 	ldw	r3,8(r16)
10009e90:	81000017 	ldw	r4,0(r16)
10009e94:	9005883a 	mov	r2,r18
10009e98:	1ce7c83a 	sub	r19,r3,r19
10009e9c:	25cf883a 	add	r7,r4,r23
10009ea0:	84c00215 	stw	r19,8(r16)
10009ea4:	81c00015 	stw	r7,0(r16)
10009ea8:	a0c00217 	ldw	r3,8(r20)
10009eac:	e0b9883a 	add	fp,fp,r2
10009eb0:	90a5c83a 	sub	r18,r18,r2
10009eb4:	18a7c83a 	sub	r19,r3,r2
10009eb8:	a4c00215 	stw	r19,8(r20)
10009ebc:	983fce26 	beq	r19,zero,10009df8 <__alt_data_end+0xf8009df8>
10009ec0:	80c0030b 	ldhu	r3,12(r16)
10009ec4:	903fe61e 	bne	r18,zero,10009e60 <__alt_data_end+0xf8009e60>
10009ec8:	8f000017 	ldw	fp,0(r17)
10009ecc:	8c800117 	ldw	r18,4(r17)
10009ed0:	8c400204 	addi	r17,r17,8
10009ed4:	003fe106 	br	10009e5c <__alt_data_end+0xf8009e5c>
10009ed8:	8cc00017 	ldw	r19,0(r17)
10009edc:	8c800117 	ldw	r18,4(r17)
10009ee0:	8c400204 	addi	r17,r17,8
10009ee4:	003fb306 	br	10009db4 <__alt_data_end+0xf8009db4>
10009ee8:	0005883a 	mov	r2,zero
10009eec:	f800283a 	ret
10009ef0:	81000017 	ldw	r4,0(r16)
10009ef4:	80800417 	ldw	r2,16(r16)
10009ef8:	11005a36 	bltu	r2,r4,1000a064 <__sfvwrite_r+0x320>
10009efc:	85c00517 	ldw	r23,20(r16)
10009f00:	95c05836 	bltu	r18,r23,1000a064 <__sfvwrite_r+0x320>
10009f04:	00a00034 	movhi	r2,32768
10009f08:	10bfffc4 	addi	r2,r2,-1
10009f0c:	9009883a 	mov	r4,r18
10009f10:	1480012e 	bgeu	r2,r18,10009f18 <__sfvwrite_r+0x1d4>
10009f14:	1009883a 	mov	r4,r2
10009f18:	b80b883a 	mov	r5,r23
10009f1c:	00043d00 	call	100043d0 <__divsi3>
10009f20:	b80b883a 	mov	r5,r23
10009f24:	1009883a 	mov	r4,r2
10009f28:	00052300 	call	10005230 <__mulsi3>
10009f2c:	81400717 	ldw	r5,28(r16)
10009f30:	80c00917 	ldw	r3,36(r16)
10009f34:	100f883a 	mov	r7,r2
10009f38:	e00d883a 	mov	r6,fp
10009f3c:	a809883a 	mov	r4,r21
10009f40:	183ee83a 	callr	r3
10009f44:	00bfd816 	blt	zero,r2,10009ea8 <__alt_data_end+0xf8009ea8>
10009f48:	8080030b 	ldhu	r2,12(r16)
10009f4c:	10801014 	ori	r2,r2,64
10009f50:	8080030d 	sth	r2,12(r16)
10009f54:	00bfffc4 	movi	r2,-1
10009f58:	003fa806 	br	10009dfc <__alt_data_end+0xf8009dfc>
10009f5c:	0027883a 	mov	r19,zero
10009f60:	0011883a 	mov	r8,zero
10009f64:	0039883a 	mov	fp,zero
10009f68:	0025883a 	mov	r18,zero
10009f6c:	90001f26 	beq	r18,zero,10009fec <__sfvwrite_r+0x2a8>
10009f70:	40005a26 	beq	r8,zero,1000a0dc <__sfvwrite_r+0x398>
10009f74:	982d883a 	mov	r22,r19
10009f78:	94c0012e 	bgeu	r18,r19,10009f80 <__sfvwrite_r+0x23c>
10009f7c:	902d883a 	mov	r22,r18
10009f80:	81000017 	ldw	r4,0(r16)
10009f84:	80800417 	ldw	r2,16(r16)
10009f88:	b02f883a 	mov	r23,r22
10009f8c:	81c00517 	ldw	r7,20(r16)
10009f90:	1100032e 	bgeu	r2,r4,10009fa0 <__sfvwrite_r+0x25c>
10009f94:	80c00217 	ldw	r3,8(r16)
10009f98:	38c7883a 	add	r3,r7,r3
10009f9c:	1d801816 	blt	r3,r22,1000a000 <__sfvwrite_r+0x2bc>
10009fa0:	b1c03e16 	blt	r22,r7,1000a09c <__sfvwrite_r+0x358>
10009fa4:	80800917 	ldw	r2,36(r16)
10009fa8:	81400717 	ldw	r5,28(r16)
10009fac:	e00d883a 	mov	r6,fp
10009fb0:	da000115 	stw	r8,4(sp)
10009fb4:	a809883a 	mov	r4,r21
10009fb8:	103ee83a 	callr	r2
10009fbc:	102f883a 	mov	r23,r2
10009fc0:	da000117 	ldw	r8,4(sp)
10009fc4:	00bfe00e 	bge	zero,r2,10009f48 <__alt_data_end+0xf8009f48>
10009fc8:	9de7c83a 	sub	r19,r19,r23
10009fcc:	98001f26 	beq	r19,zero,1000a04c <__sfvwrite_r+0x308>
10009fd0:	a0800217 	ldw	r2,8(r20)
10009fd4:	e5f9883a 	add	fp,fp,r23
10009fd8:	95e5c83a 	sub	r18,r18,r23
10009fdc:	15efc83a 	sub	r23,r2,r23
10009fe0:	a5c00215 	stw	r23,8(r20)
10009fe4:	b83f8426 	beq	r23,zero,10009df8 <__alt_data_end+0xf8009df8>
10009fe8:	903fe11e 	bne	r18,zero,10009f70 <__alt_data_end+0xf8009f70>
10009fec:	8f000017 	ldw	fp,0(r17)
10009ff0:	8c800117 	ldw	r18,4(r17)
10009ff4:	0011883a 	mov	r8,zero
10009ff8:	8c400204 	addi	r17,r17,8
10009ffc:	003fdb06 	br	10009f6c <__alt_data_end+0xf8009f6c>
1000a000:	180d883a 	mov	r6,r3
1000a004:	e00b883a 	mov	r5,fp
1000a008:	da000115 	stw	r8,4(sp)
1000a00c:	d8c00015 	stw	r3,0(sp)
1000a010:	000b0640 	call	1000b064 <memmove>
1000a014:	d8c00017 	ldw	r3,0(sp)
1000a018:	80800017 	ldw	r2,0(r16)
1000a01c:	800b883a 	mov	r5,r16
1000a020:	a809883a 	mov	r4,r21
1000a024:	10c5883a 	add	r2,r2,r3
1000a028:	80800015 	stw	r2,0(r16)
1000a02c:	d8c00015 	stw	r3,0(sp)
1000a030:	00094d40 	call	100094d4 <_fflush_r>
1000a034:	d8c00017 	ldw	r3,0(sp)
1000a038:	da000117 	ldw	r8,4(sp)
1000a03c:	103fc21e 	bne	r2,zero,10009f48 <__alt_data_end+0xf8009f48>
1000a040:	182f883a 	mov	r23,r3
1000a044:	9de7c83a 	sub	r19,r19,r23
1000a048:	983fe11e 	bne	r19,zero,10009fd0 <__alt_data_end+0xf8009fd0>
1000a04c:	800b883a 	mov	r5,r16
1000a050:	a809883a 	mov	r4,r21
1000a054:	00094d40 	call	100094d4 <_fflush_r>
1000a058:	103fbb1e 	bne	r2,zero,10009f48 <__alt_data_end+0xf8009f48>
1000a05c:	0011883a 	mov	r8,zero
1000a060:	003fdb06 	br	10009fd0 <__alt_data_end+0xf8009fd0>
1000a064:	94c0012e 	bgeu	r18,r19,1000a06c <__sfvwrite_r+0x328>
1000a068:	9027883a 	mov	r19,r18
1000a06c:	980d883a 	mov	r6,r19
1000a070:	e00b883a 	mov	r5,fp
1000a074:	000b0640 	call	1000b064 <memmove>
1000a078:	80800217 	ldw	r2,8(r16)
1000a07c:	80c00017 	ldw	r3,0(r16)
1000a080:	14c5c83a 	sub	r2,r2,r19
1000a084:	1cc7883a 	add	r3,r3,r19
1000a088:	80800215 	stw	r2,8(r16)
1000a08c:	80c00015 	stw	r3,0(r16)
1000a090:	10004326 	beq	r2,zero,1000a1a0 <__sfvwrite_r+0x45c>
1000a094:	9805883a 	mov	r2,r19
1000a098:	003f8306 	br	10009ea8 <__alt_data_end+0xf8009ea8>
1000a09c:	b00d883a 	mov	r6,r22
1000a0a0:	e00b883a 	mov	r5,fp
1000a0a4:	da000115 	stw	r8,4(sp)
1000a0a8:	000b0640 	call	1000b064 <memmove>
1000a0ac:	80800217 	ldw	r2,8(r16)
1000a0b0:	80c00017 	ldw	r3,0(r16)
1000a0b4:	da000117 	ldw	r8,4(sp)
1000a0b8:	1585c83a 	sub	r2,r2,r22
1000a0bc:	1dad883a 	add	r22,r3,r22
1000a0c0:	80800215 	stw	r2,8(r16)
1000a0c4:	85800015 	stw	r22,0(r16)
1000a0c8:	003fbf06 	br	10009fc8 <__alt_data_end+0xf8009fc8>
1000a0cc:	81000017 	ldw	r4,0(r16)
1000a0d0:	9027883a 	mov	r19,r18
1000a0d4:	902f883a 	mov	r23,r18
1000a0d8:	003f6906 	br	10009e80 <__alt_data_end+0xf8009e80>
1000a0dc:	900d883a 	mov	r6,r18
1000a0e0:	01400284 	movi	r5,10
1000a0e4:	e009883a 	mov	r4,fp
1000a0e8:	000ae380 	call	1000ae38 <memchr>
1000a0ec:	10003e26 	beq	r2,zero,1000a1e8 <__sfvwrite_r+0x4a4>
1000a0f0:	10800044 	addi	r2,r2,1
1000a0f4:	1727c83a 	sub	r19,r2,fp
1000a0f8:	02000044 	movi	r8,1
1000a0fc:	003f9d06 	br	10009f74 <__alt_data_end+0xf8009f74>
1000a100:	80800517 	ldw	r2,20(r16)
1000a104:	81400417 	ldw	r5,16(r16)
1000a108:	81c00017 	ldw	r7,0(r16)
1000a10c:	10a7883a 	add	r19,r2,r2
1000a110:	9885883a 	add	r2,r19,r2
1000a114:	1026d7fa 	srli	r19,r2,31
1000a118:	396dc83a 	sub	r22,r7,r5
1000a11c:	b1000044 	addi	r4,r22,1
1000a120:	9885883a 	add	r2,r19,r2
1000a124:	1027d07a 	srai	r19,r2,1
1000a128:	2485883a 	add	r2,r4,r18
1000a12c:	980d883a 	mov	r6,r19
1000a130:	9880022e 	bgeu	r19,r2,1000a13c <__sfvwrite_r+0x3f8>
1000a134:	1027883a 	mov	r19,r2
1000a138:	100d883a 	mov	r6,r2
1000a13c:	18c1000c 	andi	r3,r3,1024
1000a140:	18001c26 	beq	r3,zero,1000a1b4 <__sfvwrite_r+0x470>
1000a144:	300b883a 	mov	r5,r6
1000a148:	a809883a 	mov	r4,r21
1000a14c:	000a62c0 	call	1000a62c <_malloc_r>
1000a150:	102f883a 	mov	r23,r2
1000a154:	10002926 	beq	r2,zero,1000a1fc <__sfvwrite_r+0x4b8>
1000a158:	81400417 	ldw	r5,16(r16)
1000a15c:	b00d883a 	mov	r6,r22
1000a160:	1009883a 	mov	r4,r2
1000a164:	000af1c0 	call	1000af1c <memcpy>
1000a168:	8080030b 	ldhu	r2,12(r16)
1000a16c:	00fedfc4 	movi	r3,-1153
1000a170:	10c4703a 	and	r2,r2,r3
1000a174:	10802014 	ori	r2,r2,128
1000a178:	8080030d 	sth	r2,12(r16)
1000a17c:	bd89883a 	add	r4,r23,r22
1000a180:	9d8fc83a 	sub	r7,r19,r22
1000a184:	85c00415 	stw	r23,16(r16)
1000a188:	84c00515 	stw	r19,20(r16)
1000a18c:	81000015 	stw	r4,0(r16)
1000a190:	9027883a 	mov	r19,r18
1000a194:	81c00215 	stw	r7,8(r16)
1000a198:	902f883a 	mov	r23,r18
1000a19c:	003f3806 	br	10009e80 <__alt_data_end+0xf8009e80>
1000a1a0:	800b883a 	mov	r5,r16
1000a1a4:	a809883a 	mov	r4,r21
1000a1a8:	00094d40 	call	100094d4 <_fflush_r>
1000a1ac:	103fb926 	beq	r2,zero,1000a094 <__alt_data_end+0xf800a094>
1000a1b0:	003f6506 	br	10009f48 <__alt_data_end+0xf8009f48>
1000a1b4:	a809883a 	mov	r4,r21
1000a1b8:	000c3a00 	call	1000c3a0 <_realloc_r>
1000a1bc:	102f883a 	mov	r23,r2
1000a1c0:	103fee1e 	bne	r2,zero,1000a17c <__alt_data_end+0xf800a17c>
1000a1c4:	81400417 	ldw	r5,16(r16)
1000a1c8:	a809883a 	mov	r4,r21
1000a1cc:	0009a340 	call	10009a34 <_free_r>
1000a1d0:	8080030b 	ldhu	r2,12(r16)
1000a1d4:	00ffdfc4 	movi	r3,-129
1000a1d8:	1884703a 	and	r2,r3,r2
1000a1dc:	00c00304 	movi	r3,12
1000a1e0:	a8c00015 	stw	r3,0(r21)
1000a1e4:	003f5906 	br	10009f4c <__alt_data_end+0xf8009f4c>
1000a1e8:	94c00044 	addi	r19,r18,1
1000a1ec:	02000044 	movi	r8,1
1000a1f0:	003f6006 	br	10009f74 <__alt_data_end+0xf8009f74>
1000a1f4:	00bfffc4 	movi	r2,-1
1000a1f8:	003f0006 	br	10009dfc <__alt_data_end+0xf8009dfc>
1000a1fc:	00800304 	movi	r2,12
1000a200:	a8800015 	stw	r2,0(r21)
1000a204:	8080030b 	ldhu	r2,12(r16)
1000a208:	003f5006 	br	10009f4c <__alt_data_end+0xf8009f4c>

1000a20c <_fwalk>:
1000a20c:	defff704 	addi	sp,sp,-36
1000a210:	dd000415 	stw	r20,16(sp)
1000a214:	dfc00815 	stw	ra,32(sp)
1000a218:	ddc00715 	stw	r23,28(sp)
1000a21c:	dd800615 	stw	r22,24(sp)
1000a220:	dd400515 	stw	r21,20(sp)
1000a224:	dcc00315 	stw	r19,12(sp)
1000a228:	dc800215 	stw	r18,8(sp)
1000a22c:	dc400115 	stw	r17,4(sp)
1000a230:	dc000015 	stw	r16,0(sp)
1000a234:	2500b804 	addi	r20,r4,736
1000a238:	a0002326 	beq	r20,zero,1000a2c8 <_fwalk+0xbc>
1000a23c:	282b883a 	mov	r21,r5
1000a240:	002f883a 	mov	r23,zero
1000a244:	05800044 	movi	r22,1
1000a248:	04ffffc4 	movi	r19,-1
1000a24c:	a4400117 	ldw	r17,4(r20)
1000a250:	a4800217 	ldw	r18,8(r20)
1000a254:	8c7fffc4 	addi	r17,r17,-1
1000a258:	88000d16 	blt	r17,zero,1000a290 <_fwalk+0x84>
1000a25c:	94000304 	addi	r16,r18,12
1000a260:	94800384 	addi	r18,r18,14
1000a264:	8080000b 	ldhu	r2,0(r16)
1000a268:	8c7fffc4 	addi	r17,r17,-1
1000a26c:	813ffd04 	addi	r4,r16,-12
1000a270:	b080042e 	bgeu	r22,r2,1000a284 <_fwalk+0x78>
1000a274:	9080000f 	ldh	r2,0(r18)
1000a278:	14c00226 	beq	r2,r19,1000a284 <_fwalk+0x78>
1000a27c:	a83ee83a 	callr	r21
1000a280:	b8aeb03a 	or	r23,r23,r2
1000a284:	84001a04 	addi	r16,r16,104
1000a288:	94801a04 	addi	r18,r18,104
1000a28c:	8cfff51e 	bne	r17,r19,1000a264 <__alt_data_end+0xf800a264>
1000a290:	a5000017 	ldw	r20,0(r20)
1000a294:	a03fed1e 	bne	r20,zero,1000a24c <__alt_data_end+0xf800a24c>
1000a298:	b805883a 	mov	r2,r23
1000a29c:	dfc00817 	ldw	ra,32(sp)
1000a2a0:	ddc00717 	ldw	r23,28(sp)
1000a2a4:	dd800617 	ldw	r22,24(sp)
1000a2a8:	dd400517 	ldw	r21,20(sp)
1000a2ac:	dd000417 	ldw	r20,16(sp)
1000a2b0:	dcc00317 	ldw	r19,12(sp)
1000a2b4:	dc800217 	ldw	r18,8(sp)
1000a2b8:	dc400117 	ldw	r17,4(sp)
1000a2bc:	dc000017 	ldw	r16,0(sp)
1000a2c0:	dec00904 	addi	sp,sp,36
1000a2c4:	f800283a 	ret
1000a2c8:	002f883a 	mov	r23,zero
1000a2cc:	003ff206 	br	1000a298 <__alt_data_end+0xf800a298>

1000a2d0 <_fwalk_reent>:
1000a2d0:	defff704 	addi	sp,sp,-36
1000a2d4:	dd000415 	stw	r20,16(sp)
1000a2d8:	dfc00815 	stw	ra,32(sp)
1000a2dc:	ddc00715 	stw	r23,28(sp)
1000a2e0:	dd800615 	stw	r22,24(sp)
1000a2e4:	dd400515 	stw	r21,20(sp)
1000a2e8:	dcc00315 	stw	r19,12(sp)
1000a2ec:	dc800215 	stw	r18,8(sp)
1000a2f0:	dc400115 	stw	r17,4(sp)
1000a2f4:	dc000015 	stw	r16,0(sp)
1000a2f8:	2500b804 	addi	r20,r4,736
1000a2fc:	a0002326 	beq	r20,zero,1000a38c <_fwalk_reent+0xbc>
1000a300:	282b883a 	mov	r21,r5
1000a304:	2027883a 	mov	r19,r4
1000a308:	002f883a 	mov	r23,zero
1000a30c:	05800044 	movi	r22,1
1000a310:	04bfffc4 	movi	r18,-1
1000a314:	a4400117 	ldw	r17,4(r20)
1000a318:	a4000217 	ldw	r16,8(r20)
1000a31c:	8c7fffc4 	addi	r17,r17,-1
1000a320:	88000c16 	blt	r17,zero,1000a354 <_fwalk_reent+0x84>
1000a324:	84000304 	addi	r16,r16,12
1000a328:	8080000b 	ldhu	r2,0(r16)
1000a32c:	8c7fffc4 	addi	r17,r17,-1
1000a330:	817ffd04 	addi	r5,r16,-12
1000a334:	b080052e 	bgeu	r22,r2,1000a34c <_fwalk_reent+0x7c>
1000a338:	8080008f 	ldh	r2,2(r16)
1000a33c:	9809883a 	mov	r4,r19
1000a340:	14800226 	beq	r2,r18,1000a34c <_fwalk_reent+0x7c>
1000a344:	a83ee83a 	callr	r21
1000a348:	b8aeb03a 	or	r23,r23,r2
1000a34c:	84001a04 	addi	r16,r16,104
1000a350:	8cbff51e 	bne	r17,r18,1000a328 <__alt_data_end+0xf800a328>
1000a354:	a5000017 	ldw	r20,0(r20)
1000a358:	a03fee1e 	bne	r20,zero,1000a314 <__alt_data_end+0xf800a314>
1000a35c:	b805883a 	mov	r2,r23
1000a360:	dfc00817 	ldw	ra,32(sp)
1000a364:	ddc00717 	ldw	r23,28(sp)
1000a368:	dd800617 	ldw	r22,24(sp)
1000a36c:	dd400517 	ldw	r21,20(sp)
1000a370:	dd000417 	ldw	r20,16(sp)
1000a374:	dcc00317 	ldw	r19,12(sp)
1000a378:	dc800217 	ldw	r18,8(sp)
1000a37c:	dc400117 	ldw	r17,4(sp)
1000a380:	dc000017 	ldw	r16,0(sp)
1000a384:	dec00904 	addi	sp,sp,36
1000a388:	f800283a 	ret
1000a38c:	002f883a 	mov	r23,zero
1000a390:	003ff206 	br	1000a35c <__alt_data_end+0xf800a35c>

1000a394 <_setlocale_r>:
1000a394:	30001b26 	beq	r6,zero,1000a404 <_setlocale_r+0x70>
1000a398:	01440074 	movhi	r5,4097
1000a39c:	defffe04 	addi	sp,sp,-8
1000a3a0:	2951a704 	addi	r5,r5,18076
1000a3a4:	3009883a 	mov	r4,r6
1000a3a8:	dc000015 	stw	r16,0(sp)
1000a3ac:	dfc00115 	stw	ra,4(sp)
1000a3b0:	3021883a 	mov	r16,r6
1000a3b4:	000cb080 	call	1000cb08 <strcmp>
1000a3b8:	1000061e 	bne	r2,zero,1000a3d4 <_setlocale_r+0x40>
1000a3bc:	00840074 	movhi	r2,4097
1000a3c0:	10918804 	addi	r2,r2,17952
1000a3c4:	dfc00117 	ldw	ra,4(sp)
1000a3c8:	dc000017 	ldw	r16,0(sp)
1000a3cc:	dec00204 	addi	sp,sp,8
1000a3d0:	f800283a 	ret
1000a3d4:	01440074 	movhi	r5,4097
1000a3d8:	29518804 	addi	r5,r5,17952
1000a3dc:	8009883a 	mov	r4,r16
1000a3e0:	000cb080 	call	1000cb08 <strcmp>
1000a3e4:	103ff526 	beq	r2,zero,1000a3bc <__alt_data_end+0xf800a3bc>
1000a3e8:	01440074 	movhi	r5,4097
1000a3ec:	29519204 	addi	r5,r5,17992
1000a3f0:	8009883a 	mov	r4,r16
1000a3f4:	000cb080 	call	1000cb08 <strcmp>
1000a3f8:	103ff026 	beq	r2,zero,1000a3bc <__alt_data_end+0xf800a3bc>
1000a3fc:	0005883a 	mov	r2,zero
1000a400:	003ff006 	br	1000a3c4 <__alt_data_end+0xf800a3c4>
1000a404:	00840074 	movhi	r2,4097
1000a408:	10918804 	addi	r2,r2,17952
1000a40c:	f800283a 	ret

1000a410 <__locale_charset>:
1000a410:	00840074 	movhi	r2,4097
1000a414:	10931904 	addi	r2,r2,19556
1000a418:	f800283a 	ret

1000a41c <__locale_mb_cur_max>:
1000a41c:	00840074 	movhi	r2,4097
1000a420:	1098b604 	addi	r2,r2,25304
1000a424:	10800017 	ldw	r2,0(r2)
1000a428:	f800283a 	ret

1000a42c <__locale_msgcharset>:
1000a42c:	00840074 	movhi	r2,4097
1000a430:	10931104 	addi	r2,r2,19524
1000a434:	f800283a 	ret

1000a438 <__locale_cjk_lang>:
1000a438:	0005883a 	mov	r2,zero
1000a43c:	f800283a 	ret

1000a440 <_localeconv_r>:
1000a440:	00840074 	movhi	r2,4097
1000a444:	10932104 	addi	r2,r2,19588
1000a448:	f800283a 	ret

1000a44c <setlocale>:
1000a44c:	00840074 	movhi	r2,4097
1000a450:	1098b504 	addi	r2,r2,25300
1000a454:	280d883a 	mov	r6,r5
1000a458:	200b883a 	mov	r5,r4
1000a45c:	11000017 	ldw	r4,0(r2)
1000a460:	000a3941 	jmpi	1000a394 <_setlocale_r>

1000a464 <localeconv>:
1000a464:	00840074 	movhi	r2,4097
1000a468:	10932104 	addi	r2,r2,19588
1000a46c:	f800283a 	ret

1000a470 <__smakebuf_r>:
1000a470:	2880030b 	ldhu	r2,12(r5)
1000a474:	10c0008c 	andi	r3,r2,2
1000a478:	1800411e 	bne	r3,zero,1000a580 <__smakebuf_r+0x110>
1000a47c:	deffec04 	addi	sp,sp,-80
1000a480:	dc000f15 	stw	r16,60(sp)
1000a484:	2821883a 	mov	r16,r5
1000a488:	2940038f 	ldh	r5,14(r5)
1000a48c:	dc401015 	stw	r17,64(sp)
1000a490:	dfc01315 	stw	ra,76(sp)
1000a494:	dcc01215 	stw	r19,72(sp)
1000a498:	dc801115 	stw	r18,68(sp)
1000a49c:	2023883a 	mov	r17,r4
1000a4a0:	28001c16 	blt	r5,zero,1000a514 <__smakebuf_r+0xa4>
1000a4a4:	d80d883a 	mov	r6,sp
1000a4a8:	000e7780 	call	1000e778 <_fstat_r>
1000a4ac:	10001816 	blt	r2,zero,1000a510 <__smakebuf_r+0xa0>
1000a4b0:	d8800117 	ldw	r2,4(sp)
1000a4b4:	00e00014 	movui	r3,32768
1000a4b8:	10bc000c 	andi	r2,r2,61440
1000a4bc:	14c80020 	cmpeqi	r19,r2,8192
1000a4c0:	10c03726 	beq	r2,r3,1000a5a0 <__smakebuf_r+0x130>
1000a4c4:	80c0030b 	ldhu	r3,12(r16)
1000a4c8:	18c20014 	ori	r3,r3,2048
1000a4cc:	80c0030d 	sth	r3,12(r16)
1000a4d0:	00c80004 	movi	r3,8192
1000a4d4:	10c0521e 	bne	r2,r3,1000a620 <__smakebuf_r+0x1b0>
1000a4d8:	8140038f 	ldh	r5,14(r16)
1000a4dc:	8809883a 	mov	r4,r17
1000a4e0:	000e7d40 	call	1000e7d4 <_isatty_r>
1000a4e4:	10004c26 	beq	r2,zero,1000a618 <__smakebuf_r+0x1a8>
1000a4e8:	8080030b 	ldhu	r2,12(r16)
1000a4ec:	80c010c4 	addi	r3,r16,67
1000a4f0:	80c00015 	stw	r3,0(r16)
1000a4f4:	10800054 	ori	r2,r2,1
1000a4f8:	8080030d 	sth	r2,12(r16)
1000a4fc:	00800044 	movi	r2,1
1000a500:	80c00415 	stw	r3,16(r16)
1000a504:	80800515 	stw	r2,20(r16)
1000a508:	04810004 	movi	r18,1024
1000a50c:	00000706 	br	1000a52c <__smakebuf_r+0xbc>
1000a510:	8080030b 	ldhu	r2,12(r16)
1000a514:	10c0200c 	andi	r3,r2,128
1000a518:	18001f1e 	bne	r3,zero,1000a598 <__smakebuf_r+0x128>
1000a51c:	04810004 	movi	r18,1024
1000a520:	10820014 	ori	r2,r2,2048
1000a524:	8080030d 	sth	r2,12(r16)
1000a528:	0027883a 	mov	r19,zero
1000a52c:	900b883a 	mov	r5,r18
1000a530:	8809883a 	mov	r4,r17
1000a534:	000a62c0 	call	1000a62c <_malloc_r>
1000a538:	10002c26 	beq	r2,zero,1000a5ec <__smakebuf_r+0x17c>
1000a53c:	80c0030b 	ldhu	r3,12(r16)
1000a540:	01040074 	movhi	r4,4097
1000a544:	21255a04 	addi	r4,r4,-27288
1000a548:	89000f15 	stw	r4,60(r17)
1000a54c:	18c02014 	ori	r3,r3,128
1000a550:	80c0030d 	sth	r3,12(r16)
1000a554:	80800015 	stw	r2,0(r16)
1000a558:	80800415 	stw	r2,16(r16)
1000a55c:	84800515 	stw	r18,20(r16)
1000a560:	98001a1e 	bne	r19,zero,1000a5cc <__smakebuf_r+0x15c>
1000a564:	dfc01317 	ldw	ra,76(sp)
1000a568:	dcc01217 	ldw	r19,72(sp)
1000a56c:	dc801117 	ldw	r18,68(sp)
1000a570:	dc401017 	ldw	r17,64(sp)
1000a574:	dc000f17 	ldw	r16,60(sp)
1000a578:	dec01404 	addi	sp,sp,80
1000a57c:	f800283a 	ret
1000a580:	288010c4 	addi	r2,r5,67
1000a584:	28800015 	stw	r2,0(r5)
1000a588:	28800415 	stw	r2,16(r5)
1000a58c:	00800044 	movi	r2,1
1000a590:	28800515 	stw	r2,20(r5)
1000a594:	f800283a 	ret
1000a598:	04801004 	movi	r18,64
1000a59c:	003fe006 	br	1000a520 <__alt_data_end+0xf800a520>
1000a5a0:	81000a17 	ldw	r4,40(r16)
1000a5a4:	00c40074 	movhi	r3,4097
1000a5a8:	18f2a904 	addi	r3,r3,-13660
1000a5ac:	20ffc51e 	bne	r4,r3,1000a4c4 <__alt_data_end+0xf800a4c4>
1000a5b0:	8080030b 	ldhu	r2,12(r16)
1000a5b4:	04810004 	movi	r18,1024
1000a5b8:	84801315 	stw	r18,76(r16)
1000a5bc:	1484b03a 	or	r2,r2,r18
1000a5c0:	8080030d 	sth	r2,12(r16)
1000a5c4:	0027883a 	mov	r19,zero
1000a5c8:	003fd806 	br	1000a52c <__alt_data_end+0xf800a52c>
1000a5cc:	8140038f 	ldh	r5,14(r16)
1000a5d0:	8809883a 	mov	r4,r17
1000a5d4:	000e7d40 	call	1000e7d4 <_isatty_r>
1000a5d8:	103fe226 	beq	r2,zero,1000a564 <__alt_data_end+0xf800a564>
1000a5dc:	8080030b 	ldhu	r2,12(r16)
1000a5e0:	10800054 	ori	r2,r2,1
1000a5e4:	8080030d 	sth	r2,12(r16)
1000a5e8:	003fde06 	br	1000a564 <__alt_data_end+0xf800a564>
1000a5ec:	8080030b 	ldhu	r2,12(r16)
1000a5f0:	10c0800c 	andi	r3,r2,512
1000a5f4:	183fdb1e 	bne	r3,zero,1000a564 <__alt_data_end+0xf800a564>
1000a5f8:	10800094 	ori	r2,r2,2
1000a5fc:	80c010c4 	addi	r3,r16,67
1000a600:	8080030d 	sth	r2,12(r16)
1000a604:	00800044 	movi	r2,1
1000a608:	80c00015 	stw	r3,0(r16)
1000a60c:	80c00415 	stw	r3,16(r16)
1000a610:	80800515 	stw	r2,20(r16)
1000a614:	003fd306 	br	1000a564 <__alt_data_end+0xf800a564>
1000a618:	04810004 	movi	r18,1024
1000a61c:	003fc306 	br	1000a52c <__alt_data_end+0xf800a52c>
1000a620:	0027883a 	mov	r19,zero
1000a624:	04810004 	movi	r18,1024
1000a628:	003fc006 	br	1000a52c <__alt_data_end+0xf800a52c>

1000a62c <_malloc_r>:
1000a62c:	defff504 	addi	sp,sp,-44
1000a630:	dc800315 	stw	r18,12(sp)
1000a634:	dfc00a15 	stw	ra,40(sp)
1000a638:	df000915 	stw	fp,36(sp)
1000a63c:	ddc00815 	stw	r23,32(sp)
1000a640:	dd800715 	stw	r22,28(sp)
1000a644:	dd400615 	stw	r21,24(sp)
1000a648:	dd000515 	stw	r20,20(sp)
1000a64c:	dcc00415 	stw	r19,16(sp)
1000a650:	dc400215 	stw	r17,8(sp)
1000a654:	dc000115 	stw	r16,4(sp)
1000a658:	288002c4 	addi	r2,r5,11
1000a65c:	00c00584 	movi	r3,22
1000a660:	2025883a 	mov	r18,r4
1000a664:	18807f2e 	bgeu	r3,r2,1000a864 <_malloc_r+0x238>
1000a668:	047ffe04 	movi	r17,-8
1000a66c:	1462703a 	and	r17,r2,r17
1000a670:	8800a316 	blt	r17,zero,1000a900 <_malloc_r+0x2d4>
1000a674:	8940a236 	bltu	r17,r5,1000a900 <_malloc_r+0x2d4>
1000a678:	0011a880 	call	10011a88 <__malloc_lock>
1000a67c:	00807dc4 	movi	r2,503
1000a680:	1441e92e 	bgeu	r2,r17,1000ae28 <_malloc_r+0x7fc>
1000a684:	8804d27a 	srli	r2,r17,9
1000a688:	1000a126 	beq	r2,zero,1000a910 <_malloc_r+0x2e4>
1000a68c:	00c00104 	movi	r3,4
1000a690:	18811e36 	bltu	r3,r2,1000ab0c <_malloc_r+0x4e0>
1000a694:	8804d1ba 	srli	r2,r17,6
1000a698:	12000e44 	addi	r8,r2,57
1000a69c:	11c00e04 	addi	r7,r2,56
1000a6a0:	4209883a 	add	r4,r8,r8
1000a6a4:	04c40074 	movhi	r19,4097
1000a6a8:	2109883a 	add	r4,r4,r4
1000a6ac:	9cd32f04 	addi	r19,r19,19644
1000a6b0:	2109883a 	add	r4,r4,r4
1000a6b4:	9909883a 	add	r4,r19,r4
1000a6b8:	24000117 	ldw	r16,4(r4)
1000a6bc:	213ffe04 	addi	r4,r4,-8
1000a6c0:	24009726 	beq	r4,r16,1000a920 <_malloc_r+0x2f4>
1000a6c4:	80800117 	ldw	r2,4(r16)
1000a6c8:	01bfff04 	movi	r6,-4
1000a6cc:	014003c4 	movi	r5,15
1000a6d0:	1184703a 	and	r2,r2,r6
1000a6d4:	1447c83a 	sub	r3,r2,r17
1000a6d8:	28c00716 	blt	r5,r3,1000a6f8 <_malloc_r+0xcc>
1000a6dc:	1800920e 	bge	r3,zero,1000a928 <_malloc_r+0x2fc>
1000a6e0:	84000317 	ldw	r16,12(r16)
1000a6e4:	24008e26 	beq	r4,r16,1000a920 <_malloc_r+0x2f4>
1000a6e8:	80800117 	ldw	r2,4(r16)
1000a6ec:	1184703a 	and	r2,r2,r6
1000a6f0:	1447c83a 	sub	r3,r2,r17
1000a6f4:	28fff90e 	bge	r5,r3,1000a6dc <__alt_data_end+0xf800a6dc>
1000a6f8:	3809883a 	mov	r4,r7
1000a6fc:	01840074 	movhi	r6,4097
1000a700:	9c000417 	ldw	r16,16(r19)
1000a704:	31932f04 	addi	r6,r6,19644
1000a708:	32000204 	addi	r8,r6,8
1000a70c:	82013426 	beq	r16,r8,1000abe0 <_malloc_r+0x5b4>
1000a710:	80c00117 	ldw	r3,4(r16)
1000a714:	00bfff04 	movi	r2,-4
1000a718:	188e703a 	and	r7,r3,r2
1000a71c:	3c45c83a 	sub	r2,r7,r17
1000a720:	00c003c4 	movi	r3,15
1000a724:	18811f16 	blt	r3,r2,1000aba4 <_malloc_r+0x578>
1000a728:	32000515 	stw	r8,20(r6)
1000a72c:	32000415 	stw	r8,16(r6)
1000a730:	10007f0e 	bge	r2,zero,1000a930 <_malloc_r+0x304>
1000a734:	00807fc4 	movi	r2,511
1000a738:	11c0fd36 	bltu	r2,r7,1000ab30 <_malloc_r+0x504>
1000a73c:	3806d0fa 	srli	r3,r7,3
1000a740:	01c00044 	movi	r7,1
1000a744:	30800117 	ldw	r2,4(r6)
1000a748:	19400044 	addi	r5,r3,1
1000a74c:	294b883a 	add	r5,r5,r5
1000a750:	1807d0ba 	srai	r3,r3,2
1000a754:	294b883a 	add	r5,r5,r5
1000a758:	294b883a 	add	r5,r5,r5
1000a75c:	298b883a 	add	r5,r5,r6
1000a760:	38c6983a 	sll	r3,r7,r3
1000a764:	29c00017 	ldw	r7,0(r5)
1000a768:	2a7ffe04 	addi	r9,r5,-8
1000a76c:	1886b03a 	or	r3,r3,r2
1000a770:	82400315 	stw	r9,12(r16)
1000a774:	81c00215 	stw	r7,8(r16)
1000a778:	30c00115 	stw	r3,4(r6)
1000a77c:	2c000015 	stw	r16,0(r5)
1000a780:	3c000315 	stw	r16,12(r7)
1000a784:	2005d0ba 	srai	r2,r4,2
1000a788:	01400044 	movi	r5,1
1000a78c:	288a983a 	sll	r5,r5,r2
1000a790:	19406f36 	bltu	r3,r5,1000a950 <_malloc_r+0x324>
1000a794:	28c4703a 	and	r2,r5,r3
1000a798:	10000a1e 	bne	r2,zero,1000a7c4 <_malloc_r+0x198>
1000a79c:	00bfff04 	movi	r2,-4
1000a7a0:	294b883a 	add	r5,r5,r5
1000a7a4:	2088703a 	and	r4,r4,r2
1000a7a8:	28c4703a 	and	r2,r5,r3
1000a7ac:	21000104 	addi	r4,r4,4
1000a7b0:	1000041e 	bne	r2,zero,1000a7c4 <_malloc_r+0x198>
1000a7b4:	294b883a 	add	r5,r5,r5
1000a7b8:	28c4703a 	and	r2,r5,r3
1000a7bc:	21000104 	addi	r4,r4,4
1000a7c0:	103ffc26 	beq	r2,zero,1000a7b4 <__alt_data_end+0xf800a7b4>
1000a7c4:	02bfff04 	movi	r10,-4
1000a7c8:	024003c4 	movi	r9,15
1000a7cc:	21800044 	addi	r6,r4,1
1000a7d0:	318d883a 	add	r6,r6,r6
1000a7d4:	318d883a 	add	r6,r6,r6
1000a7d8:	318d883a 	add	r6,r6,r6
1000a7dc:	998d883a 	add	r6,r19,r6
1000a7e0:	333ffe04 	addi	r12,r6,-8
1000a7e4:	2017883a 	mov	r11,r4
1000a7e8:	31800104 	addi	r6,r6,4
1000a7ec:	34000017 	ldw	r16,0(r6)
1000a7f0:	31fffd04 	addi	r7,r6,-12
1000a7f4:	81c0041e 	bne	r16,r7,1000a808 <_malloc_r+0x1dc>
1000a7f8:	0000fb06 	br	1000abe8 <_malloc_r+0x5bc>
1000a7fc:	1801030e 	bge	r3,zero,1000ac0c <_malloc_r+0x5e0>
1000a800:	84000317 	ldw	r16,12(r16)
1000a804:	81c0f826 	beq	r16,r7,1000abe8 <_malloc_r+0x5bc>
1000a808:	80800117 	ldw	r2,4(r16)
1000a80c:	1284703a 	and	r2,r2,r10
1000a810:	1447c83a 	sub	r3,r2,r17
1000a814:	48fff90e 	bge	r9,r3,1000a7fc <__alt_data_end+0xf800a7fc>
1000a818:	80800317 	ldw	r2,12(r16)
1000a81c:	81000217 	ldw	r4,8(r16)
1000a820:	89400054 	ori	r5,r17,1
1000a824:	81400115 	stw	r5,4(r16)
1000a828:	20800315 	stw	r2,12(r4)
1000a82c:	11000215 	stw	r4,8(r2)
1000a830:	8463883a 	add	r17,r16,r17
1000a834:	9c400515 	stw	r17,20(r19)
1000a838:	9c400415 	stw	r17,16(r19)
1000a83c:	18800054 	ori	r2,r3,1
1000a840:	88800115 	stw	r2,4(r17)
1000a844:	8a000315 	stw	r8,12(r17)
1000a848:	8a000215 	stw	r8,8(r17)
1000a84c:	88e3883a 	add	r17,r17,r3
1000a850:	88c00015 	stw	r3,0(r17)
1000a854:	9009883a 	mov	r4,r18
1000a858:	0011aac0 	call	10011aac <__malloc_unlock>
1000a85c:	80800204 	addi	r2,r16,8
1000a860:	00001b06 	br	1000a8d0 <_malloc_r+0x2a4>
1000a864:	04400404 	movi	r17,16
1000a868:	89402536 	bltu	r17,r5,1000a900 <_malloc_r+0x2d4>
1000a86c:	0011a880 	call	10011a88 <__malloc_lock>
1000a870:	00800184 	movi	r2,6
1000a874:	01000084 	movi	r4,2
1000a878:	04c40074 	movhi	r19,4097
1000a87c:	1085883a 	add	r2,r2,r2
1000a880:	9cd32f04 	addi	r19,r19,19644
1000a884:	1085883a 	add	r2,r2,r2
1000a888:	9885883a 	add	r2,r19,r2
1000a88c:	14000117 	ldw	r16,4(r2)
1000a890:	10fffe04 	addi	r3,r2,-8
1000a894:	80c0d926 	beq	r16,r3,1000abfc <_malloc_r+0x5d0>
1000a898:	80c00117 	ldw	r3,4(r16)
1000a89c:	81000317 	ldw	r4,12(r16)
1000a8a0:	00bfff04 	movi	r2,-4
1000a8a4:	1884703a 	and	r2,r3,r2
1000a8a8:	81400217 	ldw	r5,8(r16)
1000a8ac:	8085883a 	add	r2,r16,r2
1000a8b0:	10c00117 	ldw	r3,4(r2)
1000a8b4:	29000315 	stw	r4,12(r5)
1000a8b8:	21400215 	stw	r5,8(r4)
1000a8bc:	18c00054 	ori	r3,r3,1
1000a8c0:	10c00115 	stw	r3,4(r2)
1000a8c4:	9009883a 	mov	r4,r18
1000a8c8:	0011aac0 	call	10011aac <__malloc_unlock>
1000a8cc:	80800204 	addi	r2,r16,8
1000a8d0:	dfc00a17 	ldw	ra,40(sp)
1000a8d4:	df000917 	ldw	fp,36(sp)
1000a8d8:	ddc00817 	ldw	r23,32(sp)
1000a8dc:	dd800717 	ldw	r22,28(sp)
1000a8e0:	dd400617 	ldw	r21,24(sp)
1000a8e4:	dd000517 	ldw	r20,20(sp)
1000a8e8:	dcc00417 	ldw	r19,16(sp)
1000a8ec:	dc800317 	ldw	r18,12(sp)
1000a8f0:	dc400217 	ldw	r17,8(sp)
1000a8f4:	dc000117 	ldw	r16,4(sp)
1000a8f8:	dec00b04 	addi	sp,sp,44
1000a8fc:	f800283a 	ret
1000a900:	00800304 	movi	r2,12
1000a904:	90800015 	stw	r2,0(r18)
1000a908:	0005883a 	mov	r2,zero
1000a90c:	003ff006 	br	1000a8d0 <__alt_data_end+0xf800a8d0>
1000a910:	01002004 	movi	r4,128
1000a914:	02001004 	movi	r8,64
1000a918:	01c00fc4 	movi	r7,63
1000a91c:	003f6106 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000a920:	4009883a 	mov	r4,r8
1000a924:	003f7506 	br	1000a6fc <__alt_data_end+0xf800a6fc>
1000a928:	81000317 	ldw	r4,12(r16)
1000a92c:	003fde06 	br	1000a8a8 <__alt_data_end+0xf800a8a8>
1000a930:	81c5883a 	add	r2,r16,r7
1000a934:	11400117 	ldw	r5,4(r2)
1000a938:	9009883a 	mov	r4,r18
1000a93c:	29400054 	ori	r5,r5,1
1000a940:	11400115 	stw	r5,4(r2)
1000a944:	0011aac0 	call	10011aac <__malloc_unlock>
1000a948:	80800204 	addi	r2,r16,8
1000a94c:	003fe006 	br	1000a8d0 <__alt_data_end+0xf800a8d0>
1000a950:	9c000217 	ldw	r16,8(r19)
1000a954:	00bfff04 	movi	r2,-4
1000a958:	85800117 	ldw	r22,4(r16)
1000a95c:	b0ac703a 	and	r22,r22,r2
1000a960:	b4400336 	bltu	r22,r17,1000a970 <_malloc_r+0x344>
1000a964:	b445c83a 	sub	r2,r22,r17
1000a968:	00c003c4 	movi	r3,15
1000a96c:	18805d16 	blt	r3,r2,1000aae4 <_malloc_r+0x4b8>
1000a970:	05c40074 	movhi	r23,4097
1000a974:	00840074 	movhi	r2,4097
1000a978:	109f9204 	addi	r2,r2,32328
1000a97c:	bdd8b704 	addi	r23,r23,25308
1000a980:	15400017 	ldw	r21,0(r2)
1000a984:	b8c00017 	ldw	r3,0(r23)
1000a988:	00bfffc4 	movi	r2,-1
1000a98c:	858d883a 	add	r6,r16,r22
1000a990:	8d6b883a 	add	r21,r17,r21
1000a994:	1880ea26 	beq	r3,r2,1000ad40 <_malloc_r+0x714>
1000a998:	ad4403c4 	addi	r21,r21,4111
1000a99c:	00bc0004 	movi	r2,-4096
1000a9a0:	a8aa703a 	and	r21,r21,r2
1000a9a4:	a80b883a 	mov	r5,r21
1000a9a8:	9009883a 	mov	r4,r18
1000a9ac:	d9800015 	stw	r6,0(sp)
1000a9b0:	000c9780 	call	1000c978 <_sbrk_r>
1000a9b4:	1029883a 	mov	r20,r2
1000a9b8:	00bfffc4 	movi	r2,-1
1000a9bc:	d9800017 	ldw	r6,0(sp)
1000a9c0:	a080e826 	beq	r20,r2,1000ad64 <_malloc_r+0x738>
1000a9c4:	a180a636 	bltu	r20,r6,1000ac60 <_malloc_r+0x634>
1000a9c8:	07040074 	movhi	fp,4097
1000a9cc:	e71f9b04 	addi	fp,fp,32364
1000a9d0:	e0800017 	ldw	r2,0(fp)
1000a9d4:	a887883a 	add	r3,r21,r2
1000a9d8:	e0c00015 	stw	r3,0(fp)
1000a9dc:	3500e626 	beq	r6,r20,1000ad78 <_malloc_r+0x74c>
1000a9e0:	b9000017 	ldw	r4,0(r23)
1000a9e4:	00bfffc4 	movi	r2,-1
1000a9e8:	2080ee26 	beq	r4,r2,1000ada4 <_malloc_r+0x778>
1000a9ec:	a185c83a 	sub	r2,r20,r6
1000a9f0:	10c5883a 	add	r2,r2,r3
1000a9f4:	e0800015 	stw	r2,0(fp)
1000a9f8:	a0c001cc 	andi	r3,r20,7
1000a9fc:	1800bc26 	beq	r3,zero,1000acf0 <_malloc_r+0x6c4>
1000aa00:	a0e9c83a 	sub	r20,r20,r3
1000aa04:	00840204 	movi	r2,4104
1000aa08:	a5000204 	addi	r20,r20,8
1000aa0c:	10c7c83a 	sub	r3,r2,r3
1000aa10:	a545883a 	add	r2,r20,r21
1000aa14:	1083ffcc 	andi	r2,r2,4095
1000aa18:	18abc83a 	sub	r21,r3,r2
1000aa1c:	a80b883a 	mov	r5,r21
1000aa20:	9009883a 	mov	r4,r18
1000aa24:	000c9780 	call	1000c978 <_sbrk_r>
1000aa28:	00ffffc4 	movi	r3,-1
1000aa2c:	10c0e126 	beq	r2,r3,1000adb4 <_malloc_r+0x788>
1000aa30:	1505c83a 	sub	r2,r2,r20
1000aa34:	1545883a 	add	r2,r2,r21
1000aa38:	10800054 	ori	r2,r2,1
1000aa3c:	e0c00017 	ldw	r3,0(fp)
1000aa40:	9d000215 	stw	r20,8(r19)
1000aa44:	a0800115 	stw	r2,4(r20)
1000aa48:	a8c7883a 	add	r3,r21,r3
1000aa4c:	e0c00015 	stw	r3,0(fp)
1000aa50:	84c00e26 	beq	r16,r19,1000aa8c <_malloc_r+0x460>
1000aa54:	018003c4 	movi	r6,15
1000aa58:	3580a72e 	bgeu	r6,r22,1000acf8 <_malloc_r+0x6cc>
1000aa5c:	81400117 	ldw	r5,4(r16)
1000aa60:	013ffe04 	movi	r4,-8
1000aa64:	b0bffd04 	addi	r2,r22,-12
1000aa68:	1104703a 	and	r2,r2,r4
1000aa6c:	2900004c 	andi	r4,r5,1
1000aa70:	2088b03a 	or	r4,r4,r2
1000aa74:	81000115 	stw	r4,4(r16)
1000aa78:	01400144 	movi	r5,5
1000aa7c:	8089883a 	add	r4,r16,r2
1000aa80:	21400115 	stw	r5,4(r4)
1000aa84:	21400215 	stw	r5,8(r4)
1000aa88:	3080cd36 	bltu	r6,r2,1000adc0 <_malloc_r+0x794>
1000aa8c:	00840074 	movhi	r2,4097
1000aa90:	109f9104 	addi	r2,r2,32324
1000aa94:	11000017 	ldw	r4,0(r2)
1000aa98:	20c0012e 	bgeu	r4,r3,1000aaa0 <_malloc_r+0x474>
1000aa9c:	10c00015 	stw	r3,0(r2)
1000aaa0:	00840074 	movhi	r2,4097
1000aaa4:	109f9004 	addi	r2,r2,32320
1000aaa8:	11000017 	ldw	r4,0(r2)
1000aaac:	9c000217 	ldw	r16,8(r19)
1000aab0:	20c0012e 	bgeu	r4,r3,1000aab8 <_malloc_r+0x48c>
1000aab4:	10c00015 	stw	r3,0(r2)
1000aab8:	80c00117 	ldw	r3,4(r16)
1000aabc:	00bfff04 	movi	r2,-4
1000aac0:	1886703a 	and	r3,r3,r2
1000aac4:	1c45c83a 	sub	r2,r3,r17
1000aac8:	1c400236 	bltu	r3,r17,1000aad4 <_malloc_r+0x4a8>
1000aacc:	00c003c4 	movi	r3,15
1000aad0:	18800416 	blt	r3,r2,1000aae4 <_malloc_r+0x4b8>
1000aad4:	9009883a 	mov	r4,r18
1000aad8:	0011aac0 	call	10011aac <__malloc_unlock>
1000aadc:	0005883a 	mov	r2,zero
1000aae0:	003f7b06 	br	1000a8d0 <__alt_data_end+0xf800a8d0>
1000aae4:	88c00054 	ori	r3,r17,1
1000aae8:	80c00115 	stw	r3,4(r16)
1000aaec:	8463883a 	add	r17,r16,r17
1000aaf0:	10800054 	ori	r2,r2,1
1000aaf4:	9c400215 	stw	r17,8(r19)
1000aaf8:	88800115 	stw	r2,4(r17)
1000aafc:	9009883a 	mov	r4,r18
1000ab00:	0011aac0 	call	10011aac <__malloc_unlock>
1000ab04:	80800204 	addi	r2,r16,8
1000ab08:	003f7106 	br	1000a8d0 <__alt_data_end+0xf800a8d0>
1000ab0c:	00c00504 	movi	r3,20
1000ab10:	18804a2e 	bgeu	r3,r2,1000ac3c <_malloc_r+0x610>
1000ab14:	00c01504 	movi	r3,84
1000ab18:	18806e36 	bltu	r3,r2,1000acd4 <_malloc_r+0x6a8>
1000ab1c:	8804d33a 	srli	r2,r17,12
1000ab20:	12001bc4 	addi	r8,r2,111
1000ab24:	11c01b84 	addi	r7,r2,110
1000ab28:	4209883a 	add	r4,r8,r8
1000ab2c:	003edd06 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000ab30:	3804d27a 	srli	r2,r7,9
1000ab34:	00c00104 	movi	r3,4
1000ab38:	1880442e 	bgeu	r3,r2,1000ac4c <_malloc_r+0x620>
1000ab3c:	00c00504 	movi	r3,20
1000ab40:	18808136 	bltu	r3,r2,1000ad48 <_malloc_r+0x71c>
1000ab44:	11401704 	addi	r5,r2,92
1000ab48:	10c016c4 	addi	r3,r2,91
1000ab4c:	294b883a 	add	r5,r5,r5
1000ab50:	294b883a 	add	r5,r5,r5
1000ab54:	294b883a 	add	r5,r5,r5
1000ab58:	994b883a 	add	r5,r19,r5
1000ab5c:	28800017 	ldw	r2,0(r5)
1000ab60:	01840074 	movhi	r6,4097
1000ab64:	297ffe04 	addi	r5,r5,-8
1000ab68:	31932f04 	addi	r6,r6,19644
1000ab6c:	28806526 	beq	r5,r2,1000ad04 <_malloc_r+0x6d8>
1000ab70:	01bfff04 	movi	r6,-4
1000ab74:	10c00117 	ldw	r3,4(r2)
1000ab78:	1986703a 	and	r3,r3,r6
1000ab7c:	38c0022e 	bgeu	r7,r3,1000ab88 <_malloc_r+0x55c>
1000ab80:	10800217 	ldw	r2,8(r2)
1000ab84:	28bffb1e 	bne	r5,r2,1000ab74 <__alt_data_end+0xf800ab74>
1000ab88:	11400317 	ldw	r5,12(r2)
1000ab8c:	98c00117 	ldw	r3,4(r19)
1000ab90:	81400315 	stw	r5,12(r16)
1000ab94:	80800215 	stw	r2,8(r16)
1000ab98:	2c000215 	stw	r16,8(r5)
1000ab9c:	14000315 	stw	r16,12(r2)
1000aba0:	003ef806 	br	1000a784 <__alt_data_end+0xf800a784>
1000aba4:	88c00054 	ori	r3,r17,1
1000aba8:	80c00115 	stw	r3,4(r16)
1000abac:	8463883a 	add	r17,r16,r17
1000abb0:	34400515 	stw	r17,20(r6)
1000abb4:	34400415 	stw	r17,16(r6)
1000abb8:	10c00054 	ori	r3,r2,1
1000abbc:	8a000315 	stw	r8,12(r17)
1000abc0:	8a000215 	stw	r8,8(r17)
1000abc4:	88c00115 	stw	r3,4(r17)
1000abc8:	88a3883a 	add	r17,r17,r2
1000abcc:	88800015 	stw	r2,0(r17)
1000abd0:	9009883a 	mov	r4,r18
1000abd4:	0011aac0 	call	10011aac <__malloc_unlock>
1000abd8:	80800204 	addi	r2,r16,8
1000abdc:	003f3c06 	br	1000a8d0 <__alt_data_end+0xf800a8d0>
1000abe0:	30c00117 	ldw	r3,4(r6)
1000abe4:	003ee706 	br	1000a784 <__alt_data_end+0xf800a784>
1000abe8:	5ac00044 	addi	r11,r11,1
1000abec:	588000cc 	andi	r2,r11,3
1000abf0:	31800204 	addi	r6,r6,8
1000abf4:	103efd1e 	bne	r2,zero,1000a7ec <__alt_data_end+0xf800a7ec>
1000abf8:	00002406 	br	1000ac8c <_malloc_r+0x660>
1000abfc:	14000317 	ldw	r16,12(r2)
1000ac00:	143f251e 	bne	r2,r16,1000a898 <__alt_data_end+0xf800a898>
1000ac04:	21000084 	addi	r4,r4,2
1000ac08:	003ebc06 	br	1000a6fc <__alt_data_end+0xf800a6fc>
1000ac0c:	8085883a 	add	r2,r16,r2
1000ac10:	10c00117 	ldw	r3,4(r2)
1000ac14:	81000317 	ldw	r4,12(r16)
1000ac18:	81400217 	ldw	r5,8(r16)
1000ac1c:	18c00054 	ori	r3,r3,1
1000ac20:	10c00115 	stw	r3,4(r2)
1000ac24:	29000315 	stw	r4,12(r5)
1000ac28:	21400215 	stw	r5,8(r4)
1000ac2c:	9009883a 	mov	r4,r18
1000ac30:	0011aac0 	call	10011aac <__malloc_unlock>
1000ac34:	80800204 	addi	r2,r16,8
1000ac38:	003f2506 	br	1000a8d0 <__alt_data_end+0xf800a8d0>
1000ac3c:	12001704 	addi	r8,r2,92
1000ac40:	11c016c4 	addi	r7,r2,91
1000ac44:	4209883a 	add	r4,r8,r8
1000ac48:	003e9606 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000ac4c:	3804d1ba 	srli	r2,r7,6
1000ac50:	11400e44 	addi	r5,r2,57
1000ac54:	10c00e04 	addi	r3,r2,56
1000ac58:	294b883a 	add	r5,r5,r5
1000ac5c:	003fbc06 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000ac60:	84ff5926 	beq	r16,r19,1000a9c8 <__alt_data_end+0xf800a9c8>
1000ac64:	00840074 	movhi	r2,4097
1000ac68:	10932f04 	addi	r2,r2,19644
1000ac6c:	14000217 	ldw	r16,8(r2)
1000ac70:	00bfff04 	movi	r2,-4
1000ac74:	80c00117 	ldw	r3,4(r16)
1000ac78:	1886703a 	and	r3,r3,r2
1000ac7c:	003f9106 	br	1000aac4 <__alt_data_end+0xf800aac4>
1000ac80:	60800217 	ldw	r2,8(r12)
1000ac84:	213fffc4 	addi	r4,r4,-1
1000ac88:	1300651e 	bne	r2,r12,1000ae20 <_malloc_r+0x7f4>
1000ac8c:	208000cc 	andi	r2,r4,3
1000ac90:	633ffe04 	addi	r12,r12,-8
1000ac94:	103ffa1e 	bne	r2,zero,1000ac80 <__alt_data_end+0xf800ac80>
1000ac98:	98800117 	ldw	r2,4(r19)
1000ac9c:	0146303a 	nor	r3,zero,r5
1000aca0:	1884703a 	and	r2,r3,r2
1000aca4:	98800115 	stw	r2,4(r19)
1000aca8:	294b883a 	add	r5,r5,r5
1000acac:	117f2836 	bltu	r2,r5,1000a950 <__alt_data_end+0xf800a950>
1000acb0:	283f2726 	beq	r5,zero,1000a950 <__alt_data_end+0xf800a950>
1000acb4:	2886703a 	and	r3,r5,r2
1000acb8:	5809883a 	mov	r4,r11
1000acbc:	183ec31e 	bne	r3,zero,1000a7cc <__alt_data_end+0xf800a7cc>
1000acc0:	294b883a 	add	r5,r5,r5
1000acc4:	2886703a 	and	r3,r5,r2
1000acc8:	21000104 	addi	r4,r4,4
1000accc:	183ffc26 	beq	r3,zero,1000acc0 <__alt_data_end+0xf800acc0>
1000acd0:	003ebe06 	br	1000a7cc <__alt_data_end+0xf800a7cc>
1000acd4:	00c05504 	movi	r3,340
1000acd8:	18801236 	bltu	r3,r2,1000ad24 <_malloc_r+0x6f8>
1000acdc:	8804d3fa 	srli	r2,r17,15
1000ace0:	12001e04 	addi	r8,r2,120
1000ace4:	11c01dc4 	addi	r7,r2,119
1000ace8:	4209883a 	add	r4,r8,r8
1000acec:	003e6d06 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000acf0:	00c40004 	movi	r3,4096
1000acf4:	003f4606 	br	1000aa10 <__alt_data_end+0xf800aa10>
1000acf8:	00800044 	movi	r2,1
1000acfc:	a0800115 	stw	r2,4(r20)
1000ad00:	003f7406 	br	1000aad4 <__alt_data_end+0xf800aad4>
1000ad04:	1805d0ba 	srai	r2,r3,2
1000ad08:	01c00044 	movi	r7,1
1000ad0c:	30c00117 	ldw	r3,4(r6)
1000ad10:	388e983a 	sll	r7,r7,r2
1000ad14:	2805883a 	mov	r2,r5
1000ad18:	38c6b03a 	or	r3,r7,r3
1000ad1c:	30c00115 	stw	r3,4(r6)
1000ad20:	003f9b06 	br	1000ab90 <__alt_data_end+0xf800ab90>
1000ad24:	00c15504 	movi	r3,1364
1000ad28:	18801a36 	bltu	r3,r2,1000ad94 <_malloc_r+0x768>
1000ad2c:	8804d4ba 	srli	r2,r17,18
1000ad30:	12001f44 	addi	r8,r2,125
1000ad34:	11c01f04 	addi	r7,r2,124
1000ad38:	4209883a 	add	r4,r8,r8
1000ad3c:	003e5906 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000ad40:	ad400404 	addi	r21,r21,16
1000ad44:	003f1706 	br	1000a9a4 <__alt_data_end+0xf800a9a4>
1000ad48:	00c01504 	movi	r3,84
1000ad4c:	18802336 	bltu	r3,r2,1000addc <_malloc_r+0x7b0>
1000ad50:	3804d33a 	srli	r2,r7,12
1000ad54:	11401bc4 	addi	r5,r2,111
1000ad58:	10c01b84 	addi	r3,r2,110
1000ad5c:	294b883a 	add	r5,r5,r5
1000ad60:	003f7b06 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000ad64:	9c000217 	ldw	r16,8(r19)
1000ad68:	00bfff04 	movi	r2,-4
1000ad6c:	80c00117 	ldw	r3,4(r16)
1000ad70:	1886703a 	and	r3,r3,r2
1000ad74:	003f5306 	br	1000aac4 <__alt_data_end+0xf800aac4>
1000ad78:	3083ffcc 	andi	r2,r6,4095
1000ad7c:	103f181e 	bne	r2,zero,1000a9e0 <__alt_data_end+0xf800a9e0>
1000ad80:	99000217 	ldw	r4,8(r19)
1000ad84:	b545883a 	add	r2,r22,r21
1000ad88:	10800054 	ori	r2,r2,1
1000ad8c:	20800115 	stw	r2,4(r4)
1000ad90:	003f3e06 	br	1000aa8c <__alt_data_end+0xf800aa8c>
1000ad94:	01003f84 	movi	r4,254
1000ad98:	02001fc4 	movi	r8,127
1000ad9c:	01c01f84 	movi	r7,126
1000ada0:	003e4006 	br	1000a6a4 <__alt_data_end+0xf800a6a4>
1000ada4:	00840074 	movhi	r2,4097
1000ada8:	1098b704 	addi	r2,r2,25308
1000adac:	15000015 	stw	r20,0(r2)
1000adb0:	003f1106 	br	1000a9f8 <__alt_data_end+0xf800a9f8>
1000adb4:	00800044 	movi	r2,1
1000adb8:	002b883a 	mov	r21,zero
1000adbc:	003f1f06 	br	1000aa3c <__alt_data_end+0xf800aa3c>
1000adc0:	81400204 	addi	r5,r16,8
1000adc4:	9009883a 	mov	r4,r18
1000adc8:	0009a340 	call	10009a34 <_free_r>
1000adcc:	00840074 	movhi	r2,4097
1000add0:	109f9b04 	addi	r2,r2,32364
1000add4:	10c00017 	ldw	r3,0(r2)
1000add8:	003f2c06 	br	1000aa8c <__alt_data_end+0xf800aa8c>
1000addc:	00c05504 	movi	r3,340
1000ade0:	18800536 	bltu	r3,r2,1000adf8 <_malloc_r+0x7cc>
1000ade4:	3804d3fa 	srli	r2,r7,15
1000ade8:	11401e04 	addi	r5,r2,120
1000adec:	10c01dc4 	addi	r3,r2,119
1000adf0:	294b883a 	add	r5,r5,r5
1000adf4:	003f5606 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000adf8:	00c15504 	movi	r3,1364
1000adfc:	18800536 	bltu	r3,r2,1000ae14 <_malloc_r+0x7e8>
1000ae00:	3804d4ba 	srli	r2,r7,18
1000ae04:	11401f44 	addi	r5,r2,125
1000ae08:	10c01f04 	addi	r3,r2,124
1000ae0c:	294b883a 	add	r5,r5,r5
1000ae10:	003f4f06 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000ae14:	01403f84 	movi	r5,254
1000ae18:	00c01f84 	movi	r3,126
1000ae1c:	003f4c06 	br	1000ab50 <__alt_data_end+0xf800ab50>
1000ae20:	98800117 	ldw	r2,4(r19)
1000ae24:	003fa006 	br	1000aca8 <__alt_data_end+0xf800aca8>
1000ae28:	8808d0fa 	srli	r4,r17,3
1000ae2c:	20800044 	addi	r2,r4,1
1000ae30:	1085883a 	add	r2,r2,r2
1000ae34:	003e9006 	br	1000a878 <__alt_data_end+0xf800a878>

1000ae38 <memchr>:
1000ae38:	208000cc 	andi	r2,r4,3
1000ae3c:	280f883a 	mov	r7,r5
1000ae40:	10003426 	beq	r2,zero,1000af14 <memchr+0xdc>
1000ae44:	30bfffc4 	addi	r2,r6,-1
1000ae48:	30001a26 	beq	r6,zero,1000aeb4 <memchr+0x7c>
1000ae4c:	20c00003 	ldbu	r3,0(r4)
1000ae50:	29803fcc 	andi	r6,r5,255
1000ae54:	30c0051e 	bne	r6,r3,1000ae6c <memchr+0x34>
1000ae58:	00001806 	br	1000aebc <memchr+0x84>
1000ae5c:	10001526 	beq	r2,zero,1000aeb4 <memchr+0x7c>
1000ae60:	20c00003 	ldbu	r3,0(r4)
1000ae64:	10bfffc4 	addi	r2,r2,-1
1000ae68:	30c01426 	beq	r6,r3,1000aebc <memchr+0x84>
1000ae6c:	21000044 	addi	r4,r4,1
1000ae70:	20c000cc 	andi	r3,r4,3
1000ae74:	183ff91e 	bne	r3,zero,1000ae5c <__alt_data_end+0xf800ae5c>
1000ae78:	020000c4 	movi	r8,3
1000ae7c:	40801136 	bltu	r8,r2,1000aec4 <memchr+0x8c>
1000ae80:	10000c26 	beq	r2,zero,1000aeb4 <memchr+0x7c>
1000ae84:	20c00003 	ldbu	r3,0(r4)
1000ae88:	29403fcc 	andi	r5,r5,255
1000ae8c:	28c00b26 	beq	r5,r3,1000aebc <memchr+0x84>
1000ae90:	20c00044 	addi	r3,r4,1
1000ae94:	39803fcc 	andi	r6,r7,255
1000ae98:	2089883a 	add	r4,r4,r2
1000ae9c:	00000306 	br	1000aeac <memchr+0x74>
1000aea0:	18c00044 	addi	r3,r3,1
1000aea4:	197fffc3 	ldbu	r5,-1(r3)
1000aea8:	31400526 	beq	r6,r5,1000aec0 <memchr+0x88>
1000aeac:	1805883a 	mov	r2,r3
1000aeb0:	20fffb1e 	bne	r4,r3,1000aea0 <__alt_data_end+0xf800aea0>
1000aeb4:	0005883a 	mov	r2,zero
1000aeb8:	f800283a 	ret
1000aebc:	2005883a 	mov	r2,r4
1000aec0:	f800283a 	ret
1000aec4:	28c03fcc 	andi	r3,r5,255
1000aec8:	1812923a 	slli	r9,r3,8
1000aecc:	02ffbff4 	movhi	r11,65279
1000aed0:	02a02074 	movhi	r10,32897
1000aed4:	48d2b03a 	or	r9,r9,r3
1000aed8:	4806943a 	slli	r3,r9,16
1000aedc:	5affbfc4 	addi	r11,r11,-257
1000aee0:	52a02004 	addi	r10,r10,-32640
1000aee4:	48d2b03a 	or	r9,r9,r3
1000aee8:	20c00017 	ldw	r3,0(r4)
1000aeec:	48c6f03a 	xor	r3,r9,r3
1000aef0:	1acd883a 	add	r6,r3,r11
1000aef4:	00c6303a 	nor	r3,zero,r3
1000aef8:	30c6703a 	and	r3,r6,r3
1000aefc:	1a86703a 	and	r3,r3,r10
1000af00:	183fe01e 	bne	r3,zero,1000ae84 <__alt_data_end+0xf800ae84>
1000af04:	10bfff04 	addi	r2,r2,-4
1000af08:	21000104 	addi	r4,r4,4
1000af0c:	40bff636 	bltu	r8,r2,1000aee8 <__alt_data_end+0xf800aee8>
1000af10:	003fdb06 	br	1000ae80 <__alt_data_end+0xf800ae80>
1000af14:	3005883a 	mov	r2,r6
1000af18:	003fd706 	br	1000ae78 <__alt_data_end+0xf800ae78>

1000af1c <memcpy>:
1000af1c:	defffd04 	addi	sp,sp,-12
1000af20:	dfc00215 	stw	ra,8(sp)
1000af24:	dc400115 	stw	r17,4(sp)
1000af28:	dc000015 	stw	r16,0(sp)
1000af2c:	00c003c4 	movi	r3,15
1000af30:	2005883a 	mov	r2,r4
1000af34:	1980452e 	bgeu	r3,r6,1000b04c <memcpy+0x130>
1000af38:	2906b03a 	or	r3,r5,r4
1000af3c:	18c000cc 	andi	r3,r3,3
1000af40:	1800441e 	bne	r3,zero,1000b054 <memcpy+0x138>
1000af44:	347ffc04 	addi	r17,r6,-16
1000af48:	8822d13a 	srli	r17,r17,4
1000af4c:	28c00104 	addi	r3,r5,4
1000af50:	23400104 	addi	r13,r4,4
1000af54:	8820913a 	slli	r16,r17,4
1000af58:	2b000204 	addi	r12,r5,8
1000af5c:	22c00204 	addi	r11,r4,8
1000af60:	84000504 	addi	r16,r16,20
1000af64:	2a800304 	addi	r10,r5,12
1000af68:	22400304 	addi	r9,r4,12
1000af6c:	2c21883a 	add	r16,r5,r16
1000af70:	2811883a 	mov	r8,r5
1000af74:	200f883a 	mov	r7,r4
1000af78:	41000017 	ldw	r4,0(r8)
1000af7c:	1fc00017 	ldw	ra,0(r3)
1000af80:	63c00017 	ldw	r15,0(r12)
1000af84:	39000015 	stw	r4,0(r7)
1000af88:	53800017 	ldw	r14,0(r10)
1000af8c:	6fc00015 	stw	ra,0(r13)
1000af90:	5bc00015 	stw	r15,0(r11)
1000af94:	4b800015 	stw	r14,0(r9)
1000af98:	18c00404 	addi	r3,r3,16
1000af9c:	39c00404 	addi	r7,r7,16
1000afa0:	42000404 	addi	r8,r8,16
1000afa4:	6b400404 	addi	r13,r13,16
1000afa8:	63000404 	addi	r12,r12,16
1000afac:	5ac00404 	addi	r11,r11,16
1000afb0:	52800404 	addi	r10,r10,16
1000afb4:	4a400404 	addi	r9,r9,16
1000afb8:	1c3fef1e 	bne	r3,r16,1000af78 <__alt_data_end+0xf800af78>
1000afbc:	89c00044 	addi	r7,r17,1
1000afc0:	380e913a 	slli	r7,r7,4
1000afc4:	310003cc 	andi	r4,r6,15
1000afc8:	02c000c4 	movi	r11,3
1000afcc:	11c7883a 	add	r3,r2,r7
1000afd0:	29cb883a 	add	r5,r5,r7
1000afd4:	5900212e 	bgeu	r11,r4,1000b05c <memcpy+0x140>
1000afd8:	1813883a 	mov	r9,r3
1000afdc:	2811883a 	mov	r8,r5
1000afe0:	200f883a 	mov	r7,r4
1000afe4:	42800017 	ldw	r10,0(r8)
1000afe8:	4a400104 	addi	r9,r9,4
1000afec:	39ffff04 	addi	r7,r7,-4
1000aff0:	4abfff15 	stw	r10,-4(r9)
1000aff4:	42000104 	addi	r8,r8,4
1000aff8:	59fffa36 	bltu	r11,r7,1000afe4 <__alt_data_end+0xf800afe4>
1000affc:	213fff04 	addi	r4,r4,-4
1000b000:	2008d0ba 	srli	r4,r4,2
1000b004:	318000cc 	andi	r6,r6,3
1000b008:	21000044 	addi	r4,r4,1
1000b00c:	2109883a 	add	r4,r4,r4
1000b010:	2109883a 	add	r4,r4,r4
1000b014:	1907883a 	add	r3,r3,r4
1000b018:	290b883a 	add	r5,r5,r4
1000b01c:	30000626 	beq	r6,zero,1000b038 <memcpy+0x11c>
1000b020:	198d883a 	add	r6,r3,r6
1000b024:	29c00003 	ldbu	r7,0(r5)
1000b028:	18c00044 	addi	r3,r3,1
1000b02c:	29400044 	addi	r5,r5,1
1000b030:	19ffffc5 	stb	r7,-1(r3)
1000b034:	19bffb1e 	bne	r3,r6,1000b024 <__alt_data_end+0xf800b024>
1000b038:	dfc00217 	ldw	ra,8(sp)
1000b03c:	dc400117 	ldw	r17,4(sp)
1000b040:	dc000017 	ldw	r16,0(sp)
1000b044:	dec00304 	addi	sp,sp,12
1000b048:	f800283a 	ret
1000b04c:	2007883a 	mov	r3,r4
1000b050:	003ff206 	br	1000b01c <__alt_data_end+0xf800b01c>
1000b054:	2007883a 	mov	r3,r4
1000b058:	003ff106 	br	1000b020 <__alt_data_end+0xf800b020>
1000b05c:	200d883a 	mov	r6,r4
1000b060:	003fee06 	br	1000b01c <__alt_data_end+0xf800b01c>

1000b064 <memmove>:
1000b064:	2005883a 	mov	r2,r4
1000b068:	29000b2e 	bgeu	r5,r4,1000b098 <memmove+0x34>
1000b06c:	298f883a 	add	r7,r5,r6
1000b070:	21c0092e 	bgeu	r4,r7,1000b098 <memmove+0x34>
1000b074:	2187883a 	add	r3,r4,r6
1000b078:	198bc83a 	sub	r5,r3,r6
1000b07c:	30004826 	beq	r6,zero,1000b1a0 <memmove+0x13c>
1000b080:	39ffffc4 	addi	r7,r7,-1
1000b084:	39000003 	ldbu	r4,0(r7)
1000b088:	18ffffc4 	addi	r3,r3,-1
1000b08c:	19000005 	stb	r4,0(r3)
1000b090:	28fffb1e 	bne	r5,r3,1000b080 <__alt_data_end+0xf800b080>
1000b094:	f800283a 	ret
1000b098:	00c003c4 	movi	r3,15
1000b09c:	1980412e 	bgeu	r3,r6,1000b1a4 <memmove+0x140>
1000b0a0:	2886b03a 	or	r3,r5,r2
1000b0a4:	18c000cc 	andi	r3,r3,3
1000b0a8:	1800401e 	bne	r3,zero,1000b1ac <memmove+0x148>
1000b0ac:	33fffc04 	addi	r15,r6,-16
1000b0b0:	781ed13a 	srli	r15,r15,4
1000b0b4:	28c00104 	addi	r3,r5,4
1000b0b8:	13400104 	addi	r13,r2,4
1000b0bc:	781c913a 	slli	r14,r15,4
1000b0c0:	2b000204 	addi	r12,r5,8
1000b0c4:	12c00204 	addi	r11,r2,8
1000b0c8:	73800504 	addi	r14,r14,20
1000b0cc:	2a800304 	addi	r10,r5,12
1000b0d0:	12400304 	addi	r9,r2,12
1000b0d4:	2b9d883a 	add	r14,r5,r14
1000b0d8:	2811883a 	mov	r8,r5
1000b0dc:	100f883a 	mov	r7,r2
1000b0e0:	41000017 	ldw	r4,0(r8)
1000b0e4:	39c00404 	addi	r7,r7,16
1000b0e8:	18c00404 	addi	r3,r3,16
1000b0ec:	393ffc15 	stw	r4,-16(r7)
1000b0f0:	193ffc17 	ldw	r4,-16(r3)
1000b0f4:	6b400404 	addi	r13,r13,16
1000b0f8:	5ac00404 	addi	r11,r11,16
1000b0fc:	693ffc15 	stw	r4,-16(r13)
1000b100:	61000017 	ldw	r4,0(r12)
1000b104:	4a400404 	addi	r9,r9,16
1000b108:	42000404 	addi	r8,r8,16
1000b10c:	593ffc15 	stw	r4,-16(r11)
1000b110:	51000017 	ldw	r4,0(r10)
1000b114:	63000404 	addi	r12,r12,16
1000b118:	52800404 	addi	r10,r10,16
1000b11c:	493ffc15 	stw	r4,-16(r9)
1000b120:	1bbfef1e 	bne	r3,r14,1000b0e0 <__alt_data_end+0xf800b0e0>
1000b124:	79000044 	addi	r4,r15,1
1000b128:	2008913a 	slli	r4,r4,4
1000b12c:	328003cc 	andi	r10,r6,15
1000b130:	02c000c4 	movi	r11,3
1000b134:	1107883a 	add	r3,r2,r4
1000b138:	290b883a 	add	r5,r5,r4
1000b13c:	5a801e2e 	bgeu	r11,r10,1000b1b8 <memmove+0x154>
1000b140:	1813883a 	mov	r9,r3
1000b144:	2811883a 	mov	r8,r5
1000b148:	500f883a 	mov	r7,r10
1000b14c:	41000017 	ldw	r4,0(r8)
1000b150:	4a400104 	addi	r9,r9,4
1000b154:	39ffff04 	addi	r7,r7,-4
1000b158:	493fff15 	stw	r4,-4(r9)
1000b15c:	42000104 	addi	r8,r8,4
1000b160:	59fffa36 	bltu	r11,r7,1000b14c <__alt_data_end+0xf800b14c>
1000b164:	513fff04 	addi	r4,r10,-4
1000b168:	2008d0ba 	srli	r4,r4,2
1000b16c:	318000cc 	andi	r6,r6,3
1000b170:	21000044 	addi	r4,r4,1
1000b174:	2109883a 	add	r4,r4,r4
1000b178:	2109883a 	add	r4,r4,r4
1000b17c:	1907883a 	add	r3,r3,r4
1000b180:	290b883a 	add	r5,r5,r4
1000b184:	30000b26 	beq	r6,zero,1000b1b4 <memmove+0x150>
1000b188:	198d883a 	add	r6,r3,r6
1000b18c:	29c00003 	ldbu	r7,0(r5)
1000b190:	18c00044 	addi	r3,r3,1
1000b194:	29400044 	addi	r5,r5,1
1000b198:	19ffffc5 	stb	r7,-1(r3)
1000b19c:	19bffb1e 	bne	r3,r6,1000b18c <__alt_data_end+0xf800b18c>
1000b1a0:	f800283a 	ret
1000b1a4:	1007883a 	mov	r3,r2
1000b1a8:	003ff606 	br	1000b184 <__alt_data_end+0xf800b184>
1000b1ac:	1007883a 	mov	r3,r2
1000b1b0:	003ff506 	br	1000b188 <__alt_data_end+0xf800b188>
1000b1b4:	f800283a 	ret
1000b1b8:	500d883a 	mov	r6,r10
1000b1bc:	003ff106 	br	1000b184 <__alt_data_end+0xf800b184>

1000b1c0 <memset>:
1000b1c0:	20c000cc 	andi	r3,r4,3
1000b1c4:	2005883a 	mov	r2,r4
1000b1c8:	18004426 	beq	r3,zero,1000b2dc <memset+0x11c>
1000b1cc:	31ffffc4 	addi	r7,r6,-1
1000b1d0:	30004026 	beq	r6,zero,1000b2d4 <memset+0x114>
1000b1d4:	2813883a 	mov	r9,r5
1000b1d8:	200d883a 	mov	r6,r4
1000b1dc:	2007883a 	mov	r3,r4
1000b1e0:	00000406 	br	1000b1f4 <memset+0x34>
1000b1e4:	3a3fffc4 	addi	r8,r7,-1
1000b1e8:	31800044 	addi	r6,r6,1
1000b1ec:	38003926 	beq	r7,zero,1000b2d4 <memset+0x114>
1000b1f0:	400f883a 	mov	r7,r8
1000b1f4:	18c00044 	addi	r3,r3,1
1000b1f8:	32400005 	stb	r9,0(r6)
1000b1fc:	1a0000cc 	andi	r8,r3,3
1000b200:	403ff81e 	bne	r8,zero,1000b1e4 <__alt_data_end+0xf800b1e4>
1000b204:	010000c4 	movi	r4,3
1000b208:	21c02d2e 	bgeu	r4,r7,1000b2c0 <memset+0x100>
1000b20c:	29003fcc 	andi	r4,r5,255
1000b210:	200c923a 	slli	r6,r4,8
1000b214:	3108b03a 	or	r4,r6,r4
1000b218:	200c943a 	slli	r6,r4,16
1000b21c:	218cb03a 	or	r6,r4,r6
1000b220:	010003c4 	movi	r4,15
1000b224:	21c0182e 	bgeu	r4,r7,1000b288 <memset+0xc8>
1000b228:	3b3ffc04 	addi	r12,r7,-16
1000b22c:	6018d13a 	srli	r12,r12,4
1000b230:	1a000104 	addi	r8,r3,4
1000b234:	1ac00204 	addi	r11,r3,8
1000b238:	6008913a 	slli	r4,r12,4
1000b23c:	1a800304 	addi	r10,r3,12
1000b240:	1813883a 	mov	r9,r3
1000b244:	21000504 	addi	r4,r4,20
1000b248:	1909883a 	add	r4,r3,r4
1000b24c:	49800015 	stw	r6,0(r9)
1000b250:	41800015 	stw	r6,0(r8)
1000b254:	59800015 	stw	r6,0(r11)
1000b258:	51800015 	stw	r6,0(r10)
1000b25c:	42000404 	addi	r8,r8,16
1000b260:	4a400404 	addi	r9,r9,16
1000b264:	5ac00404 	addi	r11,r11,16
1000b268:	52800404 	addi	r10,r10,16
1000b26c:	413ff71e 	bne	r8,r4,1000b24c <__alt_data_end+0xf800b24c>
1000b270:	63000044 	addi	r12,r12,1
1000b274:	6018913a 	slli	r12,r12,4
1000b278:	39c003cc 	andi	r7,r7,15
1000b27c:	010000c4 	movi	r4,3
1000b280:	1b07883a 	add	r3,r3,r12
1000b284:	21c00e2e 	bgeu	r4,r7,1000b2c0 <memset+0x100>
1000b288:	1813883a 	mov	r9,r3
1000b28c:	3811883a 	mov	r8,r7
1000b290:	010000c4 	movi	r4,3
1000b294:	49800015 	stw	r6,0(r9)
1000b298:	423fff04 	addi	r8,r8,-4
1000b29c:	4a400104 	addi	r9,r9,4
1000b2a0:	223ffc36 	bltu	r4,r8,1000b294 <__alt_data_end+0xf800b294>
1000b2a4:	393fff04 	addi	r4,r7,-4
1000b2a8:	2008d0ba 	srli	r4,r4,2
1000b2ac:	39c000cc 	andi	r7,r7,3
1000b2b0:	21000044 	addi	r4,r4,1
1000b2b4:	2109883a 	add	r4,r4,r4
1000b2b8:	2109883a 	add	r4,r4,r4
1000b2bc:	1907883a 	add	r3,r3,r4
1000b2c0:	38000526 	beq	r7,zero,1000b2d8 <memset+0x118>
1000b2c4:	19cf883a 	add	r7,r3,r7
1000b2c8:	19400005 	stb	r5,0(r3)
1000b2cc:	18c00044 	addi	r3,r3,1
1000b2d0:	38fffd1e 	bne	r7,r3,1000b2c8 <__alt_data_end+0xf800b2c8>
1000b2d4:	f800283a 	ret
1000b2d8:	f800283a 	ret
1000b2dc:	2007883a 	mov	r3,r4
1000b2e0:	300f883a 	mov	r7,r6
1000b2e4:	003fc706 	br	1000b204 <__alt_data_end+0xf800b204>

1000b2e8 <_Balloc>:
1000b2e8:	20801317 	ldw	r2,76(r4)
1000b2ec:	defffc04 	addi	sp,sp,-16
1000b2f0:	dc400115 	stw	r17,4(sp)
1000b2f4:	dc000015 	stw	r16,0(sp)
1000b2f8:	dfc00315 	stw	ra,12(sp)
1000b2fc:	dc800215 	stw	r18,8(sp)
1000b300:	2023883a 	mov	r17,r4
1000b304:	2821883a 	mov	r16,r5
1000b308:	10000f26 	beq	r2,zero,1000b348 <_Balloc+0x60>
1000b30c:	8407883a 	add	r3,r16,r16
1000b310:	18c7883a 	add	r3,r3,r3
1000b314:	10c7883a 	add	r3,r2,r3
1000b318:	18800017 	ldw	r2,0(r3)
1000b31c:	10001126 	beq	r2,zero,1000b364 <_Balloc+0x7c>
1000b320:	11000017 	ldw	r4,0(r2)
1000b324:	19000015 	stw	r4,0(r3)
1000b328:	10000415 	stw	zero,16(r2)
1000b32c:	10000315 	stw	zero,12(r2)
1000b330:	dfc00317 	ldw	ra,12(sp)
1000b334:	dc800217 	ldw	r18,8(sp)
1000b338:	dc400117 	ldw	r17,4(sp)
1000b33c:	dc000017 	ldw	r16,0(sp)
1000b340:	dec00404 	addi	sp,sp,16
1000b344:	f800283a 	ret
1000b348:	01800844 	movi	r6,33
1000b34c:	01400104 	movi	r5,4
1000b350:	000e3900 	call	1000e390 <_calloc_r>
1000b354:	88801315 	stw	r2,76(r17)
1000b358:	103fec1e 	bne	r2,zero,1000b30c <__alt_data_end+0xf800b30c>
1000b35c:	0005883a 	mov	r2,zero
1000b360:	003ff306 	br	1000b330 <__alt_data_end+0xf800b330>
1000b364:	01400044 	movi	r5,1
1000b368:	2c24983a 	sll	r18,r5,r16
1000b36c:	8809883a 	mov	r4,r17
1000b370:	91800144 	addi	r6,r18,5
1000b374:	318d883a 	add	r6,r6,r6
1000b378:	318d883a 	add	r6,r6,r6
1000b37c:	000e3900 	call	1000e390 <_calloc_r>
1000b380:	103ff626 	beq	r2,zero,1000b35c <__alt_data_end+0xf800b35c>
1000b384:	14000115 	stw	r16,4(r2)
1000b388:	14800215 	stw	r18,8(r2)
1000b38c:	003fe606 	br	1000b328 <__alt_data_end+0xf800b328>

1000b390 <_Bfree>:
1000b390:	28000826 	beq	r5,zero,1000b3b4 <_Bfree+0x24>
1000b394:	28c00117 	ldw	r3,4(r5)
1000b398:	20801317 	ldw	r2,76(r4)
1000b39c:	18c7883a 	add	r3,r3,r3
1000b3a0:	18c7883a 	add	r3,r3,r3
1000b3a4:	10c5883a 	add	r2,r2,r3
1000b3a8:	10c00017 	ldw	r3,0(r2)
1000b3ac:	28c00015 	stw	r3,0(r5)
1000b3b0:	11400015 	stw	r5,0(r2)
1000b3b4:	f800283a 	ret

1000b3b8 <__multadd>:
1000b3b8:	defff704 	addi	sp,sp,-36
1000b3bc:	dc800215 	stw	r18,8(sp)
1000b3c0:	2c800417 	ldw	r18,16(r5)
1000b3c4:	dd800615 	stw	r22,24(sp)
1000b3c8:	dd400515 	stw	r21,20(sp)
1000b3cc:	dd000415 	stw	r20,16(sp)
1000b3d0:	dcc00315 	stw	r19,12(sp)
1000b3d4:	dc400115 	stw	r17,4(sp)
1000b3d8:	dc000015 	stw	r16,0(sp)
1000b3dc:	dfc00815 	stw	ra,32(sp)
1000b3e0:	ddc00715 	stw	r23,28(sp)
1000b3e4:	2827883a 	mov	r19,r5
1000b3e8:	2029883a 	mov	r20,r4
1000b3ec:	3023883a 	mov	r17,r6
1000b3f0:	3821883a 	mov	r16,r7
1000b3f4:	2d400504 	addi	r21,r5,20
1000b3f8:	002d883a 	mov	r22,zero
1000b3fc:	adc00017 	ldw	r23,0(r21)
1000b400:	880b883a 	mov	r5,r17
1000b404:	ad400104 	addi	r21,r21,4
1000b408:	b93fffcc 	andi	r4,r23,65535
1000b40c:	00052300 	call	10005230 <__mulsi3>
1000b410:	b808d43a 	srli	r4,r23,16
1000b414:	880b883a 	mov	r5,r17
1000b418:	1421883a 	add	r16,r2,r16
1000b41c:	00052300 	call	10005230 <__mulsi3>
1000b420:	800ed43a 	srli	r7,r16,16
1000b424:	80ffffcc 	andi	r3,r16,65535
1000b428:	b5800044 	addi	r22,r22,1
1000b42c:	11c5883a 	add	r2,r2,r7
1000b430:	100e943a 	slli	r7,r2,16
1000b434:	1020d43a 	srli	r16,r2,16
1000b438:	38c7883a 	add	r3,r7,r3
1000b43c:	a8ffff15 	stw	r3,-4(r21)
1000b440:	b4bfee16 	blt	r22,r18,1000b3fc <__alt_data_end+0xf800b3fc>
1000b444:	80000926 	beq	r16,zero,1000b46c <__multadd+0xb4>
1000b448:	98800217 	ldw	r2,8(r19)
1000b44c:	9080130e 	bge	r18,r2,1000b49c <__multadd+0xe4>
1000b450:	90800144 	addi	r2,r18,5
1000b454:	1085883a 	add	r2,r2,r2
1000b458:	1085883a 	add	r2,r2,r2
1000b45c:	9885883a 	add	r2,r19,r2
1000b460:	14000015 	stw	r16,0(r2)
1000b464:	94800044 	addi	r18,r18,1
1000b468:	9c800415 	stw	r18,16(r19)
1000b46c:	9805883a 	mov	r2,r19
1000b470:	dfc00817 	ldw	ra,32(sp)
1000b474:	ddc00717 	ldw	r23,28(sp)
1000b478:	dd800617 	ldw	r22,24(sp)
1000b47c:	dd400517 	ldw	r21,20(sp)
1000b480:	dd000417 	ldw	r20,16(sp)
1000b484:	dcc00317 	ldw	r19,12(sp)
1000b488:	dc800217 	ldw	r18,8(sp)
1000b48c:	dc400117 	ldw	r17,4(sp)
1000b490:	dc000017 	ldw	r16,0(sp)
1000b494:	dec00904 	addi	sp,sp,36
1000b498:	f800283a 	ret
1000b49c:	99400117 	ldw	r5,4(r19)
1000b4a0:	a009883a 	mov	r4,r20
1000b4a4:	29400044 	addi	r5,r5,1
1000b4a8:	000b2e80 	call	1000b2e8 <_Balloc>
1000b4ac:	99800417 	ldw	r6,16(r19)
1000b4b0:	99400304 	addi	r5,r19,12
1000b4b4:	11000304 	addi	r4,r2,12
1000b4b8:	31800084 	addi	r6,r6,2
1000b4bc:	318d883a 	add	r6,r6,r6
1000b4c0:	318d883a 	add	r6,r6,r6
1000b4c4:	1023883a 	mov	r17,r2
1000b4c8:	000af1c0 	call	1000af1c <memcpy>
1000b4cc:	98000a26 	beq	r19,zero,1000b4f8 <__multadd+0x140>
1000b4d0:	98c00117 	ldw	r3,4(r19)
1000b4d4:	a0801317 	ldw	r2,76(r20)
1000b4d8:	18c7883a 	add	r3,r3,r3
1000b4dc:	18c7883a 	add	r3,r3,r3
1000b4e0:	10c5883a 	add	r2,r2,r3
1000b4e4:	10c00017 	ldw	r3,0(r2)
1000b4e8:	98c00015 	stw	r3,0(r19)
1000b4ec:	14c00015 	stw	r19,0(r2)
1000b4f0:	8827883a 	mov	r19,r17
1000b4f4:	003fd606 	br	1000b450 <__alt_data_end+0xf800b450>
1000b4f8:	8827883a 	mov	r19,r17
1000b4fc:	003fd406 	br	1000b450 <__alt_data_end+0xf800b450>

1000b500 <__s2b>:
1000b500:	defff904 	addi	sp,sp,-28
1000b504:	dc400115 	stw	r17,4(sp)
1000b508:	dc000015 	stw	r16,0(sp)
1000b50c:	2023883a 	mov	r17,r4
1000b510:	2821883a 	mov	r16,r5
1000b514:	39000204 	addi	r4,r7,8
1000b518:	01400244 	movi	r5,9
1000b51c:	dcc00315 	stw	r19,12(sp)
1000b520:	dc800215 	stw	r18,8(sp)
1000b524:	dfc00615 	stw	ra,24(sp)
1000b528:	dd400515 	stw	r21,20(sp)
1000b52c:	dd000415 	stw	r20,16(sp)
1000b530:	3825883a 	mov	r18,r7
1000b534:	3027883a 	mov	r19,r6
1000b538:	00043d00 	call	100043d0 <__divsi3>
1000b53c:	00c00044 	movi	r3,1
1000b540:	000b883a 	mov	r5,zero
1000b544:	1880030e 	bge	r3,r2,1000b554 <__s2b+0x54>
1000b548:	18c7883a 	add	r3,r3,r3
1000b54c:	29400044 	addi	r5,r5,1
1000b550:	18bffd16 	blt	r3,r2,1000b548 <__alt_data_end+0xf800b548>
1000b554:	8809883a 	mov	r4,r17
1000b558:	000b2e80 	call	1000b2e8 <_Balloc>
1000b55c:	d8c00717 	ldw	r3,28(sp)
1000b560:	10c00515 	stw	r3,20(r2)
1000b564:	00c00044 	movi	r3,1
1000b568:	10c00415 	stw	r3,16(r2)
1000b56c:	00c00244 	movi	r3,9
1000b570:	1cc0210e 	bge	r3,r19,1000b5f8 <__s2b+0xf8>
1000b574:	80eb883a 	add	r21,r16,r3
1000b578:	a829883a 	mov	r20,r21
1000b57c:	84e1883a 	add	r16,r16,r19
1000b580:	a1c00007 	ldb	r7,0(r20)
1000b584:	01800284 	movi	r6,10
1000b588:	a5000044 	addi	r20,r20,1
1000b58c:	100b883a 	mov	r5,r2
1000b590:	39fff404 	addi	r7,r7,-48
1000b594:	8809883a 	mov	r4,r17
1000b598:	000b3b80 	call	1000b3b8 <__multadd>
1000b59c:	a43ff81e 	bne	r20,r16,1000b580 <__alt_data_end+0xf800b580>
1000b5a0:	ace1883a 	add	r16,r21,r19
1000b5a4:	843ffe04 	addi	r16,r16,-8
1000b5a8:	9c800a0e 	bge	r19,r18,1000b5d4 <__s2b+0xd4>
1000b5ac:	94e5c83a 	sub	r18,r18,r19
1000b5b0:	84a5883a 	add	r18,r16,r18
1000b5b4:	81c00007 	ldb	r7,0(r16)
1000b5b8:	01800284 	movi	r6,10
1000b5bc:	84000044 	addi	r16,r16,1
1000b5c0:	100b883a 	mov	r5,r2
1000b5c4:	39fff404 	addi	r7,r7,-48
1000b5c8:	8809883a 	mov	r4,r17
1000b5cc:	000b3b80 	call	1000b3b8 <__multadd>
1000b5d0:	84bff81e 	bne	r16,r18,1000b5b4 <__alt_data_end+0xf800b5b4>
1000b5d4:	dfc00617 	ldw	ra,24(sp)
1000b5d8:	dd400517 	ldw	r21,20(sp)
1000b5dc:	dd000417 	ldw	r20,16(sp)
1000b5e0:	dcc00317 	ldw	r19,12(sp)
1000b5e4:	dc800217 	ldw	r18,8(sp)
1000b5e8:	dc400117 	ldw	r17,4(sp)
1000b5ec:	dc000017 	ldw	r16,0(sp)
1000b5f0:	dec00704 	addi	sp,sp,28
1000b5f4:	f800283a 	ret
1000b5f8:	84000284 	addi	r16,r16,10
1000b5fc:	1827883a 	mov	r19,r3
1000b600:	003fe906 	br	1000b5a8 <__alt_data_end+0xf800b5a8>

1000b604 <__hi0bits>:
1000b604:	20bfffec 	andhi	r2,r4,65535
1000b608:	1000141e 	bne	r2,zero,1000b65c <__hi0bits+0x58>
1000b60c:	2008943a 	slli	r4,r4,16
1000b610:	00800404 	movi	r2,16
1000b614:	20ffc02c 	andhi	r3,r4,65280
1000b618:	1800021e 	bne	r3,zero,1000b624 <__hi0bits+0x20>
1000b61c:	2008923a 	slli	r4,r4,8
1000b620:	10800204 	addi	r2,r2,8
1000b624:	20fc002c 	andhi	r3,r4,61440
1000b628:	1800021e 	bne	r3,zero,1000b634 <__hi0bits+0x30>
1000b62c:	2008913a 	slli	r4,r4,4
1000b630:	10800104 	addi	r2,r2,4
1000b634:	20f0002c 	andhi	r3,r4,49152
1000b638:	1800031e 	bne	r3,zero,1000b648 <__hi0bits+0x44>
1000b63c:	2109883a 	add	r4,r4,r4
1000b640:	10800084 	addi	r2,r2,2
1000b644:	2109883a 	add	r4,r4,r4
1000b648:	20000316 	blt	r4,zero,1000b658 <__hi0bits+0x54>
1000b64c:	2110002c 	andhi	r4,r4,16384
1000b650:	2000041e 	bne	r4,zero,1000b664 <__hi0bits+0x60>
1000b654:	00800804 	movi	r2,32
1000b658:	f800283a 	ret
1000b65c:	0005883a 	mov	r2,zero
1000b660:	003fec06 	br	1000b614 <__alt_data_end+0xf800b614>
1000b664:	10800044 	addi	r2,r2,1
1000b668:	f800283a 	ret

1000b66c <__lo0bits>:
1000b66c:	20c00017 	ldw	r3,0(r4)
1000b670:	188001cc 	andi	r2,r3,7
1000b674:	10000826 	beq	r2,zero,1000b698 <__lo0bits+0x2c>
1000b678:	1880004c 	andi	r2,r3,1
1000b67c:	1000211e 	bne	r2,zero,1000b704 <__lo0bits+0x98>
1000b680:	1880008c 	andi	r2,r3,2
1000b684:	1000211e 	bne	r2,zero,1000b70c <__lo0bits+0xa0>
1000b688:	1806d0ba 	srli	r3,r3,2
1000b68c:	00800084 	movi	r2,2
1000b690:	20c00015 	stw	r3,0(r4)
1000b694:	f800283a 	ret
1000b698:	18bfffcc 	andi	r2,r3,65535
1000b69c:	10001326 	beq	r2,zero,1000b6ec <__lo0bits+0x80>
1000b6a0:	0005883a 	mov	r2,zero
1000b6a4:	19403fcc 	andi	r5,r3,255
1000b6a8:	2800021e 	bne	r5,zero,1000b6b4 <__lo0bits+0x48>
1000b6ac:	1806d23a 	srli	r3,r3,8
1000b6b0:	10800204 	addi	r2,r2,8
1000b6b4:	194003cc 	andi	r5,r3,15
1000b6b8:	2800021e 	bne	r5,zero,1000b6c4 <__lo0bits+0x58>
1000b6bc:	1806d13a 	srli	r3,r3,4
1000b6c0:	10800104 	addi	r2,r2,4
1000b6c4:	194000cc 	andi	r5,r3,3
1000b6c8:	2800021e 	bne	r5,zero,1000b6d4 <__lo0bits+0x68>
1000b6cc:	1806d0ba 	srli	r3,r3,2
1000b6d0:	10800084 	addi	r2,r2,2
1000b6d4:	1940004c 	andi	r5,r3,1
1000b6d8:	2800081e 	bne	r5,zero,1000b6fc <__lo0bits+0x90>
1000b6dc:	1806d07a 	srli	r3,r3,1
1000b6e0:	1800051e 	bne	r3,zero,1000b6f8 <__lo0bits+0x8c>
1000b6e4:	00800804 	movi	r2,32
1000b6e8:	f800283a 	ret
1000b6ec:	1806d43a 	srli	r3,r3,16
1000b6f0:	00800404 	movi	r2,16
1000b6f4:	003feb06 	br	1000b6a4 <__alt_data_end+0xf800b6a4>
1000b6f8:	10800044 	addi	r2,r2,1
1000b6fc:	20c00015 	stw	r3,0(r4)
1000b700:	f800283a 	ret
1000b704:	0005883a 	mov	r2,zero
1000b708:	f800283a 	ret
1000b70c:	1806d07a 	srli	r3,r3,1
1000b710:	00800044 	movi	r2,1
1000b714:	20c00015 	stw	r3,0(r4)
1000b718:	f800283a 	ret

1000b71c <__i2b>:
1000b71c:	defffd04 	addi	sp,sp,-12
1000b720:	dc000015 	stw	r16,0(sp)
1000b724:	04000044 	movi	r16,1
1000b728:	dc400115 	stw	r17,4(sp)
1000b72c:	2823883a 	mov	r17,r5
1000b730:	800b883a 	mov	r5,r16
1000b734:	dfc00215 	stw	ra,8(sp)
1000b738:	000b2e80 	call	1000b2e8 <_Balloc>
1000b73c:	14400515 	stw	r17,20(r2)
1000b740:	14000415 	stw	r16,16(r2)
1000b744:	dfc00217 	ldw	ra,8(sp)
1000b748:	dc400117 	ldw	r17,4(sp)
1000b74c:	dc000017 	ldw	r16,0(sp)
1000b750:	dec00304 	addi	sp,sp,12
1000b754:	f800283a 	ret

1000b758 <__multiply>:
1000b758:	deffef04 	addi	sp,sp,-68
1000b75c:	dc400815 	stw	r17,32(sp)
1000b760:	dc000715 	stw	r16,28(sp)
1000b764:	34400417 	ldw	r17,16(r6)
1000b768:	2c000417 	ldw	r16,16(r5)
1000b76c:	dd800d15 	stw	r22,52(sp)
1000b770:	dc800915 	stw	r18,36(sp)
1000b774:	dfc01015 	stw	ra,64(sp)
1000b778:	df000f15 	stw	fp,60(sp)
1000b77c:	ddc00e15 	stw	r23,56(sp)
1000b780:	dd400c15 	stw	r21,48(sp)
1000b784:	dd000b15 	stw	r20,44(sp)
1000b788:	dcc00a15 	stw	r19,40(sp)
1000b78c:	2825883a 	mov	r18,r5
1000b790:	302d883a 	mov	r22,r6
1000b794:	8440050e 	bge	r16,r17,1000b7ac <__multiply+0x54>
1000b798:	8007883a 	mov	r3,r16
1000b79c:	3025883a 	mov	r18,r6
1000b7a0:	8821883a 	mov	r16,r17
1000b7a4:	282d883a 	mov	r22,r5
1000b7a8:	1823883a 	mov	r17,r3
1000b7ac:	90800217 	ldw	r2,8(r18)
1000b7b0:	8447883a 	add	r3,r16,r17
1000b7b4:	d8c00215 	stw	r3,8(sp)
1000b7b8:	91400117 	ldw	r5,4(r18)
1000b7bc:	10c0010e 	bge	r2,r3,1000b7c4 <__multiply+0x6c>
1000b7c0:	29400044 	addi	r5,r5,1
1000b7c4:	000b2e80 	call	1000b2e8 <_Balloc>
1000b7c8:	d8c00217 	ldw	r3,8(sp)
1000b7cc:	d8800615 	stw	r2,24(sp)
1000b7d0:	18eb883a 	add	r21,r3,r3
1000b7d4:	ad6b883a 	add	r21,r21,r21
1000b7d8:	10c00504 	addi	r3,r2,20
1000b7dc:	1d6b883a 	add	r21,r3,r21
1000b7e0:	d8c00115 	stw	r3,4(sp)
1000b7e4:	dd400315 	stw	r21,12(sp)
1000b7e8:	1805883a 	mov	r2,r3
1000b7ec:	1d40042e 	bgeu	r3,r21,1000b800 <__multiply+0xa8>
1000b7f0:	d8c00317 	ldw	r3,12(sp)
1000b7f4:	10000015 	stw	zero,0(r2)
1000b7f8:	10800104 	addi	r2,r2,4
1000b7fc:	10fffc36 	bltu	r2,r3,1000b7f0 <__alt_data_end+0xf800b7f0>
1000b800:	8c63883a 	add	r17,r17,r17
1000b804:	b5800504 	addi	r22,r22,20
1000b808:	8c63883a 	add	r17,r17,r17
1000b80c:	94800504 	addi	r18,r18,20
1000b810:	8421883a 	add	r16,r16,r16
1000b814:	b463883a 	add	r17,r22,r17
1000b818:	8421883a 	add	r16,r16,r16
1000b81c:	dd800015 	stw	r22,0(sp)
1000b820:	dc800415 	stw	r18,16(sp)
1000b824:	dc400515 	stw	r17,20(sp)
1000b828:	9429883a 	add	r20,r18,r16
1000b82c:	b4404f2e 	bgeu	r22,r17,1000b96c <__multiply+0x214>
1000b830:	d8c00017 	ldw	r3,0(sp)
1000b834:	1c800017 	ldw	r18,0(r3)
1000b838:	947fffcc 	andi	r17,r18,65535
1000b83c:	88001e26 	beq	r17,zero,1000b8b8 <__multiply+0x160>
1000b840:	dd800117 	ldw	r22,4(sp)
1000b844:	dd400417 	ldw	r21,16(sp)
1000b848:	0027883a 	mov	r19,zero
1000b84c:	ac800017 	ldw	r18,0(r21)
1000b850:	b4000017 	ldw	r16,0(r22)
1000b854:	880b883a 	mov	r5,r17
1000b858:	913fffcc 	andi	r4,r18,65535
1000b85c:	00052300 	call	10005230 <__mulsi3>
1000b860:	9008d43a 	srli	r4,r18,16
1000b864:	84bfffcc 	andi	r18,r16,65535
1000b868:	1485883a 	add	r2,r2,r18
1000b86c:	14e5883a 	add	r18,r2,r19
1000b870:	8020d43a 	srli	r16,r16,16
1000b874:	9026d43a 	srli	r19,r18,16
1000b878:	880b883a 	mov	r5,r17
1000b87c:	00052300 	call	10005230 <__mulsi3>
1000b880:	1405883a 	add	r2,r2,r16
1000b884:	14e1883a 	add	r16,r2,r19
1000b888:	90ffffcc 	andi	r3,r18,65535
1000b88c:	8024943a 	slli	r18,r16,16
1000b890:	ad400104 	addi	r21,r21,4
1000b894:	b005883a 	mov	r2,r22
1000b898:	90c6b03a 	or	r3,r18,r3
1000b89c:	b0c00015 	stw	r3,0(r22)
1000b8a0:	8026d43a 	srli	r19,r16,16
1000b8a4:	b5800104 	addi	r22,r22,4
1000b8a8:	ad3fe836 	bltu	r21,r20,1000b84c <__alt_data_end+0xf800b84c>
1000b8ac:	d8c00017 	ldw	r3,0(sp)
1000b8b0:	14c00115 	stw	r19,4(r2)
1000b8b4:	1c800017 	ldw	r18,0(r3)
1000b8b8:	9024d43a 	srli	r18,r18,16
1000b8bc:	90002226 	beq	r18,zero,1000b948 <__multiply+0x1f0>
1000b8c0:	d8c00117 	ldw	r3,4(sp)
1000b8c4:	dd800417 	ldw	r22,16(sp)
1000b8c8:	002f883a 	mov	r23,zero
1000b8cc:	1f000017 	ldw	fp,0(r3)
1000b8d0:	1823883a 	mov	r17,r3
1000b8d4:	182b883a 	mov	r21,r3
1000b8d8:	e021883a 	mov	r16,fp
1000b8dc:	00000106 	br	1000b8e4 <__multiply+0x18c>
1000b8e0:	982b883a 	mov	r21,r19
1000b8e4:	b100000b 	ldhu	r4,0(r22)
1000b8e8:	8020d43a 	srli	r16,r16,16
1000b8ec:	900b883a 	mov	r5,r18
1000b8f0:	00052300 	call	10005230 <__mulsi3>
1000b8f4:	1405883a 	add	r2,r2,r16
1000b8f8:	15ef883a 	add	r23,r2,r23
1000b8fc:	b804943a 	slli	r2,r23,16
1000b900:	e0ffffcc 	andi	r3,fp,65535
1000b904:	8c400104 	addi	r17,r17,4
1000b908:	10c6b03a 	or	r3,r2,r3
1000b90c:	88ffff15 	stw	r3,-4(r17)
1000b910:	b5800104 	addi	r22,r22,4
1000b914:	b13fff17 	ldw	r4,-4(r22)
1000b918:	acc00104 	addi	r19,r21,4
1000b91c:	900b883a 	mov	r5,r18
1000b920:	2008d43a 	srli	r4,r4,16
1000b924:	9c000017 	ldw	r16,0(r19)
1000b928:	00052300 	call	10005230 <__mulsi3>
1000b92c:	b806d43a 	srli	r3,r23,16
1000b930:	813fffcc 	andi	r4,r16,65535
1000b934:	1105883a 	add	r2,r2,r4
1000b938:	10f9883a 	add	fp,r2,r3
1000b93c:	e02ed43a 	srli	r23,fp,16
1000b940:	b53fe736 	bltu	r22,r20,1000b8e0 <__alt_data_end+0xf800b8e0>
1000b944:	af000115 	stw	fp,4(r21)
1000b948:	d8c00017 	ldw	r3,0(sp)
1000b94c:	d9000517 	ldw	r4,20(sp)
1000b950:	18c00104 	addi	r3,r3,4
1000b954:	d8c00015 	stw	r3,0(sp)
1000b958:	d8c00117 	ldw	r3,4(sp)
1000b95c:	18c00104 	addi	r3,r3,4
1000b960:	d8c00115 	stw	r3,4(sp)
1000b964:	d8c00017 	ldw	r3,0(sp)
1000b968:	193fb136 	bltu	r3,r4,1000b830 <__alt_data_end+0xf800b830>
1000b96c:	d8c00217 	ldw	r3,8(sp)
1000b970:	00c00c0e 	bge	zero,r3,1000b9a4 <__multiply+0x24c>
1000b974:	d8c00317 	ldw	r3,12(sp)
1000b978:	18bfff17 	ldw	r2,-4(r3)
1000b97c:	1d7fff04 	addi	r21,r3,-4
1000b980:	10000326 	beq	r2,zero,1000b990 <__multiply+0x238>
1000b984:	00000706 	br	1000b9a4 <__multiply+0x24c>
1000b988:	a8800017 	ldw	r2,0(r21)
1000b98c:	1000051e 	bne	r2,zero,1000b9a4 <__multiply+0x24c>
1000b990:	d8c00217 	ldw	r3,8(sp)
1000b994:	ad7fff04 	addi	r21,r21,-4
1000b998:	18ffffc4 	addi	r3,r3,-1
1000b99c:	d8c00215 	stw	r3,8(sp)
1000b9a0:	183ff91e 	bne	r3,zero,1000b988 <__alt_data_end+0xf800b988>
1000b9a4:	d8c00617 	ldw	r3,24(sp)
1000b9a8:	d9000217 	ldw	r4,8(sp)
1000b9ac:	1805883a 	mov	r2,r3
1000b9b0:	19000415 	stw	r4,16(r3)
1000b9b4:	dfc01017 	ldw	ra,64(sp)
1000b9b8:	df000f17 	ldw	fp,60(sp)
1000b9bc:	ddc00e17 	ldw	r23,56(sp)
1000b9c0:	dd800d17 	ldw	r22,52(sp)
1000b9c4:	dd400c17 	ldw	r21,48(sp)
1000b9c8:	dd000b17 	ldw	r20,44(sp)
1000b9cc:	dcc00a17 	ldw	r19,40(sp)
1000b9d0:	dc800917 	ldw	r18,36(sp)
1000b9d4:	dc400817 	ldw	r17,32(sp)
1000b9d8:	dc000717 	ldw	r16,28(sp)
1000b9dc:	dec01104 	addi	sp,sp,68
1000b9e0:	f800283a 	ret

1000b9e4 <__pow5mult>:
1000b9e4:	defffa04 	addi	sp,sp,-24
1000b9e8:	dcc00315 	stw	r19,12(sp)
1000b9ec:	dc000015 	stw	r16,0(sp)
1000b9f0:	dfc00515 	stw	ra,20(sp)
1000b9f4:	dd000415 	stw	r20,16(sp)
1000b9f8:	dc800215 	stw	r18,8(sp)
1000b9fc:	dc400115 	stw	r17,4(sp)
1000ba00:	308000cc 	andi	r2,r6,3
1000ba04:	3021883a 	mov	r16,r6
1000ba08:	2027883a 	mov	r19,r4
1000ba0c:	10002f1e 	bne	r2,zero,1000bacc <__pow5mult+0xe8>
1000ba10:	2825883a 	mov	r18,r5
1000ba14:	8021d0ba 	srai	r16,r16,2
1000ba18:	80001a26 	beq	r16,zero,1000ba84 <__pow5mult+0xa0>
1000ba1c:	9c401217 	ldw	r17,72(r19)
1000ba20:	8800061e 	bne	r17,zero,1000ba3c <__pow5mult+0x58>
1000ba24:	00003406 	br	1000baf8 <__pow5mult+0x114>
1000ba28:	8021d07a 	srai	r16,r16,1
1000ba2c:	80001526 	beq	r16,zero,1000ba84 <__pow5mult+0xa0>
1000ba30:	88800017 	ldw	r2,0(r17)
1000ba34:	10001c26 	beq	r2,zero,1000baa8 <__pow5mult+0xc4>
1000ba38:	1023883a 	mov	r17,r2
1000ba3c:	8080004c 	andi	r2,r16,1
1000ba40:	103ff926 	beq	r2,zero,1000ba28 <__alt_data_end+0xf800ba28>
1000ba44:	880d883a 	mov	r6,r17
1000ba48:	900b883a 	mov	r5,r18
1000ba4c:	9809883a 	mov	r4,r19
1000ba50:	000b7580 	call	1000b758 <__multiply>
1000ba54:	90001b26 	beq	r18,zero,1000bac4 <__pow5mult+0xe0>
1000ba58:	91000117 	ldw	r4,4(r18)
1000ba5c:	98c01317 	ldw	r3,76(r19)
1000ba60:	8021d07a 	srai	r16,r16,1
1000ba64:	2109883a 	add	r4,r4,r4
1000ba68:	2109883a 	add	r4,r4,r4
1000ba6c:	1907883a 	add	r3,r3,r4
1000ba70:	19000017 	ldw	r4,0(r3)
1000ba74:	91000015 	stw	r4,0(r18)
1000ba78:	1c800015 	stw	r18,0(r3)
1000ba7c:	1025883a 	mov	r18,r2
1000ba80:	803feb1e 	bne	r16,zero,1000ba30 <__alt_data_end+0xf800ba30>
1000ba84:	9005883a 	mov	r2,r18
1000ba88:	dfc00517 	ldw	ra,20(sp)
1000ba8c:	dd000417 	ldw	r20,16(sp)
1000ba90:	dcc00317 	ldw	r19,12(sp)
1000ba94:	dc800217 	ldw	r18,8(sp)
1000ba98:	dc400117 	ldw	r17,4(sp)
1000ba9c:	dc000017 	ldw	r16,0(sp)
1000baa0:	dec00604 	addi	sp,sp,24
1000baa4:	f800283a 	ret
1000baa8:	880d883a 	mov	r6,r17
1000baac:	880b883a 	mov	r5,r17
1000bab0:	9809883a 	mov	r4,r19
1000bab4:	000b7580 	call	1000b758 <__multiply>
1000bab8:	88800015 	stw	r2,0(r17)
1000babc:	10000015 	stw	zero,0(r2)
1000bac0:	003fdd06 	br	1000ba38 <__alt_data_end+0xf800ba38>
1000bac4:	1025883a 	mov	r18,r2
1000bac8:	003fd706 	br	1000ba28 <__alt_data_end+0xf800ba28>
1000bacc:	10bfffc4 	addi	r2,r2,-1
1000bad0:	1085883a 	add	r2,r2,r2
1000bad4:	00c40074 	movhi	r3,4097
1000bad8:	18d1aa04 	addi	r3,r3,18088
1000badc:	1085883a 	add	r2,r2,r2
1000bae0:	1885883a 	add	r2,r3,r2
1000bae4:	11800017 	ldw	r6,0(r2)
1000bae8:	000f883a 	mov	r7,zero
1000baec:	000b3b80 	call	1000b3b8 <__multadd>
1000baf0:	1025883a 	mov	r18,r2
1000baf4:	003fc706 	br	1000ba14 <__alt_data_end+0xf800ba14>
1000baf8:	05000044 	movi	r20,1
1000bafc:	a00b883a 	mov	r5,r20
1000bb00:	9809883a 	mov	r4,r19
1000bb04:	000b2e80 	call	1000b2e8 <_Balloc>
1000bb08:	1023883a 	mov	r17,r2
1000bb0c:	00809c44 	movi	r2,625
1000bb10:	88800515 	stw	r2,20(r17)
1000bb14:	8d000415 	stw	r20,16(r17)
1000bb18:	9c401215 	stw	r17,72(r19)
1000bb1c:	88000015 	stw	zero,0(r17)
1000bb20:	003fc606 	br	1000ba3c <__alt_data_end+0xf800ba3c>

1000bb24 <__lshift>:
1000bb24:	defff904 	addi	sp,sp,-28
1000bb28:	dd400515 	stw	r21,20(sp)
1000bb2c:	dcc00315 	stw	r19,12(sp)
1000bb30:	302bd17a 	srai	r21,r6,5
1000bb34:	2cc00417 	ldw	r19,16(r5)
1000bb38:	28800217 	ldw	r2,8(r5)
1000bb3c:	dd000415 	stw	r20,16(sp)
1000bb40:	ace7883a 	add	r19,r21,r19
1000bb44:	dc800215 	stw	r18,8(sp)
1000bb48:	dc400115 	stw	r17,4(sp)
1000bb4c:	dc000015 	stw	r16,0(sp)
1000bb50:	dfc00615 	stw	ra,24(sp)
1000bb54:	9c000044 	addi	r16,r19,1
1000bb58:	2823883a 	mov	r17,r5
1000bb5c:	3029883a 	mov	r20,r6
1000bb60:	2025883a 	mov	r18,r4
1000bb64:	29400117 	ldw	r5,4(r5)
1000bb68:	1400030e 	bge	r2,r16,1000bb78 <__lshift+0x54>
1000bb6c:	1085883a 	add	r2,r2,r2
1000bb70:	29400044 	addi	r5,r5,1
1000bb74:	143ffd16 	blt	r2,r16,1000bb6c <__alt_data_end+0xf800bb6c>
1000bb78:	9009883a 	mov	r4,r18
1000bb7c:	000b2e80 	call	1000b2e8 <_Balloc>
1000bb80:	10c00504 	addi	r3,r2,20
1000bb84:	0540070e 	bge	zero,r21,1000bba4 <__lshift+0x80>
1000bb88:	ad6b883a 	add	r21,r21,r21
1000bb8c:	ad6b883a 	add	r21,r21,r21
1000bb90:	1809883a 	mov	r4,r3
1000bb94:	1d47883a 	add	r3,r3,r21
1000bb98:	20000015 	stw	zero,0(r4)
1000bb9c:	21000104 	addi	r4,r4,4
1000bba0:	193ffd1e 	bne	r3,r4,1000bb98 <__alt_data_end+0xf800bb98>
1000bba4:	8a000417 	ldw	r8,16(r17)
1000bba8:	89000504 	addi	r4,r17,20
1000bbac:	a18007cc 	andi	r6,r20,31
1000bbb0:	4211883a 	add	r8,r8,r8
1000bbb4:	4211883a 	add	r8,r8,r8
1000bbb8:	2211883a 	add	r8,r4,r8
1000bbbc:	30002326 	beq	r6,zero,1000bc4c <__lshift+0x128>
1000bbc0:	02400804 	movi	r9,32
1000bbc4:	4993c83a 	sub	r9,r9,r6
1000bbc8:	000b883a 	mov	r5,zero
1000bbcc:	21c00017 	ldw	r7,0(r4)
1000bbd0:	1815883a 	mov	r10,r3
1000bbd4:	18c00104 	addi	r3,r3,4
1000bbd8:	398e983a 	sll	r7,r7,r6
1000bbdc:	21000104 	addi	r4,r4,4
1000bbe0:	394ab03a 	or	r5,r7,r5
1000bbe4:	197fff15 	stw	r5,-4(r3)
1000bbe8:	217fff17 	ldw	r5,-4(r4)
1000bbec:	2a4ad83a 	srl	r5,r5,r9
1000bbf0:	223ff636 	bltu	r4,r8,1000bbcc <__alt_data_end+0xf800bbcc>
1000bbf4:	51400115 	stw	r5,4(r10)
1000bbf8:	28001a1e 	bne	r5,zero,1000bc64 <__lshift+0x140>
1000bbfc:	843fffc4 	addi	r16,r16,-1
1000bc00:	14000415 	stw	r16,16(r2)
1000bc04:	88000826 	beq	r17,zero,1000bc28 <__lshift+0x104>
1000bc08:	89000117 	ldw	r4,4(r17)
1000bc0c:	90c01317 	ldw	r3,76(r18)
1000bc10:	2109883a 	add	r4,r4,r4
1000bc14:	2109883a 	add	r4,r4,r4
1000bc18:	1907883a 	add	r3,r3,r4
1000bc1c:	19000017 	ldw	r4,0(r3)
1000bc20:	89000015 	stw	r4,0(r17)
1000bc24:	1c400015 	stw	r17,0(r3)
1000bc28:	dfc00617 	ldw	ra,24(sp)
1000bc2c:	dd400517 	ldw	r21,20(sp)
1000bc30:	dd000417 	ldw	r20,16(sp)
1000bc34:	dcc00317 	ldw	r19,12(sp)
1000bc38:	dc800217 	ldw	r18,8(sp)
1000bc3c:	dc400117 	ldw	r17,4(sp)
1000bc40:	dc000017 	ldw	r16,0(sp)
1000bc44:	dec00704 	addi	sp,sp,28
1000bc48:	f800283a 	ret
1000bc4c:	21400017 	ldw	r5,0(r4)
1000bc50:	18c00104 	addi	r3,r3,4
1000bc54:	21000104 	addi	r4,r4,4
1000bc58:	197fff15 	stw	r5,-4(r3)
1000bc5c:	223ffb36 	bltu	r4,r8,1000bc4c <__alt_data_end+0xf800bc4c>
1000bc60:	003fe606 	br	1000bbfc <__alt_data_end+0xf800bbfc>
1000bc64:	9c000084 	addi	r16,r19,2
1000bc68:	003fe406 	br	1000bbfc <__alt_data_end+0xf800bbfc>

1000bc6c <__mcmp>:
1000bc6c:	20800417 	ldw	r2,16(r4)
1000bc70:	28c00417 	ldw	r3,16(r5)
1000bc74:	10c5c83a 	sub	r2,r2,r3
1000bc78:	1000111e 	bne	r2,zero,1000bcc0 <__mcmp+0x54>
1000bc7c:	18c7883a 	add	r3,r3,r3
1000bc80:	18c7883a 	add	r3,r3,r3
1000bc84:	21000504 	addi	r4,r4,20
1000bc88:	29400504 	addi	r5,r5,20
1000bc8c:	20c5883a 	add	r2,r4,r3
1000bc90:	28cb883a 	add	r5,r5,r3
1000bc94:	00000106 	br	1000bc9c <__mcmp+0x30>
1000bc98:	20800a2e 	bgeu	r4,r2,1000bcc4 <__mcmp+0x58>
1000bc9c:	10bfff04 	addi	r2,r2,-4
1000bca0:	297fff04 	addi	r5,r5,-4
1000bca4:	11800017 	ldw	r6,0(r2)
1000bca8:	28c00017 	ldw	r3,0(r5)
1000bcac:	30fffa26 	beq	r6,r3,1000bc98 <__alt_data_end+0xf800bc98>
1000bcb0:	30c00236 	bltu	r6,r3,1000bcbc <__mcmp+0x50>
1000bcb4:	00800044 	movi	r2,1
1000bcb8:	f800283a 	ret
1000bcbc:	00bfffc4 	movi	r2,-1
1000bcc0:	f800283a 	ret
1000bcc4:	0005883a 	mov	r2,zero
1000bcc8:	f800283a 	ret

1000bccc <__mdiff>:
1000bccc:	28c00417 	ldw	r3,16(r5)
1000bcd0:	30800417 	ldw	r2,16(r6)
1000bcd4:	defffa04 	addi	sp,sp,-24
1000bcd8:	dcc00315 	stw	r19,12(sp)
1000bcdc:	dc800215 	stw	r18,8(sp)
1000bce0:	dfc00515 	stw	ra,20(sp)
1000bce4:	dd000415 	stw	r20,16(sp)
1000bce8:	dc400115 	stw	r17,4(sp)
1000bcec:	dc000015 	stw	r16,0(sp)
1000bcf0:	1887c83a 	sub	r3,r3,r2
1000bcf4:	2825883a 	mov	r18,r5
1000bcf8:	3027883a 	mov	r19,r6
1000bcfc:	1800141e 	bne	r3,zero,1000bd50 <__mdiff+0x84>
1000bd00:	1085883a 	add	r2,r2,r2
1000bd04:	1085883a 	add	r2,r2,r2
1000bd08:	2a000504 	addi	r8,r5,20
1000bd0c:	34000504 	addi	r16,r6,20
1000bd10:	4087883a 	add	r3,r8,r2
1000bd14:	8085883a 	add	r2,r16,r2
1000bd18:	00000106 	br	1000bd20 <__mdiff+0x54>
1000bd1c:	40c0592e 	bgeu	r8,r3,1000be84 <__mdiff+0x1b8>
1000bd20:	18ffff04 	addi	r3,r3,-4
1000bd24:	10bfff04 	addi	r2,r2,-4
1000bd28:	19c00017 	ldw	r7,0(r3)
1000bd2c:	11400017 	ldw	r5,0(r2)
1000bd30:	397ffa26 	beq	r7,r5,1000bd1c <__alt_data_end+0xf800bd1c>
1000bd34:	3940592e 	bgeu	r7,r5,1000be9c <__mdiff+0x1d0>
1000bd38:	9005883a 	mov	r2,r18
1000bd3c:	4023883a 	mov	r17,r8
1000bd40:	9825883a 	mov	r18,r19
1000bd44:	05000044 	movi	r20,1
1000bd48:	1027883a 	mov	r19,r2
1000bd4c:	00000406 	br	1000bd60 <__mdiff+0x94>
1000bd50:	18005616 	blt	r3,zero,1000beac <__mdiff+0x1e0>
1000bd54:	34400504 	addi	r17,r6,20
1000bd58:	2c000504 	addi	r16,r5,20
1000bd5c:	0029883a 	mov	r20,zero
1000bd60:	91400117 	ldw	r5,4(r18)
1000bd64:	000b2e80 	call	1000b2e8 <_Balloc>
1000bd68:	92400417 	ldw	r9,16(r18)
1000bd6c:	9b000417 	ldw	r12,16(r19)
1000bd70:	12c00504 	addi	r11,r2,20
1000bd74:	4a51883a 	add	r8,r9,r9
1000bd78:	6319883a 	add	r12,r12,r12
1000bd7c:	4211883a 	add	r8,r8,r8
1000bd80:	6319883a 	add	r12,r12,r12
1000bd84:	15000315 	stw	r20,12(r2)
1000bd88:	8211883a 	add	r8,r16,r8
1000bd8c:	8b19883a 	add	r12,r17,r12
1000bd90:	0007883a 	mov	r3,zero
1000bd94:	81400017 	ldw	r5,0(r16)
1000bd98:	89c00017 	ldw	r7,0(r17)
1000bd9c:	59800104 	addi	r6,r11,4
1000bda0:	293fffcc 	andi	r4,r5,65535
1000bda4:	20c7883a 	add	r3,r4,r3
1000bda8:	393fffcc 	andi	r4,r7,65535
1000bdac:	1909c83a 	sub	r4,r3,r4
1000bdb0:	280ad43a 	srli	r5,r5,16
1000bdb4:	380ed43a 	srli	r7,r7,16
1000bdb8:	2007d43a 	srai	r3,r4,16
1000bdbc:	213fffcc 	andi	r4,r4,65535
1000bdc0:	29cbc83a 	sub	r5,r5,r7
1000bdc4:	28c7883a 	add	r3,r5,r3
1000bdc8:	180a943a 	slli	r5,r3,16
1000bdcc:	8c400104 	addi	r17,r17,4
1000bdd0:	84000104 	addi	r16,r16,4
1000bdd4:	2908b03a 	or	r4,r5,r4
1000bdd8:	59000015 	stw	r4,0(r11)
1000bddc:	1807d43a 	srai	r3,r3,16
1000bde0:	3015883a 	mov	r10,r6
1000bde4:	3017883a 	mov	r11,r6
1000bde8:	8b3fea36 	bltu	r17,r12,1000bd94 <__alt_data_end+0xf800bd94>
1000bdec:	8200162e 	bgeu	r16,r8,1000be48 <__mdiff+0x17c>
1000bdf0:	8017883a 	mov	r11,r16
1000bdf4:	59400017 	ldw	r5,0(r11)
1000bdf8:	31800104 	addi	r6,r6,4
1000bdfc:	5ac00104 	addi	r11,r11,4
1000be00:	293fffcc 	andi	r4,r5,65535
1000be04:	20c7883a 	add	r3,r4,r3
1000be08:	280ed43a 	srli	r7,r5,16
1000be0c:	180bd43a 	srai	r5,r3,16
1000be10:	193fffcc 	andi	r4,r3,65535
1000be14:	3947883a 	add	r3,r7,r5
1000be18:	180a943a 	slli	r5,r3,16
1000be1c:	1807d43a 	srai	r3,r3,16
1000be20:	2908b03a 	or	r4,r5,r4
1000be24:	313fff15 	stw	r4,-4(r6)
1000be28:	5a3ff236 	bltu	r11,r8,1000bdf4 <__alt_data_end+0xf800bdf4>
1000be2c:	0406303a 	nor	r3,zero,r16
1000be30:	1a07883a 	add	r3,r3,r8
1000be34:	1806d0ba 	srli	r3,r3,2
1000be38:	18c00044 	addi	r3,r3,1
1000be3c:	18c7883a 	add	r3,r3,r3
1000be40:	18c7883a 	add	r3,r3,r3
1000be44:	50d5883a 	add	r10,r10,r3
1000be48:	50ffff04 	addi	r3,r10,-4
1000be4c:	2000041e 	bne	r4,zero,1000be60 <__mdiff+0x194>
1000be50:	18ffff04 	addi	r3,r3,-4
1000be54:	19000017 	ldw	r4,0(r3)
1000be58:	4a7fffc4 	addi	r9,r9,-1
1000be5c:	203ffc26 	beq	r4,zero,1000be50 <__alt_data_end+0xf800be50>
1000be60:	12400415 	stw	r9,16(r2)
1000be64:	dfc00517 	ldw	ra,20(sp)
1000be68:	dd000417 	ldw	r20,16(sp)
1000be6c:	dcc00317 	ldw	r19,12(sp)
1000be70:	dc800217 	ldw	r18,8(sp)
1000be74:	dc400117 	ldw	r17,4(sp)
1000be78:	dc000017 	ldw	r16,0(sp)
1000be7c:	dec00604 	addi	sp,sp,24
1000be80:	f800283a 	ret
1000be84:	000b883a 	mov	r5,zero
1000be88:	000b2e80 	call	1000b2e8 <_Balloc>
1000be8c:	00c00044 	movi	r3,1
1000be90:	10c00415 	stw	r3,16(r2)
1000be94:	10000515 	stw	zero,20(r2)
1000be98:	003ff206 	br	1000be64 <__alt_data_end+0xf800be64>
1000be9c:	8023883a 	mov	r17,r16
1000bea0:	0029883a 	mov	r20,zero
1000bea4:	4021883a 	mov	r16,r8
1000bea8:	003fad06 	br	1000bd60 <__alt_data_end+0xf800bd60>
1000beac:	9005883a 	mov	r2,r18
1000beb0:	94400504 	addi	r17,r18,20
1000beb4:	9c000504 	addi	r16,r19,20
1000beb8:	9825883a 	mov	r18,r19
1000bebc:	05000044 	movi	r20,1
1000bec0:	1027883a 	mov	r19,r2
1000bec4:	003fa606 	br	1000bd60 <__alt_data_end+0xf800bd60>

1000bec8 <__ulp>:
1000bec8:	295ffc2c 	andhi	r5,r5,32752
1000becc:	00bf3034 	movhi	r2,64704
1000bed0:	2887883a 	add	r3,r5,r2
1000bed4:	00c0020e 	bge	zero,r3,1000bee0 <__ulp+0x18>
1000bed8:	0005883a 	mov	r2,zero
1000bedc:	f800283a 	ret
1000bee0:	00c7c83a 	sub	r3,zero,r3
1000bee4:	1807d53a 	srai	r3,r3,20
1000bee8:	008004c4 	movi	r2,19
1000beec:	10c00b0e 	bge	r2,r3,1000bf1c <__ulp+0x54>
1000bef0:	18bffb04 	addi	r2,r3,-20
1000bef4:	01000784 	movi	r4,30
1000bef8:	0007883a 	mov	r3,zero
1000befc:	20800516 	blt	r4,r2,1000bf14 <__ulp+0x4c>
1000bf00:	010007c4 	movi	r4,31
1000bf04:	2089c83a 	sub	r4,r4,r2
1000bf08:	00800044 	movi	r2,1
1000bf0c:	1104983a 	sll	r2,r2,r4
1000bf10:	f800283a 	ret
1000bf14:	00800044 	movi	r2,1
1000bf18:	f800283a 	ret
1000bf1c:	01400234 	movhi	r5,8
1000bf20:	28c7d83a 	sra	r3,r5,r3
1000bf24:	0005883a 	mov	r2,zero
1000bf28:	f800283a 	ret

1000bf2c <__b2d>:
1000bf2c:	defffa04 	addi	sp,sp,-24
1000bf30:	dc000015 	stw	r16,0(sp)
1000bf34:	24000417 	ldw	r16,16(r4)
1000bf38:	dc400115 	stw	r17,4(sp)
1000bf3c:	24400504 	addi	r17,r4,20
1000bf40:	8421883a 	add	r16,r16,r16
1000bf44:	8421883a 	add	r16,r16,r16
1000bf48:	8c21883a 	add	r16,r17,r16
1000bf4c:	dc800215 	stw	r18,8(sp)
1000bf50:	84bfff17 	ldw	r18,-4(r16)
1000bf54:	dd000415 	stw	r20,16(sp)
1000bf58:	dcc00315 	stw	r19,12(sp)
1000bf5c:	9009883a 	mov	r4,r18
1000bf60:	2829883a 	mov	r20,r5
1000bf64:	dfc00515 	stw	ra,20(sp)
1000bf68:	000b6040 	call	1000b604 <__hi0bits>
1000bf6c:	00c00804 	movi	r3,32
1000bf70:	1889c83a 	sub	r4,r3,r2
1000bf74:	a1000015 	stw	r4,0(r20)
1000bf78:	01000284 	movi	r4,10
1000bf7c:	84ffff04 	addi	r19,r16,-4
1000bf80:	20801216 	blt	r4,r2,1000bfcc <__b2d+0xa0>
1000bf84:	018002c4 	movi	r6,11
1000bf88:	308dc83a 	sub	r6,r6,r2
1000bf8c:	9186d83a 	srl	r3,r18,r6
1000bf90:	18cffc34 	orhi	r3,r3,16368
1000bf94:	8cc0212e 	bgeu	r17,r19,1000c01c <__b2d+0xf0>
1000bf98:	813ffe17 	ldw	r4,-8(r16)
1000bf9c:	218cd83a 	srl	r6,r4,r6
1000bfa0:	10800544 	addi	r2,r2,21
1000bfa4:	9084983a 	sll	r2,r18,r2
1000bfa8:	1184b03a 	or	r2,r2,r6
1000bfac:	dfc00517 	ldw	ra,20(sp)
1000bfb0:	dd000417 	ldw	r20,16(sp)
1000bfb4:	dcc00317 	ldw	r19,12(sp)
1000bfb8:	dc800217 	ldw	r18,8(sp)
1000bfbc:	dc400117 	ldw	r17,4(sp)
1000bfc0:	dc000017 	ldw	r16,0(sp)
1000bfc4:	dec00604 	addi	sp,sp,24
1000bfc8:	f800283a 	ret
1000bfcc:	8cc00f2e 	bgeu	r17,r19,1000c00c <__b2d+0xe0>
1000bfd0:	117ffd44 	addi	r5,r2,-11
1000bfd4:	80bffe17 	ldw	r2,-8(r16)
1000bfd8:	28000e26 	beq	r5,zero,1000c014 <__b2d+0xe8>
1000bfdc:	1949c83a 	sub	r4,r3,r5
1000bfe0:	9164983a 	sll	r18,r18,r5
1000bfe4:	1106d83a 	srl	r3,r2,r4
1000bfe8:	81bffe04 	addi	r6,r16,-8
1000bfec:	948ffc34 	orhi	r18,r18,16368
1000bff0:	90c6b03a 	or	r3,r18,r3
1000bff4:	89800e2e 	bgeu	r17,r6,1000c030 <__b2d+0x104>
1000bff8:	81bffd17 	ldw	r6,-12(r16)
1000bffc:	1144983a 	sll	r2,r2,r5
1000c000:	310ad83a 	srl	r5,r6,r4
1000c004:	2884b03a 	or	r2,r5,r2
1000c008:	003fe806 	br	1000bfac <__alt_data_end+0xf800bfac>
1000c00c:	10bffd44 	addi	r2,r2,-11
1000c010:	1000041e 	bne	r2,zero,1000c024 <__b2d+0xf8>
1000c014:	90cffc34 	orhi	r3,r18,16368
1000c018:	003fe406 	br	1000bfac <__alt_data_end+0xf800bfac>
1000c01c:	000d883a 	mov	r6,zero
1000c020:	003fdf06 	br	1000bfa0 <__alt_data_end+0xf800bfa0>
1000c024:	90a4983a 	sll	r18,r18,r2
1000c028:	0005883a 	mov	r2,zero
1000c02c:	003ff906 	br	1000c014 <__alt_data_end+0xf800c014>
1000c030:	1144983a 	sll	r2,r2,r5
1000c034:	003fdd06 	br	1000bfac <__alt_data_end+0xf800bfac>

1000c038 <__d2b>:
1000c038:	defff804 	addi	sp,sp,-32
1000c03c:	dc000215 	stw	r16,8(sp)
1000c040:	3021883a 	mov	r16,r6
1000c044:	dc400315 	stw	r17,12(sp)
1000c048:	8022907a 	slli	r17,r16,1
1000c04c:	dd000615 	stw	r20,24(sp)
1000c050:	2829883a 	mov	r20,r5
1000c054:	01400044 	movi	r5,1
1000c058:	dcc00515 	stw	r19,20(sp)
1000c05c:	dc800415 	stw	r18,16(sp)
1000c060:	dfc00715 	stw	ra,28(sp)
1000c064:	3825883a 	mov	r18,r7
1000c068:	8822d57a 	srli	r17,r17,21
1000c06c:	000b2e80 	call	1000b2e8 <_Balloc>
1000c070:	1027883a 	mov	r19,r2
1000c074:	00800434 	movhi	r2,16
1000c078:	10bfffc4 	addi	r2,r2,-1
1000c07c:	808c703a 	and	r6,r16,r2
1000c080:	88000126 	beq	r17,zero,1000c088 <__d2b+0x50>
1000c084:	31800434 	orhi	r6,r6,16
1000c088:	d9800015 	stw	r6,0(sp)
1000c08c:	a0002426 	beq	r20,zero,1000c120 <__d2b+0xe8>
1000c090:	d9000104 	addi	r4,sp,4
1000c094:	dd000115 	stw	r20,4(sp)
1000c098:	000b66c0 	call	1000b66c <__lo0bits>
1000c09c:	d8c00017 	ldw	r3,0(sp)
1000c0a0:	10002f1e 	bne	r2,zero,1000c160 <__d2b+0x128>
1000c0a4:	d9000117 	ldw	r4,4(sp)
1000c0a8:	99000515 	stw	r4,20(r19)
1000c0ac:	1821003a 	cmpeq	r16,r3,zero
1000c0b0:	01000084 	movi	r4,2
1000c0b4:	2421c83a 	sub	r16,r4,r16
1000c0b8:	98c00615 	stw	r3,24(r19)
1000c0bc:	9c000415 	stw	r16,16(r19)
1000c0c0:	88001f1e 	bne	r17,zero,1000c140 <__d2b+0x108>
1000c0c4:	10bef384 	addi	r2,r2,-1074
1000c0c8:	90800015 	stw	r2,0(r18)
1000c0cc:	00900034 	movhi	r2,16384
1000c0d0:	10bfffc4 	addi	r2,r2,-1
1000c0d4:	8085883a 	add	r2,r16,r2
1000c0d8:	1085883a 	add	r2,r2,r2
1000c0dc:	1085883a 	add	r2,r2,r2
1000c0e0:	9885883a 	add	r2,r19,r2
1000c0e4:	11000517 	ldw	r4,20(r2)
1000c0e8:	8020917a 	slli	r16,r16,5
1000c0ec:	000b6040 	call	1000b604 <__hi0bits>
1000c0f0:	d8c00817 	ldw	r3,32(sp)
1000c0f4:	8085c83a 	sub	r2,r16,r2
1000c0f8:	18800015 	stw	r2,0(r3)
1000c0fc:	9805883a 	mov	r2,r19
1000c100:	dfc00717 	ldw	ra,28(sp)
1000c104:	dd000617 	ldw	r20,24(sp)
1000c108:	dcc00517 	ldw	r19,20(sp)
1000c10c:	dc800417 	ldw	r18,16(sp)
1000c110:	dc400317 	ldw	r17,12(sp)
1000c114:	dc000217 	ldw	r16,8(sp)
1000c118:	dec00804 	addi	sp,sp,32
1000c11c:	f800283a 	ret
1000c120:	d809883a 	mov	r4,sp
1000c124:	000b66c0 	call	1000b66c <__lo0bits>
1000c128:	d8c00017 	ldw	r3,0(sp)
1000c12c:	04000044 	movi	r16,1
1000c130:	9c000415 	stw	r16,16(r19)
1000c134:	98c00515 	stw	r3,20(r19)
1000c138:	10800804 	addi	r2,r2,32
1000c13c:	883fe126 	beq	r17,zero,1000c0c4 <__alt_data_end+0xf800c0c4>
1000c140:	00c00d44 	movi	r3,53
1000c144:	8c7ef344 	addi	r17,r17,-1075
1000c148:	88a3883a 	add	r17,r17,r2
1000c14c:	1885c83a 	sub	r2,r3,r2
1000c150:	d8c00817 	ldw	r3,32(sp)
1000c154:	94400015 	stw	r17,0(r18)
1000c158:	18800015 	stw	r2,0(r3)
1000c15c:	003fe706 	br	1000c0fc <__alt_data_end+0xf800c0fc>
1000c160:	01000804 	movi	r4,32
1000c164:	2089c83a 	sub	r4,r4,r2
1000c168:	1908983a 	sll	r4,r3,r4
1000c16c:	d9400117 	ldw	r5,4(sp)
1000c170:	1886d83a 	srl	r3,r3,r2
1000c174:	2148b03a 	or	r4,r4,r5
1000c178:	99000515 	stw	r4,20(r19)
1000c17c:	d8c00015 	stw	r3,0(sp)
1000c180:	003fca06 	br	1000c0ac <__alt_data_end+0xf800c0ac>

1000c184 <__ratio>:
1000c184:	defff904 	addi	sp,sp,-28
1000c188:	dc400315 	stw	r17,12(sp)
1000c18c:	2823883a 	mov	r17,r5
1000c190:	d9400104 	addi	r5,sp,4
1000c194:	dfc00615 	stw	ra,24(sp)
1000c198:	dcc00515 	stw	r19,20(sp)
1000c19c:	dc800415 	stw	r18,16(sp)
1000c1a0:	2027883a 	mov	r19,r4
1000c1a4:	dc000215 	stw	r16,8(sp)
1000c1a8:	000bf2c0 	call	1000bf2c <__b2d>
1000c1ac:	d80b883a 	mov	r5,sp
1000c1b0:	8809883a 	mov	r4,r17
1000c1b4:	1025883a 	mov	r18,r2
1000c1b8:	1821883a 	mov	r16,r3
1000c1bc:	000bf2c0 	call	1000bf2c <__b2d>
1000c1c0:	8a000417 	ldw	r8,16(r17)
1000c1c4:	99000417 	ldw	r4,16(r19)
1000c1c8:	d9400117 	ldw	r5,4(sp)
1000c1cc:	2209c83a 	sub	r4,r4,r8
1000c1d0:	2010917a 	slli	r8,r4,5
1000c1d4:	d9000017 	ldw	r4,0(sp)
1000c1d8:	2909c83a 	sub	r4,r5,r4
1000c1dc:	4109883a 	add	r4,r8,r4
1000c1e0:	01000e0e 	bge	zero,r4,1000c21c <__ratio+0x98>
1000c1e4:	2008953a 	slli	r4,r4,20
1000c1e8:	2421883a 	add	r16,r4,r16
1000c1ec:	100d883a 	mov	r6,r2
1000c1f0:	180f883a 	mov	r7,r3
1000c1f4:	9009883a 	mov	r4,r18
1000c1f8:	800b883a 	mov	r5,r16
1000c1fc:	00045840 	call	10004584 <__divdf3>
1000c200:	dfc00617 	ldw	ra,24(sp)
1000c204:	dcc00517 	ldw	r19,20(sp)
1000c208:	dc800417 	ldw	r18,16(sp)
1000c20c:	dc400317 	ldw	r17,12(sp)
1000c210:	dc000217 	ldw	r16,8(sp)
1000c214:	dec00704 	addi	sp,sp,28
1000c218:	f800283a 	ret
1000c21c:	2008953a 	slli	r4,r4,20
1000c220:	1907c83a 	sub	r3,r3,r4
1000c224:	003ff106 	br	1000c1ec <__alt_data_end+0xf800c1ec>

1000c228 <_mprec_log10>:
1000c228:	defffe04 	addi	sp,sp,-8
1000c22c:	dc000015 	stw	r16,0(sp)
1000c230:	dfc00115 	stw	ra,4(sp)
1000c234:	008005c4 	movi	r2,23
1000c238:	2021883a 	mov	r16,r4
1000c23c:	11000d0e 	bge	r2,r4,1000c274 <_mprec_log10+0x4c>
1000c240:	0005883a 	mov	r2,zero
1000c244:	00cffc34 	movhi	r3,16368
1000c248:	843fffc4 	addi	r16,r16,-1
1000c24c:	000d883a 	mov	r6,zero
1000c250:	01d00934 	movhi	r7,16420
1000c254:	1009883a 	mov	r4,r2
1000c258:	180b883a 	mov	r5,r3
1000c25c:	00103040 	call	10010304 <__muldf3>
1000c260:	803ff91e 	bne	r16,zero,1000c248 <__alt_data_end+0xf800c248>
1000c264:	dfc00117 	ldw	ra,4(sp)
1000c268:	dc000017 	ldw	r16,0(sp)
1000c26c:	dec00204 	addi	sp,sp,8
1000c270:	f800283a 	ret
1000c274:	202090fa 	slli	r16,r4,3
1000c278:	00840074 	movhi	r2,4097
1000c27c:	1091c104 	addi	r2,r2,18180
1000c280:	1421883a 	add	r16,r2,r16
1000c284:	80800017 	ldw	r2,0(r16)
1000c288:	80c00117 	ldw	r3,4(r16)
1000c28c:	dfc00117 	ldw	ra,4(sp)
1000c290:	dc000017 	ldw	r16,0(sp)
1000c294:	dec00204 	addi	sp,sp,8
1000c298:	f800283a 	ret

1000c29c <__copybits>:
1000c29c:	297fffc4 	addi	r5,r5,-1
1000c2a0:	280fd17a 	srai	r7,r5,5
1000c2a4:	30c00417 	ldw	r3,16(r6)
1000c2a8:	30800504 	addi	r2,r6,20
1000c2ac:	39c00044 	addi	r7,r7,1
1000c2b0:	18c7883a 	add	r3,r3,r3
1000c2b4:	39cf883a 	add	r7,r7,r7
1000c2b8:	18c7883a 	add	r3,r3,r3
1000c2bc:	39cf883a 	add	r7,r7,r7
1000c2c0:	10c7883a 	add	r3,r2,r3
1000c2c4:	21cf883a 	add	r7,r4,r7
1000c2c8:	10c00d2e 	bgeu	r2,r3,1000c300 <__copybits+0x64>
1000c2cc:	200b883a 	mov	r5,r4
1000c2d0:	12000017 	ldw	r8,0(r2)
1000c2d4:	29400104 	addi	r5,r5,4
1000c2d8:	10800104 	addi	r2,r2,4
1000c2dc:	2a3fff15 	stw	r8,-4(r5)
1000c2e0:	10fffb36 	bltu	r2,r3,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c2e4:	1985c83a 	sub	r2,r3,r6
1000c2e8:	10bffac4 	addi	r2,r2,-21
1000c2ec:	1004d0ba 	srli	r2,r2,2
1000c2f0:	10800044 	addi	r2,r2,1
1000c2f4:	1085883a 	add	r2,r2,r2
1000c2f8:	1085883a 	add	r2,r2,r2
1000c2fc:	2089883a 	add	r4,r4,r2
1000c300:	21c0032e 	bgeu	r4,r7,1000c310 <__copybits+0x74>
1000c304:	20000015 	stw	zero,0(r4)
1000c308:	21000104 	addi	r4,r4,4
1000c30c:	21fffd36 	bltu	r4,r7,1000c304 <__alt_data_end+0xf800c304>
1000c310:	f800283a 	ret

1000c314 <__any_on>:
1000c314:	20c00417 	ldw	r3,16(r4)
1000c318:	2805d17a 	srai	r2,r5,5
1000c31c:	21000504 	addi	r4,r4,20
1000c320:	18800d0e 	bge	r3,r2,1000c358 <__any_on+0x44>
1000c324:	18c7883a 	add	r3,r3,r3
1000c328:	18c7883a 	add	r3,r3,r3
1000c32c:	20c7883a 	add	r3,r4,r3
1000c330:	20c0192e 	bgeu	r4,r3,1000c398 <__any_on+0x84>
1000c334:	18bfff17 	ldw	r2,-4(r3)
1000c338:	18ffff04 	addi	r3,r3,-4
1000c33c:	1000041e 	bne	r2,zero,1000c350 <__any_on+0x3c>
1000c340:	20c0142e 	bgeu	r4,r3,1000c394 <__any_on+0x80>
1000c344:	18ffff04 	addi	r3,r3,-4
1000c348:	19400017 	ldw	r5,0(r3)
1000c34c:	283ffc26 	beq	r5,zero,1000c340 <__alt_data_end+0xf800c340>
1000c350:	00800044 	movi	r2,1
1000c354:	f800283a 	ret
1000c358:	10c00a0e 	bge	r2,r3,1000c384 <__any_on+0x70>
1000c35c:	1085883a 	add	r2,r2,r2
1000c360:	1085883a 	add	r2,r2,r2
1000c364:	294007cc 	andi	r5,r5,31
1000c368:	2087883a 	add	r3,r4,r2
1000c36c:	283ff026 	beq	r5,zero,1000c330 <__alt_data_end+0xf800c330>
1000c370:	19800017 	ldw	r6,0(r3)
1000c374:	3144d83a 	srl	r2,r6,r5
1000c378:	114a983a 	sll	r5,r2,r5
1000c37c:	317ff41e 	bne	r6,r5,1000c350 <__alt_data_end+0xf800c350>
1000c380:	003feb06 	br	1000c330 <__alt_data_end+0xf800c330>
1000c384:	1085883a 	add	r2,r2,r2
1000c388:	1085883a 	add	r2,r2,r2
1000c38c:	2087883a 	add	r3,r4,r2
1000c390:	003fe706 	br	1000c330 <__alt_data_end+0xf800c330>
1000c394:	f800283a 	ret
1000c398:	0005883a 	mov	r2,zero
1000c39c:	f800283a 	ret

1000c3a0 <_realloc_r>:
1000c3a0:	defff604 	addi	sp,sp,-40
1000c3a4:	dc800215 	stw	r18,8(sp)
1000c3a8:	dfc00915 	stw	ra,36(sp)
1000c3ac:	df000815 	stw	fp,32(sp)
1000c3b0:	ddc00715 	stw	r23,28(sp)
1000c3b4:	dd800615 	stw	r22,24(sp)
1000c3b8:	dd400515 	stw	r21,20(sp)
1000c3bc:	dd000415 	stw	r20,16(sp)
1000c3c0:	dcc00315 	stw	r19,12(sp)
1000c3c4:	dc400115 	stw	r17,4(sp)
1000c3c8:	dc000015 	stw	r16,0(sp)
1000c3cc:	3025883a 	mov	r18,r6
1000c3d0:	2800b726 	beq	r5,zero,1000c6b0 <_realloc_r+0x310>
1000c3d4:	282b883a 	mov	r21,r5
1000c3d8:	2029883a 	mov	r20,r4
1000c3dc:	0011a880 	call	10011a88 <__malloc_lock>
1000c3e0:	a8bfff17 	ldw	r2,-4(r21)
1000c3e4:	043fff04 	movi	r16,-4
1000c3e8:	90c002c4 	addi	r3,r18,11
1000c3ec:	01000584 	movi	r4,22
1000c3f0:	acfffe04 	addi	r19,r21,-8
1000c3f4:	1420703a 	and	r16,r2,r16
1000c3f8:	20c0332e 	bgeu	r4,r3,1000c4c8 <_realloc_r+0x128>
1000c3fc:	047ffe04 	movi	r17,-8
1000c400:	1c62703a 	and	r17,r3,r17
1000c404:	8807883a 	mov	r3,r17
1000c408:	88005816 	blt	r17,zero,1000c56c <_realloc_r+0x1cc>
1000c40c:	8c805736 	bltu	r17,r18,1000c56c <_realloc_r+0x1cc>
1000c410:	80c0300e 	bge	r16,r3,1000c4d4 <_realloc_r+0x134>
1000c414:	07040074 	movhi	fp,4097
1000c418:	e7132f04 	addi	fp,fp,19644
1000c41c:	e1c00217 	ldw	r7,8(fp)
1000c420:	9c09883a 	add	r4,r19,r16
1000c424:	22000117 	ldw	r8,4(r4)
1000c428:	21c06326 	beq	r4,r7,1000c5b8 <_realloc_r+0x218>
1000c42c:	017fff84 	movi	r5,-2
1000c430:	414a703a 	and	r5,r8,r5
1000c434:	214b883a 	add	r5,r4,r5
1000c438:	29800117 	ldw	r6,4(r5)
1000c43c:	3180004c 	andi	r6,r6,1
1000c440:	30003f26 	beq	r6,zero,1000c540 <_realloc_r+0x1a0>
1000c444:	1080004c 	andi	r2,r2,1
1000c448:	10008326 	beq	r2,zero,1000c658 <_realloc_r+0x2b8>
1000c44c:	900b883a 	mov	r5,r18
1000c450:	a009883a 	mov	r4,r20
1000c454:	000a62c0 	call	1000a62c <_malloc_r>
1000c458:	1025883a 	mov	r18,r2
1000c45c:	10011e26 	beq	r2,zero,1000c8d8 <_realloc_r+0x538>
1000c460:	a93fff17 	ldw	r4,-4(r21)
1000c464:	10fffe04 	addi	r3,r2,-8
1000c468:	00bfff84 	movi	r2,-2
1000c46c:	2084703a 	and	r2,r4,r2
1000c470:	9885883a 	add	r2,r19,r2
1000c474:	1880ee26 	beq	r3,r2,1000c830 <_realloc_r+0x490>
1000c478:	81bfff04 	addi	r6,r16,-4
1000c47c:	00800904 	movi	r2,36
1000c480:	1180b836 	bltu	r2,r6,1000c764 <_realloc_r+0x3c4>
1000c484:	00c004c4 	movi	r3,19
1000c488:	19809636 	bltu	r3,r6,1000c6e4 <_realloc_r+0x344>
1000c48c:	9005883a 	mov	r2,r18
1000c490:	a807883a 	mov	r3,r21
1000c494:	19000017 	ldw	r4,0(r3)
1000c498:	11000015 	stw	r4,0(r2)
1000c49c:	19000117 	ldw	r4,4(r3)
1000c4a0:	11000115 	stw	r4,4(r2)
1000c4a4:	18c00217 	ldw	r3,8(r3)
1000c4a8:	10c00215 	stw	r3,8(r2)
1000c4ac:	a80b883a 	mov	r5,r21
1000c4b0:	a009883a 	mov	r4,r20
1000c4b4:	0009a340 	call	10009a34 <_free_r>
1000c4b8:	a009883a 	mov	r4,r20
1000c4bc:	0011aac0 	call	10011aac <__malloc_unlock>
1000c4c0:	9005883a 	mov	r2,r18
1000c4c4:	00001206 	br	1000c510 <_realloc_r+0x170>
1000c4c8:	00c00404 	movi	r3,16
1000c4cc:	1823883a 	mov	r17,r3
1000c4d0:	003fce06 	br	1000c40c <__alt_data_end+0xf800c40c>
1000c4d4:	a825883a 	mov	r18,r21
1000c4d8:	8445c83a 	sub	r2,r16,r17
1000c4dc:	00c003c4 	movi	r3,15
1000c4e0:	18802636 	bltu	r3,r2,1000c57c <_realloc_r+0x1dc>
1000c4e4:	99800117 	ldw	r6,4(r19)
1000c4e8:	9c07883a 	add	r3,r19,r16
1000c4ec:	3180004c 	andi	r6,r6,1
1000c4f0:	3420b03a 	or	r16,r6,r16
1000c4f4:	9c000115 	stw	r16,4(r19)
1000c4f8:	18800117 	ldw	r2,4(r3)
1000c4fc:	10800054 	ori	r2,r2,1
1000c500:	18800115 	stw	r2,4(r3)
1000c504:	a009883a 	mov	r4,r20
1000c508:	0011aac0 	call	10011aac <__malloc_unlock>
1000c50c:	9005883a 	mov	r2,r18
1000c510:	dfc00917 	ldw	ra,36(sp)
1000c514:	df000817 	ldw	fp,32(sp)
1000c518:	ddc00717 	ldw	r23,28(sp)
1000c51c:	dd800617 	ldw	r22,24(sp)
1000c520:	dd400517 	ldw	r21,20(sp)
1000c524:	dd000417 	ldw	r20,16(sp)
1000c528:	dcc00317 	ldw	r19,12(sp)
1000c52c:	dc800217 	ldw	r18,8(sp)
1000c530:	dc400117 	ldw	r17,4(sp)
1000c534:	dc000017 	ldw	r16,0(sp)
1000c538:	dec00a04 	addi	sp,sp,40
1000c53c:	f800283a 	ret
1000c540:	017fff04 	movi	r5,-4
1000c544:	414a703a 	and	r5,r8,r5
1000c548:	814d883a 	add	r6,r16,r5
1000c54c:	30c01f16 	blt	r6,r3,1000c5cc <_realloc_r+0x22c>
1000c550:	20800317 	ldw	r2,12(r4)
1000c554:	20c00217 	ldw	r3,8(r4)
1000c558:	a825883a 	mov	r18,r21
1000c55c:	3021883a 	mov	r16,r6
1000c560:	18800315 	stw	r2,12(r3)
1000c564:	10c00215 	stw	r3,8(r2)
1000c568:	003fdb06 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000c56c:	00800304 	movi	r2,12
1000c570:	a0800015 	stw	r2,0(r20)
1000c574:	0005883a 	mov	r2,zero
1000c578:	003fe506 	br	1000c510 <__alt_data_end+0xf800c510>
1000c57c:	98c00117 	ldw	r3,4(r19)
1000c580:	9c4b883a 	add	r5,r19,r17
1000c584:	11000054 	ori	r4,r2,1
1000c588:	18c0004c 	andi	r3,r3,1
1000c58c:	1c62b03a 	or	r17,r3,r17
1000c590:	9c400115 	stw	r17,4(r19)
1000c594:	29000115 	stw	r4,4(r5)
1000c598:	2885883a 	add	r2,r5,r2
1000c59c:	10c00117 	ldw	r3,4(r2)
1000c5a0:	29400204 	addi	r5,r5,8
1000c5a4:	a009883a 	mov	r4,r20
1000c5a8:	18c00054 	ori	r3,r3,1
1000c5ac:	10c00115 	stw	r3,4(r2)
1000c5b0:	0009a340 	call	10009a34 <_free_r>
1000c5b4:	003fd306 	br	1000c504 <__alt_data_end+0xf800c504>
1000c5b8:	017fff04 	movi	r5,-4
1000c5bc:	414a703a 	and	r5,r8,r5
1000c5c0:	89800404 	addi	r6,r17,16
1000c5c4:	8151883a 	add	r8,r16,r5
1000c5c8:	4180590e 	bge	r8,r6,1000c730 <_realloc_r+0x390>
1000c5cc:	1080004c 	andi	r2,r2,1
1000c5d0:	103f9e1e 	bne	r2,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c5d4:	adbffe17 	ldw	r22,-8(r21)
1000c5d8:	00bfff04 	movi	r2,-4
1000c5dc:	9dadc83a 	sub	r22,r19,r22
1000c5e0:	b1800117 	ldw	r6,4(r22)
1000c5e4:	3084703a 	and	r2,r6,r2
1000c5e8:	20002026 	beq	r4,zero,1000c66c <_realloc_r+0x2cc>
1000c5ec:	80af883a 	add	r23,r16,r2
1000c5f0:	b96f883a 	add	r23,r23,r5
1000c5f4:	21c05f26 	beq	r4,r7,1000c774 <_realloc_r+0x3d4>
1000c5f8:	b8c01c16 	blt	r23,r3,1000c66c <_realloc_r+0x2cc>
1000c5fc:	20800317 	ldw	r2,12(r4)
1000c600:	20c00217 	ldw	r3,8(r4)
1000c604:	81bfff04 	addi	r6,r16,-4
1000c608:	01000904 	movi	r4,36
1000c60c:	18800315 	stw	r2,12(r3)
1000c610:	10c00215 	stw	r3,8(r2)
1000c614:	b0c00217 	ldw	r3,8(r22)
1000c618:	b0800317 	ldw	r2,12(r22)
1000c61c:	b4800204 	addi	r18,r22,8
1000c620:	18800315 	stw	r2,12(r3)
1000c624:	10c00215 	stw	r3,8(r2)
1000c628:	21801b36 	bltu	r4,r6,1000c698 <_realloc_r+0x2f8>
1000c62c:	008004c4 	movi	r2,19
1000c630:	1180352e 	bgeu	r2,r6,1000c708 <_realloc_r+0x368>
1000c634:	a8800017 	ldw	r2,0(r21)
1000c638:	b0800215 	stw	r2,8(r22)
1000c63c:	a8800117 	ldw	r2,4(r21)
1000c640:	b0800315 	stw	r2,12(r22)
1000c644:	008006c4 	movi	r2,27
1000c648:	11807f36 	bltu	r2,r6,1000c848 <_realloc_r+0x4a8>
1000c64c:	b0800404 	addi	r2,r22,16
1000c650:	ad400204 	addi	r21,r21,8
1000c654:	00002d06 	br	1000c70c <_realloc_r+0x36c>
1000c658:	adbffe17 	ldw	r22,-8(r21)
1000c65c:	00bfff04 	movi	r2,-4
1000c660:	9dadc83a 	sub	r22,r19,r22
1000c664:	b1000117 	ldw	r4,4(r22)
1000c668:	2084703a 	and	r2,r4,r2
1000c66c:	b03f7726 	beq	r22,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c670:	80af883a 	add	r23,r16,r2
1000c674:	b8ff7516 	blt	r23,r3,1000c44c <__alt_data_end+0xf800c44c>
1000c678:	b0800317 	ldw	r2,12(r22)
1000c67c:	b0c00217 	ldw	r3,8(r22)
1000c680:	81bfff04 	addi	r6,r16,-4
1000c684:	01000904 	movi	r4,36
1000c688:	18800315 	stw	r2,12(r3)
1000c68c:	10c00215 	stw	r3,8(r2)
1000c690:	b4800204 	addi	r18,r22,8
1000c694:	21bfe52e 	bgeu	r4,r6,1000c62c <__alt_data_end+0xf800c62c>
1000c698:	a80b883a 	mov	r5,r21
1000c69c:	9009883a 	mov	r4,r18
1000c6a0:	000b0640 	call	1000b064 <memmove>
1000c6a4:	b821883a 	mov	r16,r23
1000c6a8:	b027883a 	mov	r19,r22
1000c6ac:	003f8a06 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000c6b0:	300b883a 	mov	r5,r6
1000c6b4:	dfc00917 	ldw	ra,36(sp)
1000c6b8:	df000817 	ldw	fp,32(sp)
1000c6bc:	ddc00717 	ldw	r23,28(sp)
1000c6c0:	dd800617 	ldw	r22,24(sp)
1000c6c4:	dd400517 	ldw	r21,20(sp)
1000c6c8:	dd000417 	ldw	r20,16(sp)
1000c6cc:	dcc00317 	ldw	r19,12(sp)
1000c6d0:	dc800217 	ldw	r18,8(sp)
1000c6d4:	dc400117 	ldw	r17,4(sp)
1000c6d8:	dc000017 	ldw	r16,0(sp)
1000c6dc:	dec00a04 	addi	sp,sp,40
1000c6e0:	000a62c1 	jmpi	1000a62c <_malloc_r>
1000c6e4:	a8c00017 	ldw	r3,0(r21)
1000c6e8:	90c00015 	stw	r3,0(r18)
1000c6ec:	a8c00117 	ldw	r3,4(r21)
1000c6f0:	90c00115 	stw	r3,4(r18)
1000c6f4:	00c006c4 	movi	r3,27
1000c6f8:	19804536 	bltu	r3,r6,1000c810 <_realloc_r+0x470>
1000c6fc:	90800204 	addi	r2,r18,8
1000c700:	a8c00204 	addi	r3,r21,8
1000c704:	003f6306 	br	1000c494 <__alt_data_end+0xf800c494>
1000c708:	9005883a 	mov	r2,r18
1000c70c:	a8c00017 	ldw	r3,0(r21)
1000c710:	b821883a 	mov	r16,r23
1000c714:	b027883a 	mov	r19,r22
1000c718:	10c00015 	stw	r3,0(r2)
1000c71c:	a8c00117 	ldw	r3,4(r21)
1000c720:	10c00115 	stw	r3,4(r2)
1000c724:	a8c00217 	ldw	r3,8(r21)
1000c728:	10c00215 	stw	r3,8(r2)
1000c72c:	003f6a06 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000c730:	9c67883a 	add	r19,r19,r17
1000c734:	4445c83a 	sub	r2,r8,r17
1000c738:	e4c00215 	stw	r19,8(fp)
1000c73c:	10800054 	ori	r2,r2,1
1000c740:	98800115 	stw	r2,4(r19)
1000c744:	a8bfff17 	ldw	r2,-4(r21)
1000c748:	a009883a 	mov	r4,r20
1000c74c:	1080004c 	andi	r2,r2,1
1000c750:	1462b03a 	or	r17,r2,r17
1000c754:	ac7fff15 	stw	r17,-4(r21)
1000c758:	0011aac0 	call	10011aac <__malloc_unlock>
1000c75c:	a805883a 	mov	r2,r21
1000c760:	003f6b06 	br	1000c510 <__alt_data_end+0xf800c510>
1000c764:	a80b883a 	mov	r5,r21
1000c768:	9009883a 	mov	r4,r18
1000c76c:	000b0640 	call	1000b064 <memmove>
1000c770:	003f4e06 	br	1000c4ac <__alt_data_end+0xf800c4ac>
1000c774:	89000404 	addi	r4,r17,16
1000c778:	b93fbc16 	blt	r23,r4,1000c66c <__alt_data_end+0xf800c66c>
1000c77c:	b0800317 	ldw	r2,12(r22)
1000c780:	b0c00217 	ldw	r3,8(r22)
1000c784:	81bfff04 	addi	r6,r16,-4
1000c788:	01000904 	movi	r4,36
1000c78c:	18800315 	stw	r2,12(r3)
1000c790:	10c00215 	stw	r3,8(r2)
1000c794:	b4800204 	addi	r18,r22,8
1000c798:	21804336 	bltu	r4,r6,1000c8a8 <_realloc_r+0x508>
1000c79c:	008004c4 	movi	r2,19
1000c7a0:	11803f2e 	bgeu	r2,r6,1000c8a0 <_realloc_r+0x500>
1000c7a4:	a8800017 	ldw	r2,0(r21)
1000c7a8:	b0800215 	stw	r2,8(r22)
1000c7ac:	a8800117 	ldw	r2,4(r21)
1000c7b0:	b0800315 	stw	r2,12(r22)
1000c7b4:	008006c4 	movi	r2,27
1000c7b8:	11803f36 	bltu	r2,r6,1000c8b8 <_realloc_r+0x518>
1000c7bc:	b0800404 	addi	r2,r22,16
1000c7c0:	ad400204 	addi	r21,r21,8
1000c7c4:	a8c00017 	ldw	r3,0(r21)
1000c7c8:	10c00015 	stw	r3,0(r2)
1000c7cc:	a8c00117 	ldw	r3,4(r21)
1000c7d0:	10c00115 	stw	r3,4(r2)
1000c7d4:	a8c00217 	ldw	r3,8(r21)
1000c7d8:	10c00215 	stw	r3,8(r2)
1000c7dc:	b447883a 	add	r3,r22,r17
1000c7e0:	bc45c83a 	sub	r2,r23,r17
1000c7e4:	e0c00215 	stw	r3,8(fp)
1000c7e8:	10800054 	ori	r2,r2,1
1000c7ec:	18800115 	stw	r2,4(r3)
1000c7f0:	b0800117 	ldw	r2,4(r22)
1000c7f4:	a009883a 	mov	r4,r20
1000c7f8:	1080004c 	andi	r2,r2,1
1000c7fc:	1462b03a 	or	r17,r2,r17
1000c800:	b4400115 	stw	r17,4(r22)
1000c804:	0011aac0 	call	10011aac <__malloc_unlock>
1000c808:	9005883a 	mov	r2,r18
1000c80c:	003f4006 	br	1000c510 <__alt_data_end+0xf800c510>
1000c810:	a8c00217 	ldw	r3,8(r21)
1000c814:	90c00215 	stw	r3,8(r18)
1000c818:	a8c00317 	ldw	r3,12(r21)
1000c81c:	90c00315 	stw	r3,12(r18)
1000c820:	30801126 	beq	r6,r2,1000c868 <_realloc_r+0x4c8>
1000c824:	90800404 	addi	r2,r18,16
1000c828:	a8c00404 	addi	r3,r21,16
1000c82c:	003f1906 	br	1000c494 <__alt_data_end+0xf800c494>
1000c830:	90ffff17 	ldw	r3,-4(r18)
1000c834:	00bfff04 	movi	r2,-4
1000c838:	a825883a 	mov	r18,r21
1000c83c:	1884703a 	and	r2,r3,r2
1000c840:	80a1883a 	add	r16,r16,r2
1000c844:	003f2406 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000c848:	a8800217 	ldw	r2,8(r21)
1000c84c:	b0800415 	stw	r2,16(r22)
1000c850:	a8800317 	ldw	r2,12(r21)
1000c854:	b0800515 	stw	r2,20(r22)
1000c858:	31000a26 	beq	r6,r4,1000c884 <_realloc_r+0x4e4>
1000c85c:	b0800604 	addi	r2,r22,24
1000c860:	ad400404 	addi	r21,r21,16
1000c864:	003fa906 	br	1000c70c <__alt_data_end+0xf800c70c>
1000c868:	a9000417 	ldw	r4,16(r21)
1000c86c:	90800604 	addi	r2,r18,24
1000c870:	a8c00604 	addi	r3,r21,24
1000c874:	91000415 	stw	r4,16(r18)
1000c878:	a9000517 	ldw	r4,20(r21)
1000c87c:	91000515 	stw	r4,20(r18)
1000c880:	003f0406 	br	1000c494 <__alt_data_end+0xf800c494>
1000c884:	a8c00417 	ldw	r3,16(r21)
1000c888:	ad400604 	addi	r21,r21,24
1000c88c:	b0800804 	addi	r2,r22,32
1000c890:	b0c00615 	stw	r3,24(r22)
1000c894:	a8ffff17 	ldw	r3,-4(r21)
1000c898:	b0c00715 	stw	r3,28(r22)
1000c89c:	003f9b06 	br	1000c70c <__alt_data_end+0xf800c70c>
1000c8a0:	9005883a 	mov	r2,r18
1000c8a4:	003fc706 	br	1000c7c4 <__alt_data_end+0xf800c7c4>
1000c8a8:	a80b883a 	mov	r5,r21
1000c8ac:	9009883a 	mov	r4,r18
1000c8b0:	000b0640 	call	1000b064 <memmove>
1000c8b4:	003fc906 	br	1000c7dc <__alt_data_end+0xf800c7dc>
1000c8b8:	a8800217 	ldw	r2,8(r21)
1000c8bc:	b0800415 	stw	r2,16(r22)
1000c8c0:	a8800317 	ldw	r2,12(r21)
1000c8c4:	b0800515 	stw	r2,20(r22)
1000c8c8:	31000726 	beq	r6,r4,1000c8e8 <_realloc_r+0x548>
1000c8cc:	b0800604 	addi	r2,r22,24
1000c8d0:	ad400404 	addi	r21,r21,16
1000c8d4:	003fbb06 	br	1000c7c4 <__alt_data_end+0xf800c7c4>
1000c8d8:	a009883a 	mov	r4,r20
1000c8dc:	0011aac0 	call	10011aac <__malloc_unlock>
1000c8e0:	0005883a 	mov	r2,zero
1000c8e4:	003f0a06 	br	1000c510 <__alt_data_end+0xf800c510>
1000c8e8:	a8c00417 	ldw	r3,16(r21)
1000c8ec:	ad400604 	addi	r21,r21,24
1000c8f0:	b0800804 	addi	r2,r22,32
1000c8f4:	b0c00615 	stw	r3,24(r22)
1000c8f8:	a8ffff17 	ldw	r3,-4(r21)
1000c8fc:	b0c00715 	stw	r3,28(r22)
1000c900:	003fb006 	br	1000c7c4 <__alt_data_end+0xf800c7c4>

1000c904 <__fpclassifyd>:
1000c904:	00a00034 	movhi	r2,32768
1000c908:	10bfffc4 	addi	r2,r2,-1
1000c90c:	2884703a 	and	r2,r5,r2
1000c910:	10000726 	beq	r2,zero,1000c930 <__fpclassifyd+0x2c>
1000c914:	00fffc34 	movhi	r3,65520
1000c918:	019ff834 	movhi	r6,32736
1000c91c:	28c7883a 	add	r3,r5,r3
1000c920:	31bfffc4 	addi	r6,r6,-1
1000c924:	30c00536 	bltu	r6,r3,1000c93c <__fpclassifyd+0x38>
1000c928:	00800104 	movi	r2,4
1000c92c:	f800283a 	ret
1000c930:	2000021e 	bne	r4,zero,1000c93c <__fpclassifyd+0x38>
1000c934:	00800084 	movi	r2,2
1000c938:	f800283a 	ret
1000c93c:	00dffc34 	movhi	r3,32752
1000c940:	019ff834 	movhi	r6,32736
1000c944:	28cb883a 	add	r5,r5,r3
1000c948:	31bfffc4 	addi	r6,r6,-1
1000c94c:	317ff62e 	bgeu	r6,r5,1000c928 <__alt_data_end+0xf800c928>
1000c950:	01400434 	movhi	r5,16
1000c954:	297fffc4 	addi	r5,r5,-1
1000c958:	28800236 	bltu	r5,r2,1000c964 <__fpclassifyd+0x60>
1000c95c:	008000c4 	movi	r2,3
1000c960:	f800283a 	ret
1000c964:	10c00226 	beq	r2,r3,1000c970 <__fpclassifyd+0x6c>
1000c968:	0005883a 	mov	r2,zero
1000c96c:	f800283a 	ret
1000c970:	2005003a 	cmpeq	r2,r4,zero
1000c974:	f800283a 	ret

1000c978 <_sbrk_r>:
1000c978:	defffd04 	addi	sp,sp,-12
1000c97c:	dc000015 	stw	r16,0(sp)
1000c980:	04040074 	movhi	r16,4097
1000c984:	dc400115 	stw	r17,4(sp)
1000c988:	841f9304 	addi	r16,r16,32332
1000c98c:	2023883a 	mov	r17,r4
1000c990:	2809883a 	mov	r4,r5
1000c994:	dfc00215 	stw	ra,8(sp)
1000c998:	80000015 	stw	zero,0(r16)
1000c99c:	0011c940 	call	10011c94 <sbrk>
1000c9a0:	00ffffc4 	movi	r3,-1
1000c9a4:	10c00526 	beq	r2,r3,1000c9bc <_sbrk_r+0x44>
1000c9a8:	dfc00217 	ldw	ra,8(sp)
1000c9ac:	dc400117 	ldw	r17,4(sp)
1000c9b0:	dc000017 	ldw	r16,0(sp)
1000c9b4:	dec00304 	addi	sp,sp,12
1000c9b8:	f800283a 	ret
1000c9bc:	80c00017 	ldw	r3,0(r16)
1000c9c0:	183ff926 	beq	r3,zero,1000c9a8 <__alt_data_end+0xf800c9a8>
1000c9c4:	88c00015 	stw	r3,0(r17)
1000c9c8:	003ff706 	br	1000c9a8 <__alt_data_end+0xf800c9a8>

1000c9cc <__sread>:
1000c9cc:	defffe04 	addi	sp,sp,-8
1000c9d0:	dc000015 	stw	r16,0(sp)
1000c9d4:	2821883a 	mov	r16,r5
1000c9d8:	2940038f 	ldh	r5,14(r5)
1000c9dc:	dfc00115 	stw	ra,4(sp)
1000c9e0:	000e8880 	call	1000e888 <_read_r>
1000c9e4:	10000716 	blt	r2,zero,1000ca04 <__sread+0x38>
1000c9e8:	80c01417 	ldw	r3,80(r16)
1000c9ec:	1887883a 	add	r3,r3,r2
1000c9f0:	80c01415 	stw	r3,80(r16)
1000c9f4:	dfc00117 	ldw	ra,4(sp)
1000c9f8:	dc000017 	ldw	r16,0(sp)
1000c9fc:	dec00204 	addi	sp,sp,8
1000ca00:	f800283a 	ret
1000ca04:	80c0030b 	ldhu	r3,12(r16)
1000ca08:	18fbffcc 	andi	r3,r3,61439
1000ca0c:	80c0030d 	sth	r3,12(r16)
1000ca10:	dfc00117 	ldw	ra,4(sp)
1000ca14:	dc000017 	ldw	r16,0(sp)
1000ca18:	dec00204 	addi	sp,sp,8
1000ca1c:	f800283a 	ret

1000ca20 <__seofread>:
1000ca20:	0005883a 	mov	r2,zero
1000ca24:	f800283a 	ret

1000ca28 <__swrite>:
1000ca28:	2880030b 	ldhu	r2,12(r5)
1000ca2c:	defffb04 	addi	sp,sp,-20
1000ca30:	dcc00315 	stw	r19,12(sp)
1000ca34:	dc800215 	stw	r18,8(sp)
1000ca38:	dc400115 	stw	r17,4(sp)
1000ca3c:	dc000015 	stw	r16,0(sp)
1000ca40:	dfc00415 	stw	ra,16(sp)
1000ca44:	10c0400c 	andi	r3,r2,256
1000ca48:	2821883a 	mov	r16,r5
1000ca4c:	2023883a 	mov	r17,r4
1000ca50:	3025883a 	mov	r18,r6
1000ca54:	3827883a 	mov	r19,r7
1000ca58:	18000526 	beq	r3,zero,1000ca70 <__swrite+0x48>
1000ca5c:	2940038f 	ldh	r5,14(r5)
1000ca60:	01c00084 	movi	r7,2
1000ca64:	000d883a 	mov	r6,zero
1000ca68:	000e8280 	call	1000e828 <_lseek_r>
1000ca6c:	8080030b 	ldhu	r2,12(r16)
1000ca70:	8140038f 	ldh	r5,14(r16)
1000ca74:	10bbffcc 	andi	r2,r2,61439
1000ca78:	980f883a 	mov	r7,r19
1000ca7c:	900d883a 	mov	r6,r18
1000ca80:	8809883a 	mov	r4,r17
1000ca84:	8080030d 	sth	r2,12(r16)
1000ca88:	dfc00417 	ldw	ra,16(sp)
1000ca8c:	dcc00317 	ldw	r19,12(sp)
1000ca90:	dc800217 	ldw	r18,8(sp)
1000ca94:	dc400117 	ldw	r17,4(sp)
1000ca98:	dc000017 	ldw	r16,0(sp)
1000ca9c:	dec00504 	addi	sp,sp,20
1000caa0:	000e2dc1 	jmpi	1000e2dc <_write_r>

1000caa4 <__sseek>:
1000caa4:	defffe04 	addi	sp,sp,-8
1000caa8:	dc000015 	stw	r16,0(sp)
1000caac:	2821883a 	mov	r16,r5
1000cab0:	2940038f 	ldh	r5,14(r5)
1000cab4:	dfc00115 	stw	ra,4(sp)
1000cab8:	000e8280 	call	1000e828 <_lseek_r>
1000cabc:	00ffffc4 	movi	r3,-1
1000cac0:	10c00826 	beq	r2,r3,1000cae4 <__sseek+0x40>
1000cac4:	80c0030b 	ldhu	r3,12(r16)
1000cac8:	80801415 	stw	r2,80(r16)
1000cacc:	18c40014 	ori	r3,r3,4096
1000cad0:	80c0030d 	sth	r3,12(r16)
1000cad4:	dfc00117 	ldw	ra,4(sp)
1000cad8:	dc000017 	ldw	r16,0(sp)
1000cadc:	dec00204 	addi	sp,sp,8
1000cae0:	f800283a 	ret
1000cae4:	80c0030b 	ldhu	r3,12(r16)
1000cae8:	18fbffcc 	andi	r3,r3,61439
1000caec:	80c0030d 	sth	r3,12(r16)
1000caf0:	dfc00117 	ldw	ra,4(sp)
1000caf4:	dc000017 	ldw	r16,0(sp)
1000caf8:	dec00204 	addi	sp,sp,8
1000cafc:	f800283a 	ret

1000cb00 <__sclose>:
1000cb00:	2940038f 	ldh	r5,14(r5)
1000cb04:	000e33c1 	jmpi	1000e33c <_close_r>

1000cb08 <strcmp>:
1000cb08:	2144b03a 	or	r2,r4,r5
1000cb0c:	108000cc 	andi	r2,r2,3
1000cb10:	1000171e 	bne	r2,zero,1000cb70 <strcmp+0x68>
1000cb14:	20800017 	ldw	r2,0(r4)
1000cb18:	28c00017 	ldw	r3,0(r5)
1000cb1c:	10c0141e 	bne	r2,r3,1000cb70 <strcmp+0x68>
1000cb20:	027fbff4 	movhi	r9,65279
1000cb24:	4a7fbfc4 	addi	r9,r9,-257
1000cb28:	0086303a 	nor	r3,zero,r2
1000cb2c:	02202074 	movhi	r8,32897
1000cb30:	1245883a 	add	r2,r2,r9
1000cb34:	42202004 	addi	r8,r8,-32640
1000cb38:	10c4703a 	and	r2,r2,r3
1000cb3c:	1204703a 	and	r2,r2,r8
1000cb40:	10000226 	beq	r2,zero,1000cb4c <strcmp+0x44>
1000cb44:	00002306 	br	1000cbd4 <strcmp+0xcc>
1000cb48:	1000221e 	bne	r2,zero,1000cbd4 <strcmp+0xcc>
1000cb4c:	21000104 	addi	r4,r4,4
1000cb50:	20c00017 	ldw	r3,0(r4)
1000cb54:	29400104 	addi	r5,r5,4
1000cb58:	29800017 	ldw	r6,0(r5)
1000cb5c:	1a4f883a 	add	r7,r3,r9
1000cb60:	00c4303a 	nor	r2,zero,r3
1000cb64:	3884703a 	and	r2,r7,r2
1000cb68:	1204703a 	and	r2,r2,r8
1000cb6c:	19bff626 	beq	r3,r6,1000cb48 <__alt_data_end+0xf800cb48>
1000cb70:	20800003 	ldbu	r2,0(r4)
1000cb74:	10c03fcc 	andi	r3,r2,255
1000cb78:	18c0201c 	xori	r3,r3,128
1000cb7c:	18ffe004 	addi	r3,r3,-128
1000cb80:	18000c26 	beq	r3,zero,1000cbb4 <strcmp+0xac>
1000cb84:	29800007 	ldb	r6,0(r5)
1000cb88:	19800326 	beq	r3,r6,1000cb98 <strcmp+0x90>
1000cb8c:	00001306 	br	1000cbdc <strcmp+0xd4>
1000cb90:	29800007 	ldb	r6,0(r5)
1000cb94:	11800b1e 	bne	r2,r6,1000cbc4 <strcmp+0xbc>
1000cb98:	21000044 	addi	r4,r4,1
1000cb9c:	20c00003 	ldbu	r3,0(r4)
1000cba0:	29400044 	addi	r5,r5,1
1000cba4:	18803fcc 	andi	r2,r3,255
1000cba8:	1080201c 	xori	r2,r2,128
1000cbac:	10bfe004 	addi	r2,r2,-128
1000cbb0:	103ff71e 	bne	r2,zero,1000cb90 <__alt_data_end+0xf800cb90>
1000cbb4:	0007883a 	mov	r3,zero
1000cbb8:	28800003 	ldbu	r2,0(r5)
1000cbbc:	1885c83a 	sub	r2,r3,r2
1000cbc0:	f800283a 	ret
1000cbc4:	28800003 	ldbu	r2,0(r5)
1000cbc8:	18c03fcc 	andi	r3,r3,255
1000cbcc:	1885c83a 	sub	r2,r3,r2
1000cbd0:	f800283a 	ret
1000cbd4:	0005883a 	mov	r2,zero
1000cbd8:	f800283a 	ret
1000cbdc:	10c03fcc 	andi	r3,r2,255
1000cbe0:	003ff506 	br	1000cbb8 <__alt_data_end+0xf800cbb8>

1000cbe4 <__sprint_r.part.0>:
1000cbe4:	28801917 	ldw	r2,100(r5)
1000cbe8:	defff604 	addi	sp,sp,-40
1000cbec:	dd400515 	stw	r21,20(sp)
1000cbf0:	dfc00915 	stw	ra,36(sp)
1000cbf4:	df000815 	stw	fp,32(sp)
1000cbf8:	ddc00715 	stw	r23,28(sp)
1000cbfc:	dd800615 	stw	r22,24(sp)
1000cc00:	dd000415 	stw	r20,16(sp)
1000cc04:	dcc00315 	stw	r19,12(sp)
1000cc08:	dc800215 	stw	r18,8(sp)
1000cc0c:	dc400115 	stw	r17,4(sp)
1000cc10:	dc000015 	stw	r16,0(sp)
1000cc14:	1088000c 	andi	r2,r2,8192
1000cc18:	302b883a 	mov	r21,r6
1000cc1c:	10002e26 	beq	r2,zero,1000ccd8 <__sprint_r.part.0+0xf4>
1000cc20:	30800217 	ldw	r2,8(r6)
1000cc24:	35800017 	ldw	r22,0(r6)
1000cc28:	10002926 	beq	r2,zero,1000ccd0 <__sprint_r.part.0+0xec>
1000cc2c:	2827883a 	mov	r19,r5
1000cc30:	2029883a 	mov	r20,r4
1000cc34:	b5c00104 	addi	r23,r22,4
1000cc38:	04bfffc4 	movi	r18,-1
1000cc3c:	bc400017 	ldw	r17,0(r23)
1000cc40:	b4000017 	ldw	r16,0(r22)
1000cc44:	0039883a 	mov	fp,zero
1000cc48:	8822d0ba 	srli	r17,r17,2
1000cc4c:	8800031e 	bne	r17,zero,1000cc5c <__sprint_r.part.0+0x78>
1000cc50:	00001806 	br	1000ccb4 <__sprint_r.part.0+0xd0>
1000cc54:	84000104 	addi	r16,r16,4
1000cc58:	8f001526 	beq	r17,fp,1000ccb0 <__sprint_r.part.0+0xcc>
1000cc5c:	81400017 	ldw	r5,0(r16)
1000cc60:	980d883a 	mov	r6,r19
1000cc64:	a009883a 	mov	r4,r20
1000cc68:	000e6d40 	call	1000e6d4 <_fputwc_r>
1000cc6c:	e7000044 	addi	fp,fp,1
1000cc70:	14bff81e 	bne	r2,r18,1000cc54 <__alt_data_end+0xf800cc54>
1000cc74:	9005883a 	mov	r2,r18
1000cc78:	a8000215 	stw	zero,8(r21)
1000cc7c:	a8000115 	stw	zero,4(r21)
1000cc80:	dfc00917 	ldw	ra,36(sp)
1000cc84:	df000817 	ldw	fp,32(sp)
1000cc88:	ddc00717 	ldw	r23,28(sp)
1000cc8c:	dd800617 	ldw	r22,24(sp)
1000cc90:	dd400517 	ldw	r21,20(sp)
1000cc94:	dd000417 	ldw	r20,16(sp)
1000cc98:	dcc00317 	ldw	r19,12(sp)
1000cc9c:	dc800217 	ldw	r18,8(sp)
1000cca0:	dc400117 	ldw	r17,4(sp)
1000cca4:	dc000017 	ldw	r16,0(sp)
1000cca8:	dec00a04 	addi	sp,sp,40
1000ccac:	f800283a 	ret
1000ccb0:	a8800217 	ldw	r2,8(r21)
1000ccb4:	8c63883a 	add	r17,r17,r17
1000ccb8:	8c63883a 	add	r17,r17,r17
1000ccbc:	1445c83a 	sub	r2,r2,r17
1000ccc0:	a8800215 	stw	r2,8(r21)
1000ccc4:	b5800204 	addi	r22,r22,8
1000ccc8:	bdc00204 	addi	r23,r23,8
1000cccc:	103fdb1e 	bne	r2,zero,1000cc3c <__alt_data_end+0xf800cc3c>
1000ccd0:	0005883a 	mov	r2,zero
1000ccd4:	003fe806 	br	1000cc78 <__alt_data_end+0xf800cc78>
1000ccd8:	0009d440 	call	10009d44 <__sfvwrite_r>
1000ccdc:	003fe606 	br	1000cc78 <__alt_data_end+0xf800cc78>

1000cce0 <__sprint_r>:
1000cce0:	30c00217 	ldw	r3,8(r6)
1000cce4:	18000126 	beq	r3,zero,1000ccec <__sprint_r+0xc>
1000cce8:	000cbe41 	jmpi	1000cbe4 <__sprint_r.part.0>
1000ccec:	30000115 	stw	zero,4(r6)
1000ccf0:	0005883a 	mov	r2,zero
1000ccf4:	f800283a 	ret

1000ccf8 <___vfiprintf_internal_r>:
1000ccf8:	deffca04 	addi	sp,sp,-216
1000ccfc:	dd403115 	stw	r21,196(sp)
1000cd00:	dfc03515 	stw	ra,212(sp)
1000cd04:	df003415 	stw	fp,208(sp)
1000cd08:	ddc03315 	stw	r23,204(sp)
1000cd0c:	dd803215 	stw	r22,200(sp)
1000cd10:	dd003015 	stw	r20,192(sp)
1000cd14:	dcc02f15 	stw	r19,188(sp)
1000cd18:	dc802e15 	stw	r18,184(sp)
1000cd1c:	dc402d15 	stw	r17,180(sp)
1000cd20:	dc002c15 	stw	r16,176(sp)
1000cd24:	d9002115 	stw	r4,132(sp)
1000cd28:	d9402015 	stw	r5,128(sp)
1000cd2c:	d9c02215 	stw	r7,136(sp)
1000cd30:	302b883a 	mov	r21,r6
1000cd34:	20000226 	beq	r4,zero,1000cd40 <___vfiprintf_internal_r+0x48>
1000cd38:	20800e17 	ldw	r2,56(r4)
1000cd3c:	1000cf26 	beq	r2,zero,1000d07c <___vfiprintf_internal_r+0x384>
1000cd40:	d8c02017 	ldw	r3,128(sp)
1000cd44:	1880030b 	ldhu	r2,12(r3)
1000cd48:	10c8000c 	andi	r3,r2,8192
1000cd4c:	1800071e 	bne	r3,zero,1000cd6c <___vfiprintf_internal_r+0x74>
1000cd50:	d9402017 	ldw	r5,128(sp)
1000cd54:	00f7ffc4 	movi	r3,-8193
1000cd58:	10880014 	ori	r2,r2,8192
1000cd5c:	29001917 	ldw	r4,100(r5)
1000cd60:	2880030d 	sth	r2,12(r5)
1000cd64:	20c6703a 	and	r3,r4,r3
1000cd68:	28c01915 	stw	r3,100(r5)
1000cd6c:	10c0020c 	andi	r3,r2,8
1000cd70:	1800a526 	beq	r3,zero,1000d008 <___vfiprintf_internal_r+0x310>
1000cd74:	d9002017 	ldw	r4,128(sp)
1000cd78:	20c00417 	ldw	r3,16(r4)
1000cd7c:	1800a226 	beq	r3,zero,1000d008 <___vfiprintf_internal_r+0x310>
1000cd80:	1080068c 	andi	r2,r2,26
1000cd84:	00c00284 	movi	r3,10
1000cd88:	10c0a826 	beq	r2,r3,1000d02c <___vfiprintf_internal_r+0x334>
1000cd8c:	d9001a04 	addi	r4,sp,104
1000cd90:	d94019c4 	addi	r5,sp,103
1000cd94:	04840074 	movhi	r18,4097
1000cd98:	2145c83a 	sub	r2,r4,r5
1000cd9c:	9491f304 	addi	r18,r18,18380
1000cda0:	d9001e15 	stw	r4,120(sp)
1000cda4:	d9401f15 	stw	r5,124(sp)
1000cda8:	dec01a15 	stw	sp,104(sp)
1000cdac:	d8001c15 	stw	zero,112(sp)
1000cdb0:	d8001b15 	stw	zero,108(sp)
1000cdb4:	d811883a 	mov	r8,sp
1000cdb8:	d8002615 	stw	zero,152(sp)
1000cdbc:	d8002415 	stw	zero,144(sp)
1000cdc0:	d8802815 	stw	r2,160(sp)
1000cdc4:	a82d883a 	mov	r22,r21
1000cdc8:	b0800007 	ldb	r2,0(r22)
1000cdcc:	10040d26 	beq	r2,zero,1000de04 <___vfiprintf_internal_r+0x110c>
1000cdd0:	00c00944 	movi	r3,37
1000cdd4:	b029883a 	mov	r20,r22
1000cdd8:	10c0021e 	bne	r2,r3,1000cde4 <___vfiprintf_internal_r+0xec>
1000cddc:	00001606 	br	1000ce38 <___vfiprintf_internal_r+0x140>
1000cde0:	10c00326 	beq	r2,r3,1000cdf0 <___vfiprintf_internal_r+0xf8>
1000cde4:	a5000044 	addi	r20,r20,1
1000cde8:	a0800007 	ldb	r2,0(r20)
1000cdec:	103ffc1e 	bne	r2,zero,1000cde0 <__alt_data_end+0xf800cde0>
1000cdf0:	a5a1c83a 	sub	r16,r20,r22
1000cdf4:	80001026 	beq	r16,zero,1000ce38 <___vfiprintf_internal_r+0x140>
1000cdf8:	d8c01c17 	ldw	r3,112(sp)
1000cdfc:	d8801b17 	ldw	r2,108(sp)
1000ce00:	45800015 	stw	r22,0(r8)
1000ce04:	80c7883a 	add	r3,r16,r3
1000ce08:	10800044 	addi	r2,r2,1
1000ce0c:	44000115 	stw	r16,4(r8)
1000ce10:	d8c01c15 	stw	r3,112(sp)
1000ce14:	d8801b15 	stw	r2,108(sp)
1000ce18:	010001c4 	movi	r4,7
1000ce1c:	2080750e 	bge	r4,r2,1000cff4 <___vfiprintf_internal_r+0x2fc>
1000ce20:	1803951e 	bne	r3,zero,1000dc78 <___vfiprintf_internal_r+0xf80>
1000ce24:	d8c02417 	ldw	r3,144(sp)
1000ce28:	d8001b15 	stw	zero,108(sp)
1000ce2c:	d811883a 	mov	r8,sp
1000ce30:	1c07883a 	add	r3,r3,r16
1000ce34:	d8c02415 	stw	r3,144(sp)
1000ce38:	a0800007 	ldb	r2,0(r20)
1000ce3c:	1002e026 	beq	r2,zero,1000d9c0 <___vfiprintf_internal_r+0xcc8>
1000ce40:	a5800044 	addi	r22,r20,1
1000ce44:	a0c00047 	ldb	r3,1(r20)
1000ce48:	d8001d85 	stb	zero,118(sp)
1000ce4c:	0027883a 	mov	r19,zero
1000ce50:	d8002305 	stb	zero,140(sp)
1000ce54:	043fffc4 	movi	r16,-1
1000ce58:	d8002515 	stw	zero,148(sp)
1000ce5c:	0023883a 	mov	r17,zero
1000ce60:	05001604 	movi	r20,88
1000ce64:	05400244 	movi	r21,9
1000ce68:	402f883a 	mov	r23,r8
1000ce6c:	b5800044 	addi	r22,r22,1
1000ce70:	18bff804 	addi	r2,r3,-32
1000ce74:	a0827736 	bltu	r20,r2,1000d854 <___vfiprintf_internal_r+0xb5c>
1000ce78:	100490ba 	slli	r2,r2,2
1000ce7c:	01040074 	movhi	r4,4097
1000ce80:	2133a404 	addi	r4,r4,-12656
1000ce84:	1105883a 	add	r2,r2,r4
1000ce88:	10800017 	ldw	r2,0(r2)
1000ce8c:	1000683a 	jmp	r2
1000ce90:	1000d554 	ori	zero,r2,853
1000ce94:	1000d854 	ori	zero,r2,865
1000ce98:	1000d854 	ori	zero,r2,865
1000ce9c:	1000d570 	cmpltui	zero,r2,853
1000cea0:	1000d854 	ori	zero,r2,865
1000cea4:	1000d854 	ori	zero,r2,865
1000cea8:	1000d854 	ori	zero,r2,865
1000ceac:	1000d854 	ori	zero,r2,865
1000ceb0:	1000d854 	ori	zero,r2,865
1000ceb4:	1000d854 	ori	zero,r2,865
1000ceb8:	1000d778 	rdprs	zero,r2,861
1000cebc:	1000d79c 	xori	zero,r2,862
1000cec0:	1000d854 	ori	zero,r2,865
1000cec4:	1000d094 	ori	zero,r2,834
1000cec8:	1000d7b0 	cmpltui	zero,r2,862
1000cecc:	1000d854 	ori	zero,r2,865
1000ced0:	1000d57c 	xorhi	zero,r2,853
1000ced4:	1000d588 	cmpgei	zero,r2,854
1000ced8:	1000d588 	cmpgei	zero,r2,854
1000cedc:	1000d588 	cmpgei	zero,r2,854
1000cee0:	1000d588 	cmpgei	zero,r2,854
1000cee4:	1000d588 	cmpgei	zero,r2,854
1000cee8:	1000d588 	cmpgei	zero,r2,854
1000ceec:	1000d588 	cmpgei	zero,r2,854
1000cef0:	1000d588 	cmpgei	zero,r2,854
1000cef4:	1000d588 	cmpgei	zero,r2,854
1000cef8:	1000d854 	ori	zero,r2,865
1000cefc:	1000d854 	ori	zero,r2,865
1000cf00:	1000d854 	ori	zero,r2,865
1000cf04:	1000d854 	ori	zero,r2,865
1000cf08:	1000d854 	ori	zero,r2,865
1000cf0c:	1000d854 	ori	zero,r2,865
1000cf10:	1000d854 	ori	zero,r2,865
1000cf14:	1000d854 	ori	zero,r2,865
1000cf18:	1000d854 	ori	zero,r2,865
1000cf1c:	1000d854 	ori	zero,r2,865
1000cf20:	1000d5c8 	cmpgei	zero,r2,855
1000cf24:	1000d854 	ori	zero,r2,865
1000cf28:	1000d854 	ori	zero,r2,865
1000cf2c:	1000d854 	ori	zero,r2,865
1000cf30:	1000d854 	ori	zero,r2,865
1000cf34:	1000d854 	ori	zero,r2,865
1000cf38:	1000d854 	ori	zero,r2,865
1000cf3c:	1000d854 	ori	zero,r2,865
1000cf40:	1000d854 	ori	zero,r2,865
1000cf44:	1000d854 	ori	zero,r2,865
1000cf48:	1000d854 	ori	zero,r2,865
1000cf4c:	1000d604 	addi	zero,r2,856
1000cf50:	1000d854 	ori	zero,r2,865
1000cf54:	1000d854 	ori	zero,r2,865
1000cf58:	1000d854 	ori	zero,r2,865
1000cf5c:	1000d854 	ori	zero,r2,865
1000cf60:	1000d854 	ori	zero,r2,865
1000cf64:	1000d660 	cmpeqi	zero,r2,857
1000cf68:	1000d854 	ori	zero,r2,865
1000cf6c:	1000d854 	ori	zero,r2,865
1000cf70:	1000d6d4 	ori	zero,r2,859
1000cf74:	1000d854 	ori	zero,r2,865
1000cf78:	1000d854 	ori	zero,r2,865
1000cf7c:	1000d854 	ori	zero,r2,865
1000cf80:	1000d854 	ori	zero,r2,865
1000cf84:	1000d854 	ori	zero,r2,865
1000cf88:	1000d854 	ori	zero,r2,865
1000cf8c:	1000d854 	ori	zero,r2,865
1000cf90:	1000d854 	ori	zero,r2,865
1000cf94:	1000d854 	ori	zero,r2,865
1000cf98:	1000d854 	ori	zero,r2,865
1000cf9c:	1000d47c 	xorhi	zero,r2,849
1000cfa0:	1000d4ac 	andhi	zero,r2,850
1000cfa4:	1000d854 	ori	zero,r2,865
1000cfa8:	1000d854 	ori	zero,r2,865
1000cfac:	1000d854 	ori	zero,r2,865
1000cfb0:	1000d7fc 	xorhi	zero,r2,863
1000cfb4:	1000d4ac 	andhi	zero,r2,850
1000cfb8:	1000d854 	ori	zero,r2,865
1000cfbc:	1000d854 	ori	zero,r2,865
1000cfc0:	1000d354 	ori	zero,r2,845
1000cfc4:	1000d854 	ori	zero,r2,865
1000cfc8:	1000d368 	cmpgeui	zero,r2,845
1000cfcc:	1000d3a0 	cmpeqi	zero,r2,846
1000cfd0:	1000d0a0 	cmpeqi	zero,r2,834
1000cfd4:	1000d348 	cmpgei	zero,r2,845
1000cfd8:	1000d854 	ori	zero,r2,865
1000cfdc:	1000d714 	ori	zero,r2,860
1000cfe0:	1000d854 	ori	zero,r2,865
1000cfe4:	1000d760 	cmpeqi	zero,r2,861
1000cfe8:	1000d854 	ori	zero,r2,865
1000cfec:	1000d854 	ori	zero,r2,865
1000cff0:	1000d424 	muli	zero,r2,848
1000cff4:	42000204 	addi	r8,r8,8
1000cff8:	d8c02417 	ldw	r3,144(sp)
1000cffc:	1c07883a 	add	r3,r3,r16
1000d000:	d8c02415 	stw	r3,144(sp)
1000d004:	003f8c06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d008:	d9402017 	ldw	r5,128(sp)
1000d00c:	d9002117 	ldw	r4,132(sp)
1000d010:	00078b40 	call	100078b4 <__swsetup_r>
1000d014:	1003c11e 	bne	r2,zero,1000df1c <___vfiprintf_internal_r+0x1224>
1000d018:	d9402017 	ldw	r5,128(sp)
1000d01c:	00c00284 	movi	r3,10
1000d020:	2880030b 	ldhu	r2,12(r5)
1000d024:	1080068c 	andi	r2,r2,26
1000d028:	10ff581e 	bne	r2,r3,1000cd8c <__alt_data_end+0xf800cd8c>
1000d02c:	d8c02017 	ldw	r3,128(sp)
1000d030:	1880038f 	ldh	r2,14(r3)
1000d034:	103f5516 	blt	r2,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000d038:	d9c02217 	ldw	r7,136(sp)
1000d03c:	d9002117 	ldw	r4,132(sp)
1000d040:	a80d883a 	mov	r6,r21
1000d044:	180b883a 	mov	r5,r3
1000d048:	000e2200 	call	1000e220 <__sbprintf>
1000d04c:	dfc03517 	ldw	ra,212(sp)
1000d050:	df003417 	ldw	fp,208(sp)
1000d054:	ddc03317 	ldw	r23,204(sp)
1000d058:	dd803217 	ldw	r22,200(sp)
1000d05c:	dd403117 	ldw	r21,196(sp)
1000d060:	dd003017 	ldw	r20,192(sp)
1000d064:	dcc02f17 	ldw	r19,188(sp)
1000d068:	dc802e17 	ldw	r18,184(sp)
1000d06c:	dc402d17 	ldw	r17,180(sp)
1000d070:	dc002c17 	ldw	r16,176(sp)
1000d074:	dec03604 	addi	sp,sp,216
1000d078:	f800283a 	ret
1000d07c:	00098c00 	call	100098c0 <__sinit>
1000d080:	003f2f06 	br	1000cd40 <__alt_data_end+0xf800cd40>
1000d084:	d8c02517 	ldw	r3,148(sp)
1000d088:	d8802215 	stw	r2,136(sp)
1000d08c:	00c7c83a 	sub	r3,zero,r3
1000d090:	d8c02515 	stw	r3,148(sp)
1000d094:	8c400114 	ori	r17,r17,4
1000d098:	b0c00007 	ldb	r3,0(r22)
1000d09c:	003f7306 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d0a0:	00800c04 	movi	r2,48
1000d0a4:	d9402217 	ldw	r5,136(sp)
1000d0a8:	d8801d05 	stb	r2,116(sp)
1000d0ac:	00801e04 	movi	r2,120
1000d0b0:	d8801d45 	stb	r2,117(sp)
1000d0b4:	d8001d85 	stb	zero,118(sp)
1000d0b8:	b811883a 	mov	r8,r23
1000d0bc:	28c00104 	addi	r3,r5,4
1000d0c0:	2cc00017 	ldw	r19,0(r5)
1000d0c4:	0029883a 	mov	r20,zero
1000d0c8:	88800094 	ori	r2,r17,2
1000d0cc:	80032516 	blt	r16,zero,1000dd64 <___vfiprintf_internal_r+0x106c>
1000d0d0:	00bfdfc4 	movi	r2,-129
1000d0d4:	88a2703a 	and	r17,r17,r2
1000d0d8:	d8c02215 	stw	r3,136(sp)
1000d0dc:	8c400094 	ori	r17,r17,2
1000d0e0:	98032a1e 	bne	r19,zero,1000dd8c <___vfiprintf_internal_r+0x1094>
1000d0e4:	00840074 	movhi	r2,4097
1000d0e8:	10919304 	addi	r2,r2,17996
1000d0ec:	d8802615 	stw	r2,152(sp)
1000d0f0:	002b883a 	mov	r21,zero
1000d0f4:	8001741e 	bne	r16,zero,1000d6c8 <___vfiprintf_internal_r+0x9d0>
1000d0f8:	0021883a 	mov	r16,zero
1000d0fc:	0029883a 	mov	r20,zero
1000d100:	ddc01a04 	addi	r23,sp,104
1000d104:	8027883a 	mov	r19,r16
1000d108:	8500010e 	bge	r16,r20,1000d110 <___vfiprintf_internal_r+0x418>
1000d10c:	a027883a 	mov	r19,r20
1000d110:	ad403fcc 	andi	r21,r21,255
1000d114:	ad40201c 	xori	r21,r21,128
1000d118:	ad7fe004 	addi	r21,r21,-128
1000d11c:	a8000126 	beq	r21,zero,1000d124 <___vfiprintf_internal_r+0x42c>
1000d120:	9cc00044 	addi	r19,r19,1
1000d124:	89c0008c 	andi	r7,r17,2
1000d128:	38000126 	beq	r7,zero,1000d130 <___vfiprintf_internal_r+0x438>
1000d12c:	9cc00084 	addi	r19,r19,2
1000d130:	88c0210c 	andi	r3,r17,132
1000d134:	1801dd1e 	bne	r3,zero,1000d8ac <___vfiprintf_internal_r+0xbb4>
1000d138:	d9402517 	ldw	r5,148(sp)
1000d13c:	2cebc83a 	sub	r21,r5,r19
1000d140:	0541da0e 	bge	zero,r21,1000d8ac <___vfiprintf_internal_r+0xbb4>
1000d144:	07000404 	movi	fp,16
1000d148:	d8801c17 	ldw	r2,112(sp)
1000d14c:	e543be0e 	bge	fp,r21,1000e048 <___vfiprintf_internal_r+0x1350>
1000d150:	01440074 	movhi	r5,4097
1000d154:	2951f704 	addi	r5,r5,18396
1000d158:	dc002715 	stw	r16,156(sp)
1000d15c:	d9801b17 	ldw	r6,108(sp)
1000d160:	a821883a 	mov	r16,r21
1000d164:	d9402315 	stw	r5,140(sp)
1000d168:	028001c4 	movi	r10,7
1000d16c:	d9c02915 	stw	r7,164(sp)
1000d170:	182b883a 	mov	r21,r3
1000d174:	00000506 	br	1000d18c <___vfiprintf_internal_r+0x494>
1000d178:	31000084 	addi	r4,r6,2
1000d17c:	42000204 	addi	r8,r8,8
1000d180:	180d883a 	mov	r6,r3
1000d184:	843ffc04 	addi	r16,r16,-16
1000d188:	e4000f0e 	bge	fp,r16,1000d1c8 <___vfiprintf_internal_r+0x4d0>
1000d18c:	01040074 	movhi	r4,4097
1000d190:	10800404 	addi	r2,r2,16
1000d194:	30c00044 	addi	r3,r6,1
1000d198:	2111f704 	addi	r4,r4,18396
1000d19c:	41000015 	stw	r4,0(r8)
1000d1a0:	47000115 	stw	fp,4(r8)
1000d1a4:	d8801c15 	stw	r2,112(sp)
1000d1a8:	d8c01b15 	stw	r3,108(sp)
1000d1ac:	50fff20e 	bge	r10,r3,1000d178 <__alt_data_end+0xf800d178>
1000d1b0:	1001b21e 	bne	r2,zero,1000d87c <___vfiprintf_internal_r+0xb84>
1000d1b4:	843ffc04 	addi	r16,r16,-16
1000d1b8:	000d883a 	mov	r6,zero
1000d1bc:	01000044 	movi	r4,1
1000d1c0:	d811883a 	mov	r8,sp
1000d1c4:	e43ff116 	blt	fp,r16,1000d18c <__alt_data_end+0xf800d18c>
1000d1c8:	a807883a 	mov	r3,r21
1000d1cc:	d9c02917 	ldw	r7,164(sp)
1000d1d0:	802b883a 	mov	r21,r16
1000d1d4:	dc002717 	ldw	r16,156(sp)
1000d1d8:	d9402317 	ldw	r5,140(sp)
1000d1dc:	a885883a 	add	r2,r21,r2
1000d1e0:	45400115 	stw	r21,4(r8)
1000d1e4:	41400015 	stw	r5,0(r8)
1000d1e8:	d8801c15 	stw	r2,112(sp)
1000d1ec:	d9001b15 	stw	r4,108(sp)
1000d1f0:	014001c4 	movi	r5,7
1000d1f4:	29026216 	blt	r5,r4,1000db80 <___vfiprintf_internal_r+0xe88>
1000d1f8:	d9801d87 	ldb	r6,118(sp)
1000d1fc:	42000204 	addi	r8,r8,8
1000d200:	21400044 	addi	r5,r4,1
1000d204:	3001ae1e 	bne	r6,zero,1000d8c0 <___vfiprintf_internal_r+0xbc8>
1000d208:	3801bb26 	beq	r7,zero,1000d8f8 <___vfiprintf_internal_r+0xc00>
1000d20c:	d9001d04 	addi	r4,sp,116
1000d210:	10800084 	addi	r2,r2,2
1000d214:	41000015 	stw	r4,0(r8)
1000d218:	01000084 	movi	r4,2
1000d21c:	41000115 	stw	r4,4(r8)
1000d220:	d8801c15 	stw	r2,112(sp)
1000d224:	d9401b15 	stw	r5,108(sp)
1000d228:	010001c4 	movi	r4,7
1000d22c:	2142680e 	bge	r4,r5,1000dbd0 <___vfiprintf_internal_r+0xed8>
1000d230:	1002b11e 	bne	r2,zero,1000dcf8 <___vfiprintf_internal_r+0x1000>
1000d234:	01802004 	movi	r6,128
1000d238:	01400044 	movi	r5,1
1000d23c:	0009883a 	mov	r4,zero
1000d240:	d811883a 	mov	r8,sp
1000d244:	1981ae1e 	bne	r3,r6,1000d900 <___vfiprintf_internal_r+0xc08>
1000d248:	d8c02517 	ldw	r3,148(sp)
1000d24c:	1cf9c83a 	sub	fp,r3,r19
1000d250:	0701ab0e 	bge	zero,fp,1000d900 <___vfiprintf_internal_r+0xc08>
1000d254:	05400404 	movi	r21,16
1000d258:	af03a90e 	bge	r21,fp,1000e100 <___vfiprintf_internal_r+0x1408>
1000d25c:	01440074 	movhi	r5,4097
1000d260:	2951f304 	addi	r5,r5,18380
1000d264:	d9402315 	stw	r5,140(sp)
1000d268:	01c001c4 	movi	r7,7
1000d26c:	00000506 	br	1000d284 <___vfiprintf_internal_r+0x58c>
1000d270:	21800084 	addi	r6,r4,2
1000d274:	42000204 	addi	r8,r8,8
1000d278:	1809883a 	mov	r4,r3
1000d27c:	e73ffc04 	addi	fp,fp,-16
1000d280:	af000d0e 	bge	r21,fp,1000d2b8 <___vfiprintf_internal_r+0x5c0>
1000d284:	10800404 	addi	r2,r2,16
1000d288:	20c00044 	addi	r3,r4,1
1000d28c:	44800015 	stw	r18,0(r8)
1000d290:	45400115 	stw	r21,4(r8)
1000d294:	d8801c15 	stw	r2,112(sp)
1000d298:	d8c01b15 	stw	r3,108(sp)
1000d29c:	38fff40e 	bge	r7,r3,1000d270 <__alt_data_end+0xf800d270>
1000d2a0:	10022b1e 	bne	r2,zero,1000db50 <___vfiprintf_internal_r+0xe58>
1000d2a4:	e73ffc04 	addi	fp,fp,-16
1000d2a8:	01800044 	movi	r6,1
1000d2ac:	0009883a 	mov	r4,zero
1000d2b0:	d811883a 	mov	r8,sp
1000d2b4:	af3ff316 	blt	r21,fp,1000d284 <__alt_data_end+0xf800d284>
1000d2b8:	d8c02317 	ldw	r3,140(sp)
1000d2bc:	1705883a 	add	r2,r2,fp
1000d2c0:	47000115 	stw	fp,4(r8)
1000d2c4:	40c00015 	stw	r3,0(r8)
1000d2c8:	d8801c15 	stw	r2,112(sp)
1000d2cc:	d9801b15 	stw	r6,108(sp)
1000d2d0:	00c001c4 	movi	r3,7
1000d2d4:	19829416 	blt	r3,r6,1000dd28 <___vfiprintf_internal_r+0x1030>
1000d2d8:	8521c83a 	sub	r16,r16,r20
1000d2dc:	42000204 	addi	r8,r8,8
1000d2e0:	31400044 	addi	r5,r6,1
1000d2e4:	3009883a 	mov	r4,r6
1000d2e8:	04018716 	blt	zero,r16,1000d908 <___vfiprintf_internal_r+0xc10>
1000d2ec:	a085883a 	add	r2,r20,r2
1000d2f0:	45c00015 	stw	r23,0(r8)
1000d2f4:	45000115 	stw	r20,4(r8)
1000d2f8:	d8801c15 	stw	r2,112(sp)
1000d2fc:	d9401b15 	stw	r5,108(sp)
1000d300:	00c001c4 	movi	r3,7
1000d304:	1941c20e 	bge	r3,r5,1000da10 <___vfiprintf_internal_r+0xd18>
1000d308:	1002531e 	bne	r2,zero,1000dc58 <___vfiprintf_internal_r+0xf60>
1000d30c:	d8001b15 	stw	zero,108(sp)
1000d310:	8c40010c 	andi	r17,r17,4
1000d314:	88023226 	beq	r17,zero,1000dbe0 <___vfiprintf_internal_r+0xee8>
1000d318:	d9002517 	ldw	r4,148(sp)
1000d31c:	24e3c83a 	sub	r17,r4,r19
1000d320:	04432916 	blt	zero,r17,1000dfc8 <___vfiprintf_internal_r+0x12d0>
1000d324:	d8802517 	ldw	r2,148(sp)
1000d328:	14c0010e 	bge	r2,r19,1000d330 <___vfiprintf_internal_r+0x638>
1000d32c:	9805883a 	mov	r2,r19
1000d330:	d8c02417 	ldw	r3,144(sp)
1000d334:	1887883a 	add	r3,r3,r2
1000d338:	d8c02415 	stw	r3,144(sp)
1000d33c:	d8001b15 	stw	zero,108(sp)
1000d340:	d811883a 	mov	r8,sp
1000d344:	003ea006 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000d348:	8c400814 	ori	r17,r17,32
1000d34c:	b0c00007 	ldb	r3,0(r22)
1000d350:	003ec606 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d354:	b0c00007 	ldb	r3,0(r22)
1000d358:	00801b04 	movi	r2,108
1000d35c:	18832026 	beq	r3,r2,1000dfe0 <___vfiprintf_internal_r+0x12e8>
1000d360:	8c400414 	ori	r17,r17,16
1000d364:	003ec106 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d368:	9cc03fcc 	andi	r19,r19,255
1000d36c:	b811883a 	mov	r8,r23
1000d370:	9803981e 	bne	r19,zero,1000e1d4 <___vfiprintf_internal_r+0x14dc>
1000d374:	8880080c 	andi	r2,r17,32
1000d378:	1002be26 	beq	r2,zero,1000de74 <___vfiprintf_internal_r+0x117c>
1000d37c:	d9002217 	ldw	r4,136(sp)
1000d380:	d9402417 	ldw	r5,144(sp)
1000d384:	20800017 	ldw	r2,0(r4)
1000d388:	2807d7fa 	srai	r3,r5,31
1000d38c:	21000104 	addi	r4,r4,4
1000d390:	d9002215 	stw	r4,136(sp)
1000d394:	11400015 	stw	r5,0(r2)
1000d398:	10c00115 	stw	r3,4(r2)
1000d39c:	003e8a06 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000d3a0:	9cc03fcc 	andi	r19,r19,255
1000d3a4:	b811883a 	mov	r8,r23
1000d3a8:	9803871e 	bne	r19,zero,1000e1c8 <___vfiprintf_internal_r+0x14d0>
1000d3ac:	8880080c 	andi	r2,r17,32
1000d3b0:	10009a26 	beq	r2,zero,1000d61c <___vfiprintf_internal_r+0x924>
1000d3b4:	d9002217 	ldw	r4,136(sp)
1000d3b8:	d8001d85 	stb	zero,118(sp)
1000d3bc:	20800204 	addi	r2,r4,8
1000d3c0:	24c00017 	ldw	r19,0(r4)
1000d3c4:	25000117 	ldw	r20,4(r4)
1000d3c8:	8002a416 	blt	r16,zero,1000de5c <___vfiprintf_internal_r+0x1164>
1000d3cc:	013fdfc4 	movi	r4,-129
1000d3d0:	9d06b03a 	or	r3,r19,r20
1000d3d4:	d8802215 	stw	r2,136(sp)
1000d3d8:	8922703a 	and	r17,r17,r4
1000d3dc:	18009b26 	beq	r3,zero,1000d64c <___vfiprintf_internal_r+0x954>
1000d3e0:	002b883a 	mov	r21,zero
1000d3e4:	ddc01a04 	addi	r23,sp,104
1000d3e8:	9806d0fa 	srli	r3,r19,3
1000d3ec:	a008977a 	slli	r4,r20,29
1000d3f0:	a028d0fa 	srli	r20,r20,3
1000d3f4:	9cc001cc 	andi	r19,r19,7
1000d3f8:	98800c04 	addi	r2,r19,48
1000d3fc:	bdffffc4 	addi	r23,r23,-1
1000d400:	20e6b03a 	or	r19,r4,r3
1000d404:	b8800005 	stb	r2,0(r23)
1000d408:	9d06b03a 	or	r3,r19,r20
1000d40c:	183ff61e 	bne	r3,zero,1000d3e8 <__alt_data_end+0xf800d3e8>
1000d410:	88c0004c 	andi	r3,r17,1
1000d414:	18021f1e 	bne	r3,zero,1000dc94 <___vfiprintf_internal_r+0xf9c>
1000d418:	d9401e17 	ldw	r5,120(sp)
1000d41c:	2de9c83a 	sub	r20,r5,r23
1000d420:	003f3806 	br	1000d104 <__alt_data_end+0xf800d104>
1000d424:	9cc03fcc 	andi	r19,r19,255
1000d428:	b811883a 	mov	r8,r23
1000d42c:	98034f1e 	bne	r19,zero,1000e16c <___vfiprintf_internal_r+0x1474>
1000d430:	00840074 	movhi	r2,4097
1000d434:	10919304 	addi	r2,r2,17996
1000d438:	d8802615 	stw	r2,152(sp)
1000d43c:	8880080c 	andi	r2,r17,32
1000d440:	1000ac26 	beq	r2,zero,1000d6f4 <___vfiprintf_internal_r+0x9fc>
1000d444:	d9002217 	ldw	r4,136(sp)
1000d448:	24c00017 	ldw	r19,0(r4)
1000d44c:	25000117 	ldw	r20,4(r4)
1000d450:	21000204 	addi	r4,r4,8
1000d454:	d9002215 	stw	r4,136(sp)
1000d458:	8880004c 	andi	r2,r17,1
1000d45c:	1001e726 	beq	r2,zero,1000dbfc <___vfiprintf_internal_r+0xf04>
1000d460:	9d04b03a 	or	r2,r19,r20
1000d464:	10025c1e 	bne	r2,zero,1000ddd8 <___vfiprintf_internal_r+0x10e0>
1000d468:	d8001d85 	stb	zero,118(sp)
1000d46c:	80024416 	blt	r16,zero,1000dd80 <___vfiprintf_internal_r+0x1088>
1000d470:	00bfdfc4 	movi	r2,-129
1000d474:	88a2703a 	and	r17,r17,r2
1000d478:	003f1d06 	br	1000d0f0 <__alt_data_end+0xf800d0f0>
1000d47c:	d8c02217 	ldw	r3,136(sp)
1000d480:	04c00044 	movi	r19,1
1000d484:	b811883a 	mov	r8,r23
1000d488:	18800017 	ldw	r2,0(r3)
1000d48c:	18c00104 	addi	r3,r3,4
1000d490:	d8001d85 	stb	zero,118(sp)
1000d494:	d8801005 	stb	r2,64(sp)
1000d498:	d8c02215 	stw	r3,136(sp)
1000d49c:	9829883a 	mov	r20,r19
1000d4a0:	ddc01004 	addi	r23,sp,64
1000d4a4:	0021883a 	mov	r16,zero
1000d4a8:	003f1e06 	br	1000d124 <__alt_data_end+0xf800d124>
1000d4ac:	9cc03fcc 	andi	r19,r19,255
1000d4b0:	b811883a 	mov	r8,r23
1000d4b4:	9803331e 	bne	r19,zero,1000e184 <___vfiprintf_internal_r+0x148c>
1000d4b8:	8880080c 	andi	r2,r17,32
1000d4bc:	10004826 	beq	r2,zero,1000d5e0 <___vfiprintf_internal_r+0x8e8>
1000d4c0:	d9002217 	ldw	r4,136(sp)
1000d4c4:	20800117 	ldw	r2,4(r4)
1000d4c8:	24c00017 	ldw	r19,0(r4)
1000d4cc:	21000204 	addi	r4,r4,8
1000d4d0:	d9002215 	stw	r4,136(sp)
1000d4d4:	1029883a 	mov	r20,r2
1000d4d8:	10024c16 	blt	r2,zero,1000de0c <___vfiprintf_internal_r+0x1114>
1000d4dc:	dd401d83 	ldbu	r21,118(sp)
1000d4e0:	80007116 	blt	r16,zero,1000d6a8 <___vfiprintf_internal_r+0x9b0>
1000d4e4:	00ffdfc4 	movi	r3,-129
1000d4e8:	9d04b03a 	or	r2,r19,r20
1000d4ec:	88e2703a 	and	r17,r17,r3
1000d4f0:	1000d126 	beq	r2,zero,1000d838 <___vfiprintf_internal_r+0xb40>
1000d4f4:	a0023526 	beq	r20,zero,1000ddcc <___vfiprintf_internal_r+0x10d4>
1000d4f8:	ddc01a04 	addi	r23,sp,104
1000d4fc:	4039883a 	mov	fp,r8
1000d500:	9809883a 	mov	r4,r19
1000d504:	a00b883a 	mov	r5,r20
1000d508:	01800284 	movi	r6,10
1000d50c:	000f883a 	mov	r7,zero
1000d510:	000f3300 	call	1000f330 <__umoddi3>
1000d514:	10800c04 	addi	r2,r2,48
1000d518:	bdffffc4 	addi	r23,r23,-1
1000d51c:	9809883a 	mov	r4,r19
1000d520:	a00b883a 	mov	r5,r20
1000d524:	b8800005 	stb	r2,0(r23)
1000d528:	01800284 	movi	r6,10
1000d52c:	000f883a 	mov	r7,zero
1000d530:	000ed340 	call	1000ed34 <__udivdi3>
1000d534:	1027883a 	mov	r19,r2
1000d538:	10c4b03a 	or	r2,r2,r3
1000d53c:	1829883a 	mov	r20,r3
1000d540:	103fef1e 	bne	r2,zero,1000d500 <__alt_data_end+0xf800d500>
1000d544:	d9001e17 	ldw	r4,120(sp)
1000d548:	e011883a 	mov	r8,fp
1000d54c:	25e9c83a 	sub	r20,r4,r23
1000d550:	003eec06 	br	1000d104 <__alt_data_end+0xf800d104>
1000d554:	d8802307 	ldb	r2,140(sp)
1000d558:	1002361e 	bne	r2,zero,1000de34 <___vfiprintf_internal_r+0x113c>
1000d55c:	00c00804 	movi	r3,32
1000d560:	d8c02305 	stb	r3,140(sp)
1000d564:	04c00044 	movi	r19,1
1000d568:	b0c00007 	ldb	r3,0(r22)
1000d56c:	003e3f06 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d570:	8c400054 	ori	r17,r17,1
1000d574:	b0c00007 	ldb	r3,0(r22)
1000d578:	003e3c06 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d57c:	8c402014 	ori	r17,r17,128
1000d580:	b0c00007 	ldb	r3,0(r22)
1000d584:	003e3906 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d588:	dc002715 	stw	r16,156(sp)
1000d58c:	d8002515 	stw	zero,148(sp)
1000d590:	1f3ff404 	addi	fp,r3,-48
1000d594:	0009883a 	mov	r4,zero
1000d598:	b021883a 	mov	r16,r22
1000d59c:	01400284 	movi	r5,10
1000d5a0:	00052300 	call	10005230 <__mulsi3>
1000d5a4:	80c00007 	ldb	r3,0(r16)
1000d5a8:	e089883a 	add	r4,fp,r2
1000d5ac:	b5800044 	addi	r22,r22,1
1000d5b0:	1f3ff404 	addi	fp,r3,-48
1000d5b4:	b021883a 	mov	r16,r22
1000d5b8:	af3ff82e 	bgeu	r21,fp,1000d59c <__alt_data_end+0xf800d59c>
1000d5bc:	d9002515 	stw	r4,148(sp)
1000d5c0:	dc002717 	ldw	r16,156(sp)
1000d5c4:	003e2a06 	br	1000ce70 <__alt_data_end+0xf800ce70>
1000d5c8:	9cc03fcc 	andi	r19,r19,255
1000d5cc:	b811883a 	mov	r8,r23
1000d5d0:	9802e91e 	bne	r19,zero,1000e178 <___vfiprintf_internal_r+0x1480>
1000d5d4:	8c400414 	ori	r17,r17,16
1000d5d8:	8880080c 	andi	r2,r17,32
1000d5dc:	103fb81e 	bne	r2,zero,1000d4c0 <__alt_data_end+0xf800d4c0>
1000d5e0:	8880040c 	andi	r2,r17,16
1000d5e4:	10022e26 	beq	r2,zero,1000dea0 <___vfiprintf_internal_r+0x11a8>
1000d5e8:	d9402217 	ldw	r5,136(sp)
1000d5ec:	2cc00017 	ldw	r19,0(r5)
1000d5f0:	29400104 	addi	r5,r5,4
1000d5f4:	d9402215 	stw	r5,136(sp)
1000d5f8:	9829d7fa 	srai	r20,r19,31
1000d5fc:	a005883a 	mov	r2,r20
1000d600:	003fb506 	br	1000d4d8 <__alt_data_end+0xf800d4d8>
1000d604:	9cc03fcc 	andi	r19,r19,255
1000d608:	b811883a 	mov	r8,r23
1000d60c:	9802fa1e 	bne	r19,zero,1000e1f8 <___vfiprintf_internal_r+0x1500>
1000d610:	8c400414 	ori	r17,r17,16
1000d614:	8880080c 	andi	r2,r17,32
1000d618:	103f661e 	bne	r2,zero,1000d3b4 <__alt_data_end+0xf800d3b4>
1000d61c:	8880040c 	andi	r2,r17,16
1000d620:	10020626 	beq	r2,zero,1000de3c <___vfiprintf_internal_r+0x1144>
1000d624:	d9402217 	ldw	r5,136(sp)
1000d628:	d8001d85 	stb	zero,118(sp)
1000d62c:	0029883a 	mov	r20,zero
1000d630:	28800104 	addi	r2,r5,4
1000d634:	2cc00017 	ldw	r19,0(r5)
1000d638:	80020816 	blt	r16,zero,1000de5c <___vfiprintf_internal_r+0x1164>
1000d63c:	00ffdfc4 	movi	r3,-129
1000d640:	d8802215 	stw	r2,136(sp)
1000d644:	88e2703a 	and	r17,r17,r3
1000d648:	983f651e 	bne	r19,zero,1000d3e0 <__alt_data_end+0xf800d3e0>
1000d64c:	002b883a 	mov	r21,zero
1000d650:	8002cf26 	beq	r16,zero,1000e190 <___vfiprintf_internal_r+0x1498>
1000d654:	0027883a 	mov	r19,zero
1000d658:	0029883a 	mov	r20,zero
1000d65c:	003f6106 	br	1000d3e4 <__alt_data_end+0xf800d3e4>
1000d660:	9cc03fcc 	andi	r19,r19,255
1000d664:	b811883a 	mov	r8,r23
1000d668:	9802e01e 	bne	r19,zero,1000e1ec <___vfiprintf_internal_r+0x14f4>
1000d66c:	8c400414 	ori	r17,r17,16
1000d670:	8880080c 	andi	r2,r17,32
1000d674:	1000641e 	bne	r2,zero,1000d808 <___vfiprintf_internal_r+0xb10>
1000d678:	8880040c 	andi	r2,r17,16
1000d67c:	1001c81e 	bne	r2,zero,1000dda0 <___vfiprintf_internal_r+0x10a8>
1000d680:	8880100c 	andi	r2,r17,64
1000d684:	d8001d85 	stb	zero,118(sp)
1000d688:	1002281e 	bne	r2,zero,1000df2c <___vfiprintf_internal_r+0x1234>
1000d68c:	d9002217 	ldw	r4,136(sp)
1000d690:	0029883a 	mov	r20,zero
1000d694:	20800104 	addi	r2,r4,4
1000d698:	24c00017 	ldw	r19,0(r4)
1000d69c:	8001c60e 	bge	r16,zero,1000ddb8 <___vfiprintf_internal_r+0x10c0>
1000d6a0:	d8802215 	stw	r2,136(sp)
1000d6a4:	002b883a 	mov	r21,zero
1000d6a8:	9d04b03a 	or	r2,r19,r20
1000d6ac:	103f911e 	bne	r2,zero,1000d4f4 <__alt_data_end+0xf800d4f4>
1000d6b0:	00800044 	movi	r2,1
1000d6b4:	10803fcc 	andi	r2,r2,255
1000d6b8:	00c00044 	movi	r3,1
1000d6bc:	10c05f26 	beq	r2,r3,1000d83c <___vfiprintf_internal_r+0xb44>
1000d6c0:	00c00084 	movi	r3,2
1000d6c4:	10ffe31e 	bne	r2,r3,1000d654 <__alt_data_end+0xf800d654>
1000d6c8:	0027883a 	mov	r19,zero
1000d6cc:	0029883a 	mov	r20,zero
1000d6d0:	00015106 	br	1000dc18 <___vfiprintf_internal_r+0xf20>
1000d6d4:	9cc03fcc 	andi	r19,r19,255
1000d6d8:	b811883a 	mov	r8,r23
1000d6dc:	9802c01e 	bne	r19,zero,1000e1e0 <___vfiprintf_internal_r+0x14e8>
1000d6e0:	01440074 	movhi	r5,4097
1000d6e4:	29518e04 	addi	r5,r5,17976
1000d6e8:	d9402615 	stw	r5,152(sp)
1000d6ec:	8880080c 	andi	r2,r17,32
1000d6f0:	103f541e 	bne	r2,zero,1000d444 <__alt_data_end+0xf800d444>
1000d6f4:	8880040c 	andi	r2,r17,16
1000d6f8:	1001f226 	beq	r2,zero,1000dec4 <___vfiprintf_internal_r+0x11cc>
1000d6fc:	d9402217 	ldw	r5,136(sp)
1000d700:	0029883a 	mov	r20,zero
1000d704:	2cc00017 	ldw	r19,0(r5)
1000d708:	29400104 	addi	r5,r5,4
1000d70c:	d9402215 	stw	r5,136(sp)
1000d710:	003f5106 	br	1000d458 <__alt_data_end+0xf800d458>
1000d714:	d8c02217 	ldw	r3,136(sp)
1000d718:	b811883a 	mov	r8,r23
1000d71c:	d8001d85 	stb	zero,118(sp)
1000d720:	1dc00017 	ldw	r23,0(r3)
1000d724:	1f000104 	addi	fp,r3,4
1000d728:	b8025926 	beq	r23,zero,1000e090 <___vfiprintf_internal_r+0x1398>
1000d72c:	80023316 	blt	r16,zero,1000dffc <___vfiprintf_internal_r+0x1304>
1000d730:	800d883a 	mov	r6,r16
1000d734:	000b883a 	mov	r5,zero
1000d738:	b809883a 	mov	r4,r23
1000d73c:	da002a15 	stw	r8,168(sp)
1000d740:	000ae380 	call	1000ae38 <memchr>
1000d744:	da002a17 	ldw	r8,168(sp)
1000d748:	10026826 	beq	r2,zero,1000e0ec <___vfiprintf_internal_r+0x13f4>
1000d74c:	15e9c83a 	sub	r20,r2,r23
1000d750:	dd401d83 	ldbu	r21,118(sp)
1000d754:	df002215 	stw	fp,136(sp)
1000d758:	0021883a 	mov	r16,zero
1000d75c:	003e6906 	br	1000d104 <__alt_data_end+0xf800d104>
1000d760:	9cc03fcc 	andi	r19,r19,255
1000d764:	b811883a 	mov	r8,r23
1000d768:	983fc126 	beq	r19,zero,1000d670 <__alt_data_end+0xf800d670>
1000d76c:	d8c02303 	ldbu	r3,140(sp)
1000d770:	d8c01d85 	stb	r3,118(sp)
1000d774:	003fbe06 	br	1000d670 <__alt_data_end+0xf800d670>
1000d778:	d9002217 	ldw	r4,136(sp)
1000d77c:	d9402217 	ldw	r5,136(sp)
1000d780:	21000017 	ldw	r4,0(r4)
1000d784:	28800104 	addi	r2,r5,4
1000d788:	d9002515 	stw	r4,148(sp)
1000d78c:	203e3d16 	blt	r4,zero,1000d084 <__alt_data_end+0xf800d084>
1000d790:	d8802215 	stw	r2,136(sp)
1000d794:	b0c00007 	ldb	r3,0(r22)
1000d798:	003db406 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d79c:	00c00ac4 	movi	r3,43
1000d7a0:	d8c02305 	stb	r3,140(sp)
1000d7a4:	04c00044 	movi	r19,1
1000d7a8:	b0c00007 	ldb	r3,0(r22)
1000d7ac:	003daf06 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d7b0:	b0c00007 	ldb	r3,0(r22)
1000d7b4:	01000a84 	movi	r4,42
1000d7b8:	b4000044 	addi	r16,r22,1
1000d7bc:	19025e26 	beq	r3,r4,1000e138 <___vfiprintf_internal_r+0x1440>
1000d7c0:	1f3ff404 	addi	fp,r3,-48
1000d7c4:	0009883a 	mov	r4,zero
1000d7c8:	af025236 	bltu	r21,fp,1000e114 <___vfiprintf_internal_r+0x141c>
1000d7cc:	01400284 	movi	r5,10
1000d7d0:	00052300 	call	10005230 <__mulsi3>
1000d7d4:	80c00007 	ldb	r3,0(r16)
1000d7d8:	1709883a 	add	r4,r2,fp
1000d7dc:	85800044 	addi	r22,r16,1
1000d7e0:	1f3ff404 	addi	fp,r3,-48
1000d7e4:	b021883a 	mov	r16,r22
1000d7e8:	af3ff82e 	bgeu	r21,fp,1000d7cc <__alt_data_end+0xf800d7cc>
1000d7ec:	2021883a 	mov	r16,r4
1000d7f0:	203d9f0e 	bge	r4,zero,1000ce70 <__alt_data_end+0xf800ce70>
1000d7f4:	043fffc4 	movi	r16,-1
1000d7f8:	003d9d06 	br	1000ce70 <__alt_data_end+0xf800ce70>
1000d7fc:	8c401014 	ori	r17,r17,64
1000d800:	b0c00007 	ldb	r3,0(r22)
1000d804:	003d9906 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000d808:	d9002217 	ldw	r4,136(sp)
1000d80c:	d8001d85 	stb	zero,118(sp)
1000d810:	20c00204 	addi	r3,r4,8
1000d814:	24c00017 	ldw	r19,0(r4)
1000d818:	25000117 	ldw	r20,4(r4)
1000d81c:	8001e716 	blt	r16,zero,1000dfbc <___vfiprintf_internal_r+0x12c4>
1000d820:	013fdfc4 	movi	r4,-129
1000d824:	9d04b03a 	or	r2,r19,r20
1000d828:	d8c02215 	stw	r3,136(sp)
1000d82c:	8922703a 	and	r17,r17,r4
1000d830:	002b883a 	mov	r21,zero
1000d834:	103f2f1e 	bne	r2,zero,1000d4f4 <__alt_data_end+0xf800d4f4>
1000d838:	803e2f26 	beq	r16,zero,1000d0f8 <__alt_data_end+0xf800d0f8>
1000d83c:	0027883a 	mov	r19,zero
1000d840:	9cc00c04 	addi	r19,r19,48
1000d844:	dcc019c5 	stb	r19,103(sp)
1000d848:	dd002817 	ldw	r20,160(sp)
1000d84c:	ddc019c4 	addi	r23,sp,103
1000d850:	003e2c06 	br	1000d104 <__alt_data_end+0xf800d104>
1000d854:	9cc03fcc 	andi	r19,r19,255
1000d858:	b811883a 	mov	r8,r23
1000d85c:	9802571e 	bne	r19,zero,1000e1bc <___vfiprintf_internal_r+0x14c4>
1000d860:	18005726 	beq	r3,zero,1000d9c0 <___vfiprintf_internal_r+0xcc8>
1000d864:	04c00044 	movi	r19,1
1000d868:	d8c01005 	stb	r3,64(sp)
1000d86c:	d8001d85 	stb	zero,118(sp)
1000d870:	9829883a 	mov	r20,r19
1000d874:	ddc01004 	addi	r23,sp,64
1000d878:	003f0a06 	br	1000d4a4 <__alt_data_end+0xf800d4a4>
1000d87c:	d9402017 	ldw	r5,128(sp)
1000d880:	d9002117 	ldw	r4,132(sp)
1000d884:	d9801a04 	addi	r6,sp,104
1000d888:	da802a15 	stw	r10,168(sp)
1000d88c:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000d890:	da802a17 	ldw	r10,168(sp)
1000d894:	1000501e 	bne	r2,zero,1000d9d8 <___vfiprintf_internal_r+0xce0>
1000d898:	d9801b17 	ldw	r6,108(sp)
1000d89c:	d8801c17 	ldw	r2,112(sp)
1000d8a0:	d811883a 	mov	r8,sp
1000d8a4:	31000044 	addi	r4,r6,1
1000d8a8:	003e3606 	br	1000d184 <__alt_data_end+0xf800d184>
1000d8ac:	d9001b17 	ldw	r4,108(sp)
1000d8b0:	d8801c17 	ldw	r2,112(sp)
1000d8b4:	21400044 	addi	r5,r4,1
1000d8b8:	d9801d87 	ldb	r6,118(sp)
1000d8bc:	303e5226 	beq	r6,zero,1000d208 <__alt_data_end+0xf800d208>
1000d8c0:	01800044 	movi	r6,1
1000d8c4:	d9001d84 	addi	r4,sp,118
1000d8c8:	1185883a 	add	r2,r2,r6
1000d8cc:	41000015 	stw	r4,0(r8)
1000d8d0:	41800115 	stw	r6,4(r8)
1000d8d4:	d8801c15 	stw	r2,112(sp)
1000d8d8:	d9401b15 	stw	r5,108(sp)
1000d8dc:	010001c4 	movi	r4,7
1000d8e0:	2140b00e 	bge	r4,r5,1000dba4 <___vfiprintf_internal_r+0xeac>
1000d8e4:	1000f61e 	bne	r2,zero,1000dcc0 <___vfiprintf_internal_r+0xfc8>
1000d8e8:	3800b31e 	bne	r7,zero,1000dbb8 <___vfiprintf_internal_r+0xec0>
1000d8ec:	0009883a 	mov	r4,zero
1000d8f0:	300b883a 	mov	r5,r6
1000d8f4:	d811883a 	mov	r8,sp
1000d8f8:	01802004 	movi	r6,128
1000d8fc:	19be5226 	beq	r3,r6,1000d248 <__alt_data_end+0xf800d248>
1000d900:	8521c83a 	sub	r16,r16,r20
1000d904:	043e790e 	bge	zero,r16,1000d2ec <__alt_data_end+0xf800d2ec>
1000d908:	05400404 	movi	r21,16
1000d90c:	ac01b00e 	bge	r21,r16,1000dfd0 <___vfiprintf_internal_r+0x12d8>
1000d910:	01440074 	movhi	r5,4097
1000d914:	2951f304 	addi	r5,r5,18380
1000d918:	d9402315 	stw	r5,140(sp)
1000d91c:	070001c4 	movi	fp,7
1000d920:	00000506 	br	1000d938 <___vfiprintf_internal_r+0xc40>
1000d924:	21400084 	addi	r5,r4,2
1000d928:	42000204 	addi	r8,r8,8
1000d92c:	1809883a 	mov	r4,r3
1000d930:	843ffc04 	addi	r16,r16,-16
1000d934:	ac000d0e 	bge	r21,r16,1000d96c <___vfiprintf_internal_r+0xc74>
1000d938:	10800404 	addi	r2,r2,16
1000d93c:	20c00044 	addi	r3,r4,1
1000d940:	44800015 	stw	r18,0(r8)
1000d944:	45400115 	stw	r21,4(r8)
1000d948:	d8801c15 	stw	r2,112(sp)
1000d94c:	d8c01b15 	stw	r3,108(sp)
1000d950:	e0fff40e 	bge	fp,r3,1000d924 <__alt_data_end+0xf800d924>
1000d954:	1000101e 	bne	r2,zero,1000d998 <___vfiprintf_internal_r+0xca0>
1000d958:	843ffc04 	addi	r16,r16,-16
1000d95c:	01400044 	movi	r5,1
1000d960:	0009883a 	mov	r4,zero
1000d964:	d811883a 	mov	r8,sp
1000d968:	ac3ff316 	blt	r21,r16,1000d938 <__alt_data_end+0xf800d938>
1000d96c:	d8c02317 	ldw	r3,140(sp)
1000d970:	1405883a 	add	r2,r2,r16
1000d974:	44000115 	stw	r16,4(r8)
1000d978:	40c00015 	stw	r3,0(r8)
1000d97c:	d8801c15 	stw	r2,112(sp)
1000d980:	d9401b15 	stw	r5,108(sp)
1000d984:	00c001c4 	movi	r3,7
1000d988:	19401916 	blt	r3,r5,1000d9f0 <___vfiprintf_internal_r+0xcf8>
1000d98c:	42000204 	addi	r8,r8,8
1000d990:	29400044 	addi	r5,r5,1
1000d994:	003e5506 	br	1000d2ec <__alt_data_end+0xf800d2ec>
1000d998:	d9402017 	ldw	r5,128(sp)
1000d99c:	d9002117 	ldw	r4,132(sp)
1000d9a0:	d9801a04 	addi	r6,sp,104
1000d9a4:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000d9a8:	10000b1e 	bne	r2,zero,1000d9d8 <___vfiprintf_internal_r+0xce0>
1000d9ac:	d9001b17 	ldw	r4,108(sp)
1000d9b0:	d8801c17 	ldw	r2,112(sp)
1000d9b4:	d811883a 	mov	r8,sp
1000d9b8:	21400044 	addi	r5,r4,1
1000d9bc:	003fdc06 	br	1000d930 <__alt_data_end+0xf800d930>
1000d9c0:	d8801c17 	ldw	r2,112(sp)
1000d9c4:	10000426 	beq	r2,zero,1000d9d8 <___vfiprintf_internal_r+0xce0>
1000d9c8:	d9402017 	ldw	r5,128(sp)
1000d9cc:	d9002117 	ldw	r4,132(sp)
1000d9d0:	d9801a04 	addi	r6,sp,104
1000d9d4:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000d9d8:	d9402017 	ldw	r5,128(sp)
1000d9dc:	2880030b 	ldhu	r2,12(r5)
1000d9e0:	1080100c 	andi	r2,r2,64
1000d9e4:	10014d1e 	bne	r2,zero,1000df1c <___vfiprintf_internal_r+0x1224>
1000d9e8:	d8802417 	ldw	r2,144(sp)
1000d9ec:	003d9706 	br	1000d04c <__alt_data_end+0xf800d04c>
1000d9f0:	1000d21e 	bne	r2,zero,1000dd3c <___vfiprintf_internal_r+0x1044>
1000d9f4:	00c00044 	movi	r3,1
1000d9f8:	a005883a 	mov	r2,r20
1000d9fc:	ddc00015 	stw	r23,0(sp)
1000da00:	dd000115 	stw	r20,4(sp)
1000da04:	dd001c15 	stw	r20,112(sp)
1000da08:	d8c01b15 	stw	r3,108(sp)
1000da0c:	d811883a 	mov	r8,sp
1000da10:	42000204 	addi	r8,r8,8
1000da14:	8c40010c 	andi	r17,r17,4
1000da18:	88004026 	beq	r17,zero,1000db1c <___vfiprintf_internal_r+0xe24>
1000da1c:	d9002517 	ldw	r4,148(sp)
1000da20:	24e3c83a 	sub	r17,r4,r19
1000da24:	04403d0e 	bge	zero,r17,1000db1c <___vfiprintf_internal_r+0xe24>
1000da28:	04000404 	movi	r16,16
1000da2c:	8441a90e 	bge	r16,r17,1000e0d4 <___vfiprintf_internal_r+0x13dc>
1000da30:	00c40074 	movhi	r3,4097
1000da34:	18d1f704 	addi	r3,r3,18396
1000da38:	d9001b17 	ldw	r4,108(sp)
1000da3c:	d8c02315 	stw	r3,140(sp)
1000da40:	050001c4 	movi	r20,7
1000da44:	dd402117 	ldw	r21,132(sp)
1000da48:	ddc02017 	ldw	r23,128(sp)
1000da4c:	00000506 	br	1000da64 <___vfiprintf_internal_r+0xd6c>
1000da50:	21400084 	addi	r5,r4,2
1000da54:	42000204 	addi	r8,r8,8
1000da58:	1809883a 	mov	r4,r3
1000da5c:	8c7ffc04 	addi	r17,r17,-16
1000da60:	84400f0e 	bge	r16,r17,1000daa0 <___vfiprintf_internal_r+0xda8>
1000da64:	01440074 	movhi	r5,4097
1000da68:	10800404 	addi	r2,r2,16
1000da6c:	20c00044 	addi	r3,r4,1
1000da70:	2951f704 	addi	r5,r5,18396
1000da74:	41400015 	stw	r5,0(r8)
1000da78:	44000115 	stw	r16,4(r8)
1000da7c:	d8801c15 	stw	r2,112(sp)
1000da80:	d8c01b15 	stw	r3,108(sp)
1000da84:	a0fff20e 	bge	r20,r3,1000da50 <__alt_data_end+0xf800da50>
1000da88:	1000141e 	bne	r2,zero,1000dadc <___vfiprintf_internal_r+0xde4>
1000da8c:	8c7ffc04 	addi	r17,r17,-16
1000da90:	01400044 	movi	r5,1
1000da94:	0009883a 	mov	r4,zero
1000da98:	d811883a 	mov	r8,sp
1000da9c:	847ff116 	blt	r16,r17,1000da64 <__alt_data_end+0xf800da64>
1000daa0:	d8c02317 	ldw	r3,140(sp)
1000daa4:	1445883a 	add	r2,r2,r17
1000daa8:	44400115 	stw	r17,4(r8)
1000daac:	40c00015 	stw	r3,0(r8)
1000dab0:	d8801c15 	stw	r2,112(sp)
1000dab4:	d9401b15 	stw	r5,108(sp)
1000dab8:	00c001c4 	movi	r3,7
1000dabc:	1940170e 	bge	r3,r5,1000db1c <___vfiprintf_internal_r+0xe24>
1000dac0:	1000101e 	bne	r2,zero,1000db04 <___vfiprintf_internal_r+0xe0c>
1000dac4:	d8802517 	ldw	r2,148(sp)
1000dac8:	14c11616 	blt	r2,r19,1000df24 <___vfiprintf_internal_r+0x122c>
1000dacc:	d9002417 	ldw	r4,144(sp)
1000dad0:	2089883a 	add	r4,r4,r2
1000dad4:	d9002415 	stw	r4,144(sp)
1000dad8:	003e1806 	br	1000d33c <__alt_data_end+0xf800d33c>
1000dadc:	d9801a04 	addi	r6,sp,104
1000dae0:	b80b883a 	mov	r5,r23
1000dae4:	a809883a 	mov	r4,r21
1000dae8:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000daec:	103fba1e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000daf0:	d9001b17 	ldw	r4,108(sp)
1000daf4:	d8801c17 	ldw	r2,112(sp)
1000daf8:	d811883a 	mov	r8,sp
1000dafc:	21400044 	addi	r5,r4,1
1000db00:	003fd606 	br	1000da5c <__alt_data_end+0xf800da5c>
1000db04:	d9402017 	ldw	r5,128(sp)
1000db08:	d9002117 	ldw	r4,132(sp)
1000db0c:	d9801a04 	addi	r6,sp,104
1000db10:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000db14:	103fb01e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000db18:	d8801c17 	ldw	r2,112(sp)
1000db1c:	d8c02517 	ldw	r3,148(sp)
1000db20:	1cc0010e 	bge	r3,r19,1000db28 <___vfiprintf_internal_r+0xe30>
1000db24:	9807883a 	mov	r3,r19
1000db28:	d9002417 	ldw	r4,144(sp)
1000db2c:	20c9883a 	add	r4,r4,r3
1000db30:	d9002415 	stw	r4,144(sp)
1000db34:	103e0126 	beq	r2,zero,1000d33c <__alt_data_end+0xf800d33c>
1000db38:	d9402017 	ldw	r5,128(sp)
1000db3c:	d9002117 	ldw	r4,132(sp)
1000db40:	d9801a04 	addi	r6,sp,104
1000db44:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000db48:	103dfc26 	beq	r2,zero,1000d33c <__alt_data_end+0xf800d33c>
1000db4c:	003fa206 	br	1000d9d8 <__alt_data_end+0xf800d9d8>
1000db50:	d9402017 	ldw	r5,128(sp)
1000db54:	d9002117 	ldw	r4,132(sp)
1000db58:	d9801a04 	addi	r6,sp,104
1000db5c:	d9c02b15 	stw	r7,172(sp)
1000db60:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000db64:	d9c02b17 	ldw	r7,172(sp)
1000db68:	103f9b1e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000db6c:	d9001b17 	ldw	r4,108(sp)
1000db70:	d8801c17 	ldw	r2,112(sp)
1000db74:	d811883a 	mov	r8,sp
1000db78:	21800044 	addi	r6,r4,1
1000db7c:	003dbf06 	br	1000d27c <__alt_data_end+0xf800d27c>
1000db80:	1000d81e 	bne	r2,zero,1000dee4 <___vfiprintf_internal_r+0x11ec>
1000db84:	d9001d87 	ldb	r4,118(sp)
1000db88:	20000a26 	beq	r4,zero,1000dbb4 <___vfiprintf_internal_r+0xebc>
1000db8c:	00800044 	movi	r2,1
1000db90:	d9001d84 	addi	r4,sp,118
1000db94:	100b883a 	mov	r5,r2
1000db98:	d9000015 	stw	r4,0(sp)
1000db9c:	d8800115 	stw	r2,4(sp)
1000dba0:	d811883a 	mov	r8,sp
1000dba4:	2809883a 	mov	r4,r5
1000dba8:	42000204 	addi	r8,r8,8
1000dbac:	29400044 	addi	r5,r5,1
1000dbb0:	003d9506 	br	1000d208 <__alt_data_end+0xf800d208>
1000dbb4:	3800fd26 	beq	r7,zero,1000dfac <___vfiprintf_internal_r+0x12b4>
1000dbb8:	00800084 	movi	r2,2
1000dbbc:	d9001d04 	addi	r4,sp,116
1000dbc0:	d9000015 	stw	r4,0(sp)
1000dbc4:	d8800115 	stw	r2,4(sp)
1000dbc8:	01400044 	movi	r5,1
1000dbcc:	d811883a 	mov	r8,sp
1000dbd0:	2809883a 	mov	r4,r5
1000dbd4:	42000204 	addi	r8,r8,8
1000dbd8:	29400044 	addi	r5,r5,1
1000dbdc:	003f4606 	br	1000d8f8 <__alt_data_end+0xf800d8f8>
1000dbe0:	d8802517 	ldw	r2,148(sp)
1000dbe4:	14c0010e 	bge	r2,r19,1000dbec <___vfiprintf_internal_r+0xef4>
1000dbe8:	9805883a 	mov	r2,r19
1000dbec:	d9402417 	ldw	r5,144(sp)
1000dbf0:	288b883a 	add	r5,r5,r2
1000dbf4:	d9402415 	stw	r5,144(sp)
1000dbf8:	003dd006 	br	1000d33c <__alt_data_end+0xf800d33c>
1000dbfc:	d8001d85 	stb	zero,118(sp)
1000dc00:	80005d16 	blt	r16,zero,1000dd78 <___vfiprintf_internal_r+0x1080>
1000dc04:	00ffdfc4 	movi	r3,-129
1000dc08:	9d04b03a 	or	r2,r19,r20
1000dc0c:	88e2703a 	and	r17,r17,r3
1000dc10:	103d3726 	beq	r2,zero,1000d0f0 <__alt_data_end+0xf800d0f0>
1000dc14:	002b883a 	mov	r21,zero
1000dc18:	d9002617 	ldw	r4,152(sp)
1000dc1c:	ddc01a04 	addi	r23,sp,104
1000dc20:	988003cc 	andi	r2,r19,15
1000dc24:	a006973a 	slli	r3,r20,28
1000dc28:	2085883a 	add	r2,r4,r2
1000dc2c:	9826d13a 	srli	r19,r19,4
1000dc30:	10800003 	ldbu	r2,0(r2)
1000dc34:	a028d13a 	srli	r20,r20,4
1000dc38:	bdffffc4 	addi	r23,r23,-1
1000dc3c:	1ce6b03a 	or	r19,r3,r19
1000dc40:	b8800005 	stb	r2,0(r23)
1000dc44:	9d04b03a 	or	r2,r19,r20
1000dc48:	103ff51e 	bne	r2,zero,1000dc20 <__alt_data_end+0xf800dc20>
1000dc4c:	d8801e17 	ldw	r2,120(sp)
1000dc50:	15e9c83a 	sub	r20,r2,r23
1000dc54:	003d2b06 	br	1000d104 <__alt_data_end+0xf800d104>
1000dc58:	d9402017 	ldw	r5,128(sp)
1000dc5c:	d9002117 	ldw	r4,132(sp)
1000dc60:	d9801a04 	addi	r6,sp,104
1000dc64:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000dc68:	103f5b1e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000dc6c:	d8801c17 	ldw	r2,112(sp)
1000dc70:	d811883a 	mov	r8,sp
1000dc74:	003f6706 	br	1000da14 <__alt_data_end+0xf800da14>
1000dc78:	d9402017 	ldw	r5,128(sp)
1000dc7c:	d9002117 	ldw	r4,132(sp)
1000dc80:	d9801a04 	addi	r6,sp,104
1000dc84:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000dc88:	103f531e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000dc8c:	d811883a 	mov	r8,sp
1000dc90:	003cd906 	br	1000cff8 <__alt_data_end+0xf800cff8>
1000dc94:	10803fcc 	andi	r2,r2,255
1000dc98:	1080201c 	xori	r2,r2,128
1000dc9c:	10bfe004 	addi	r2,r2,-128
1000dca0:	00c00c04 	movi	r3,48
1000dca4:	10ffe926 	beq	r2,r3,1000dc4c <__alt_data_end+0xf800dc4c>
1000dca8:	b8ffffc5 	stb	r3,-1(r23)
1000dcac:	d8c01e17 	ldw	r3,120(sp)
1000dcb0:	b8bfffc4 	addi	r2,r23,-1
1000dcb4:	102f883a 	mov	r23,r2
1000dcb8:	18a9c83a 	sub	r20,r3,r2
1000dcbc:	003d1106 	br	1000d104 <__alt_data_end+0xf800d104>
1000dcc0:	d9402017 	ldw	r5,128(sp)
1000dcc4:	d9002117 	ldw	r4,132(sp)
1000dcc8:	d9801a04 	addi	r6,sp,104
1000dccc:	d8c02a15 	stw	r3,168(sp)
1000dcd0:	d9c02b15 	stw	r7,172(sp)
1000dcd4:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000dcd8:	d8c02a17 	ldw	r3,168(sp)
1000dcdc:	d9c02b17 	ldw	r7,172(sp)
1000dce0:	103f3d1e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000dce4:	d9001b17 	ldw	r4,108(sp)
1000dce8:	d8801c17 	ldw	r2,112(sp)
1000dcec:	d811883a 	mov	r8,sp
1000dcf0:	21400044 	addi	r5,r4,1
1000dcf4:	003d4406 	br	1000d208 <__alt_data_end+0xf800d208>
1000dcf8:	d9402017 	ldw	r5,128(sp)
1000dcfc:	d9002117 	ldw	r4,132(sp)
1000dd00:	d9801a04 	addi	r6,sp,104
1000dd04:	d8c02a15 	stw	r3,168(sp)
1000dd08:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000dd0c:	d8c02a17 	ldw	r3,168(sp)
1000dd10:	103f311e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000dd14:	d9001b17 	ldw	r4,108(sp)
1000dd18:	d8801c17 	ldw	r2,112(sp)
1000dd1c:	d811883a 	mov	r8,sp
1000dd20:	21400044 	addi	r5,r4,1
1000dd24:	003ef406 	br	1000d8f8 <__alt_data_end+0xf800d8f8>
1000dd28:	1000bd1e 	bne	r2,zero,1000e020 <___vfiprintf_internal_r+0x1328>
1000dd2c:	01400044 	movi	r5,1
1000dd30:	0009883a 	mov	r4,zero
1000dd34:	d811883a 	mov	r8,sp
1000dd38:	003ef106 	br	1000d900 <__alt_data_end+0xf800d900>
1000dd3c:	d9402017 	ldw	r5,128(sp)
1000dd40:	d9002117 	ldw	r4,132(sp)
1000dd44:	d9801a04 	addi	r6,sp,104
1000dd48:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000dd4c:	103f221e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000dd50:	d9401b17 	ldw	r5,108(sp)
1000dd54:	d8801c17 	ldw	r2,112(sp)
1000dd58:	d811883a 	mov	r8,sp
1000dd5c:	29400044 	addi	r5,r5,1
1000dd60:	003d6206 	br	1000d2ec <__alt_data_end+0xf800d2ec>
1000dd64:	01440074 	movhi	r5,4097
1000dd68:	29519304 	addi	r5,r5,17996
1000dd6c:	d9402615 	stw	r5,152(sp)
1000dd70:	d8c02215 	stw	r3,136(sp)
1000dd74:	1023883a 	mov	r17,r2
1000dd78:	9d04b03a 	or	r2,r19,r20
1000dd7c:	103fa51e 	bne	r2,zero,1000dc14 <__alt_data_end+0xf800dc14>
1000dd80:	002b883a 	mov	r21,zero
1000dd84:	00800084 	movi	r2,2
1000dd88:	003e4a06 	br	1000d6b4 <__alt_data_end+0xf800d6b4>
1000dd8c:	01440074 	movhi	r5,4097
1000dd90:	29519304 	addi	r5,r5,17996
1000dd94:	002b883a 	mov	r21,zero
1000dd98:	d9402615 	stw	r5,152(sp)
1000dd9c:	003f9e06 	br	1000dc18 <__alt_data_end+0xf800dc18>
1000dda0:	d9402217 	ldw	r5,136(sp)
1000dda4:	d8001d85 	stb	zero,118(sp)
1000dda8:	0029883a 	mov	r20,zero
1000ddac:	28800104 	addi	r2,r5,4
1000ddb0:	2cc00017 	ldw	r19,0(r5)
1000ddb4:	803e3a16 	blt	r16,zero,1000d6a0 <__alt_data_end+0xf800d6a0>
1000ddb8:	00ffdfc4 	movi	r3,-129
1000ddbc:	d8802215 	stw	r2,136(sp)
1000ddc0:	88e2703a 	and	r17,r17,r3
1000ddc4:	002b883a 	mov	r21,zero
1000ddc8:	983e9b26 	beq	r19,zero,1000d838 <__alt_data_end+0xf800d838>
1000ddcc:	00800244 	movi	r2,9
1000ddd0:	14fdc936 	bltu	r2,r19,1000d4f8 <__alt_data_end+0xf800d4f8>
1000ddd4:	003e9a06 	br	1000d840 <__alt_data_end+0xf800d840>
1000ddd8:	00800c04 	movi	r2,48
1000dddc:	d8c01d45 	stb	r3,117(sp)
1000dde0:	d8801d05 	stb	r2,116(sp)
1000dde4:	d8001d85 	stb	zero,118(sp)
1000dde8:	88c00094 	ori	r3,r17,2
1000ddec:	80009c16 	blt	r16,zero,1000e060 <___vfiprintf_internal_r+0x1368>
1000ddf0:	00bfdfc4 	movi	r2,-129
1000ddf4:	88a2703a 	and	r17,r17,r2
1000ddf8:	8c400094 	ori	r17,r17,2
1000ddfc:	002b883a 	mov	r21,zero
1000de00:	003f8506 	br	1000dc18 <__alt_data_end+0xf800dc18>
1000de04:	b029883a 	mov	r20,r22
1000de08:	003c0b06 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000de0c:	04e7c83a 	sub	r19,zero,r19
1000de10:	05400b44 	movi	r21,45
1000de14:	9804c03a 	cmpne	r2,r19,zero
1000de18:	0529c83a 	sub	r20,zero,r20
1000de1c:	dd401d85 	stb	r21,118(sp)
1000de20:	a0a9c83a 	sub	r20,r20,r2
1000de24:	80009716 	blt	r16,zero,1000e084 <___vfiprintf_internal_r+0x138c>
1000de28:	00bfdfc4 	movi	r2,-129
1000de2c:	88a2703a 	and	r17,r17,r2
1000de30:	003db006 	br	1000d4f4 <__alt_data_end+0xf800d4f4>
1000de34:	b0c00007 	ldb	r3,0(r22)
1000de38:	003c0c06 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000de3c:	8880100c 	andi	r2,r17,64
1000de40:	d8001d85 	stb	zero,118(sp)
1000de44:	1000461e 	bne	r2,zero,1000df60 <___vfiprintf_internal_r+0x1268>
1000de48:	d9002217 	ldw	r4,136(sp)
1000de4c:	0029883a 	mov	r20,zero
1000de50:	20800104 	addi	r2,r4,4
1000de54:	24c00017 	ldw	r19,0(r4)
1000de58:	803df80e 	bge	r16,zero,1000d63c <__alt_data_end+0xf800d63c>
1000de5c:	9d06b03a 	or	r3,r19,r20
1000de60:	d8802215 	stw	r2,136(sp)
1000de64:	183d5e1e 	bne	r3,zero,1000d3e0 <__alt_data_end+0xf800d3e0>
1000de68:	002b883a 	mov	r21,zero
1000de6c:	0005883a 	mov	r2,zero
1000de70:	003e1006 	br	1000d6b4 <__alt_data_end+0xf800d6b4>
1000de74:	8880040c 	andi	r2,r17,16
1000de78:	1000321e 	bne	r2,zero,1000df44 <___vfiprintf_internal_r+0x124c>
1000de7c:	8c40100c 	andi	r17,r17,64
1000de80:	88008d26 	beq	r17,zero,1000e0b8 <___vfiprintf_internal_r+0x13c0>
1000de84:	d9402217 	ldw	r5,136(sp)
1000de88:	d8c02417 	ldw	r3,144(sp)
1000de8c:	28800017 	ldw	r2,0(r5)
1000de90:	29400104 	addi	r5,r5,4
1000de94:	d9402215 	stw	r5,136(sp)
1000de98:	10c0000d 	sth	r3,0(r2)
1000de9c:	003bca06 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000dea0:	8880100c 	andi	r2,r17,64
1000dea4:	10003a26 	beq	r2,zero,1000df90 <___vfiprintf_internal_r+0x1298>
1000dea8:	d8802217 	ldw	r2,136(sp)
1000deac:	14c0000f 	ldh	r19,0(r2)
1000deb0:	10800104 	addi	r2,r2,4
1000deb4:	d8802215 	stw	r2,136(sp)
1000deb8:	9829d7fa 	srai	r20,r19,31
1000debc:	a005883a 	mov	r2,r20
1000dec0:	003d8506 	br	1000d4d8 <__alt_data_end+0xf800d4d8>
1000dec4:	8880100c 	andi	r2,r17,64
1000dec8:	10002b26 	beq	r2,zero,1000df78 <___vfiprintf_internal_r+0x1280>
1000decc:	d8802217 	ldw	r2,136(sp)
1000ded0:	0029883a 	mov	r20,zero
1000ded4:	14c0000b 	ldhu	r19,0(r2)
1000ded8:	10800104 	addi	r2,r2,4
1000dedc:	d8802215 	stw	r2,136(sp)
1000dee0:	003d5d06 	br	1000d458 <__alt_data_end+0xf800d458>
1000dee4:	d9402017 	ldw	r5,128(sp)
1000dee8:	d9002117 	ldw	r4,132(sp)
1000deec:	d9801a04 	addi	r6,sp,104
1000def0:	d8c02a15 	stw	r3,168(sp)
1000def4:	d9c02b15 	stw	r7,172(sp)
1000def8:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000defc:	d8c02a17 	ldw	r3,168(sp)
1000df00:	d9c02b17 	ldw	r7,172(sp)
1000df04:	103eb41e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000df08:	d9001b17 	ldw	r4,108(sp)
1000df0c:	d8801c17 	ldw	r2,112(sp)
1000df10:	d811883a 	mov	r8,sp
1000df14:	21400044 	addi	r5,r4,1
1000df18:	003e6706 	br	1000d8b8 <__alt_data_end+0xf800d8b8>
1000df1c:	00bfffc4 	movi	r2,-1
1000df20:	003c4a06 	br	1000d04c <__alt_data_end+0xf800d04c>
1000df24:	9805883a 	mov	r2,r19
1000df28:	003ee806 	br	1000dacc <__alt_data_end+0xf800dacc>
1000df2c:	d8c02217 	ldw	r3,136(sp)
1000df30:	0029883a 	mov	r20,zero
1000df34:	18800104 	addi	r2,r3,4
1000df38:	1cc0000b 	ldhu	r19,0(r3)
1000df3c:	803f9e0e 	bge	r16,zero,1000ddb8 <__alt_data_end+0xf800ddb8>
1000df40:	003dd706 	br	1000d6a0 <__alt_data_end+0xf800d6a0>
1000df44:	d8c02217 	ldw	r3,136(sp)
1000df48:	d9002417 	ldw	r4,144(sp)
1000df4c:	18800017 	ldw	r2,0(r3)
1000df50:	18c00104 	addi	r3,r3,4
1000df54:	d8c02215 	stw	r3,136(sp)
1000df58:	11000015 	stw	r4,0(r2)
1000df5c:	003b9a06 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000df60:	d8c02217 	ldw	r3,136(sp)
1000df64:	0029883a 	mov	r20,zero
1000df68:	18800104 	addi	r2,r3,4
1000df6c:	1cc0000b 	ldhu	r19,0(r3)
1000df70:	803db20e 	bge	r16,zero,1000d63c <__alt_data_end+0xf800d63c>
1000df74:	003fb906 	br	1000de5c <__alt_data_end+0xf800de5c>
1000df78:	d9002217 	ldw	r4,136(sp)
1000df7c:	0029883a 	mov	r20,zero
1000df80:	24c00017 	ldw	r19,0(r4)
1000df84:	21000104 	addi	r4,r4,4
1000df88:	d9002215 	stw	r4,136(sp)
1000df8c:	003d3206 	br	1000d458 <__alt_data_end+0xf800d458>
1000df90:	d8c02217 	ldw	r3,136(sp)
1000df94:	1cc00017 	ldw	r19,0(r3)
1000df98:	18c00104 	addi	r3,r3,4
1000df9c:	d8c02215 	stw	r3,136(sp)
1000dfa0:	9829d7fa 	srai	r20,r19,31
1000dfa4:	a005883a 	mov	r2,r20
1000dfa8:	003d4b06 	br	1000d4d8 <__alt_data_end+0xf800d4d8>
1000dfac:	0009883a 	mov	r4,zero
1000dfb0:	01400044 	movi	r5,1
1000dfb4:	d811883a 	mov	r8,sp
1000dfb8:	003e4f06 	br	1000d8f8 <__alt_data_end+0xf800d8f8>
1000dfbc:	d8c02215 	stw	r3,136(sp)
1000dfc0:	002b883a 	mov	r21,zero
1000dfc4:	003db806 	br	1000d6a8 <__alt_data_end+0xf800d6a8>
1000dfc8:	d811883a 	mov	r8,sp
1000dfcc:	003e9606 	br	1000da28 <__alt_data_end+0xf800da28>
1000dfd0:	01040074 	movhi	r4,4097
1000dfd4:	2111f304 	addi	r4,r4,18380
1000dfd8:	d9002315 	stw	r4,140(sp)
1000dfdc:	003e6306 	br	1000d96c <__alt_data_end+0xf800d96c>
1000dfe0:	b0c00043 	ldbu	r3,1(r22)
1000dfe4:	8c400814 	ori	r17,r17,32
1000dfe8:	b5800044 	addi	r22,r22,1
1000dfec:	18c03fcc 	andi	r3,r3,255
1000dff0:	18c0201c 	xori	r3,r3,128
1000dff4:	18ffe004 	addi	r3,r3,-128
1000dff8:	003b9c06 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000dffc:	b809883a 	mov	r4,r23
1000e000:	da002a15 	stw	r8,168(sp)
1000e004:	00054600 	call	10005460 <strlen>
1000e008:	1029883a 	mov	r20,r2
1000e00c:	dd401d83 	ldbu	r21,118(sp)
1000e010:	df002215 	stw	fp,136(sp)
1000e014:	0021883a 	mov	r16,zero
1000e018:	da002a17 	ldw	r8,168(sp)
1000e01c:	003c3906 	br	1000d104 <__alt_data_end+0xf800d104>
1000e020:	d9402017 	ldw	r5,128(sp)
1000e024:	d9002117 	ldw	r4,132(sp)
1000e028:	d9801a04 	addi	r6,sp,104
1000e02c:	000cbe40 	call	1000cbe4 <__sprint_r.part.0>
1000e030:	103e691e 	bne	r2,zero,1000d9d8 <__alt_data_end+0xf800d9d8>
1000e034:	d9001b17 	ldw	r4,108(sp)
1000e038:	d8801c17 	ldw	r2,112(sp)
1000e03c:	d811883a 	mov	r8,sp
1000e040:	21400044 	addi	r5,r4,1
1000e044:	003e2e06 	br	1000d900 <__alt_data_end+0xf800d900>
1000e048:	01040074 	movhi	r4,4097
1000e04c:	2111f704 	addi	r4,r4,18396
1000e050:	d9002315 	stw	r4,140(sp)
1000e054:	d9001b17 	ldw	r4,108(sp)
1000e058:	21000044 	addi	r4,r4,1
1000e05c:	003c5e06 	br	1000d1d8 <__alt_data_end+0xf800d1d8>
1000e060:	002b883a 	mov	r21,zero
1000e064:	00800084 	movi	r2,2
1000e068:	10803fcc 	andi	r2,r2,255
1000e06c:	01000044 	movi	r4,1
1000e070:	11002b26 	beq	r2,r4,1000e120 <___vfiprintf_internal_r+0x1428>
1000e074:	01000084 	movi	r4,2
1000e078:	11002b1e 	bne	r2,r4,1000e128 <___vfiprintf_internal_r+0x1430>
1000e07c:	1823883a 	mov	r17,r3
1000e080:	003ee506 	br	1000dc18 <__alt_data_end+0xf800dc18>
1000e084:	8807883a 	mov	r3,r17
1000e088:	00800044 	movi	r2,1
1000e08c:	003ff606 	br	1000e068 <__alt_data_end+0xf800e068>
1000e090:	00800184 	movi	r2,6
1000e094:	1400012e 	bgeu	r2,r16,1000e09c <___vfiprintf_internal_r+0x13a4>
1000e098:	1021883a 	mov	r16,r2
1000e09c:	8029883a 	mov	r20,r16
1000e0a0:	8027883a 	mov	r19,r16
1000e0a4:	80002216 	blt	r16,zero,1000e130 <___vfiprintf_internal_r+0x1438>
1000e0a8:	05c40074 	movhi	r23,4097
1000e0ac:	df002215 	stw	fp,136(sp)
1000e0b0:	bdd19804 	addi	r23,r23,18016
1000e0b4:	003cfb06 	br	1000d4a4 <__alt_data_end+0xf800d4a4>
1000e0b8:	d9002217 	ldw	r4,136(sp)
1000e0bc:	d9402417 	ldw	r5,144(sp)
1000e0c0:	20800017 	ldw	r2,0(r4)
1000e0c4:	21000104 	addi	r4,r4,4
1000e0c8:	d9002215 	stw	r4,136(sp)
1000e0cc:	11400015 	stw	r5,0(r2)
1000e0d0:	003b3d06 	br	1000cdc8 <__alt_data_end+0xf800cdc8>
1000e0d4:	01440074 	movhi	r5,4097
1000e0d8:	2951f704 	addi	r5,r5,18396
1000e0dc:	d9402315 	stw	r5,140(sp)
1000e0e0:	d9401b17 	ldw	r5,108(sp)
1000e0e4:	29400044 	addi	r5,r5,1
1000e0e8:	003e6d06 	br	1000daa0 <__alt_data_end+0xf800daa0>
1000e0ec:	8029883a 	mov	r20,r16
1000e0f0:	dd401d83 	ldbu	r21,118(sp)
1000e0f4:	df002215 	stw	fp,136(sp)
1000e0f8:	0021883a 	mov	r16,zero
1000e0fc:	003c0106 	br	1000d104 <__alt_data_end+0xf800d104>
1000e100:	00c40074 	movhi	r3,4097
1000e104:	18d1f304 	addi	r3,r3,18380
1000e108:	d8c02315 	stw	r3,140(sp)
1000e10c:	280d883a 	mov	r6,r5
1000e110:	003c6906 	br	1000d2b8 <__alt_data_end+0xf800d2b8>
1000e114:	802d883a 	mov	r22,r16
1000e118:	0021883a 	mov	r16,zero
1000e11c:	003b5406 	br	1000ce70 <__alt_data_end+0xf800ce70>
1000e120:	1823883a 	mov	r17,r3
1000e124:	003cf306 	br	1000d4f4 <__alt_data_end+0xf800d4f4>
1000e128:	1823883a 	mov	r17,r3
1000e12c:	003cad06 	br	1000d3e4 <__alt_data_end+0xf800d3e4>
1000e130:	0027883a 	mov	r19,zero
1000e134:	003fdc06 	br	1000e0a8 <__alt_data_end+0xf800e0a8>
1000e138:	d9402217 	ldw	r5,136(sp)
1000e13c:	8005883a 	mov	r2,r16
1000e140:	b0c00043 	ldbu	r3,1(r22)
1000e144:	2c000017 	ldw	r16,0(r5)
1000e148:	29000104 	addi	r4,r5,4
1000e14c:	d9002215 	stw	r4,136(sp)
1000e150:	102d883a 	mov	r22,r2
1000e154:	803fa50e 	bge	r16,zero,1000dfec <__alt_data_end+0xf800dfec>
1000e158:	18c03fcc 	andi	r3,r3,255
1000e15c:	18c0201c 	xori	r3,r3,128
1000e160:	043fffc4 	movi	r16,-1
1000e164:	18ffe004 	addi	r3,r3,-128
1000e168:	003b4006 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000e16c:	d9402303 	ldbu	r5,140(sp)
1000e170:	d9401d85 	stb	r5,118(sp)
1000e174:	003cae06 	br	1000d430 <__alt_data_end+0xf800d430>
1000e178:	d8c02303 	ldbu	r3,140(sp)
1000e17c:	d8c01d85 	stb	r3,118(sp)
1000e180:	003d1406 	br	1000d5d4 <__alt_data_end+0xf800d5d4>
1000e184:	d8c02303 	ldbu	r3,140(sp)
1000e188:	d8c01d85 	stb	r3,118(sp)
1000e18c:	003cca06 	br	1000d4b8 <__alt_data_end+0xf800d4b8>
1000e190:	8880004c 	andi	r2,r17,1
1000e194:	002b883a 	mov	r21,zero
1000e198:	10000526 	beq	r2,zero,1000e1b0 <___vfiprintf_internal_r+0x14b8>
1000e19c:	00800c04 	movi	r2,48
1000e1a0:	d88019c5 	stb	r2,103(sp)
1000e1a4:	dd002817 	ldw	r20,160(sp)
1000e1a8:	ddc019c4 	addi	r23,sp,103
1000e1ac:	003bd506 	br	1000d104 <__alt_data_end+0xf800d104>
1000e1b0:	0029883a 	mov	r20,zero
1000e1b4:	ddc01a04 	addi	r23,sp,104
1000e1b8:	003bd206 	br	1000d104 <__alt_data_end+0xf800d104>
1000e1bc:	d9002303 	ldbu	r4,140(sp)
1000e1c0:	d9001d85 	stb	r4,118(sp)
1000e1c4:	003da606 	br	1000d860 <__alt_data_end+0xf800d860>
1000e1c8:	d8c02303 	ldbu	r3,140(sp)
1000e1cc:	d8c01d85 	stb	r3,118(sp)
1000e1d0:	003c7606 	br	1000d3ac <__alt_data_end+0xf800d3ac>
1000e1d4:	d8c02303 	ldbu	r3,140(sp)
1000e1d8:	d8c01d85 	stb	r3,118(sp)
1000e1dc:	003c6506 	br	1000d374 <__alt_data_end+0xf800d374>
1000e1e0:	d9002303 	ldbu	r4,140(sp)
1000e1e4:	d9001d85 	stb	r4,118(sp)
1000e1e8:	003d3d06 	br	1000d6e0 <__alt_data_end+0xf800d6e0>
1000e1ec:	d8c02303 	ldbu	r3,140(sp)
1000e1f0:	d8c01d85 	stb	r3,118(sp)
1000e1f4:	003d1d06 	br	1000d66c <__alt_data_end+0xf800d66c>
1000e1f8:	d8c02303 	ldbu	r3,140(sp)
1000e1fc:	d8c01d85 	stb	r3,118(sp)
1000e200:	003d0306 	br	1000d610 <__alt_data_end+0xf800d610>

1000e204 <__vfiprintf_internal>:
1000e204:	00840074 	movhi	r2,4097
1000e208:	1098b504 	addi	r2,r2,25300
1000e20c:	300f883a 	mov	r7,r6
1000e210:	280d883a 	mov	r6,r5
1000e214:	200b883a 	mov	r5,r4
1000e218:	11000017 	ldw	r4,0(r2)
1000e21c:	000ccf81 	jmpi	1000ccf8 <___vfiprintf_internal_r>

1000e220 <__sbprintf>:
1000e220:	2880030b 	ldhu	r2,12(r5)
1000e224:	2ac01917 	ldw	r11,100(r5)
1000e228:	2a80038b 	ldhu	r10,14(r5)
1000e22c:	2a400717 	ldw	r9,28(r5)
1000e230:	2a000917 	ldw	r8,36(r5)
1000e234:	defee204 	addi	sp,sp,-1144
1000e238:	00c10004 	movi	r3,1024
1000e23c:	dc011a15 	stw	r16,1128(sp)
1000e240:	10bfff4c 	andi	r2,r2,65533
1000e244:	2821883a 	mov	r16,r5
1000e248:	d8cb883a 	add	r5,sp,r3
1000e24c:	dc811c15 	stw	r18,1136(sp)
1000e250:	dc411b15 	stw	r17,1132(sp)
1000e254:	dfc11d15 	stw	ra,1140(sp)
1000e258:	2025883a 	mov	r18,r4
1000e25c:	d881030d 	sth	r2,1036(sp)
1000e260:	dac11915 	stw	r11,1124(sp)
1000e264:	da81038d 	sth	r10,1038(sp)
1000e268:	da410715 	stw	r9,1052(sp)
1000e26c:	da010915 	stw	r8,1060(sp)
1000e270:	dec10015 	stw	sp,1024(sp)
1000e274:	dec10415 	stw	sp,1040(sp)
1000e278:	d8c10215 	stw	r3,1032(sp)
1000e27c:	d8c10515 	stw	r3,1044(sp)
1000e280:	d8010615 	stw	zero,1048(sp)
1000e284:	000ccf80 	call	1000ccf8 <___vfiprintf_internal_r>
1000e288:	1023883a 	mov	r17,r2
1000e28c:	10000416 	blt	r2,zero,1000e2a0 <__sbprintf+0x80>
1000e290:	d9410004 	addi	r5,sp,1024
1000e294:	9009883a 	mov	r4,r18
1000e298:	00094d40 	call	100094d4 <_fflush_r>
1000e29c:	10000d1e 	bne	r2,zero,1000e2d4 <__sbprintf+0xb4>
1000e2a0:	d881030b 	ldhu	r2,1036(sp)
1000e2a4:	1080100c 	andi	r2,r2,64
1000e2a8:	10000326 	beq	r2,zero,1000e2b8 <__sbprintf+0x98>
1000e2ac:	8080030b 	ldhu	r2,12(r16)
1000e2b0:	10801014 	ori	r2,r2,64
1000e2b4:	8080030d 	sth	r2,12(r16)
1000e2b8:	8805883a 	mov	r2,r17
1000e2bc:	dfc11d17 	ldw	ra,1140(sp)
1000e2c0:	dc811c17 	ldw	r18,1136(sp)
1000e2c4:	dc411b17 	ldw	r17,1132(sp)
1000e2c8:	dc011a17 	ldw	r16,1128(sp)
1000e2cc:	dec11e04 	addi	sp,sp,1144
1000e2d0:	f800283a 	ret
1000e2d4:	047fffc4 	movi	r17,-1
1000e2d8:	003ff106 	br	1000e2a0 <__alt_data_end+0xf800e2a0>

1000e2dc <_write_r>:
1000e2dc:	defffd04 	addi	sp,sp,-12
1000e2e0:	2805883a 	mov	r2,r5
1000e2e4:	dc000015 	stw	r16,0(sp)
1000e2e8:	04040074 	movhi	r16,4097
1000e2ec:	dc400115 	stw	r17,4(sp)
1000e2f0:	300b883a 	mov	r5,r6
1000e2f4:	841f9304 	addi	r16,r16,32332
1000e2f8:	2023883a 	mov	r17,r4
1000e2fc:	380d883a 	mov	r6,r7
1000e300:	1009883a 	mov	r4,r2
1000e304:	dfc00215 	stw	ra,8(sp)
1000e308:	80000015 	stw	zero,0(r16)
1000e30c:	0011e640 	call	10011e64 <write>
1000e310:	00ffffc4 	movi	r3,-1
1000e314:	10c00526 	beq	r2,r3,1000e32c <_write_r+0x50>
1000e318:	dfc00217 	ldw	ra,8(sp)
1000e31c:	dc400117 	ldw	r17,4(sp)
1000e320:	dc000017 	ldw	r16,0(sp)
1000e324:	dec00304 	addi	sp,sp,12
1000e328:	f800283a 	ret
1000e32c:	80c00017 	ldw	r3,0(r16)
1000e330:	183ff926 	beq	r3,zero,1000e318 <__alt_data_end+0xf800e318>
1000e334:	88c00015 	stw	r3,0(r17)
1000e338:	003ff706 	br	1000e318 <__alt_data_end+0xf800e318>

1000e33c <_close_r>:
1000e33c:	defffd04 	addi	sp,sp,-12
1000e340:	dc000015 	stw	r16,0(sp)
1000e344:	04040074 	movhi	r16,4097
1000e348:	dc400115 	stw	r17,4(sp)
1000e34c:	841f9304 	addi	r16,r16,32332
1000e350:	2023883a 	mov	r17,r4
1000e354:	2809883a 	mov	r4,r5
1000e358:	dfc00215 	stw	ra,8(sp)
1000e35c:	80000015 	stw	zero,0(r16)
1000e360:	00115280 	call	10011528 <close>
1000e364:	00ffffc4 	movi	r3,-1
1000e368:	10c00526 	beq	r2,r3,1000e380 <_close_r+0x44>
1000e36c:	dfc00217 	ldw	ra,8(sp)
1000e370:	dc400117 	ldw	r17,4(sp)
1000e374:	dc000017 	ldw	r16,0(sp)
1000e378:	dec00304 	addi	sp,sp,12
1000e37c:	f800283a 	ret
1000e380:	80c00017 	ldw	r3,0(r16)
1000e384:	183ff926 	beq	r3,zero,1000e36c <__alt_data_end+0xf800e36c>
1000e388:	88c00015 	stw	r3,0(r17)
1000e38c:	003ff706 	br	1000e36c <__alt_data_end+0xf800e36c>

1000e390 <_calloc_r>:
1000e390:	defffe04 	addi	sp,sp,-8
1000e394:	2805883a 	mov	r2,r5
1000e398:	dc000015 	stw	r16,0(sp)
1000e39c:	300b883a 	mov	r5,r6
1000e3a0:	2021883a 	mov	r16,r4
1000e3a4:	1009883a 	mov	r4,r2
1000e3a8:	dfc00115 	stw	ra,4(sp)
1000e3ac:	00052300 	call	10005230 <__mulsi3>
1000e3b0:	100b883a 	mov	r5,r2
1000e3b4:	8009883a 	mov	r4,r16
1000e3b8:	000a62c0 	call	1000a62c <_malloc_r>
1000e3bc:	10002926 	beq	r2,zero,1000e464 <_calloc_r+0xd4>
1000e3c0:	11bfff17 	ldw	r6,-4(r2)
1000e3c4:	1021883a 	mov	r16,r2
1000e3c8:	00bfff04 	movi	r2,-4
1000e3cc:	308c703a 	and	r6,r6,r2
1000e3d0:	00c00904 	movi	r3,36
1000e3d4:	308d883a 	add	r6,r6,r2
1000e3d8:	19801636 	bltu	r3,r6,1000e434 <_calloc_r+0xa4>
1000e3dc:	008004c4 	movi	r2,19
1000e3e0:	11800b2e 	bgeu	r2,r6,1000e410 <_calloc_r+0x80>
1000e3e4:	80000015 	stw	zero,0(r16)
1000e3e8:	80000115 	stw	zero,4(r16)
1000e3ec:	008006c4 	movi	r2,27
1000e3f0:	11801a2e 	bgeu	r2,r6,1000e45c <_calloc_r+0xcc>
1000e3f4:	80000215 	stw	zero,8(r16)
1000e3f8:	80000315 	stw	zero,12(r16)
1000e3fc:	30c0151e 	bne	r6,r3,1000e454 <_calloc_r+0xc4>
1000e400:	80000415 	stw	zero,16(r16)
1000e404:	80800604 	addi	r2,r16,24
1000e408:	80000515 	stw	zero,20(r16)
1000e40c:	00000106 	br	1000e414 <_calloc_r+0x84>
1000e410:	8005883a 	mov	r2,r16
1000e414:	10000015 	stw	zero,0(r2)
1000e418:	10000115 	stw	zero,4(r2)
1000e41c:	10000215 	stw	zero,8(r2)
1000e420:	8005883a 	mov	r2,r16
1000e424:	dfc00117 	ldw	ra,4(sp)
1000e428:	dc000017 	ldw	r16,0(sp)
1000e42c:	dec00204 	addi	sp,sp,8
1000e430:	f800283a 	ret
1000e434:	000b883a 	mov	r5,zero
1000e438:	8009883a 	mov	r4,r16
1000e43c:	000b1c00 	call	1000b1c0 <memset>
1000e440:	8005883a 	mov	r2,r16
1000e444:	dfc00117 	ldw	ra,4(sp)
1000e448:	dc000017 	ldw	r16,0(sp)
1000e44c:	dec00204 	addi	sp,sp,8
1000e450:	f800283a 	ret
1000e454:	80800404 	addi	r2,r16,16
1000e458:	003fee06 	br	1000e414 <__alt_data_end+0xf800e414>
1000e45c:	80800204 	addi	r2,r16,8
1000e460:	003fec06 	br	1000e414 <__alt_data_end+0xf800e414>
1000e464:	0005883a 	mov	r2,zero
1000e468:	003fee06 	br	1000e424 <__alt_data_end+0xf800e424>

1000e46c <_fclose_r>:
1000e46c:	28003926 	beq	r5,zero,1000e554 <_fclose_r+0xe8>
1000e470:	defffc04 	addi	sp,sp,-16
1000e474:	dc400115 	stw	r17,4(sp)
1000e478:	dc000015 	stw	r16,0(sp)
1000e47c:	dfc00315 	stw	ra,12(sp)
1000e480:	dc800215 	stw	r18,8(sp)
1000e484:	2023883a 	mov	r17,r4
1000e488:	2821883a 	mov	r16,r5
1000e48c:	20000226 	beq	r4,zero,1000e498 <_fclose_r+0x2c>
1000e490:	20800e17 	ldw	r2,56(r4)
1000e494:	10002726 	beq	r2,zero,1000e534 <_fclose_r+0xc8>
1000e498:	8080030f 	ldh	r2,12(r16)
1000e49c:	1000071e 	bne	r2,zero,1000e4bc <_fclose_r+0x50>
1000e4a0:	0005883a 	mov	r2,zero
1000e4a4:	dfc00317 	ldw	ra,12(sp)
1000e4a8:	dc800217 	ldw	r18,8(sp)
1000e4ac:	dc400117 	ldw	r17,4(sp)
1000e4b0:	dc000017 	ldw	r16,0(sp)
1000e4b4:	dec00404 	addi	sp,sp,16
1000e4b8:	f800283a 	ret
1000e4bc:	800b883a 	mov	r5,r16
1000e4c0:	8809883a 	mov	r4,r17
1000e4c4:	00092b80 	call	100092b8 <__sflush_r>
1000e4c8:	1025883a 	mov	r18,r2
1000e4cc:	80800b17 	ldw	r2,44(r16)
1000e4d0:	10000426 	beq	r2,zero,1000e4e4 <_fclose_r+0x78>
1000e4d4:	81400717 	ldw	r5,28(r16)
1000e4d8:	8809883a 	mov	r4,r17
1000e4dc:	103ee83a 	callr	r2
1000e4e0:	10001616 	blt	r2,zero,1000e53c <_fclose_r+0xd0>
1000e4e4:	8080030b 	ldhu	r2,12(r16)
1000e4e8:	1080200c 	andi	r2,r2,128
1000e4ec:	1000151e 	bne	r2,zero,1000e544 <_fclose_r+0xd8>
1000e4f0:	81400c17 	ldw	r5,48(r16)
1000e4f4:	28000526 	beq	r5,zero,1000e50c <_fclose_r+0xa0>
1000e4f8:	80801004 	addi	r2,r16,64
1000e4fc:	28800226 	beq	r5,r2,1000e508 <_fclose_r+0x9c>
1000e500:	8809883a 	mov	r4,r17
1000e504:	0009a340 	call	10009a34 <_free_r>
1000e508:	80000c15 	stw	zero,48(r16)
1000e50c:	81401117 	ldw	r5,68(r16)
1000e510:	28000326 	beq	r5,zero,1000e520 <_fclose_r+0xb4>
1000e514:	8809883a 	mov	r4,r17
1000e518:	0009a340 	call	10009a34 <_free_r>
1000e51c:	80001115 	stw	zero,68(r16)
1000e520:	00098d00 	call	100098d0 <__sfp_lock_acquire>
1000e524:	8000030d 	sth	zero,12(r16)
1000e528:	00098d40 	call	100098d4 <__sfp_lock_release>
1000e52c:	9005883a 	mov	r2,r18
1000e530:	003fdc06 	br	1000e4a4 <__alt_data_end+0xf800e4a4>
1000e534:	00098c00 	call	100098c0 <__sinit>
1000e538:	003fd706 	br	1000e498 <__alt_data_end+0xf800e498>
1000e53c:	04bfffc4 	movi	r18,-1
1000e540:	003fe806 	br	1000e4e4 <__alt_data_end+0xf800e4e4>
1000e544:	81400417 	ldw	r5,16(r16)
1000e548:	8809883a 	mov	r4,r17
1000e54c:	0009a340 	call	10009a34 <_free_r>
1000e550:	003fe706 	br	1000e4f0 <__alt_data_end+0xf800e4f0>
1000e554:	0005883a 	mov	r2,zero
1000e558:	f800283a 	ret

1000e55c <fclose>:
1000e55c:	00840074 	movhi	r2,4097
1000e560:	1098b504 	addi	r2,r2,25300
1000e564:	200b883a 	mov	r5,r4
1000e568:	11000017 	ldw	r4,0(r2)
1000e56c:	000e46c1 	jmpi	1000e46c <_fclose_r>

1000e570 <__fputwc>:
1000e570:	defff804 	addi	sp,sp,-32
1000e574:	dcc00415 	stw	r19,16(sp)
1000e578:	dc800315 	stw	r18,12(sp)
1000e57c:	dc000115 	stw	r16,4(sp)
1000e580:	dfc00715 	stw	ra,28(sp)
1000e584:	dd400615 	stw	r21,24(sp)
1000e588:	dd000515 	stw	r20,20(sp)
1000e58c:	dc400215 	stw	r17,8(sp)
1000e590:	2027883a 	mov	r19,r4
1000e594:	2825883a 	mov	r18,r5
1000e598:	3021883a 	mov	r16,r6
1000e59c:	000a41c0 	call	1000a41c <__locale_mb_cur_max>
1000e5a0:	00c00044 	movi	r3,1
1000e5a4:	10c03e26 	beq	r2,r3,1000e6a0 <__fputwc+0x130>
1000e5a8:	81c01704 	addi	r7,r16,92
1000e5ac:	900d883a 	mov	r6,r18
1000e5b0:	d80b883a 	mov	r5,sp
1000e5b4:	9809883a 	mov	r4,r19
1000e5b8:	000ea400 	call	1000ea40 <_wcrtomb_r>
1000e5bc:	1029883a 	mov	r20,r2
1000e5c0:	00bfffc4 	movi	r2,-1
1000e5c4:	a0802026 	beq	r20,r2,1000e648 <__fputwc+0xd8>
1000e5c8:	d9400003 	ldbu	r5,0(sp)
1000e5cc:	a0001c26 	beq	r20,zero,1000e640 <__fputwc+0xd0>
1000e5d0:	0023883a 	mov	r17,zero
1000e5d4:	05400284 	movi	r21,10
1000e5d8:	00000906 	br	1000e600 <__fputwc+0x90>
1000e5dc:	80800017 	ldw	r2,0(r16)
1000e5e0:	11400005 	stb	r5,0(r2)
1000e5e4:	80c00017 	ldw	r3,0(r16)
1000e5e8:	18c00044 	addi	r3,r3,1
1000e5ec:	80c00015 	stw	r3,0(r16)
1000e5f0:	8c400044 	addi	r17,r17,1
1000e5f4:	dc45883a 	add	r2,sp,r17
1000e5f8:	8d00112e 	bgeu	r17,r20,1000e640 <__fputwc+0xd0>
1000e5fc:	11400003 	ldbu	r5,0(r2)
1000e600:	80c00217 	ldw	r3,8(r16)
1000e604:	18ffffc4 	addi	r3,r3,-1
1000e608:	80c00215 	stw	r3,8(r16)
1000e60c:	183ff30e 	bge	r3,zero,1000e5dc <__alt_data_end+0xf800e5dc>
1000e610:	80800617 	ldw	r2,24(r16)
1000e614:	18801916 	blt	r3,r2,1000e67c <__fputwc+0x10c>
1000e618:	80800017 	ldw	r2,0(r16)
1000e61c:	11400005 	stb	r5,0(r2)
1000e620:	80800017 	ldw	r2,0(r16)
1000e624:	10c00003 	ldbu	r3,0(r2)
1000e628:	10800044 	addi	r2,r2,1
1000e62c:	1d402326 	beq	r3,r21,1000e6bc <__fputwc+0x14c>
1000e630:	80800015 	stw	r2,0(r16)
1000e634:	8c400044 	addi	r17,r17,1
1000e638:	dc45883a 	add	r2,sp,r17
1000e63c:	8d3fef36 	bltu	r17,r20,1000e5fc <__alt_data_end+0xf800e5fc>
1000e640:	9005883a 	mov	r2,r18
1000e644:	00000406 	br	1000e658 <__fputwc+0xe8>
1000e648:	80c0030b 	ldhu	r3,12(r16)
1000e64c:	a005883a 	mov	r2,r20
1000e650:	18c01014 	ori	r3,r3,64
1000e654:	80c0030d 	sth	r3,12(r16)
1000e658:	dfc00717 	ldw	ra,28(sp)
1000e65c:	dd400617 	ldw	r21,24(sp)
1000e660:	dd000517 	ldw	r20,20(sp)
1000e664:	dcc00417 	ldw	r19,16(sp)
1000e668:	dc800317 	ldw	r18,12(sp)
1000e66c:	dc400217 	ldw	r17,8(sp)
1000e670:	dc000117 	ldw	r16,4(sp)
1000e674:	dec00804 	addi	sp,sp,32
1000e678:	f800283a 	ret
1000e67c:	800d883a 	mov	r6,r16
1000e680:	29403fcc 	andi	r5,r5,255
1000e684:	9809883a 	mov	r4,r19
1000e688:	000e8e80 	call	1000e8e8 <__swbuf_r>
1000e68c:	10bfffe0 	cmpeqi	r2,r2,-1
1000e690:	10803fcc 	andi	r2,r2,255
1000e694:	103fd626 	beq	r2,zero,1000e5f0 <__alt_data_end+0xf800e5f0>
1000e698:	00bfffc4 	movi	r2,-1
1000e69c:	003fee06 	br	1000e658 <__alt_data_end+0xf800e658>
1000e6a0:	90ffffc4 	addi	r3,r18,-1
1000e6a4:	01003f84 	movi	r4,254
1000e6a8:	20ffbf36 	bltu	r4,r3,1000e5a8 <__alt_data_end+0xf800e5a8>
1000e6ac:	900b883a 	mov	r5,r18
1000e6b0:	dc800005 	stb	r18,0(sp)
1000e6b4:	1029883a 	mov	r20,r2
1000e6b8:	003fc506 	br	1000e5d0 <__alt_data_end+0xf800e5d0>
1000e6bc:	800d883a 	mov	r6,r16
1000e6c0:	a80b883a 	mov	r5,r21
1000e6c4:	9809883a 	mov	r4,r19
1000e6c8:	000e8e80 	call	1000e8e8 <__swbuf_r>
1000e6cc:	10bfffe0 	cmpeqi	r2,r2,-1
1000e6d0:	003fef06 	br	1000e690 <__alt_data_end+0xf800e690>

1000e6d4 <_fputwc_r>:
1000e6d4:	3080030b 	ldhu	r2,12(r6)
1000e6d8:	10c8000c 	andi	r3,r2,8192
1000e6dc:	1800051e 	bne	r3,zero,1000e6f4 <_fputwc_r+0x20>
1000e6e0:	30c01917 	ldw	r3,100(r6)
1000e6e4:	10880014 	ori	r2,r2,8192
1000e6e8:	3080030d 	sth	r2,12(r6)
1000e6ec:	18880014 	ori	r2,r3,8192
1000e6f0:	30801915 	stw	r2,100(r6)
1000e6f4:	000e5701 	jmpi	1000e570 <__fputwc>

1000e6f8 <fputwc>:
1000e6f8:	00840074 	movhi	r2,4097
1000e6fc:	defffc04 	addi	sp,sp,-16
1000e700:	1098b504 	addi	r2,r2,25300
1000e704:	dc000115 	stw	r16,4(sp)
1000e708:	14000017 	ldw	r16,0(r2)
1000e70c:	dc400215 	stw	r17,8(sp)
1000e710:	dfc00315 	stw	ra,12(sp)
1000e714:	2023883a 	mov	r17,r4
1000e718:	80000226 	beq	r16,zero,1000e724 <fputwc+0x2c>
1000e71c:	80800e17 	ldw	r2,56(r16)
1000e720:	10001026 	beq	r2,zero,1000e764 <fputwc+0x6c>
1000e724:	2880030b 	ldhu	r2,12(r5)
1000e728:	10c8000c 	andi	r3,r2,8192
1000e72c:	1800051e 	bne	r3,zero,1000e744 <fputwc+0x4c>
1000e730:	28c01917 	ldw	r3,100(r5)
1000e734:	10880014 	ori	r2,r2,8192
1000e738:	2880030d 	sth	r2,12(r5)
1000e73c:	18880014 	ori	r2,r3,8192
1000e740:	28801915 	stw	r2,100(r5)
1000e744:	280d883a 	mov	r6,r5
1000e748:	8009883a 	mov	r4,r16
1000e74c:	880b883a 	mov	r5,r17
1000e750:	dfc00317 	ldw	ra,12(sp)
1000e754:	dc400217 	ldw	r17,8(sp)
1000e758:	dc000117 	ldw	r16,4(sp)
1000e75c:	dec00404 	addi	sp,sp,16
1000e760:	000e5701 	jmpi	1000e570 <__fputwc>
1000e764:	8009883a 	mov	r4,r16
1000e768:	d9400015 	stw	r5,0(sp)
1000e76c:	00098c00 	call	100098c0 <__sinit>
1000e770:	d9400017 	ldw	r5,0(sp)
1000e774:	003feb06 	br	1000e724 <__alt_data_end+0xf800e724>

1000e778 <_fstat_r>:
1000e778:	defffd04 	addi	sp,sp,-12
1000e77c:	2805883a 	mov	r2,r5
1000e780:	dc000015 	stw	r16,0(sp)
1000e784:	04040074 	movhi	r16,4097
1000e788:	dc400115 	stw	r17,4(sp)
1000e78c:	841f9304 	addi	r16,r16,32332
1000e790:	2023883a 	mov	r17,r4
1000e794:	300b883a 	mov	r5,r6
1000e798:	1009883a 	mov	r4,r2
1000e79c:	dfc00215 	stw	ra,8(sp)
1000e7a0:	80000015 	stw	zero,0(r16)
1000e7a4:	00116680 	call	10011668 <fstat>
1000e7a8:	00ffffc4 	movi	r3,-1
1000e7ac:	10c00526 	beq	r2,r3,1000e7c4 <_fstat_r+0x4c>
1000e7b0:	dfc00217 	ldw	ra,8(sp)
1000e7b4:	dc400117 	ldw	r17,4(sp)
1000e7b8:	dc000017 	ldw	r16,0(sp)
1000e7bc:	dec00304 	addi	sp,sp,12
1000e7c0:	f800283a 	ret
1000e7c4:	80c00017 	ldw	r3,0(r16)
1000e7c8:	183ff926 	beq	r3,zero,1000e7b0 <__alt_data_end+0xf800e7b0>
1000e7cc:	88c00015 	stw	r3,0(r17)
1000e7d0:	003ff706 	br	1000e7b0 <__alt_data_end+0xf800e7b0>

1000e7d4 <_isatty_r>:
1000e7d4:	defffd04 	addi	sp,sp,-12
1000e7d8:	dc000015 	stw	r16,0(sp)
1000e7dc:	04040074 	movhi	r16,4097
1000e7e0:	dc400115 	stw	r17,4(sp)
1000e7e4:	841f9304 	addi	r16,r16,32332
1000e7e8:	2023883a 	mov	r17,r4
1000e7ec:	2809883a 	mov	r4,r5
1000e7f0:	dfc00215 	stw	ra,8(sp)
1000e7f4:	80000015 	stw	zero,0(r16)
1000e7f8:	001175c0 	call	1001175c <isatty>
1000e7fc:	00ffffc4 	movi	r3,-1
1000e800:	10c00526 	beq	r2,r3,1000e818 <_isatty_r+0x44>
1000e804:	dfc00217 	ldw	ra,8(sp)
1000e808:	dc400117 	ldw	r17,4(sp)
1000e80c:	dc000017 	ldw	r16,0(sp)
1000e810:	dec00304 	addi	sp,sp,12
1000e814:	f800283a 	ret
1000e818:	80c00017 	ldw	r3,0(r16)
1000e81c:	183ff926 	beq	r3,zero,1000e804 <__alt_data_end+0xf800e804>
1000e820:	88c00015 	stw	r3,0(r17)
1000e824:	003ff706 	br	1000e804 <__alt_data_end+0xf800e804>

1000e828 <_lseek_r>:
1000e828:	defffd04 	addi	sp,sp,-12
1000e82c:	2805883a 	mov	r2,r5
1000e830:	dc000015 	stw	r16,0(sp)
1000e834:	04040074 	movhi	r16,4097
1000e838:	dc400115 	stw	r17,4(sp)
1000e83c:	300b883a 	mov	r5,r6
1000e840:	841f9304 	addi	r16,r16,32332
1000e844:	2023883a 	mov	r17,r4
1000e848:	380d883a 	mov	r6,r7
1000e84c:	1009883a 	mov	r4,r2
1000e850:	dfc00215 	stw	ra,8(sp)
1000e854:	80000015 	stw	zero,0(r16)
1000e858:	00119300 	call	10011930 <lseek>
1000e85c:	00ffffc4 	movi	r3,-1
1000e860:	10c00526 	beq	r2,r3,1000e878 <_lseek_r+0x50>
1000e864:	dfc00217 	ldw	ra,8(sp)
1000e868:	dc400117 	ldw	r17,4(sp)
1000e86c:	dc000017 	ldw	r16,0(sp)
1000e870:	dec00304 	addi	sp,sp,12
1000e874:	f800283a 	ret
1000e878:	80c00017 	ldw	r3,0(r16)
1000e87c:	183ff926 	beq	r3,zero,1000e864 <__alt_data_end+0xf800e864>
1000e880:	88c00015 	stw	r3,0(r17)
1000e884:	003ff706 	br	1000e864 <__alt_data_end+0xf800e864>

1000e888 <_read_r>:
1000e888:	defffd04 	addi	sp,sp,-12
1000e88c:	2805883a 	mov	r2,r5
1000e890:	dc000015 	stw	r16,0(sp)
1000e894:	04040074 	movhi	r16,4097
1000e898:	dc400115 	stw	r17,4(sp)
1000e89c:	300b883a 	mov	r5,r6
1000e8a0:	841f9304 	addi	r16,r16,32332
1000e8a4:	2023883a 	mov	r17,r4
1000e8a8:	380d883a 	mov	r6,r7
1000e8ac:	1009883a 	mov	r4,r2
1000e8b0:	dfc00215 	stw	ra,8(sp)
1000e8b4:	80000015 	stw	zero,0(r16)
1000e8b8:	0011b0c0 	call	10011b0c <read>
1000e8bc:	00ffffc4 	movi	r3,-1
1000e8c0:	10c00526 	beq	r2,r3,1000e8d8 <_read_r+0x50>
1000e8c4:	dfc00217 	ldw	ra,8(sp)
1000e8c8:	dc400117 	ldw	r17,4(sp)
1000e8cc:	dc000017 	ldw	r16,0(sp)
1000e8d0:	dec00304 	addi	sp,sp,12
1000e8d4:	f800283a 	ret
1000e8d8:	80c00017 	ldw	r3,0(r16)
1000e8dc:	183ff926 	beq	r3,zero,1000e8c4 <__alt_data_end+0xf800e8c4>
1000e8e0:	88c00015 	stw	r3,0(r17)
1000e8e4:	003ff706 	br	1000e8c4 <__alt_data_end+0xf800e8c4>

1000e8e8 <__swbuf_r>:
1000e8e8:	defffb04 	addi	sp,sp,-20
1000e8ec:	dcc00315 	stw	r19,12(sp)
1000e8f0:	dc800215 	stw	r18,8(sp)
1000e8f4:	dc000015 	stw	r16,0(sp)
1000e8f8:	dfc00415 	stw	ra,16(sp)
1000e8fc:	dc400115 	stw	r17,4(sp)
1000e900:	2025883a 	mov	r18,r4
1000e904:	2827883a 	mov	r19,r5
1000e908:	3021883a 	mov	r16,r6
1000e90c:	20000226 	beq	r4,zero,1000e918 <__swbuf_r+0x30>
1000e910:	20800e17 	ldw	r2,56(r4)
1000e914:	10004226 	beq	r2,zero,1000ea20 <__swbuf_r+0x138>
1000e918:	80800617 	ldw	r2,24(r16)
1000e91c:	8100030b 	ldhu	r4,12(r16)
1000e920:	80800215 	stw	r2,8(r16)
1000e924:	2080020c 	andi	r2,r4,8
1000e928:	10003626 	beq	r2,zero,1000ea04 <__swbuf_r+0x11c>
1000e92c:	80c00417 	ldw	r3,16(r16)
1000e930:	18003426 	beq	r3,zero,1000ea04 <__swbuf_r+0x11c>
1000e934:	2088000c 	andi	r2,r4,8192
1000e938:	9c403fcc 	andi	r17,r19,255
1000e93c:	10001a26 	beq	r2,zero,1000e9a8 <__swbuf_r+0xc0>
1000e940:	80800017 	ldw	r2,0(r16)
1000e944:	81000517 	ldw	r4,20(r16)
1000e948:	10c7c83a 	sub	r3,r2,r3
1000e94c:	1900200e 	bge	r3,r4,1000e9d0 <__swbuf_r+0xe8>
1000e950:	18c00044 	addi	r3,r3,1
1000e954:	81000217 	ldw	r4,8(r16)
1000e958:	11400044 	addi	r5,r2,1
1000e95c:	81400015 	stw	r5,0(r16)
1000e960:	213fffc4 	addi	r4,r4,-1
1000e964:	81000215 	stw	r4,8(r16)
1000e968:	14c00005 	stb	r19,0(r2)
1000e96c:	80800517 	ldw	r2,20(r16)
1000e970:	10c01e26 	beq	r2,r3,1000e9ec <__swbuf_r+0x104>
1000e974:	8080030b 	ldhu	r2,12(r16)
1000e978:	1080004c 	andi	r2,r2,1
1000e97c:	10000226 	beq	r2,zero,1000e988 <__swbuf_r+0xa0>
1000e980:	00800284 	movi	r2,10
1000e984:	88801926 	beq	r17,r2,1000e9ec <__swbuf_r+0x104>
1000e988:	8805883a 	mov	r2,r17
1000e98c:	dfc00417 	ldw	ra,16(sp)
1000e990:	dcc00317 	ldw	r19,12(sp)
1000e994:	dc800217 	ldw	r18,8(sp)
1000e998:	dc400117 	ldw	r17,4(sp)
1000e99c:	dc000017 	ldw	r16,0(sp)
1000e9a0:	dec00504 	addi	sp,sp,20
1000e9a4:	f800283a 	ret
1000e9a8:	81401917 	ldw	r5,100(r16)
1000e9ac:	00b7ffc4 	movi	r2,-8193
1000e9b0:	21080014 	ori	r4,r4,8192
1000e9b4:	2884703a 	and	r2,r5,r2
1000e9b8:	80801915 	stw	r2,100(r16)
1000e9bc:	80800017 	ldw	r2,0(r16)
1000e9c0:	8100030d 	sth	r4,12(r16)
1000e9c4:	81000517 	ldw	r4,20(r16)
1000e9c8:	10c7c83a 	sub	r3,r2,r3
1000e9cc:	193fe016 	blt	r3,r4,1000e950 <__alt_data_end+0xf800e950>
1000e9d0:	800b883a 	mov	r5,r16
1000e9d4:	9009883a 	mov	r4,r18
1000e9d8:	00094d40 	call	100094d4 <_fflush_r>
1000e9dc:	1000071e 	bne	r2,zero,1000e9fc <__swbuf_r+0x114>
1000e9e0:	80800017 	ldw	r2,0(r16)
1000e9e4:	00c00044 	movi	r3,1
1000e9e8:	003fda06 	br	1000e954 <__alt_data_end+0xf800e954>
1000e9ec:	800b883a 	mov	r5,r16
1000e9f0:	9009883a 	mov	r4,r18
1000e9f4:	00094d40 	call	100094d4 <_fflush_r>
1000e9f8:	103fe326 	beq	r2,zero,1000e988 <__alt_data_end+0xf800e988>
1000e9fc:	00bfffc4 	movi	r2,-1
1000ea00:	003fe206 	br	1000e98c <__alt_data_end+0xf800e98c>
1000ea04:	800b883a 	mov	r5,r16
1000ea08:	9009883a 	mov	r4,r18
1000ea0c:	00078b40 	call	100078b4 <__swsetup_r>
1000ea10:	103ffa1e 	bne	r2,zero,1000e9fc <__alt_data_end+0xf800e9fc>
1000ea14:	8100030b 	ldhu	r4,12(r16)
1000ea18:	80c00417 	ldw	r3,16(r16)
1000ea1c:	003fc506 	br	1000e934 <__alt_data_end+0xf800e934>
1000ea20:	00098c00 	call	100098c0 <__sinit>
1000ea24:	003fbc06 	br	1000e918 <__alt_data_end+0xf800e918>

1000ea28 <__swbuf>:
1000ea28:	00840074 	movhi	r2,4097
1000ea2c:	1098b504 	addi	r2,r2,25300
1000ea30:	280d883a 	mov	r6,r5
1000ea34:	200b883a 	mov	r5,r4
1000ea38:	11000017 	ldw	r4,0(r2)
1000ea3c:	000e8e81 	jmpi	1000e8e8 <__swbuf_r>

1000ea40 <_wcrtomb_r>:
1000ea40:	defff604 	addi	sp,sp,-40
1000ea44:	00840074 	movhi	r2,4097
1000ea48:	dc800815 	stw	r18,32(sp)
1000ea4c:	dc400715 	stw	r17,28(sp)
1000ea50:	dc000615 	stw	r16,24(sp)
1000ea54:	1098b904 	addi	r2,r2,25316
1000ea58:	dfc00915 	stw	ra,36(sp)
1000ea5c:	2021883a 	mov	r16,r4
1000ea60:	3823883a 	mov	r17,r7
1000ea64:	14800017 	ldw	r18,0(r2)
1000ea68:	28001426 	beq	r5,zero,1000eabc <_wcrtomb_r+0x7c>
1000ea6c:	d9400415 	stw	r5,16(sp)
1000ea70:	d9800515 	stw	r6,20(sp)
1000ea74:	000a4100 	call	1000a410 <__locale_charset>
1000ea78:	d9800517 	ldw	r6,20(sp)
1000ea7c:	d9400417 	ldw	r5,16(sp)
1000ea80:	100f883a 	mov	r7,r2
1000ea84:	dc400015 	stw	r17,0(sp)
1000ea88:	8009883a 	mov	r4,r16
1000ea8c:	903ee83a 	callr	r18
1000ea90:	00ffffc4 	movi	r3,-1
1000ea94:	10c0031e 	bne	r2,r3,1000eaa4 <_wcrtomb_r+0x64>
1000ea98:	88000015 	stw	zero,0(r17)
1000ea9c:	00c02284 	movi	r3,138
1000eaa0:	80c00015 	stw	r3,0(r16)
1000eaa4:	dfc00917 	ldw	ra,36(sp)
1000eaa8:	dc800817 	ldw	r18,32(sp)
1000eaac:	dc400717 	ldw	r17,28(sp)
1000eab0:	dc000617 	ldw	r16,24(sp)
1000eab4:	dec00a04 	addi	sp,sp,40
1000eab8:	f800283a 	ret
1000eabc:	000a4100 	call	1000a410 <__locale_charset>
1000eac0:	100f883a 	mov	r7,r2
1000eac4:	dc400015 	stw	r17,0(sp)
1000eac8:	000d883a 	mov	r6,zero
1000eacc:	d9400104 	addi	r5,sp,4
1000ead0:	8009883a 	mov	r4,r16
1000ead4:	903ee83a 	callr	r18
1000ead8:	003fed06 	br	1000ea90 <__alt_data_end+0xf800ea90>

1000eadc <wcrtomb>:
1000eadc:	defff604 	addi	sp,sp,-40
1000eae0:	00840074 	movhi	r2,4097
1000eae4:	dc800615 	stw	r18,24(sp)
1000eae8:	dc400515 	stw	r17,20(sp)
1000eaec:	1098b504 	addi	r2,r2,25300
1000eaf0:	dfc00915 	stw	ra,36(sp)
1000eaf4:	dd000815 	stw	r20,32(sp)
1000eaf8:	dcc00715 	stw	r19,28(sp)
1000eafc:	dc000415 	stw	r16,16(sp)
1000eb00:	3025883a 	mov	r18,r6
1000eb04:	14400017 	ldw	r17,0(r2)
1000eb08:	20001926 	beq	r4,zero,1000eb70 <wcrtomb+0x94>
1000eb0c:	00840074 	movhi	r2,4097
1000eb10:	1098b904 	addi	r2,r2,25316
1000eb14:	15000017 	ldw	r20,0(r2)
1000eb18:	2021883a 	mov	r16,r4
1000eb1c:	2827883a 	mov	r19,r5
1000eb20:	000a4100 	call	1000a410 <__locale_charset>
1000eb24:	100f883a 	mov	r7,r2
1000eb28:	dc800015 	stw	r18,0(sp)
1000eb2c:	980d883a 	mov	r6,r19
1000eb30:	800b883a 	mov	r5,r16
1000eb34:	8809883a 	mov	r4,r17
1000eb38:	a03ee83a 	callr	r20
1000eb3c:	00ffffc4 	movi	r3,-1
1000eb40:	10c0031e 	bne	r2,r3,1000eb50 <wcrtomb+0x74>
1000eb44:	90000015 	stw	zero,0(r18)
1000eb48:	00c02284 	movi	r3,138
1000eb4c:	88c00015 	stw	r3,0(r17)
1000eb50:	dfc00917 	ldw	ra,36(sp)
1000eb54:	dd000817 	ldw	r20,32(sp)
1000eb58:	dcc00717 	ldw	r19,28(sp)
1000eb5c:	dc800617 	ldw	r18,24(sp)
1000eb60:	dc400517 	ldw	r17,20(sp)
1000eb64:	dc000417 	ldw	r16,16(sp)
1000eb68:	dec00a04 	addi	sp,sp,40
1000eb6c:	f800283a 	ret
1000eb70:	00840074 	movhi	r2,4097
1000eb74:	1098b904 	addi	r2,r2,25316
1000eb78:	14000017 	ldw	r16,0(r2)
1000eb7c:	000a4100 	call	1000a410 <__locale_charset>
1000eb80:	100f883a 	mov	r7,r2
1000eb84:	dc800015 	stw	r18,0(sp)
1000eb88:	000d883a 	mov	r6,zero
1000eb8c:	d9400104 	addi	r5,sp,4
1000eb90:	8809883a 	mov	r4,r17
1000eb94:	803ee83a 	callr	r16
1000eb98:	003fe806 	br	1000eb3c <__alt_data_end+0xf800eb3c>

1000eb9c <__ascii_wctomb>:
1000eb9c:	28000526 	beq	r5,zero,1000ebb4 <__ascii_wctomb+0x18>
1000eba0:	00803fc4 	movi	r2,255
1000eba4:	11800536 	bltu	r2,r6,1000ebbc <__ascii_wctomb+0x20>
1000eba8:	29800005 	stb	r6,0(r5)
1000ebac:	00800044 	movi	r2,1
1000ebb0:	f800283a 	ret
1000ebb4:	0005883a 	mov	r2,zero
1000ebb8:	f800283a 	ret
1000ebbc:	00802284 	movi	r2,138
1000ebc0:	20800015 	stw	r2,0(r4)
1000ebc4:	00bfffc4 	movi	r2,-1
1000ebc8:	f800283a 	ret

1000ebcc <_wctomb_r>:
1000ebcc:	00840074 	movhi	r2,4097
1000ebd0:	defff904 	addi	sp,sp,-28
1000ebd4:	1098b904 	addi	r2,r2,25316
1000ebd8:	dfc00615 	stw	ra,24(sp)
1000ebdc:	dc400515 	stw	r17,20(sp)
1000ebe0:	dc000415 	stw	r16,16(sp)
1000ebe4:	3823883a 	mov	r17,r7
1000ebe8:	14000017 	ldw	r16,0(r2)
1000ebec:	d9000115 	stw	r4,4(sp)
1000ebf0:	d9400215 	stw	r5,8(sp)
1000ebf4:	d9800315 	stw	r6,12(sp)
1000ebf8:	000a4100 	call	1000a410 <__locale_charset>
1000ebfc:	d9800317 	ldw	r6,12(sp)
1000ec00:	d9400217 	ldw	r5,8(sp)
1000ec04:	d9000117 	ldw	r4,4(sp)
1000ec08:	100f883a 	mov	r7,r2
1000ec0c:	dc400015 	stw	r17,0(sp)
1000ec10:	803ee83a 	callr	r16
1000ec14:	dfc00617 	ldw	ra,24(sp)
1000ec18:	dc400517 	ldw	r17,20(sp)
1000ec1c:	dc000417 	ldw	r16,16(sp)
1000ec20:	dec00704 	addi	sp,sp,28
1000ec24:	f800283a 	ret

1000ec28 <__muldi3>:
1000ec28:	defff604 	addi	sp,sp,-40
1000ec2c:	dd800615 	stw	r22,24(sp)
1000ec30:	dd400515 	stw	r21,20(sp)
1000ec34:	dc400115 	stw	r17,4(sp)
1000ec38:	357fffcc 	andi	r21,r6,65535
1000ec3c:	2022d43a 	srli	r17,r4,16
1000ec40:	25bfffcc 	andi	r22,r4,65535
1000ec44:	dcc00315 	stw	r19,12(sp)
1000ec48:	dc800215 	stw	r18,8(sp)
1000ec4c:	2027883a 	mov	r19,r4
1000ec50:	2825883a 	mov	r18,r5
1000ec54:	b009883a 	mov	r4,r22
1000ec58:	a80b883a 	mov	r5,r21
1000ec5c:	dfc00915 	stw	ra,36(sp)
1000ec60:	df000815 	stw	fp,32(sp)
1000ec64:	ddc00715 	stw	r23,28(sp)
1000ec68:	3839883a 	mov	fp,r7
1000ec6c:	302ed43a 	srli	r23,r6,16
1000ec70:	dd000415 	stw	r20,16(sp)
1000ec74:	dc000015 	stw	r16,0(sp)
1000ec78:	3029883a 	mov	r20,r6
1000ec7c:	00052300 	call	10005230 <__mulsi3>
1000ec80:	a80b883a 	mov	r5,r21
1000ec84:	8809883a 	mov	r4,r17
1000ec88:	1021883a 	mov	r16,r2
1000ec8c:	00052300 	call	10005230 <__mulsi3>
1000ec90:	8809883a 	mov	r4,r17
1000ec94:	b80b883a 	mov	r5,r23
1000ec98:	102b883a 	mov	r21,r2
1000ec9c:	00052300 	call	10005230 <__mulsi3>
1000eca0:	b80b883a 	mov	r5,r23
1000eca4:	b009883a 	mov	r4,r22
1000eca8:	1023883a 	mov	r17,r2
1000ecac:	00052300 	call	10005230 <__mulsi3>
1000ecb0:	8006d43a 	srli	r3,r16,16
1000ecb4:	1545883a 	add	r2,r2,r21
1000ecb8:	1885883a 	add	r2,r3,r2
1000ecbc:	1540022e 	bgeu	r2,r21,1000ecc8 <__muldi3+0xa0>
1000ecc0:	00c00074 	movhi	r3,1
1000ecc4:	88e3883a 	add	r17,r17,r3
1000ecc8:	1006d43a 	srli	r3,r2,16
1000eccc:	1004943a 	slli	r2,r2,16
1000ecd0:	e00b883a 	mov	r5,fp
1000ecd4:	9809883a 	mov	r4,r19
1000ecd8:	843fffcc 	andi	r16,r16,65535
1000ecdc:	1c63883a 	add	r17,r3,r17
1000ece0:	1421883a 	add	r16,r2,r16
1000ece4:	00052300 	call	10005230 <__mulsi3>
1000ece8:	900b883a 	mov	r5,r18
1000ecec:	a009883a 	mov	r4,r20
1000ecf0:	1027883a 	mov	r19,r2
1000ecf4:	00052300 	call	10005230 <__mulsi3>
1000ecf8:	9885883a 	add	r2,r19,r2
1000ecfc:	1447883a 	add	r3,r2,r17
1000ed00:	8005883a 	mov	r2,r16
1000ed04:	dfc00917 	ldw	ra,36(sp)
1000ed08:	df000817 	ldw	fp,32(sp)
1000ed0c:	ddc00717 	ldw	r23,28(sp)
1000ed10:	dd800617 	ldw	r22,24(sp)
1000ed14:	dd400517 	ldw	r21,20(sp)
1000ed18:	dd000417 	ldw	r20,16(sp)
1000ed1c:	dcc00317 	ldw	r19,12(sp)
1000ed20:	dc800217 	ldw	r18,8(sp)
1000ed24:	dc400117 	ldw	r17,4(sp)
1000ed28:	dc000017 	ldw	r16,0(sp)
1000ed2c:	dec00a04 	addi	sp,sp,40
1000ed30:	f800283a 	ret

1000ed34 <__udivdi3>:
1000ed34:	defff404 	addi	sp,sp,-48
1000ed38:	dcc00515 	stw	r19,20(sp)
1000ed3c:	dc000215 	stw	r16,8(sp)
1000ed40:	dfc00b15 	stw	ra,44(sp)
1000ed44:	df000a15 	stw	fp,40(sp)
1000ed48:	ddc00915 	stw	r23,36(sp)
1000ed4c:	dd800815 	stw	r22,32(sp)
1000ed50:	dd400715 	stw	r21,28(sp)
1000ed54:	dd000615 	stw	r20,24(sp)
1000ed58:	dc800415 	stw	r18,16(sp)
1000ed5c:	dc400315 	stw	r17,12(sp)
1000ed60:	2027883a 	mov	r19,r4
1000ed64:	2821883a 	mov	r16,r5
1000ed68:	3800461e 	bne	r7,zero,1000ee84 <__udivdi3+0x150>
1000ed6c:	3023883a 	mov	r17,r6
1000ed70:	2025883a 	mov	r18,r4
1000ed74:	2980572e 	bgeu	r5,r6,1000eed4 <__udivdi3+0x1a0>
1000ed78:	00bfffd4 	movui	r2,65535
1000ed7c:	282d883a 	mov	r22,r5
1000ed80:	1180b236 	bltu	r2,r6,1000f04c <__udivdi3+0x318>
1000ed84:	00803fc4 	movi	r2,255
1000ed88:	1185803a 	cmpltu	r2,r2,r6
1000ed8c:	100490fa 	slli	r2,r2,3
1000ed90:	3086d83a 	srl	r3,r6,r2
1000ed94:	01040074 	movhi	r4,4097
1000ed98:	21114804 	addi	r4,r4,17696
1000ed9c:	20c7883a 	add	r3,r4,r3
1000eda0:	18c00003 	ldbu	r3,0(r3)
1000eda4:	1885883a 	add	r2,r3,r2
1000eda8:	00c00804 	movi	r3,32
1000edac:	1887c83a 	sub	r3,r3,r2
1000edb0:	18000526 	beq	r3,zero,1000edc8 <__udivdi3+0x94>
1000edb4:	80e0983a 	sll	r16,r16,r3
1000edb8:	9884d83a 	srl	r2,r19,r2
1000edbc:	30e2983a 	sll	r17,r6,r3
1000edc0:	98e4983a 	sll	r18,r19,r3
1000edc4:	142cb03a 	or	r22,r2,r16
1000edc8:	882ad43a 	srli	r21,r17,16
1000edcc:	b009883a 	mov	r4,r22
1000edd0:	8d3fffcc 	andi	r20,r17,65535
1000edd4:	a80b883a 	mov	r5,r21
1000edd8:	000452c0 	call	1000452c <__umodsi3>
1000eddc:	b009883a 	mov	r4,r22
1000ede0:	a80b883a 	mov	r5,r21
1000ede4:	1027883a 	mov	r19,r2
1000ede8:	00044c80 	call	100044c8 <__udivsi3>
1000edec:	100b883a 	mov	r5,r2
1000edf0:	a009883a 	mov	r4,r20
1000edf4:	102d883a 	mov	r22,r2
1000edf8:	00052300 	call	10005230 <__mulsi3>
1000edfc:	9826943a 	slli	r19,r19,16
1000ee00:	9006d43a 	srli	r3,r18,16
1000ee04:	1cc6b03a 	or	r3,r3,r19
1000ee08:	1880052e 	bgeu	r3,r2,1000ee20 <__udivdi3+0xec>
1000ee0c:	1c47883a 	add	r3,r3,r17
1000ee10:	b13fffc4 	addi	r4,r22,-1
1000ee14:	1c400136 	bltu	r3,r17,1000ee1c <__udivdi3+0xe8>
1000ee18:	18814236 	bltu	r3,r2,1000f324 <__udivdi3+0x5f0>
1000ee1c:	202d883a 	mov	r22,r4
1000ee20:	18a1c83a 	sub	r16,r3,r2
1000ee24:	8009883a 	mov	r4,r16
1000ee28:	a80b883a 	mov	r5,r21
1000ee2c:	000452c0 	call	1000452c <__umodsi3>
1000ee30:	1027883a 	mov	r19,r2
1000ee34:	8009883a 	mov	r4,r16
1000ee38:	a80b883a 	mov	r5,r21
1000ee3c:	9826943a 	slli	r19,r19,16
1000ee40:	00044c80 	call	100044c8 <__udivsi3>
1000ee44:	100b883a 	mov	r5,r2
1000ee48:	a009883a 	mov	r4,r20
1000ee4c:	94bfffcc 	andi	r18,r18,65535
1000ee50:	1021883a 	mov	r16,r2
1000ee54:	94e4b03a 	or	r18,r18,r19
1000ee58:	00052300 	call	10005230 <__mulsi3>
1000ee5c:	9080052e 	bgeu	r18,r2,1000ee74 <__udivdi3+0x140>
1000ee60:	8ca5883a 	add	r18,r17,r18
1000ee64:	80ffffc4 	addi	r3,r16,-1
1000ee68:	94410c36 	bltu	r18,r17,1000f29c <__udivdi3+0x568>
1000ee6c:	90810b2e 	bgeu	r18,r2,1000f29c <__udivdi3+0x568>
1000ee70:	843fff84 	addi	r16,r16,-2
1000ee74:	b004943a 	slli	r2,r22,16
1000ee78:	0007883a 	mov	r3,zero
1000ee7c:	1404b03a 	or	r2,r2,r16
1000ee80:	00005e06 	br	1000effc <__udivdi3+0x2c8>
1000ee84:	29c05b36 	bltu	r5,r7,1000eff4 <__udivdi3+0x2c0>
1000ee88:	00bfffd4 	movui	r2,65535
1000ee8c:	11c0672e 	bgeu	r2,r7,1000f02c <__udivdi3+0x2f8>
1000ee90:	00804034 	movhi	r2,256
1000ee94:	10bfffc4 	addi	r2,r2,-1
1000ee98:	11c10a36 	bltu	r2,r7,1000f2c4 <__udivdi3+0x590>
1000ee9c:	00800404 	movi	r2,16
1000eea0:	3886d83a 	srl	r3,r7,r2
1000eea4:	01040074 	movhi	r4,4097
1000eea8:	21114804 	addi	r4,r4,17696
1000eeac:	20c7883a 	add	r3,r4,r3
1000eeb0:	18c00003 	ldbu	r3,0(r3)
1000eeb4:	05c00804 	movi	r23,32
1000eeb8:	1885883a 	add	r2,r3,r2
1000eebc:	b8afc83a 	sub	r23,r23,r2
1000eec0:	b800671e 	bne	r23,zero,1000f060 <__udivdi3+0x32c>
1000eec4:	3c010536 	bltu	r7,r16,1000f2dc <__udivdi3+0x5a8>
1000eec8:	9985403a 	cmpgeu	r2,r19,r6
1000eecc:	0007883a 	mov	r3,zero
1000eed0:	00004a06 	br	1000effc <__udivdi3+0x2c8>
1000eed4:	3000041e 	bne	r6,zero,1000eee8 <__udivdi3+0x1b4>
1000eed8:	000b883a 	mov	r5,zero
1000eedc:	01000044 	movi	r4,1
1000eee0:	00044c80 	call	100044c8 <__udivsi3>
1000eee4:	1023883a 	mov	r17,r2
1000eee8:	00bfffd4 	movui	r2,65535
1000eeec:	1440532e 	bgeu	r2,r17,1000f03c <__udivdi3+0x308>
1000eef0:	00804034 	movhi	r2,256
1000eef4:	10bfffc4 	addi	r2,r2,-1
1000eef8:	1440f436 	bltu	r2,r17,1000f2cc <__udivdi3+0x598>
1000eefc:	00800404 	movi	r2,16
1000ef00:	8886d83a 	srl	r3,r17,r2
1000ef04:	01040074 	movhi	r4,4097
1000ef08:	21114804 	addi	r4,r4,17696
1000ef0c:	20c7883a 	add	r3,r4,r3
1000ef10:	18c00003 	ldbu	r3,0(r3)
1000ef14:	1885883a 	add	r2,r3,r2
1000ef18:	00c00804 	movi	r3,32
1000ef1c:	1887c83a 	sub	r3,r3,r2
1000ef20:	1800a51e 	bne	r3,zero,1000f1b8 <__udivdi3+0x484>
1000ef24:	882ad43a 	srli	r21,r17,16
1000ef28:	8461c83a 	sub	r16,r16,r17
1000ef2c:	8d3fffcc 	andi	r20,r17,65535
1000ef30:	00c00044 	movi	r3,1
1000ef34:	a80b883a 	mov	r5,r21
1000ef38:	8009883a 	mov	r4,r16
1000ef3c:	d8c00115 	stw	r3,4(sp)
1000ef40:	000452c0 	call	1000452c <__umodsi3>
1000ef44:	a80b883a 	mov	r5,r21
1000ef48:	8009883a 	mov	r4,r16
1000ef4c:	1027883a 	mov	r19,r2
1000ef50:	00044c80 	call	100044c8 <__udivsi3>
1000ef54:	a00b883a 	mov	r5,r20
1000ef58:	1009883a 	mov	r4,r2
1000ef5c:	102d883a 	mov	r22,r2
1000ef60:	00052300 	call	10005230 <__mulsi3>
1000ef64:	9826943a 	slli	r19,r19,16
1000ef68:	900ed43a 	srli	r7,r18,16
1000ef6c:	d8c00117 	ldw	r3,4(sp)
1000ef70:	3cceb03a 	or	r7,r7,r19
1000ef74:	3880052e 	bgeu	r7,r2,1000ef8c <__udivdi3+0x258>
1000ef78:	3c4f883a 	add	r7,r7,r17
1000ef7c:	b13fffc4 	addi	r4,r22,-1
1000ef80:	3c400136 	bltu	r7,r17,1000ef88 <__udivdi3+0x254>
1000ef84:	3880e436 	bltu	r7,r2,1000f318 <__udivdi3+0x5e4>
1000ef88:	202d883a 	mov	r22,r4
1000ef8c:	38a1c83a 	sub	r16,r7,r2
1000ef90:	8009883a 	mov	r4,r16
1000ef94:	a80b883a 	mov	r5,r21
1000ef98:	d8c00115 	stw	r3,4(sp)
1000ef9c:	000452c0 	call	1000452c <__umodsi3>
1000efa0:	1027883a 	mov	r19,r2
1000efa4:	8009883a 	mov	r4,r16
1000efa8:	a80b883a 	mov	r5,r21
1000efac:	9826943a 	slli	r19,r19,16
1000efb0:	00044c80 	call	100044c8 <__udivsi3>
1000efb4:	a00b883a 	mov	r5,r20
1000efb8:	1009883a 	mov	r4,r2
1000efbc:	94bfffcc 	andi	r18,r18,65535
1000efc0:	1021883a 	mov	r16,r2
1000efc4:	94e4b03a 	or	r18,r18,r19
1000efc8:	00052300 	call	10005230 <__mulsi3>
1000efcc:	d8c00117 	ldw	r3,4(sp)
1000efd0:	9080052e 	bgeu	r18,r2,1000efe8 <__udivdi3+0x2b4>
1000efd4:	8ca5883a 	add	r18,r17,r18
1000efd8:	813fffc4 	addi	r4,r16,-1
1000efdc:	9440ad36 	bltu	r18,r17,1000f294 <__udivdi3+0x560>
1000efe0:	9080ac2e 	bgeu	r18,r2,1000f294 <__udivdi3+0x560>
1000efe4:	843fff84 	addi	r16,r16,-2
1000efe8:	b004943a 	slli	r2,r22,16
1000efec:	1404b03a 	or	r2,r2,r16
1000eff0:	00000206 	br	1000effc <__udivdi3+0x2c8>
1000eff4:	0007883a 	mov	r3,zero
1000eff8:	0005883a 	mov	r2,zero
1000effc:	dfc00b17 	ldw	ra,44(sp)
1000f000:	df000a17 	ldw	fp,40(sp)
1000f004:	ddc00917 	ldw	r23,36(sp)
1000f008:	dd800817 	ldw	r22,32(sp)
1000f00c:	dd400717 	ldw	r21,28(sp)
1000f010:	dd000617 	ldw	r20,24(sp)
1000f014:	dcc00517 	ldw	r19,20(sp)
1000f018:	dc800417 	ldw	r18,16(sp)
1000f01c:	dc400317 	ldw	r17,12(sp)
1000f020:	dc000217 	ldw	r16,8(sp)
1000f024:	dec00c04 	addi	sp,sp,48
1000f028:	f800283a 	ret
1000f02c:	00803fc4 	movi	r2,255
1000f030:	11c5803a 	cmpltu	r2,r2,r7
1000f034:	100490fa 	slli	r2,r2,3
1000f038:	003f9906 	br	1000eea0 <__alt_data_end+0xf800eea0>
1000f03c:	00803fc4 	movi	r2,255
1000f040:	1445803a 	cmpltu	r2,r2,r17
1000f044:	100490fa 	slli	r2,r2,3
1000f048:	003fad06 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f04c:	00804034 	movhi	r2,256
1000f050:	10bfffc4 	addi	r2,r2,-1
1000f054:	11809f36 	bltu	r2,r6,1000f2d4 <__udivdi3+0x5a0>
1000f058:	00800404 	movi	r2,16
1000f05c:	003f4c06 	br	1000ed90 <__alt_data_end+0xf800ed90>
1000f060:	3dce983a 	sll	r7,r7,r23
1000f064:	30b8d83a 	srl	fp,r6,r2
1000f068:	80a2d83a 	srl	r17,r16,r2
1000f06c:	35cc983a 	sll	r6,r6,r23
1000f070:	3f38b03a 	or	fp,r7,fp
1000f074:	e024d43a 	srli	r18,fp,16
1000f078:	9884d83a 	srl	r2,r19,r2
1000f07c:	85e0983a 	sll	r16,r16,r23
1000f080:	8809883a 	mov	r4,r17
1000f084:	900b883a 	mov	r5,r18
1000f088:	d9800015 	stw	r6,0(sp)
1000f08c:	1420b03a 	or	r16,r2,r16
1000f090:	000452c0 	call	1000452c <__umodsi3>
1000f094:	900b883a 	mov	r5,r18
1000f098:	8809883a 	mov	r4,r17
1000f09c:	1029883a 	mov	r20,r2
1000f0a0:	e5bfffcc 	andi	r22,fp,65535
1000f0a4:	00044c80 	call	100044c8 <__udivsi3>
1000f0a8:	100b883a 	mov	r5,r2
1000f0ac:	b009883a 	mov	r4,r22
1000f0b0:	102b883a 	mov	r21,r2
1000f0b4:	00052300 	call	10005230 <__mulsi3>
1000f0b8:	a028943a 	slli	r20,r20,16
1000f0bc:	8006d43a 	srli	r3,r16,16
1000f0c0:	1d06b03a 	or	r3,r3,r20
1000f0c4:	1880042e 	bgeu	r3,r2,1000f0d8 <__udivdi3+0x3a4>
1000f0c8:	1f07883a 	add	r3,r3,fp
1000f0cc:	a93fffc4 	addi	r4,r21,-1
1000f0d0:	1f00892e 	bgeu	r3,fp,1000f2f8 <__udivdi3+0x5c4>
1000f0d4:	202b883a 	mov	r21,r4
1000f0d8:	18a3c83a 	sub	r17,r3,r2
1000f0dc:	8809883a 	mov	r4,r17
1000f0e0:	900b883a 	mov	r5,r18
1000f0e4:	000452c0 	call	1000452c <__umodsi3>
1000f0e8:	1029883a 	mov	r20,r2
1000f0ec:	8809883a 	mov	r4,r17
1000f0f0:	900b883a 	mov	r5,r18
1000f0f4:	a028943a 	slli	r20,r20,16
1000f0f8:	00044c80 	call	100044c8 <__udivsi3>
1000f0fc:	100b883a 	mov	r5,r2
1000f100:	b009883a 	mov	r4,r22
1000f104:	843fffcc 	andi	r16,r16,65535
1000f108:	1023883a 	mov	r17,r2
1000f10c:	8520b03a 	or	r16,r16,r20
1000f110:	00052300 	call	10005230 <__mulsi3>
1000f114:	8080042e 	bgeu	r16,r2,1000f128 <__udivdi3+0x3f4>
1000f118:	8721883a 	add	r16,r16,fp
1000f11c:	88ffffc4 	addi	r3,r17,-1
1000f120:	8700712e 	bgeu	r16,fp,1000f2e8 <__udivdi3+0x5b4>
1000f124:	1823883a 	mov	r17,r3
1000f128:	a80e943a 	slli	r7,r21,16
1000f12c:	d8c00017 	ldw	r3,0(sp)
1000f130:	80a1c83a 	sub	r16,r16,r2
1000f134:	3c64b03a 	or	r18,r7,r17
1000f138:	1d3fffcc 	andi	r20,r3,65535
1000f13c:	9022d43a 	srli	r17,r18,16
1000f140:	95bfffcc 	andi	r22,r18,65535
1000f144:	a00b883a 	mov	r5,r20
1000f148:	b009883a 	mov	r4,r22
1000f14c:	182ad43a 	srli	r21,r3,16
1000f150:	00052300 	call	10005230 <__mulsi3>
1000f154:	a00b883a 	mov	r5,r20
1000f158:	8809883a 	mov	r4,r17
1000f15c:	1039883a 	mov	fp,r2
1000f160:	00052300 	call	10005230 <__mulsi3>
1000f164:	8809883a 	mov	r4,r17
1000f168:	a80b883a 	mov	r5,r21
1000f16c:	1029883a 	mov	r20,r2
1000f170:	00052300 	call	10005230 <__mulsi3>
1000f174:	a80b883a 	mov	r5,r21
1000f178:	b009883a 	mov	r4,r22
1000f17c:	1023883a 	mov	r17,r2
1000f180:	00052300 	call	10005230 <__mulsi3>
1000f184:	e006d43a 	srli	r3,fp,16
1000f188:	1505883a 	add	r2,r2,r20
1000f18c:	1887883a 	add	r3,r3,r2
1000f190:	1d00022e 	bgeu	r3,r20,1000f19c <__udivdi3+0x468>
1000f194:	00800074 	movhi	r2,1
1000f198:	88a3883a 	add	r17,r17,r2
1000f19c:	1804d43a 	srli	r2,r3,16
1000f1a0:	1463883a 	add	r17,r2,r17
1000f1a4:	84404436 	bltu	r16,r17,1000f2b8 <__udivdi3+0x584>
1000f1a8:	84403e26 	beq	r16,r17,1000f2a4 <__udivdi3+0x570>
1000f1ac:	9005883a 	mov	r2,r18
1000f1b0:	0007883a 	mov	r3,zero
1000f1b4:	003f9106 	br	1000effc <__alt_data_end+0xf800effc>
1000f1b8:	88e2983a 	sll	r17,r17,r3
1000f1bc:	80aed83a 	srl	r23,r16,r2
1000f1c0:	80e0983a 	sll	r16,r16,r3
1000f1c4:	882ad43a 	srli	r21,r17,16
1000f1c8:	9884d83a 	srl	r2,r19,r2
1000f1cc:	b809883a 	mov	r4,r23
1000f1d0:	a80b883a 	mov	r5,r21
1000f1d4:	98e4983a 	sll	r18,r19,r3
1000f1d8:	142cb03a 	or	r22,r2,r16
1000f1dc:	000452c0 	call	1000452c <__umodsi3>
1000f1e0:	b809883a 	mov	r4,r23
1000f1e4:	a80b883a 	mov	r5,r21
1000f1e8:	1027883a 	mov	r19,r2
1000f1ec:	8d3fffcc 	andi	r20,r17,65535
1000f1f0:	00044c80 	call	100044c8 <__udivsi3>
1000f1f4:	a009883a 	mov	r4,r20
1000f1f8:	100b883a 	mov	r5,r2
1000f1fc:	102f883a 	mov	r23,r2
1000f200:	00052300 	call	10005230 <__mulsi3>
1000f204:	9826943a 	slli	r19,r19,16
1000f208:	b008d43a 	srli	r4,r22,16
1000f20c:	24c8b03a 	or	r4,r4,r19
1000f210:	2080062e 	bgeu	r4,r2,1000f22c <__udivdi3+0x4f8>
1000f214:	2449883a 	add	r4,r4,r17
1000f218:	b8ffffc4 	addi	r3,r23,-1
1000f21c:	24403c36 	bltu	r4,r17,1000f310 <__udivdi3+0x5dc>
1000f220:	20803b2e 	bgeu	r4,r2,1000f310 <__udivdi3+0x5dc>
1000f224:	bdffff84 	addi	r23,r23,-2
1000f228:	2449883a 	add	r4,r4,r17
1000f22c:	20a1c83a 	sub	r16,r4,r2
1000f230:	a80b883a 	mov	r5,r21
1000f234:	8009883a 	mov	r4,r16
1000f238:	000452c0 	call	1000452c <__umodsi3>
1000f23c:	a80b883a 	mov	r5,r21
1000f240:	8009883a 	mov	r4,r16
1000f244:	1027883a 	mov	r19,r2
1000f248:	00044c80 	call	100044c8 <__udivsi3>
1000f24c:	a009883a 	mov	r4,r20
1000f250:	100b883a 	mov	r5,r2
1000f254:	9826943a 	slli	r19,r19,16
1000f258:	1039883a 	mov	fp,r2
1000f25c:	00052300 	call	10005230 <__mulsi3>
1000f260:	b13fffcc 	andi	r4,r22,65535
1000f264:	24c8b03a 	or	r4,r4,r19
1000f268:	2080062e 	bgeu	r4,r2,1000f284 <__udivdi3+0x550>
1000f26c:	2449883a 	add	r4,r4,r17
1000f270:	e0ffffc4 	addi	r3,fp,-1
1000f274:	24402436 	bltu	r4,r17,1000f308 <__udivdi3+0x5d4>
1000f278:	2080232e 	bgeu	r4,r2,1000f308 <__udivdi3+0x5d4>
1000f27c:	e73fff84 	addi	fp,fp,-2
1000f280:	2449883a 	add	r4,r4,r17
1000f284:	b82e943a 	slli	r23,r23,16
1000f288:	20a1c83a 	sub	r16,r4,r2
1000f28c:	bf06b03a 	or	r3,r23,fp
1000f290:	003f2806 	br	1000ef34 <__alt_data_end+0xf800ef34>
1000f294:	2021883a 	mov	r16,r4
1000f298:	003f5306 	br	1000efe8 <__alt_data_end+0xf800efe8>
1000f29c:	1821883a 	mov	r16,r3
1000f2a0:	003ef406 	br	1000ee74 <__alt_data_end+0xf800ee74>
1000f2a4:	1806943a 	slli	r3,r3,16
1000f2a8:	9de6983a 	sll	r19,r19,r23
1000f2ac:	e73fffcc 	andi	fp,fp,65535
1000f2b0:	1f07883a 	add	r3,r3,fp
1000f2b4:	98ffbd2e 	bgeu	r19,r3,1000f1ac <__alt_data_end+0xf800f1ac>
1000f2b8:	90bfffc4 	addi	r2,r18,-1
1000f2bc:	0007883a 	mov	r3,zero
1000f2c0:	003f4e06 	br	1000effc <__alt_data_end+0xf800effc>
1000f2c4:	00800604 	movi	r2,24
1000f2c8:	003ef506 	br	1000eea0 <__alt_data_end+0xf800eea0>
1000f2cc:	00800604 	movi	r2,24
1000f2d0:	003f0b06 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f2d4:	00800604 	movi	r2,24
1000f2d8:	003ead06 	br	1000ed90 <__alt_data_end+0xf800ed90>
1000f2dc:	0007883a 	mov	r3,zero
1000f2e0:	00800044 	movi	r2,1
1000f2e4:	003f4506 	br	1000effc <__alt_data_end+0xf800effc>
1000f2e8:	80bf8e2e 	bgeu	r16,r2,1000f124 <__alt_data_end+0xf800f124>
1000f2ec:	8c7fff84 	addi	r17,r17,-2
1000f2f0:	8721883a 	add	r16,r16,fp
1000f2f4:	003f8c06 	br	1000f128 <__alt_data_end+0xf800f128>
1000f2f8:	18bf762e 	bgeu	r3,r2,1000f0d4 <__alt_data_end+0xf800f0d4>
1000f2fc:	ad7fff84 	addi	r21,r21,-2
1000f300:	1f07883a 	add	r3,r3,fp
1000f304:	003f7406 	br	1000f0d8 <__alt_data_end+0xf800f0d8>
1000f308:	1839883a 	mov	fp,r3
1000f30c:	003fdd06 	br	1000f284 <__alt_data_end+0xf800f284>
1000f310:	182f883a 	mov	r23,r3
1000f314:	003fc506 	br	1000f22c <__alt_data_end+0xf800f22c>
1000f318:	b5bfff84 	addi	r22,r22,-2
1000f31c:	3c4f883a 	add	r7,r7,r17
1000f320:	003f1a06 	br	1000ef8c <__alt_data_end+0xf800ef8c>
1000f324:	b5bfff84 	addi	r22,r22,-2
1000f328:	1c47883a 	add	r3,r3,r17
1000f32c:	003ebc06 	br	1000ee20 <__alt_data_end+0xf800ee20>

1000f330 <__umoddi3>:
1000f330:	defff304 	addi	sp,sp,-52
1000f334:	df000b15 	stw	fp,44(sp)
1000f338:	dc400415 	stw	r17,16(sp)
1000f33c:	dc000315 	stw	r16,12(sp)
1000f340:	dfc00c15 	stw	ra,48(sp)
1000f344:	ddc00a15 	stw	r23,40(sp)
1000f348:	dd800915 	stw	r22,36(sp)
1000f34c:	dd400815 	stw	r21,32(sp)
1000f350:	dd000715 	stw	r20,28(sp)
1000f354:	dcc00615 	stw	r19,24(sp)
1000f358:	dc800515 	stw	r18,20(sp)
1000f35c:	2021883a 	mov	r16,r4
1000f360:	2823883a 	mov	r17,r5
1000f364:	2839883a 	mov	fp,r5
1000f368:	3800401e 	bne	r7,zero,1000f46c <__umoddi3+0x13c>
1000f36c:	3027883a 	mov	r19,r6
1000f370:	2029883a 	mov	r20,r4
1000f374:	2980552e 	bgeu	r5,r6,1000f4cc <__umoddi3+0x19c>
1000f378:	00bfffd4 	movui	r2,65535
1000f37c:	1180a236 	bltu	r2,r6,1000f608 <__umoddi3+0x2d8>
1000f380:	01003fc4 	movi	r4,255
1000f384:	2189803a 	cmpltu	r4,r4,r6
1000f388:	200890fa 	slli	r4,r4,3
1000f38c:	3104d83a 	srl	r2,r6,r4
1000f390:	00c40074 	movhi	r3,4097
1000f394:	18d14804 	addi	r3,r3,17696
1000f398:	1885883a 	add	r2,r3,r2
1000f39c:	10c00003 	ldbu	r3,0(r2)
1000f3a0:	00800804 	movi	r2,32
1000f3a4:	1909883a 	add	r4,r3,r4
1000f3a8:	1125c83a 	sub	r18,r2,r4
1000f3ac:	90000526 	beq	r18,zero,1000f3c4 <__umoddi3+0x94>
1000f3b0:	8ca2983a 	sll	r17,r17,r18
1000f3b4:	8108d83a 	srl	r4,r16,r4
1000f3b8:	34a6983a 	sll	r19,r6,r18
1000f3bc:	84a8983a 	sll	r20,r16,r18
1000f3c0:	2478b03a 	or	fp,r4,r17
1000f3c4:	982cd43a 	srli	r22,r19,16
1000f3c8:	e009883a 	mov	r4,fp
1000f3cc:	9dffffcc 	andi	r23,r19,65535
1000f3d0:	b00b883a 	mov	r5,r22
1000f3d4:	000452c0 	call	1000452c <__umodsi3>
1000f3d8:	b00b883a 	mov	r5,r22
1000f3dc:	e009883a 	mov	r4,fp
1000f3e0:	102b883a 	mov	r21,r2
1000f3e4:	00044c80 	call	100044c8 <__udivsi3>
1000f3e8:	100b883a 	mov	r5,r2
1000f3ec:	b809883a 	mov	r4,r23
1000f3f0:	00052300 	call	10005230 <__mulsi3>
1000f3f4:	a82a943a 	slli	r21,r21,16
1000f3f8:	a006d43a 	srli	r3,r20,16
1000f3fc:	1d46b03a 	or	r3,r3,r21
1000f400:	1880032e 	bgeu	r3,r2,1000f410 <__umoddi3+0xe0>
1000f404:	1cc7883a 	add	r3,r3,r19
1000f408:	1cc00136 	bltu	r3,r19,1000f410 <__umoddi3+0xe0>
1000f40c:	18813136 	bltu	r3,r2,1000f8d4 <__umoddi3+0x5a4>
1000f410:	18a1c83a 	sub	r16,r3,r2
1000f414:	b00b883a 	mov	r5,r22
1000f418:	8009883a 	mov	r4,r16
1000f41c:	000452c0 	call	1000452c <__umodsi3>
1000f420:	b00b883a 	mov	r5,r22
1000f424:	8009883a 	mov	r4,r16
1000f428:	1023883a 	mov	r17,r2
1000f42c:	00044c80 	call	100044c8 <__udivsi3>
1000f430:	100b883a 	mov	r5,r2
1000f434:	b809883a 	mov	r4,r23
1000f438:	8822943a 	slli	r17,r17,16
1000f43c:	00052300 	call	10005230 <__mulsi3>
1000f440:	a0ffffcc 	andi	r3,r20,65535
1000f444:	1c46b03a 	or	r3,r3,r17
1000f448:	1880042e 	bgeu	r3,r2,1000f45c <__umoddi3+0x12c>
1000f44c:	1cc7883a 	add	r3,r3,r19
1000f450:	1cc00236 	bltu	r3,r19,1000f45c <__umoddi3+0x12c>
1000f454:	1880012e 	bgeu	r3,r2,1000f45c <__umoddi3+0x12c>
1000f458:	1cc7883a 	add	r3,r3,r19
1000f45c:	1885c83a 	sub	r2,r3,r2
1000f460:	1484d83a 	srl	r2,r2,r18
1000f464:	0007883a 	mov	r3,zero
1000f468:	00005306 	br	1000f5b8 <__umoddi3+0x288>
1000f46c:	29c05036 	bltu	r5,r7,1000f5b0 <__umoddi3+0x280>
1000f470:	00bfffd4 	movui	r2,65535
1000f474:	11c05c2e 	bgeu	r2,r7,1000f5e8 <__umoddi3+0x2b8>
1000f478:	00804034 	movhi	r2,256
1000f47c:	10bfffc4 	addi	r2,r2,-1
1000f480:	11c10636 	bltu	r2,r7,1000f89c <__umoddi3+0x56c>
1000f484:	01000404 	movi	r4,16
1000f488:	3904d83a 	srl	r2,r7,r4
1000f48c:	00c40074 	movhi	r3,4097
1000f490:	18d14804 	addi	r3,r3,17696
1000f494:	1885883a 	add	r2,r3,r2
1000f498:	14c00003 	ldbu	r19,0(r2)
1000f49c:	00c00804 	movi	r3,32
1000f4a0:	9927883a 	add	r19,r19,r4
1000f4a4:	1ce9c83a 	sub	r20,r3,r19
1000f4a8:	a0005c1e 	bne	r20,zero,1000f61c <__umoddi3+0x2ec>
1000f4ac:	3c400136 	bltu	r7,r17,1000f4b4 <__umoddi3+0x184>
1000f4b0:	81810a36 	bltu	r16,r6,1000f8dc <__umoddi3+0x5ac>
1000f4b4:	8185c83a 	sub	r2,r16,r6
1000f4b8:	89e3c83a 	sub	r17,r17,r7
1000f4bc:	8089803a 	cmpltu	r4,r16,r2
1000f4c0:	8939c83a 	sub	fp,r17,r4
1000f4c4:	e007883a 	mov	r3,fp
1000f4c8:	00003b06 	br	1000f5b8 <__umoddi3+0x288>
1000f4cc:	3000041e 	bne	r6,zero,1000f4e0 <__umoddi3+0x1b0>
1000f4d0:	000b883a 	mov	r5,zero
1000f4d4:	01000044 	movi	r4,1
1000f4d8:	00044c80 	call	100044c8 <__udivsi3>
1000f4dc:	1027883a 	mov	r19,r2
1000f4e0:	00bfffd4 	movui	r2,65535
1000f4e4:	14c0442e 	bgeu	r2,r19,1000f5f8 <__umoddi3+0x2c8>
1000f4e8:	00804034 	movhi	r2,256
1000f4ec:	10bfffc4 	addi	r2,r2,-1
1000f4f0:	14c0ec36 	bltu	r2,r19,1000f8a4 <__umoddi3+0x574>
1000f4f4:	00800404 	movi	r2,16
1000f4f8:	9886d83a 	srl	r3,r19,r2
1000f4fc:	01040074 	movhi	r4,4097
1000f500:	21114804 	addi	r4,r4,17696
1000f504:	20c7883a 	add	r3,r4,r3
1000f508:	18c00003 	ldbu	r3,0(r3)
1000f50c:	1887883a 	add	r3,r3,r2
1000f510:	00800804 	movi	r2,32
1000f514:	10e5c83a 	sub	r18,r2,r3
1000f518:	9000ab1e 	bne	r18,zero,1000f7c8 <__umoddi3+0x498>
1000f51c:	982cd43a 	srli	r22,r19,16
1000f520:	8ce3c83a 	sub	r17,r17,r19
1000f524:	9dffffcc 	andi	r23,r19,65535
1000f528:	b00b883a 	mov	r5,r22
1000f52c:	8809883a 	mov	r4,r17
1000f530:	000452c0 	call	1000452c <__umodsi3>
1000f534:	b00b883a 	mov	r5,r22
1000f538:	8809883a 	mov	r4,r17
1000f53c:	102b883a 	mov	r21,r2
1000f540:	00044c80 	call	100044c8 <__udivsi3>
1000f544:	b80b883a 	mov	r5,r23
1000f548:	1009883a 	mov	r4,r2
1000f54c:	00052300 	call	10005230 <__mulsi3>
1000f550:	a82a943a 	slli	r21,r21,16
1000f554:	a006d43a 	srli	r3,r20,16
1000f558:	1d46b03a 	or	r3,r3,r21
1000f55c:	1880042e 	bgeu	r3,r2,1000f570 <__umoddi3+0x240>
1000f560:	1cc7883a 	add	r3,r3,r19
1000f564:	1cc00236 	bltu	r3,r19,1000f570 <__umoddi3+0x240>
1000f568:	1880012e 	bgeu	r3,r2,1000f570 <__umoddi3+0x240>
1000f56c:	1cc7883a 	add	r3,r3,r19
1000f570:	18a1c83a 	sub	r16,r3,r2
1000f574:	b00b883a 	mov	r5,r22
1000f578:	8009883a 	mov	r4,r16
1000f57c:	000452c0 	call	1000452c <__umodsi3>
1000f580:	1023883a 	mov	r17,r2
1000f584:	b00b883a 	mov	r5,r22
1000f588:	8009883a 	mov	r4,r16
1000f58c:	00044c80 	call	100044c8 <__udivsi3>
1000f590:	8822943a 	slli	r17,r17,16
1000f594:	b80b883a 	mov	r5,r23
1000f598:	1009883a 	mov	r4,r2
1000f59c:	00052300 	call	10005230 <__mulsi3>
1000f5a0:	a53fffcc 	andi	r20,r20,65535
1000f5a4:	a446b03a 	or	r3,r20,r17
1000f5a8:	18bfac2e 	bgeu	r3,r2,1000f45c <__alt_data_end+0xf800f45c>
1000f5ac:	003fa706 	br	1000f44c <__alt_data_end+0xf800f44c>
1000f5b0:	2005883a 	mov	r2,r4
1000f5b4:	2807883a 	mov	r3,r5
1000f5b8:	dfc00c17 	ldw	ra,48(sp)
1000f5bc:	df000b17 	ldw	fp,44(sp)
1000f5c0:	ddc00a17 	ldw	r23,40(sp)
1000f5c4:	dd800917 	ldw	r22,36(sp)
1000f5c8:	dd400817 	ldw	r21,32(sp)
1000f5cc:	dd000717 	ldw	r20,28(sp)
1000f5d0:	dcc00617 	ldw	r19,24(sp)
1000f5d4:	dc800517 	ldw	r18,20(sp)
1000f5d8:	dc400417 	ldw	r17,16(sp)
1000f5dc:	dc000317 	ldw	r16,12(sp)
1000f5e0:	dec00d04 	addi	sp,sp,52
1000f5e4:	f800283a 	ret
1000f5e8:	04c03fc4 	movi	r19,255
1000f5ec:	99c9803a 	cmpltu	r4,r19,r7
1000f5f0:	200890fa 	slli	r4,r4,3
1000f5f4:	003fa406 	br	1000f488 <__alt_data_end+0xf800f488>
1000f5f8:	00803fc4 	movi	r2,255
1000f5fc:	14c5803a 	cmpltu	r2,r2,r19
1000f600:	100490fa 	slli	r2,r2,3
1000f604:	003fbc06 	br	1000f4f8 <__alt_data_end+0xf800f4f8>
1000f608:	00804034 	movhi	r2,256
1000f60c:	10bfffc4 	addi	r2,r2,-1
1000f610:	1180a636 	bltu	r2,r6,1000f8ac <__umoddi3+0x57c>
1000f614:	01000404 	movi	r4,16
1000f618:	003f5c06 	br	1000f38c <__alt_data_end+0xf800f38c>
1000f61c:	3d0e983a 	sll	r7,r7,r20
1000f620:	34ead83a 	srl	r21,r6,r19
1000f624:	8cc6d83a 	srl	r3,r17,r19
1000f628:	8d10983a 	sll	r8,r17,r20
1000f62c:	3d6ab03a 	or	r21,r7,r21
1000f630:	a82cd43a 	srli	r22,r21,16
1000f634:	84e2d83a 	srl	r17,r16,r19
1000f638:	1809883a 	mov	r4,r3
1000f63c:	b00b883a 	mov	r5,r22
1000f640:	8a22b03a 	or	r17,r17,r8
1000f644:	3524983a 	sll	r18,r6,r20
1000f648:	dc400015 	stw	r17,0(sp)
1000f64c:	d8c00115 	stw	r3,4(sp)
1000f650:	000452c0 	call	1000452c <__umodsi3>
1000f654:	d8c00117 	ldw	r3,4(sp)
1000f658:	b00b883a 	mov	r5,r22
1000f65c:	1039883a 	mov	fp,r2
1000f660:	1809883a 	mov	r4,r3
1000f664:	00044c80 	call	100044c8 <__udivsi3>
1000f668:	adffffcc 	andi	r23,r21,65535
1000f66c:	100b883a 	mov	r5,r2
1000f670:	b809883a 	mov	r4,r23
1000f674:	1023883a 	mov	r17,r2
1000f678:	00052300 	call	10005230 <__mulsi3>
1000f67c:	d9400017 	ldw	r5,0(sp)
1000f680:	e008943a 	slli	r4,fp,16
1000f684:	8520983a 	sll	r16,r16,r20
1000f688:	2806d43a 	srli	r3,r5,16
1000f68c:	1906b03a 	or	r3,r3,r4
1000f690:	1880042e 	bgeu	r3,r2,1000f6a4 <__umoddi3+0x374>
1000f694:	1d47883a 	add	r3,r3,r21
1000f698:	893fffc4 	addi	r4,r17,-1
1000f69c:	1d40892e 	bgeu	r3,r21,1000f8c4 <__umoddi3+0x594>
1000f6a0:	2023883a 	mov	r17,r4
1000f6a4:	18b9c83a 	sub	fp,r3,r2
1000f6a8:	b00b883a 	mov	r5,r22
1000f6ac:	e009883a 	mov	r4,fp
1000f6b0:	000452c0 	call	1000452c <__umodsi3>
1000f6b4:	b00b883a 	mov	r5,r22
1000f6b8:	e009883a 	mov	r4,fp
1000f6bc:	d8800215 	stw	r2,8(sp)
1000f6c0:	00044c80 	call	100044c8 <__udivsi3>
1000f6c4:	100b883a 	mov	r5,r2
1000f6c8:	b809883a 	mov	r4,r23
1000f6cc:	102d883a 	mov	r22,r2
1000f6d0:	00052300 	call	10005230 <__mulsi3>
1000f6d4:	d9800217 	ldw	r6,8(sp)
1000f6d8:	d8c00017 	ldw	r3,0(sp)
1000f6dc:	300c943a 	slli	r6,r6,16
1000f6e0:	1a3fffcc 	andi	r8,r3,65535
1000f6e4:	4190b03a 	or	r8,r8,r6
1000f6e8:	4080042e 	bgeu	r8,r2,1000f6fc <__umoddi3+0x3cc>
1000f6ec:	4551883a 	add	r8,r8,r21
1000f6f0:	b0ffffc4 	addi	r3,r22,-1
1000f6f4:	45406f2e 	bgeu	r8,r21,1000f8b4 <__umoddi3+0x584>
1000f6f8:	182d883a 	mov	r22,r3
1000f6fc:	880e943a 	slli	r7,r17,16
1000f700:	9006d43a 	srli	r3,r18,16
1000f704:	91bfffcc 	andi	r6,r18,65535
1000f708:	3dacb03a 	or	r22,r7,r22
1000f70c:	b02ed43a 	srli	r23,r22,16
1000f710:	b5bfffcc 	andi	r22,r22,65535
1000f714:	300b883a 	mov	r5,r6
1000f718:	b009883a 	mov	r4,r22
1000f71c:	40a3c83a 	sub	r17,r8,r2
1000f720:	d8c00115 	stw	r3,4(sp)
1000f724:	d9800215 	stw	r6,8(sp)
1000f728:	00052300 	call	10005230 <__mulsi3>
1000f72c:	d9800217 	ldw	r6,8(sp)
1000f730:	b809883a 	mov	r4,r23
1000f734:	1039883a 	mov	fp,r2
1000f738:	300b883a 	mov	r5,r6
1000f73c:	00052300 	call	10005230 <__mulsi3>
1000f740:	d8c00117 	ldw	r3,4(sp)
1000f744:	b809883a 	mov	r4,r23
1000f748:	d8800215 	stw	r2,8(sp)
1000f74c:	180b883a 	mov	r5,r3
1000f750:	00052300 	call	10005230 <__mulsi3>
1000f754:	d8c00117 	ldw	r3,4(sp)
1000f758:	b009883a 	mov	r4,r22
1000f75c:	102f883a 	mov	r23,r2
1000f760:	180b883a 	mov	r5,r3
1000f764:	00052300 	call	10005230 <__mulsi3>
1000f768:	d9800217 	ldw	r6,8(sp)
1000f76c:	e006d43a 	srli	r3,fp,16
1000f770:	1185883a 	add	r2,r2,r6
1000f774:	1885883a 	add	r2,r3,r2
1000f778:	1180022e 	bgeu	r2,r6,1000f784 <__umoddi3+0x454>
1000f77c:	00c00074 	movhi	r3,1
1000f780:	b8ef883a 	add	r23,r23,r3
1000f784:	1006d43a 	srli	r3,r2,16
1000f788:	1004943a 	slli	r2,r2,16
1000f78c:	e73fffcc 	andi	fp,fp,65535
1000f790:	1dc7883a 	add	r3,r3,r23
1000f794:	1739883a 	add	fp,r2,fp
1000f798:	88c03a36 	bltu	r17,r3,1000f884 <__umoddi3+0x554>
1000f79c:	88c05126 	beq	r17,r3,1000f8e4 <__umoddi3+0x5b4>
1000f7a0:	88c9c83a 	sub	r4,r17,r3
1000f7a4:	e00f883a 	mov	r7,fp
1000f7a8:	81cfc83a 	sub	r7,r16,r7
1000f7ac:	81c7803a 	cmpltu	r3,r16,r7
1000f7b0:	20c7c83a 	sub	r3,r4,r3
1000f7b4:	1cc4983a 	sll	r2,r3,r19
1000f7b8:	3d0ed83a 	srl	r7,r7,r20
1000f7bc:	1d06d83a 	srl	r3,r3,r20
1000f7c0:	11c4b03a 	or	r2,r2,r7
1000f7c4:	003f7c06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000f7c8:	9ca6983a 	sll	r19,r19,r18
1000f7cc:	88f8d83a 	srl	fp,r17,r3
1000f7d0:	80c4d83a 	srl	r2,r16,r3
1000f7d4:	982cd43a 	srli	r22,r19,16
1000f7d8:	8ca2983a 	sll	r17,r17,r18
1000f7dc:	e009883a 	mov	r4,fp
1000f7e0:	b00b883a 	mov	r5,r22
1000f7e4:	146ab03a 	or	r21,r2,r17
1000f7e8:	000452c0 	call	1000452c <__umodsi3>
1000f7ec:	b00b883a 	mov	r5,r22
1000f7f0:	e009883a 	mov	r4,fp
1000f7f4:	1029883a 	mov	r20,r2
1000f7f8:	9dffffcc 	andi	r23,r19,65535
1000f7fc:	00044c80 	call	100044c8 <__udivsi3>
1000f800:	b809883a 	mov	r4,r23
1000f804:	100b883a 	mov	r5,r2
1000f808:	00052300 	call	10005230 <__mulsi3>
1000f80c:	a008943a 	slli	r4,r20,16
1000f810:	a806d43a 	srli	r3,r21,16
1000f814:	84a8983a 	sll	r20,r16,r18
1000f818:	1906b03a 	or	r3,r3,r4
1000f81c:	1880042e 	bgeu	r3,r2,1000f830 <__umoddi3+0x500>
1000f820:	1cc7883a 	add	r3,r3,r19
1000f824:	1cc00236 	bltu	r3,r19,1000f830 <__umoddi3+0x500>
1000f828:	1880012e 	bgeu	r3,r2,1000f830 <__umoddi3+0x500>
1000f82c:	1cc7883a 	add	r3,r3,r19
1000f830:	18a3c83a 	sub	r17,r3,r2
1000f834:	b00b883a 	mov	r5,r22
1000f838:	8809883a 	mov	r4,r17
1000f83c:	000452c0 	call	1000452c <__umodsi3>
1000f840:	b00b883a 	mov	r5,r22
1000f844:	8809883a 	mov	r4,r17
1000f848:	1021883a 	mov	r16,r2
1000f84c:	00044c80 	call	100044c8 <__udivsi3>
1000f850:	100b883a 	mov	r5,r2
1000f854:	b809883a 	mov	r4,r23
1000f858:	8020943a 	slli	r16,r16,16
1000f85c:	00052300 	call	10005230 <__mulsi3>
1000f860:	a8ffffcc 	andi	r3,r21,65535
1000f864:	1c06b03a 	or	r3,r3,r16
1000f868:	1880042e 	bgeu	r3,r2,1000f87c <__umoddi3+0x54c>
1000f86c:	1cc7883a 	add	r3,r3,r19
1000f870:	1cc00236 	bltu	r3,r19,1000f87c <__umoddi3+0x54c>
1000f874:	1880012e 	bgeu	r3,r2,1000f87c <__umoddi3+0x54c>
1000f878:	1cc7883a 	add	r3,r3,r19
1000f87c:	18a3c83a 	sub	r17,r3,r2
1000f880:	003f2906 	br	1000f528 <__alt_data_end+0xf800f528>
1000f884:	e48fc83a 	sub	r7,fp,r18
1000f888:	1d49c83a 	sub	r4,r3,r21
1000f88c:	e1f9803a 	cmpltu	fp,fp,r7
1000f890:	2739c83a 	sub	fp,r4,fp
1000f894:	8f09c83a 	sub	r4,r17,fp
1000f898:	003fc306 	br	1000f7a8 <__alt_data_end+0xf800f7a8>
1000f89c:	01000604 	movi	r4,24
1000f8a0:	003ef906 	br	1000f488 <__alt_data_end+0xf800f488>
1000f8a4:	00800604 	movi	r2,24
1000f8a8:	003f1306 	br	1000f4f8 <__alt_data_end+0xf800f4f8>
1000f8ac:	01000604 	movi	r4,24
1000f8b0:	003eb606 	br	1000f38c <__alt_data_end+0xf800f38c>
1000f8b4:	40bf902e 	bgeu	r8,r2,1000f6f8 <__alt_data_end+0xf800f6f8>
1000f8b8:	b5bfff84 	addi	r22,r22,-2
1000f8bc:	4551883a 	add	r8,r8,r21
1000f8c0:	003f8e06 	br	1000f6fc <__alt_data_end+0xf800f6fc>
1000f8c4:	18bf762e 	bgeu	r3,r2,1000f6a0 <__alt_data_end+0xf800f6a0>
1000f8c8:	8c7fff84 	addi	r17,r17,-2
1000f8cc:	1d47883a 	add	r3,r3,r21
1000f8d0:	003f7406 	br	1000f6a4 <__alt_data_end+0xf800f6a4>
1000f8d4:	1cc7883a 	add	r3,r3,r19
1000f8d8:	003ecd06 	br	1000f410 <__alt_data_end+0xf800f410>
1000f8dc:	8005883a 	mov	r2,r16
1000f8e0:	003ef806 	br	1000f4c4 <__alt_data_end+0xf800f4c4>
1000f8e4:	873fe736 	bltu	r16,fp,1000f884 <__alt_data_end+0xf800f884>
1000f8e8:	e00f883a 	mov	r7,fp
1000f8ec:	0009883a 	mov	r4,zero
1000f8f0:	003fad06 	br	1000f7a8 <__alt_data_end+0xf800f7a8>

1000f8f4 <__adddf3>:
1000f8f4:	02c00434 	movhi	r11,16
1000f8f8:	5affffc4 	addi	r11,r11,-1
1000f8fc:	2806d7fa 	srli	r3,r5,31
1000f900:	2ad4703a 	and	r10,r5,r11
1000f904:	3ad2703a 	and	r9,r7,r11
1000f908:	3804d53a 	srli	r2,r7,20
1000f90c:	3018d77a 	srli	r12,r6,29
1000f910:	280ad53a 	srli	r5,r5,20
1000f914:	501490fa 	slli	r10,r10,3
1000f918:	2010d77a 	srli	r8,r4,29
1000f91c:	481290fa 	slli	r9,r9,3
1000f920:	380ed7fa 	srli	r7,r7,31
1000f924:	defffb04 	addi	sp,sp,-20
1000f928:	dc800215 	stw	r18,8(sp)
1000f92c:	dc400115 	stw	r17,4(sp)
1000f930:	dc000015 	stw	r16,0(sp)
1000f934:	dfc00415 	stw	ra,16(sp)
1000f938:	dcc00315 	stw	r19,12(sp)
1000f93c:	1c803fcc 	andi	r18,r3,255
1000f940:	2c01ffcc 	andi	r16,r5,2047
1000f944:	5210b03a 	or	r8,r10,r8
1000f948:	202290fa 	slli	r17,r4,3
1000f94c:	1081ffcc 	andi	r2,r2,2047
1000f950:	4b12b03a 	or	r9,r9,r12
1000f954:	300c90fa 	slli	r6,r6,3
1000f958:	91c07526 	beq	r18,r7,1000fb30 <__adddf3+0x23c>
1000f95c:	8087c83a 	sub	r3,r16,r2
1000f960:	00c0ab0e 	bge	zero,r3,1000fc10 <__adddf3+0x31c>
1000f964:	10002a1e 	bne	r2,zero,1000fa10 <__adddf3+0x11c>
1000f968:	4984b03a 	or	r2,r9,r6
1000f96c:	1000961e 	bne	r2,zero,1000fbc8 <__adddf3+0x2d4>
1000f970:	888001cc 	andi	r2,r17,7
1000f974:	10000726 	beq	r2,zero,1000f994 <__adddf3+0xa0>
1000f978:	888003cc 	andi	r2,r17,15
1000f97c:	00c00104 	movi	r3,4
1000f980:	10c00426 	beq	r2,r3,1000f994 <__adddf3+0xa0>
1000f984:	88c7883a 	add	r3,r17,r3
1000f988:	1c63803a 	cmpltu	r17,r3,r17
1000f98c:	4451883a 	add	r8,r8,r17
1000f990:	1823883a 	mov	r17,r3
1000f994:	4080202c 	andhi	r2,r8,128
1000f998:	10005926 	beq	r2,zero,1000fb00 <__adddf3+0x20c>
1000f99c:	84000044 	addi	r16,r16,1
1000f9a0:	0081ffc4 	movi	r2,2047
1000f9a4:	8080ba26 	beq	r16,r2,1000fc90 <__adddf3+0x39c>
1000f9a8:	00bfe034 	movhi	r2,65408
1000f9ac:	10bfffc4 	addi	r2,r2,-1
1000f9b0:	4090703a 	and	r8,r8,r2
1000f9b4:	4004977a 	slli	r2,r8,29
1000f9b8:	4010927a 	slli	r8,r8,9
1000f9bc:	8822d0fa 	srli	r17,r17,3
1000f9c0:	8401ffcc 	andi	r16,r16,2047
1000f9c4:	4010d33a 	srli	r8,r8,12
1000f9c8:	9007883a 	mov	r3,r18
1000f9cc:	1444b03a 	or	r2,r2,r17
1000f9d0:	8401ffcc 	andi	r16,r16,2047
1000f9d4:	8020953a 	slli	r16,r16,20
1000f9d8:	18c03fcc 	andi	r3,r3,255
1000f9dc:	01000434 	movhi	r4,16
1000f9e0:	213fffc4 	addi	r4,r4,-1
1000f9e4:	180697fa 	slli	r3,r3,31
1000f9e8:	4110703a 	and	r8,r8,r4
1000f9ec:	4410b03a 	or	r8,r8,r16
1000f9f0:	40c6b03a 	or	r3,r8,r3
1000f9f4:	dfc00417 	ldw	ra,16(sp)
1000f9f8:	dcc00317 	ldw	r19,12(sp)
1000f9fc:	dc800217 	ldw	r18,8(sp)
1000fa00:	dc400117 	ldw	r17,4(sp)
1000fa04:	dc000017 	ldw	r16,0(sp)
1000fa08:	dec00504 	addi	sp,sp,20
1000fa0c:	f800283a 	ret
1000fa10:	0081ffc4 	movi	r2,2047
1000fa14:	80bfd626 	beq	r16,r2,1000f970 <__alt_data_end+0xf800f970>
1000fa18:	4a402034 	orhi	r9,r9,128
1000fa1c:	00800e04 	movi	r2,56
1000fa20:	10c09f16 	blt	r2,r3,1000fca0 <__adddf3+0x3ac>
1000fa24:	008007c4 	movi	r2,31
1000fa28:	10c0c216 	blt	r2,r3,1000fd34 <__adddf3+0x440>
1000fa2c:	00800804 	movi	r2,32
1000fa30:	10c5c83a 	sub	r2,r2,r3
1000fa34:	488a983a 	sll	r5,r9,r2
1000fa38:	30c8d83a 	srl	r4,r6,r3
1000fa3c:	3084983a 	sll	r2,r6,r2
1000fa40:	48c6d83a 	srl	r3,r9,r3
1000fa44:	290cb03a 	or	r6,r5,r4
1000fa48:	1004c03a 	cmpne	r2,r2,zero
1000fa4c:	308cb03a 	or	r6,r6,r2
1000fa50:	898dc83a 	sub	r6,r17,r6
1000fa54:	89a3803a 	cmpltu	r17,r17,r6
1000fa58:	40d1c83a 	sub	r8,r8,r3
1000fa5c:	4451c83a 	sub	r8,r8,r17
1000fa60:	3023883a 	mov	r17,r6
1000fa64:	4080202c 	andhi	r2,r8,128
1000fa68:	10002326 	beq	r2,zero,1000faf8 <__adddf3+0x204>
1000fa6c:	04c02034 	movhi	r19,128
1000fa70:	9cffffc4 	addi	r19,r19,-1
1000fa74:	44e6703a 	and	r19,r8,r19
1000fa78:	98007626 	beq	r19,zero,1000fc54 <__adddf3+0x360>
1000fa7c:	9809883a 	mov	r4,r19
1000fa80:	00051cc0 	call	100051cc <__clzsi2>
1000fa84:	10fffe04 	addi	r3,r2,-8
1000fa88:	010007c4 	movi	r4,31
1000fa8c:	20c07716 	blt	r4,r3,1000fc6c <__adddf3+0x378>
1000fa90:	00800804 	movi	r2,32
1000fa94:	10c5c83a 	sub	r2,r2,r3
1000fa98:	8884d83a 	srl	r2,r17,r2
1000fa9c:	98d0983a 	sll	r8,r19,r3
1000faa0:	88e2983a 	sll	r17,r17,r3
1000faa4:	1204b03a 	or	r2,r2,r8
1000faa8:	1c007416 	blt	r3,r16,1000fc7c <__adddf3+0x388>
1000faac:	1c21c83a 	sub	r16,r3,r16
1000fab0:	82000044 	addi	r8,r16,1
1000fab4:	00c007c4 	movi	r3,31
1000fab8:	1a009116 	blt	r3,r8,1000fd00 <__adddf3+0x40c>
1000fabc:	00c00804 	movi	r3,32
1000fac0:	1a07c83a 	sub	r3,r3,r8
1000fac4:	8a08d83a 	srl	r4,r17,r8
1000fac8:	88e2983a 	sll	r17,r17,r3
1000facc:	10c6983a 	sll	r3,r2,r3
1000fad0:	1210d83a 	srl	r8,r2,r8
1000fad4:	8804c03a 	cmpne	r2,r17,zero
1000fad8:	1906b03a 	or	r3,r3,r4
1000fadc:	18a2b03a 	or	r17,r3,r2
1000fae0:	0021883a 	mov	r16,zero
1000fae4:	003fa206 	br	1000f970 <__alt_data_end+0xf800f970>
1000fae8:	1890b03a 	or	r8,r3,r2
1000faec:	40017d26 	beq	r8,zero,100100e4 <__adddf3+0x7f0>
1000faf0:	1011883a 	mov	r8,r2
1000faf4:	1823883a 	mov	r17,r3
1000faf8:	888001cc 	andi	r2,r17,7
1000fafc:	103f9e1e 	bne	r2,zero,1000f978 <__alt_data_end+0xf800f978>
1000fb00:	4004977a 	slli	r2,r8,29
1000fb04:	8822d0fa 	srli	r17,r17,3
1000fb08:	4010d0fa 	srli	r8,r8,3
1000fb0c:	9007883a 	mov	r3,r18
1000fb10:	1444b03a 	or	r2,r2,r17
1000fb14:	0101ffc4 	movi	r4,2047
1000fb18:	81002426 	beq	r16,r4,1000fbac <__adddf3+0x2b8>
1000fb1c:	8120703a 	and	r16,r16,r4
1000fb20:	01000434 	movhi	r4,16
1000fb24:	213fffc4 	addi	r4,r4,-1
1000fb28:	4110703a 	and	r8,r8,r4
1000fb2c:	003fa806 	br	1000f9d0 <__alt_data_end+0xf800f9d0>
1000fb30:	8089c83a 	sub	r4,r16,r2
1000fb34:	01005e0e 	bge	zero,r4,1000fcb0 <__adddf3+0x3bc>
1000fb38:	10002b26 	beq	r2,zero,1000fbe8 <__adddf3+0x2f4>
1000fb3c:	0081ffc4 	movi	r2,2047
1000fb40:	80bf8b26 	beq	r16,r2,1000f970 <__alt_data_end+0xf800f970>
1000fb44:	4a402034 	orhi	r9,r9,128
1000fb48:	00800e04 	movi	r2,56
1000fb4c:	1100a40e 	bge	r2,r4,1000fde0 <__adddf3+0x4ec>
1000fb50:	498cb03a 	or	r6,r9,r6
1000fb54:	300ac03a 	cmpne	r5,r6,zero
1000fb58:	0013883a 	mov	r9,zero
1000fb5c:	2c4b883a 	add	r5,r5,r17
1000fb60:	2c63803a 	cmpltu	r17,r5,r17
1000fb64:	4a11883a 	add	r8,r9,r8
1000fb68:	8a11883a 	add	r8,r17,r8
1000fb6c:	2823883a 	mov	r17,r5
1000fb70:	4080202c 	andhi	r2,r8,128
1000fb74:	103fe026 	beq	r2,zero,1000faf8 <__alt_data_end+0xf800faf8>
1000fb78:	84000044 	addi	r16,r16,1
1000fb7c:	0081ffc4 	movi	r2,2047
1000fb80:	8080d226 	beq	r16,r2,1000fecc <__adddf3+0x5d8>
1000fb84:	00bfe034 	movhi	r2,65408
1000fb88:	10bfffc4 	addi	r2,r2,-1
1000fb8c:	4090703a 	and	r8,r8,r2
1000fb90:	880ad07a 	srli	r5,r17,1
1000fb94:	400897fa 	slli	r4,r8,31
1000fb98:	88c0004c 	andi	r3,r17,1
1000fb9c:	28e2b03a 	or	r17,r5,r3
1000fba0:	4010d07a 	srli	r8,r8,1
1000fba4:	2462b03a 	or	r17,r4,r17
1000fba8:	003f7106 	br	1000f970 <__alt_data_end+0xf800f970>
1000fbac:	4088b03a 	or	r4,r8,r2
1000fbb0:	20014526 	beq	r4,zero,100100c8 <__adddf3+0x7d4>
1000fbb4:	01000434 	movhi	r4,16
1000fbb8:	42000234 	orhi	r8,r8,8
1000fbbc:	213fffc4 	addi	r4,r4,-1
1000fbc0:	4110703a 	and	r8,r8,r4
1000fbc4:	003f8206 	br	1000f9d0 <__alt_data_end+0xf800f9d0>
1000fbc8:	18ffffc4 	addi	r3,r3,-1
1000fbcc:	1800491e 	bne	r3,zero,1000fcf4 <__adddf3+0x400>
1000fbd0:	898bc83a 	sub	r5,r17,r6
1000fbd4:	8963803a 	cmpltu	r17,r17,r5
1000fbd8:	4251c83a 	sub	r8,r8,r9
1000fbdc:	4451c83a 	sub	r8,r8,r17
1000fbe0:	2823883a 	mov	r17,r5
1000fbe4:	003f9f06 	br	1000fa64 <__alt_data_end+0xf800fa64>
1000fbe8:	4984b03a 	or	r2,r9,r6
1000fbec:	103f6026 	beq	r2,zero,1000f970 <__alt_data_end+0xf800f970>
1000fbf0:	213fffc4 	addi	r4,r4,-1
1000fbf4:	2000931e 	bne	r4,zero,1000fe44 <__adddf3+0x550>
1000fbf8:	898d883a 	add	r6,r17,r6
1000fbfc:	3463803a 	cmpltu	r17,r6,r17
1000fc00:	4251883a 	add	r8,r8,r9
1000fc04:	8a11883a 	add	r8,r17,r8
1000fc08:	3023883a 	mov	r17,r6
1000fc0c:	003fd806 	br	1000fb70 <__alt_data_end+0xf800fb70>
1000fc10:	1800541e 	bne	r3,zero,1000fd64 <__adddf3+0x470>
1000fc14:	80800044 	addi	r2,r16,1
1000fc18:	1081ffcc 	andi	r2,r2,2047
1000fc1c:	00c00044 	movi	r3,1
1000fc20:	1880a00e 	bge	r3,r2,1000fea4 <__adddf3+0x5b0>
1000fc24:	8989c83a 	sub	r4,r17,r6
1000fc28:	8905803a 	cmpltu	r2,r17,r4
1000fc2c:	4267c83a 	sub	r19,r8,r9
1000fc30:	98a7c83a 	sub	r19,r19,r2
1000fc34:	9880202c 	andhi	r2,r19,128
1000fc38:	10006326 	beq	r2,zero,1000fdc8 <__adddf3+0x4d4>
1000fc3c:	3463c83a 	sub	r17,r6,r17
1000fc40:	4a07c83a 	sub	r3,r9,r8
1000fc44:	344d803a 	cmpltu	r6,r6,r17
1000fc48:	19a7c83a 	sub	r19,r3,r6
1000fc4c:	3825883a 	mov	r18,r7
1000fc50:	983f8a1e 	bne	r19,zero,1000fa7c <__alt_data_end+0xf800fa7c>
1000fc54:	8809883a 	mov	r4,r17
1000fc58:	00051cc0 	call	100051cc <__clzsi2>
1000fc5c:	10800804 	addi	r2,r2,32
1000fc60:	10fffe04 	addi	r3,r2,-8
1000fc64:	010007c4 	movi	r4,31
1000fc68:	20ff890e 	bge	r4,r3,1000fa90 <__alt_data_end+0xf800fa90>
1000fc6c:	10bff604 	addi	r2,r2,-40
1000fc70:	8884983a 	sll	r2,r17,r2
1000fc74:	0023883a 	mov	r17,zero
1000fc78:	1c3f8c0e 	bge	r3,r16,1000faac <__alt_data_end+0xf800faac>
1000fc7c:	023fe034 	movhi	r8,65408
1000fc80:	423fffc4 	addi	r8,r8,-1
1000fc84:	80e1c83a 	sub	r16,r16,r3
1000fc88:	1210703a 	and	r8,r2,r8
1000fc8c:	003f3806 	br	1000f970 <__alt_data_end+0xf800f970>
1000fc90:	9007883a 	mov	r3,r18
1000fc94:	0011883a 	mov	r8,zero
1000fc98:	0005883a 	mov	r2,zero
1000fc9c:	003f4c06 	br	1000f9d0 <__alt_data_end+0xf800f9d0>
1000fca0:	498cb03a 	or	r6,r9,r6
1000fca4:	300cc03a 	cmpne	r6,r6,zero
1000fca8:	0007883a 	mov	r3,zero
1000fcac:	003f6806 	br	1000fa50 <__alt_data_end+0xf800fa50>
1000fcb0:	20009c1e 	bne	r4,zero,1000ff24 <__adddf3+0x630>
1000fcb4:	80800044 	addi	r2,r16,1
1000fcb8:	1141ffcc 	andi	r5,r2,2047
1000fcbc:	01000044 	movi	r4,1
1000fcc0:	2140670e 	bge	r4,r5,1000fe60 <__adddf3+0x56c>
1000fcc4:	0101ffc4 	movi	r4,2047
1000fcc8:	11007f26 	beq	r2,r4,1000fec8 <__adddf3+0x5d4>
1000fccc:	898d883a 	add	r6,r17,r6
1000fcd0:	4247883a 	add	r3,r8,r9
1000fcd4:	3451803a 	cmpltu	r8,r6,r17
1000fcd8:	40d1883a 	add	r8,r8,r3
1000fcdc:	402297fa 	slli	r17,r8,31
1000fce0:	300cd07a 	srli	r6,r6,1
1000fce4:	4010d07a 	srli	r8,r8,1
1000fce8:	1021883a 	mov	r16,r2
1000fcec:	89a2b03a 	or	r17,r17,r6
1000fcf0:	003f1f06 	br	1000f970 <__alt_data_end+0xf800f970>
1000fcf4:	0081ffc4 	movi	r2,2047
1000fcf8:	80bf481e 	bne	r16,r2,1000fa1c <__alt_data_end+0xf800fa1c>
1000fcfc:	003f1c06 	br	1000f970 <__alt_data_end+0xf800f970>
1000fd00:	843ff844 	addi	r16,r16,-31
1000fd04:	01000804 	movi	r4,32
1000fd08:	1406d83a 	srl	r3,r2,r16
1000fd0c:	41005026 	beq	r8,r4,1000fe50 <__adddf3+0x55c>
1000fd10:	01001004 	movi	r4,64
1000fd14:	2211c83a 	sub	r8,r4,r8
1000fd18:	1204983a 	sll	r2,r2,r8
1000fd1c:	88a2b03a 	or	r17,r17,r2
1000fd20:	8822c03a 	cmpne	r17,r17,zero
1000fd24:	1c62b03a 	or	r17,r3,r17
1000fd28:	0011883a 	mov	r8,zero
1000fd2c:	0021883a 	mov	r16,zero
1000fd30:	003f7106 	br	1000faf8 <__alt_data_end+0xf800faf8>
1000fd34:	193ff804 	addi	r4,r3,-32
1000fd38:	00800804 	movi	r2,32
1000fd3c:	4908d83a 	srl	r4,r9,r4
1000fd40:	18804526 	beq	r3,r2,1000fe58 <__adddf3+0x564>
1000fd44:	00801004 	movi	r2,64
1000fd48:	10c5c83a 	sub	r2,r2,r3
1000fd4c:	4886983a 	sll	r3,r9,r2
1000fd50:	198cb03a 	or	r6,r3,r6
1000fd54:	300cc03a 	cmpne	r6,r6,zero
1000fd58:	218cb03a 	or	r6,r4,r6
1000fd5c:	0007883a 	mov	r3,zero
1000fd60:	003f3b06 	br	1000fa50 <__alt_data_end+0xf800fa50>
1000fd64:	80002a26 	beq	r16,zero,1000fe10 <__adddf3+0x51c>
1000fd68:	0101ffc4 	movi	r4,2047
1000fd6c:	11006826 	beq	r2,r4,1000ff10 <__adddf3+0x61c>
1000fd70:	00c7c83a 	sub	r3,zero,r3
1000fd74:	42002034 	orhi	r8,r8,128
1000fd78:	01000e04 	movi	r4,56
1000fd7c:	20c07c16 	blt	r4,r3,1000ff70 <__adddf3+0x67c>
1000fd80:	010007c4 	movi	r4,31
1000fd84:	20c0da16 	blt	r4,r3,100100f0 <__adddf3+0x7fc>
1000fd88:	01000804 	movi	r4,32
1000fd8c:	20c9c83a 	sub	r4,r4,r3
1000fd90:	4114983a 	sll	r10,r8,r4
1000fd94:	88cad83a 	srl	r5,r17,r3
1000fd98:	8908983a 	sll	r4,r17,r4
1000fd9c:	40c6d83a 	srl	r3,r8,r3
1000fda0:	5162b03a 	or	r17,r10,r5
1000fda4:	2008c03a 	cmpne	r4,r4,zero
1000fda8:	8922b03a 	or	r17,r17,r4
1000fdac:	3463c83a 	sub	r17,r6,r17
1000fdb0:	48c7c83a 	sub	r3,r9,r3
1000fdb4:	344d803a 	cmpltu	r6,r6,r17
1000fdb8:	1991c83a 	sub	r8,r3,r6
1000fdbc:	1021883a 	mov	r16,r2
1000fdc0:	3825883a 	mov	r18,r7
1000fdc4:	003f2706 	br	1000fa64 <__alt_data_end+0xf800fa64>
1000fdc8:	24d0b03a 	or	r8,r4,r19
1000fdcc:	40001b1e 	bne	r8,zero,1000fe3c <__adddf3+0x548>
1000fdd0:	0005883a 	mov	r2,zero
1000fdd4:	0007883a 	mov	r3,zero
1000fdd8:	0021883a 	mov	r16,zero
1000fddc:	003f4d06 	br	1000fb14 <__alt_data_end+0xf800fb14>
1000fde0:	008007c4 	movi	r2,31
1000fde4:	11003c16 	blt	r2,r4,1000fed8 <__adddf3+0x5e4>
1000fde8:	00800804 	movi	r2,32
1000fdec:	1105c83a 	sub	r2,r2,r4
1000fdf0:	488e983a 	sll	r7,r9,r2
1000fdf4:	310ad83a 	srl	r5,r6,r4
1000fdf8:	3084983a 	sll	r2,r6,r2
1000fdfc:	4912d83a 	srl	r9,r9,r4
1000fe00:	394ab03a 	or	r5,r7,r5
1000fe04:	1004c03a 	cmpne	r2,r2,zero
1000fe08:	288ab03a 	or	r5,r5,r2
1000fe0c:	003f5306 	br	1000fb5c <__alt_data_end+0xf800fb5c>
1000fe10:	4448b03a 	or	r4,r8,r17
1000fe14:	20003e26 	beq	r4,zero,1000ff10 <__adddf3+0x61c>
1000fe18:	00c6303a 	nor	r3,zero,r3
1000fe1c:	18003a1e 	bne	r3,zero,1000ff08 <__adddf3+0x614>
1000fe20:	3463c83a 	sub	r17,r6,r17
1000fe24:	4a07c83a 	sub	r3,r9,r8
1000fe28:	344d803a 	cmpltu	r6,r6,r17
1000fe2c:	1991c83a 	sub	r8,r3,r6
1000fe30:	1021883a 	mov	r16,r2
1000fe34:	3825883a 	mov	r18,r7
1000fe38:	003f0a06 	br	1000fa64 <__alt_data_end+0xf800fa64>
1000fe3c:	2023883a 	mov	r17,r4
1000fe40:	003f0d06 	br	1000fa78 <__alt_data_end+0xf800fa78>
1000fe44:	0081ffc4 	movi	r2,2047
1000fe48:	80bf3f1e 	bne	r16,r2,1000fb48 <__alt_data_end+0xf800fb48>
1000fe4c:	003ec806 	br	1000f970 <__alt_data_end+0xf800f970>
1000fe50:	0005883a 	mov	r2,zero
1000fe54:	003fb106 	br	1000fd1c <__alt_data_end+0xf800fd1c>
1000fe58:	0007883a 	mov	r3,zero
1000fe5c:	003fbc06 	br	1000fd50 <__alt_data_end+0xf800fd50>
1000fe60:	4444b03a 	or	r2,r8,r17
1000fe64:	8000871e 	bne	r16,zero,10010084 <__adddf3+0x790>
1000fe68:	1000ba26 	beq	r2,zero,10010154 <__adddf3+0x860>
1000fe6c:	4984b03a 	or	r2,r9,r6
1000fe70:	103ebf26 	beq	r2,zero,1000f970 <__alt_data_end+0xf800f970>
1000fe74:	8985883a 	add	r2,r17,r6
1000fe78:	4247883a 	add	r3,r8,r9
1000fe7c:	1451803a 	cmpltu	r8,r2,r17
1000fe80:	40d1883a 	add	r8,r8,r3
1000fe84:	40c0202c 	andhi	r3,r8,128
1000fe88:	1023883a 	mov	r17,r2
1000fe8c:	183f1a26 	beq	r3,zero,1000faf8 <__alt_data_end+0xf800faf8>
1000fe90:	00bfe034 	movhi	r2,65408
1000fe94:	10bfffc4 	addi	r2,r2,-1
1000fe98:	2021883a 	mov	r16,r4
1000fe9c:	4090703a 	and	r8,r8,r2
1000fea0:	003eb306 	br	1000f970 <__alt_data_end+0xf800f970>
1000fea4:	4444b03a 	or	r2,r8,r17
1000fea8:	8000291e 	bne	r16,zero,1000ff50 <__adddf3+0x65c>
1000feac:	10004b1e 	bne	r2,zero,1000ffdc <__adddf3+0x6e8>
1000feb0:	4990b03a 	or	r8,r9,r6
1000feb4:	40008b26 	beq	r8,zero,100100e4 <__adddf3+0x7f0>
1000feb8:	4811883a 	mov	r8,r9
1000febc:	3023883a 	mov	r17,r6
1000fec0:	3825883a 	mov	r18,r7
1000fec4:	003eaa06 	br	1000f970 <__alt_data_end+0xf800f970>
1000fec8:	1021883a 	mov	r16,r2
1000fecc:	0011883a 	mov	r8,zero
1000fed0:	0005883a 	mov	r2,zero
1000fed4:	003f0f06 	br	1000fb14 <__alt_data_end+0xf800fb14>
1000fed8:	217ff804 	addi	r5,r4,-32
1000fedc:	00800804 	movi	r2,32
1000fee0:	494ad83a 	srl	r5,r9,r5
1000fee4:	20807d26 	beq	r4,r2,100100dc <__adddf3+0x7e8>
1000fee8:	00801004 	movi	r2,64
1000feec:	1109c83a 	sub	r4,r2,r4
1000fef0:	4912983a 	sll	r9,r9,r4
1000fef4:	498cb03a 	or	r6,r9,r6
1000fef8:	300cc03a 	cmpne	r6,r6,zero
1000fefc:	298ab03a 	or	r5,r5,r6
1000ff00:	0013883a 	mov	r9,zero
1000ff04:	003f1506 	br	1000fb5c <__alt_data_end+0xf800fb5c>
1000ff08:	0101ffc4 	movi	r4,2047
1000ff0c:	113f9a1e 	bne	r2,r4,1000fd78 <__alt_data_end+0xf800fd78>
1000ff10:	4811883a 	mov	r8,r9
1000ff14:	3023883a 	mov	r17,r6
1000ff18:	1021883a 	mov	r16,r2
1000ff1c:	3825883a 	mov	r18,r7
1000ff20:	003e9306 	br	1000f970 <__alt_data_end+0xf800f970>
1000ff24:	8000161e 	bne	r16,zero,1000ff80 <__adddf3+0x68c>
1000ff28:	444ab03a 	or	r5,r8,r17
1000ff2c:	28005126 	beq	r5,zero,10010074 <__adddf3+0x780>
1000ff30:	0108303a 	nor	r4,zero,r4
1000ff34:	20004d1e 	bne	r4,zero,1001006c <__adddf3+0x778>
1000ff38:	89a3883a 	add	r17,r17,r6
1000ff3c:	4253883a 	add	r9,r8,r9
1000ff40:	898d803a 	cmpltu	r6,r17,r6
1000ff44:	3251883a 	add	r8,r6,r9
1000ff48:	1021883a 	mov	r16,r2
1000ff4c:	003f0806 	br	1000fb70 <__alt_data_end+0xf800fb70>
1000ff50:	1000301e 	bne	r2,zero,10010014 <__adddf3+0x720>
1000ff54:	4984b03a 	or	r2,r9,r6
1000ff58:	10007126 	beq	r2,zero,10010120 <__adddf3+0x82c>
1000ff5c:	4811883a 	mov	r8,r9
1000ff60:	3023883a 	mov	r17,r6
1000ff64:	3825883a 	mov	r18,r7
1000ff68:	0401ffc4 	movi	r16,2047
1000ff6c:	003e8006 	br	1000f970 <__alt_data_end+0xf800f970>
1000ff70:	4462b03a 	or	r17,r8,r17
1000ff74:	8822c03a 	cmpne	r17,r17,zero
1000ff78:	0007883a 	mov	r3,zero
1000ff7c:	003f8b06 	br	1000fdac <__alt_data_end+0xf800fdac>
1000ff80:	0141ffc4 	movi	r5,2047
1000ff84:	11403b26 	beq	r2,r5,10010074 <__adddf3+0x780>
1000ff88:	0109c83a 	sub	r4,zero,r4
1000ff8c:	42002034 	orhi	r8,r8,128
1000ff90:	01400e04 	movi	r5,56
1000ff94:	29006716 	blt	r5,r4,10010134 <__adddf3+0x840>
1000ff98:	014007c4 	movi	r5,31
1000ff9c:	29007016 	blt	r5,r4,10010160 <__adddf3+0x86c>
1000ffa0:	01400804 	movi	r5,32
1000ffa4:	290bc83a 	sub	r5,r5,r4
1000ffa8:	4154983a 	sll	r10,r8,r5
1000ffac:	890ed83a 	srl	r7,r17,r4
1000ffb0:	894a983a 	sll	r5,r17,r5
1000ffb4:	4108d83a 	srl	r4,r8,r4
1000ffb8:	51e2b03a 	or	r17,r10,r7
1000ffbc:	280ac03a 	cmpne	r5,r5,zero
1000ffc0:	8962b03a 	or	r17,r17,r5
1000ffc4:	89a3883a 	add	r17,r17,r6
1000ffc8:	2253883a 	add	r9,r4,r9
1000ffcc:	898d803a 	cmpltu	r6,r17,r6
1000ffd0:	3251883a 	add	r8,r6,r9
1000ffd4:	1021883a 	mov	r16,r2
1000ffd8:	003ee506 	br	1000fb70 <__alt_data_end+0xf800fb70>
1000ffdc:	4984b03a 	or	r2,r9,r6
1000ffe0:	103e6326 	beq	r2,zero,1000f970 <__alt_data_end+0xf800f970>
1000ffe4:	8987c83a 	sub	r3,r17,r6
1000ffe8:	88c9803a 	cmpltu	r4,r17,r3
1000ffec:	4245c83a 	sub	r2,r8,r9
1000fff0:	1105c83a 	sub	r2,r2,r4
1000fff4:	1100202c 	andhi	r4,r2,128
1000fff8:	203ebb26 	beq	r4,zero,1000fae8 <__alt_data_end+0xf800fae8>
1000fffc:	3463c83a 	sub	r17,r6,r17
10010000:	4a07c83a 	sub	r3,r9,r8
10010004:	344d803a 	cmpltu	r6,r6,r17
10010008:	1991c83a 	sub	r8,r3,r6
1001000c:	3825883a 	mov	r18,r7
10010010:	003e5706 	br	1000f970 <__alt_data_end+0xf800f970>
10010014:	4984b03a 	or	r2,r9,r6
10010018:	10002e26 	beq	r2,zero,100100d4 <__adddf3+0x7e0>
1001001c:	4004d0fa 	srli	r2,r8,3
10010020:	8822d0fa 	srli	r17,r17,3
10010024:	4010977a 	slli	r8,r8,29
10010028:	10c0022c 	andhi	r3,r2,8
1001002c:	4462b03a 	or	r17,r8,r17
10010030:	18000826 	beq	r3,zero,10010054 <__adddf3+0x760>
10010034:	4808d0fa 	srli	r4,r9,3
10010038:	20c0022c 	andhi	r3,r4,8
1001003c:	1800051e 	bne	r3,zero,10010054 <__adddf3+0x760>
10010040:	300cd0fa 	srli	r6,r6,3
10010044:	4806977a 	slli	r3,r9,29
10010048:	2005883a 	mov	r2,r4
1001004c:	3825883a 	mov	r18,r7
10010050:	19a2b03a 	or	r17,r3,r6
10010054:	8810d77a 	srli	r8,r17,29
10010058:	100490fa 	slli	r2,r2,3
1001005c:	882290fa 	slli	r17,r17,3
10010060:	0401ffc4 	movi	r16,2047
10010064:	4090b03a 	or	r8,r8,r2
10010068:	003e4106 	br	1000f970 <__alt_data_end+0xf800f970>
1001006c:	0141ffc4 	movi	r5,2047
10010070:	117fc71e 	bne	r2,r5,1000ff90 <__alt_data_end+0xf800ff90>
10010074:	4811883a 	mov	r8,r9
10010078:	3023883a 	mov	r17,r6
1001007c:	1021883a 	mov	r16,r2
10010080:	003e3b06 	br	1000f970 <__alt_data_end+0xf800f970>
10010084:	10002f26 	beq	r2,zero,10010144 <__adddf3+0x850>
10010088:	4984b03a 	or	r2,r9,r6
1001008c:	10001126 	beq	r2,zero,100100d4 <__adddf3+0x7e0>
10010090:	4004d0fa 	srli	r2,r8,3
10010094:	8822d0fa 	srli	r17,r17,3
10010098:	4010977a 	slli	r8,r8,29
1001009c:	10c0022c 	andhi	r3,r2,8
100100a0:	4462b03a 	or	r17,r8,r17
100100a4:	183feb26 	beq	r3,zero,10010054 <__alt_data_end+0xf8010054>
100100a8:	4808d0fa 	srli	r4,r9,3
100100ac:	20c0022c 	andhi	r3,r4,8
100100b0:	183fe81e 	bne	r3,zero,10010054 <__alt_data_end+0xf8010054>
100100b4:	300cd0fa 	srli	r6,r6,3
100100b8:	4806977a 	slli	r3,r9,29
100100bc:	2005883a 	mov	r2,r4
100100c0:	19a2b03a 	or	r17,r3,r6
100100c4:	003fe306 	br	10010054 <__alt_data_end+0xf8010054>
100100c8:	0011883a 	mov	r8,zero
100100cc:	0005883a 	mov	r2,zero
100100d0:	003e3f06 	br	1000f9d0 <__alt_data_end+0xf800f9d0>
100100d4:	0401ffc4 	movi	r16,2047
100100d8:	003e2506 	br	1000f970 <__alt_data_end+0xf800f970>
100100dc:	0013883a 	mov	r9,zero
100100e0:	003f8406 	br	1000fef4 <__alt_data_end+0xf800fef4>
100100e4:	0005883a 	mov	r2,zero
100100e8:	0007883a 	mov	r3,zero
100100ec:	003e8906 	br	1000fb14 <__alt_data_end+0xf800fb14>
100100f0:	197ff804 	addi	r5,r3,-32
100100f4:	01000804 	movi	r4,32
100100f8:	414ad83a 	srl	r5,r8,r5
100100fc:	19002426 	beq	r3,r4,10010190 <__adddf3+0x89c>
10010100:	01001004 	movi	r4,64
10010104:	20c7c83a 	sub	r3,r4,r3
10010108:	40c6983a 	sll	r3,r8,r3
1001010c:	1c46b03a 	or	r3,r3,r17
10010110:	1806c03a 	cmpne	r3,r3,zero
10010114:	28e2b03a 	or	r17,r5,r3
10010118:	0007883a 	mov	r3,zero
1001011c:	003f2306 	br	1000fdac <__alt_data_end+0xf800fdac>
10010120:	0007883a 	mov	r3,zero
10010124:	5811883a 	mov	r8,r11
10010128:	00bfffc4 	movi	r2,-1
1001012c:	0401ffc4 	movi	r16,2047
10010130:	003e7806 	br	1000fb14 <__alt_data_end+0xf800fb14>
10010134:	4462b03a 	or	r17,r8,r17
10010138:	8822c03a 	cmpne	r17,r17,zero
1001013c:	0009883a 	mov	r4,zero
10010140:	003fa006 	br	1000ffc4 <__alt_data_end+0xf800ffc4>
10010144:	4811883a 	mov	r8,r9
10010148:	3023883a 	mov	r17,r6
1001014c:	0401ffc4 	movi	r16,2047
10010150:	003e0706 	br	1000f970 <__alt_data_end+0xf800f970>
10010154:	4811883a 	mov	r8,r9
10010158:	3023883a 	mov	r17,r6
1001015c:	003e0406 	br	1000f970 <__alt_data_end+0xf800f970>
10010160:	21fff804 	addi	r7,r4,-32
10010164:	01400804 	movi	r5,32
10010168:	41ced83a 	srl	r7,r8,r7
1001016c:	21400a26 	beq	r4,r5,10010198 <__adddf3+0x8a4>
10010170:	01401004 	movi	r5,64
10010174:	2909c83a 	sub	r4,r5,r4
10010178:	4108983a 	sll	r4,r8,r4
1001017c:	2448b03a 	or	r4,r4,r17
10010180:	2008c03a 	cmpne	r4,r4,zero
10010184:	3922b03a 	or	r17,r7,r4
10010188:	0009883a 	mov	r4,zero
1001018c:	003f8d06 	br	1000ffc4 <__alt_data_end+0xf800ffc4>
10010190:	0007883a 	mov	r3,zero
10010194:	003fdd06 	br	1001010c <__alt_data_end+0xf801010c>
10010198:	0009883a 	mov	r4,zero
1001019c:	003ff706 	br	1001017c <__alt_data_end+0xf801017c>

100101a0 <__eqdf2>:
100101a0:	2804d53a 	srli	r2,r5,20
100101a4:	3806d53a 	srli	r3,r7,20
100101a8:	02000434 	movhi	r8,16
100101ac:	423fffc4 	addi	r8,r8,-1
100101b0:	1081ffcc 	andi	r2,r2,2047
100101b4:	0281ffc4 	movi	r10,2047
100101b8:	2a12703a 	and	r9,r5,r8
100101bc:	18c1ffcc 	andi	r3,r3,2047
100101c0:	3a10703a 	and	r8,r7,r8
100101c4:	280ad7fa 	srli	r5,r5,31
100101c8:	380ed7fa 	srli	r7,r7,31
100101cc:	12801026 	beq	r2,r10,10010210 <__eqdf2+0x70>
100101d0:	0281ffc4 	movi	r10,2047
100101d4:	1a800a26 	beq	r3,r10,10010200 <__eqdf2+0x60>
100101d8:	10c00226 	beq	r2,r3,100101e4 <__eqdf2+0x44>
100101dc:	00800044 	movi	r2,1
100101e0:	f800283a 	ret
100101e4:	4a3ffd1e 	bne	r9,r8,100101dc <__alt_data_end+0xf80101dc>
100101e8:	21bffc1e 	bne	r4,r6,100101dc <__alt_data_end+0xf80101dc>
100101ec:	29c00c26 	beq	r5,r7,10010220 <__eqdf2+0x80>
100101f0:	103ffa1e 	bne	r2,zero,100101dc <__alt_data_end+0xf80101dc>
100101f4:	2244b03a 	or	r2,r4,r9
100101f8:	1004c03a 	cmpne	r2,r2,zero
100101fc:	f800283a 	ret
10010200:	3214b03a 	or	r10,r6,r8
10010204:	503ff426 	beq	r10,zero,100101d8 <__alt_data_end+0xf80101d8>
10010208:	00800044 	movi	r2,1
1001020c:	f800283a 	ret
10010210:	2254b03a 	or	r10,r4,r9
10010214:	503fee26 	beq	r10,zero,100101d0 <__alt_data_end+0xf80101d0>
10010218:	00800044 	movi	r2,1
1001021c:	f800283a 	ret
10010220:	0005883a 	mov	r2,zero
10010224:	f800283a 	ret

10010228 <__gedf2>:
10010228:	2804d53a 	srli	r2,r5,20
1001022c:	3806d53a 	srli	r3,r7,20
10010230:	02000434 	movhi	r8,16
10010234:	423fffc4 	addi	r8,r8,-1
10010238:	1081ffcc 	andi	r2,r2,2047
1001023c:	0241ffc4 	movi	r9,2047
10010240:	2a14703a 	and	r10,r5,r8
10010244:	18c1ffcc 	andi	r3,r3,2047
10010248:	3a10703a 	and	r8,r7,r8
1001024c:	280ad7fa 	srli	r5,r5,31
10010250:	380ed7fa 	srli	r7,r7,31
10010254:	12401d26 	beq	r2,r9,100102cc <__gedf2+0xa4>
10010258:	0241ffc4 	movi	r9,2047
1001025c:	1a401226 	beq	r3,r9,100102a8 <__gedf2+0x80>
10010260:	1000081e 	bne	r2,zero,10010284 <__gedf2+0x5c>
10010264:	2296b03a 	or	r11,r4,r10
10010268:	5813003a 	cmpeq	r9,r11,zero
1001026c:	1800091e 	bne	r3,zero,10010294 <__gedf2+0x6c>
10010270:	3218b03a 	or	r12,r6,r8
10010274:	6000071e 	bne	r12,zero,10010294 <__gedf2+0x6c>
10010278:	0005883a 	mov	r2,zero
1001027c:	5800101e 	bne	r11,zero,100102c0 <__gedf2+0x98>
10010280:	f800283a 	ret
10010284:	18000c1e 	bne	r3,zero,100102b8 <__gedf2+0x90>
10010288:	3212b03a 	or	r9,r6,r8
1001028c:	48000c26 	beq	r9,zero,100102c0 <__gedf2+0x98>
10010290:	0013883a 	mov	r9,zero
10010294:	39c03fcc 	andi	r7,r7,255
10010298:	48000826 	beq	r9,zero,100102bc <__gedf2+0x94>
1001029c:	38000926 	beq	r7,zero,100102c4 <__gedf2+0x9c>
100102a0:	00800044 	movi	r2,1
100102a4:	f800283a 	ret
100102a8:	3212b03a 	or	r9,r6,r8
100102ac:	483fec26 	beq	r9,zero,10010260 <__alt_data_end+0xf8010260>
100102b0:	00bfff84 	movi	r2,-2
100102b4:	f800283a 	ret
100102b8:	39c03fcc 	andi	r7,r7,255
100102bc:	29c00626 	beq	r5,r7,100102d8 <__gedf2+0xb0>
100102c0:	283ff726 	beq	r5,zero,100102a0 <__alt_data_end+0xf80102a0>
100102c4:	00bfffc4 	movi	r2,-1
100102c8:	f800283a 	ret
100102cc:	2292b03a 	or	r9,r4,r10
100102d0:	483fe126 	beq	r9,zero,10010258 <__alt_data_end+0xf8010258>
100102d4:	003ff606 	br	100102b0 <__alt_data_end+0xf80102b0>
100102d8:	18bff916 	blt	r3,r2,100102c0 <__alt_data_end+0xf80102c0>
100102dc:	10c00316 	blt	r2,r3,100102ec <__gedf2+0xc4>
100102e0:	42bff736 	bltu	r8,r10,100102c0 <__alt_data_end+0xf80102c0>
100102e4:	52000326 	beq	r10,r8,100102f4 <__gedf2+0xcc>
100102e8:	5200042e 	bgeu	r10,r8,100102fc <__gedf2+0xd4>
100102ec:	283fec1e 	bne	r5,zero,100102a0 <__alt_data_end+0xf80102a0>
100102f0:	003ff406 	br	100102c4 <__alt_data_end+0xf80102c4>
100102f4:	313ff236 	bltu	r6,r4,100102c0 <__alt_data_end+0xf80102c0>
100102f8:	21bffc36 	bltu	r4,r6,100102ec <__alt_data_end+0xf80102ec>
100102fc:	0005883a 	mov	r2,zero
10010300:	f800283a 	ret

10010304 <__muldf3>:
10010304:	deffee04 	addi	sp,sp,-72
10010308:	dd000c15 	stw	r20,48(sp)
1001030c:	2828d53a 	srli	r20,r5,20
10010310:	ddc00f15 	stw	r23,60(sp)
10010314:	282ed7fa 	srli	r23,r5,31
10010318:	dc000815 	stw	r16,32(sp)
1001031c:	04000434 	movhi	r16,16
10010320:	dcc00b15 	stw	r19,44(sp)
10010324:	843fffc4 	addi	r16,r16,-1
10010328:	dfc01115 	stw	ra,68(sp)
1001032c:	df001015 	stw	fp,64(sp)
10010330:	dd800e15 	stw	r22,56(sp)
10010334:	dd400d15 	stw	r21,52(sp)
10010338:	dc800a15 	stw	r18,40(sp)
1001033c:	dc400915 	stw	r17,36(sp)
10010340:	a501ffcc 	andi	r20,r20,2047
10010344:	2c20703a 	and	r16,r5,r16
10010348:	b827883a 	mov	r19,r23
1001034c:	ba403fcc 	andi	r9,r23,255
10010350:	a0006026 	beq	r20,zero,100104d4 <__muldf3+0x1d0>
10010354:	0081ffc4 	movi	r2,2047
10010358:	202d883a 	mov	r22,r4
1001035c:	a0803626 	beq	r20,r2,10010438 <__muldf3+0x134>
10010360:	84000434 	orhi	r16,r16,16
10010364:	200ad77a 	srli	r5,r4,29
10010368:	800490fa 	slli	r2,r16,3
1001036c:	202c90fa 	slli	r22,r4,3
10010370:	a53f0044 	addi	r20,r20,-1023
10010374:	28a0b03a 	or	r16,r5,r2
10010378:	002b883a 	mov	r21,zero
1001037c:	000b883a 	mov	r5,zero
10010380:	3804d53a 	srli	r2,r7,20
10010384:	3838d7fa 	srli	fp,r7,31
10010388:	04400434 	movhi	r17,16
1001038c:	8c7fffc4 	addi	r17,r17,-1
10010390:	1081ffcc 	andi	r2,r2,2047
10010394:	3025883a 	mov	r18,r6
10010398:	3c62703a 	and	r17,r7,r17
1001039c:	e2803fcc 	andi	r10,fp,255
100103a0:	10006d26 	beq	r2,zero,10010558 <__muldf3+0x254>
100103a4:	00c1ffc4 	movi	r3,2047
100103a8:	10c06526 	beq	r2,r3,10010540 <__muldf3+0x23c>
100103ac:	8c400434 	orhi	r17,r17,16
100103b0:	300ed77a 	srli	r7,r6,29
100103b4:	880690fa 	slli	r3,r17,3
100103b8:	302490fa 	slli	r18,r6,3
100103bc:	10bf0044 	addi	r2,r2,-1023
100103c0:	38e2b03a 	or	r17,r7,r3
100103c4:	000f883a 	mov	r7,zero
100103c8:	a087883a 	add	r3,r20,r2
100103cc:	010003c4 	movi	r4,15
100103d0:	3d44b03a 	or	r2,r7,r21
100103d4:	e5ccf03a 	xor	r6,fp,r23
100103d8:	1a000044 	addi	r8,r3,1
100103dc:	20809b36 	bltu	r4,r2,1001064c <__muldf3+0x348>
100103e0:	100490ba 	slli	r2,r2,2
100103e4:	01040074 	movhi	r4,4097
100103e8:	2100fe04 	addi	r4,r4,1016
100103ec:	1105883a 	add	r2,r2,r4
100103f0:	10800017 	ldw	r2,0(r2)
100103f4:	1000683a 	jmp	r2
100103f8:	1001064c 	andi	zero,r2,1049
100103fc:	10010458 	cmpnei	zero,r2,1041
10010400:	10010458 	cmpnei	zero,r2,1041
10010404:	10010454 	ori	zero,r2,1041
10010408:	10010628 	cmpgeui	zero,r2,1048
1001040c:	10010628 	cmpgeui	zero,r2,1048
10010410:	10010610 	cmplti	zero,r2,1048
10010414:	10010454 	ori	zero,r2,1041
10010418:	10010628 	cmpgeui	zero,r2,1048
1001041c:	10010610 	cmplti	zero,r2,1048
10010420:	10010628 	cmpgeui	zero,r2,1048
10010424:	10010454 	ori	zero,r2,1041
10010428:	10010638 	rdprs	zero,r2,1048
1001042c:	10010638 	rdprs	zero,r2,1048
10010430:	10010638 	rdprs	zero,r2,1048
10010434:	10010998 	cmpnei	zero,r2,1062
10010438:	2404b03a 	or	r2,r4,r16
1001043c:	1000711e 	bne	r2,zero,10010604 <__muldf3+0x300>
10010440:	05400204 	movi	r21,8
10010444:	0021883a 	mov	r16,zero
10010448:	002d883a 	mov	r22,zero
1001044c:	01400084 	movi	r5,2
10010450:	003fcb06 	br	10010380 <__alt_data_end+0xf8010380>
10010454:	500d883a 	mov	r6,r10
10010458:	00800084 	movi	r2,2
1001045c:	38805926 	beq	r7,r2,100105c4 <__muldf3+0x2c0>
10010460:	008000c4 	movi	r2,3
10010464:	3881bb26 	beq	r7,r2,10010b54 <__muldf3+0x850>
10010468:	00800044 	movi	r2,1
1001046c:	3881961e 	bne	r7,r2,10010ac8 <__muldf3+0x7c4>
10010470:	3027883a 	mov	r19,r6
10010474:	0005883a 	mov	r2,zero
10010478:	0021883a 	mov	r16,zero
1001047c:	002d883a 	mov	r22,zero
10010480:	1004953a 	slli	r2,r2,20
10010484:	98c03fcc 	andi	r3,r19,255
10010488:	04400434 	movhi	r17,16
1001048c:	8c7fffc4 	addi	r17,r17,-1
10010490:	180697fa 	slli	r3,r3,31
10010494:	8460703a 	and	r16,r16,r17
10010498:	80a0b03a 	or	r16,r16,r2
1001049c:	80c6b03a 	or	r3,r16,r3
100104a0:	b005883a 	mov	r2,r22
100104a4:	dfc01117 	ldw	ra,68(sp)
100104a8:	df001017 	ldw	fp,64(sp)
100104ac:	ddc00f17 	ldw	r23,60(sp)
100104b0:	dd800e17 	ldw	r22,56(sp)
100104b4:	dd400d17 	ldw	r21,52(sp)
100104b8:	dd000c17 	ldw	r20,48(sp)
100104bc:	dcc00b17 	ldw	r19,44(sp)
100104c0:	dc800a17 	ldw	r18,40(sp)
100104c4:	dc400917 	ldw	r17,36(sp)
100104c8:	dc000817 	ldw	r16,32(sp)
100104cc:	dec01204 	addi	sp,sp,72
100104d0:	f800283a 	ret
100104d4:	2404b03a 	or	r2,r4,r16
100104d8:	202b883a 	mov	r21,r4
100104dc:	10004426 	beq	r2,zero,100105f0 <__muldf3+0x2ec>
100104e0:	80015126 	beq	r16,zero,10010a28 <__muldf3+0x724>
100104e4:	8009883a 	mov	r4,r16
100104e8:	d9800715 	stw	r6,28(sp)
100104ec:	d9c00215 	stw	r7,8(sp)
100104f0:	da400415 	stw	r9,16(sp)
100104f4:	00051cc0 	call	100051cc <__clzsi2>
100104f8:	d9800717 	ldw	r6,28(sp)
100104fc:	d9c00217 	ldw	r7,8(sp)
10010500:	da400417 	ldw	r9,16(sp)
10010504:	113ffd44 	addi	r4,r2,-11
10010508:	00c00704 	movi	r3,28
1001050c:	19014216 	blt	r3,r4,10010a18 <__muldf3+0x714>
10010510:	00c00744 	movi	r3,29
10010514:	15bffe04 	addi	r22,r2,-8
10010518:	1907c83a 	sub	r3,r3,r4
1001051c:	85a0983a 	sll	r16,r16,r22
10010520:	a8c6d83a 	srl	r3,r21,r3
10010524:	adac983a 	sll	r22,r21,r22
10010528:	1c20b03a 	or	r16,r3,r16
1001052c:	1080fcc4 	addi	r2,r2,1011
10010530:	00a9c83a 	sub	r20,zero,r2
10010534:	002b883a 	mov	r21,zero
10010538:	000b883a 	mov	r5,zero
1001053c:	003f9006 	br	10010380 <__alt_data_end+0xf8010380>
10010540:	3446b03a 	or	r3,r6,r17
10010544:	1800281e 	bne	r3,zero,100105e8 <__muldf3+0x2e4>
10010548:	0023883a 	mov	r17,zero
1001054c:	0025883a 	mov	r18,zero
10010550:	01c00084 	movi	r7,2
10010554:	003f9c06 	br	100103c8 <__alt_data_end+0xf80103c8>
10010558:	3446b03a 	or	r3,r6,r17
1001055c:	18001e26 	beq	r3,zero,100105d8 <__muldf3+0x2d4>
10010560:	88012126 	beq	r17,zero,100109e8 <__muldf3+0x6e4>
10010564:	8809883a 	mov	r4,r17
10010568:	d9400215 	stw	r5,8(sp)
1001056c:	d9800715 	stw	r6,28(sp)
10010570:	da400415 	stw	r9,16(sp)
10010574:	da800315 	stw	r10,12(sp)
10010578:	00051cc0 	call	100051cc <__clzsi2>
1001057c:	d9400217 	ldw	r5,8(sp)
10010580:	d9800717 	ldw	r6,28(sp)
10010584:	da400417 	ldw	r9,16(sp)
10010588:	da800317 	ldw	r10,12(sp)
1001058c:	113ffd44 	addi	r4,r2,-11
10010590:	00c00704 	movi	r3,28
10010594:	19011016 	blt	r3,r4,100109d8 <__muldf3+0x6d4>
10010598:	00c00744 	movi	r3,29
1001059c:	14bffe04 	addi	r18,r2,-8
100105a0:	1907c83a 	sub	r3,r3,r4
100105a4:	8ca2983a 	sll	r17,r17,r18
100105a8:	30c6d83a 	srl	r3,r6,r3
100105ac:	34a4983a 	sll	r18,r6,r18
100105b0:	1c62b03a 	or	r17,r3,r17
100105b4:	1080fcc4 	addi	r2,r2,1011
100105b8:	0085c83a 	sub	r2,zero,r2
100105bc:	000f883a 	mov	r7,zero
100105c0:	003f8106 	br	100103c8 <__alt_data_end+0xf80103c8>
100105c4:	3027883a 	mov	r19,r6
100105c8:	0081ffc4 	movi	r2,2047
100105cc:	0021883a 	mov	r16,zero
100105d0:	002d883a 	mov	r22,zero
100105d4:	003faa06 	br	10010480 <__alt_data_end+0xf8010480>
100105d8:	0023883a 	mov	r17,zero
100105dc:	0025883a 	mov	r18,zero
100105e0:	01c00044 	movi	r7,1
100105e4:	003f7806 	br	100103c8 <__alt_data_end+0xf80103c8>
100105e8:	01c000c4 	movi	r7,3
100105ec:	003f7606 	br	100103c8 <__alt_data_end+0xf80103c8>
100105f0:	05400104 	movi	r21,4
100105f4:	0021883a 	mov	r16,zero
100105f8:	002d883a 	mov	r22,zero
100105fc:	01400044 	movi	r5,1
10010600:	003f5f06 	br	10010380 <__alt_data_end+0xf8010380>
10010604:	05400304 	movi	r21,12
10010608:	014000c4 	movi	r5,3
1001060c:	003f5c06 	br	10010380 <__alt_data_end+0xf8010380>
10010610:	04000434 	movhi	r16,16
10010614:	0027883a 	mov	r19,zero
10010618:	843fffc4 	addi	r16,r16,-1
1001061c:	05bfffc4 	movi	r22,-1
10010620:	0081ffc4 	movi	r2,2047
10010624:	003f9606 	br	10010480 <__alt_data_end+0xf8010480>
10010628:	8023883a 	mov	r17,r16
1001062c:	b025883a 	mov	r18,r22
10010630:	280f883a 	mov	r7,r5
10010634:	003f8806 	br	10010458 <__alt_data_end+0xf8010458>
10010638:	8023883a 	mov	r17,r16
1001063c:	b025883a 	mov	r18,r22
10010640:	480d883a 	mov	r6,r9
10010644:	280f883a 	mov	r7,r5
10010648:	003f8306 	br	10010458 <__alt_data_end+0xf8010458>
1001064c:	b026d43a 	srli	r19,r22,16
10010650:	902ed43a 	srli	r23,r18,16
10010654:	b5bfffcc 	andi	r22,r22,65535
10010658:	94bfffcc 	andi	r18,r18,65535
1001065c:	b00b883a 	mov	r5,r22
10010660:	9009883a 	mov	r4,r18
10010664:	d8c00515 	stw	r3,20(sp)
10010668:	d9800715 	stw	r6,28(sp)
1001066c:	da000615 	stw	r8,24(sp)
10010670:	00052300 	call	10005230 <__mulsi3>
10010674:	980b883a 	mov	r5,r19
10010678:	9009883a 	mov	r4,r18
1001067c:	1029883a 	mov	r20,r2
10010680:	00052300 	call	10005230 <__mulsi3>
10010684:	b80b883a 	mov	r5,r23
10010688:	9809883a 	mov	r4,r19
1001068c:	102b883a 	mov	r21,r2
10010690:	00052300 	call	10005230 <__mulsi3>
10010694:	b809883a 	mov	r4,r23
10010698:	b00b883a 	mov	r5,r22
1001069c:	1039883a 	mov	fp,r2
100106a0:	00052300 	call	10005230 <__mulsi3>
100106a4:	a008d43a 	srli	r4,r20,16
100106a8:	1545883a 	add	r2,r2,r21
100106ac:	d8c00517 	ldw	r3,20(sp)
100106b0:	2085883a 	add	r2,r4,r2
100106b4:	d9800717 	ldw	r6,28(sp)
100106b8:	da000617 	ldw	r8,24(sp)
100106bc:	1540022e 	bgeu	r2,r21,100106c8 <__muldf3+0x3c4>
100106c0:	01000074 	movhi	r4,1
100106c4:	e139883a 	add	fp,fp,r4
100106c8:	100e943a 	slli	r7,r2,16
100106cc:	1004d43a 	srli	r2,r2,16
100106d0:	882ad43a 	srli	r21,r17,16
100106d4:	a53fffcc 	andi	r20,r20,65535
100106d8:	8c7fffcc 	andi	r17,r17,65535
100106dc:	3d29883a 	add	r20,r7,r20
100106e0:	b00b883a 	mov	r5,r22
100106e4:	8809883a 	mov	r4,r17
100106e8:	d8c00515 	stw	r3,20(sp)
100106ec:	d9800715 	stw	r6,28(sp)
100106f0:	da000615 	stw	r8,24(sp)
100106f4:	dd000115 	stw	r20,4(sp)
100106f8:	d8800015 	stw	r2,0(sp)
100106fc:	00052300 	call	10005230 <__mulsi3>
10010700:	980b883a 	mov	r5,r19
10010704:	8809883a 	mov	r4,r17
10010708:	d8800215 	stw	r2,8(sp)
1001070c:	00052300 	call	10005230 <__mulsi3>
10010710:	9809883a 	mov	r4,r19
10010714:	a80b883a 	mov	r5,r21
10010718:	1029883a 	mov	r20,r2
1001071c:	00052300 	call	10005230 <__mulsi3>
10010720:	b00b883a 	mov	r5,r22
10010724:	a809883a 	mov	r4,r21
10010728:	d8800415 	stw	r2,16(sp)
1001072c:	00052300 	call	10005230 <__mulsi3>
10010730:	d9c00217 	ldw	r7,8(sp)
10010734:	1505883a 	add	r2,r2,r20
10010738:	d8c00517 	ldw	r3,20(sp)
1001073c:	3826d43a 	srli	r19,r7,16
10010740:	d9800717 	ldw	r6,28(sp)
10010744:	da000617 	ldw	r8,24(sp)
10010748:	9885883a 	add	r2,r19,r2
1001074c:	da400417 	ldw	r9,16(sp)
10010750:	1500022e 	bgeu	r2,r20,1001075c <__muldf3+0x458>
10010754:	01000074 	movhi	r4,1
10010758:	4913883a 	add	r9,r9,r4
1001075c:	1028d43a 	srli	r20,r2,16
10010760:	1004943a 	slli	r2,r2,16
10010764:	802cd43a 	srli	r22,r16,16
10010768:	843fffcc 	andi	r16,r16,65535
1001076c:	3cffffcc 	andi	r19,r7,65535
10010770:	9009883a 	mov	r4,r18
10010774:	800b883a 	mov	r5,r16
10010778:	a269883a 	add	r20,r20,r9
1001077c:	d8c00515 	stw	r3,20(sp)
10010780:	d9800715 	stw	r6,28(sp)
10010784:	da000615 	stw	r8,24(sp)
10010788:	14e7883a 	add	r19,r2,r19
1001078c:	00052300 	call	10005230 <__mulsi3>
10010790:	9009883a 	mov	r4,r18
10010794:	b00b883a 	mov	r5,r22
10010798:	d8800315 	stw	r2,12(sp)
1001079c:	00052300 	call	10005230 <__mulsi3>
100107a0:	b809883a 	mov	r4,r23
100107a4:	b00b883a 	mov	r5,r22
100107a8:	d8800215 	stw	r2,8(sp)
100107ac:	00052300 	call	10005230 <__mulsi3>
100107b0:	b80b883a 	mov	r5,r23
100107b4:	8009883a 	mov	r4,r16
100107b8:	d8800415 	stw	r2,16(sp)
100107bc:	00052300 	call	10005230 <__mulsi3>
100107c0:	da800317 	ldw	r10,12(sp)
100107c4:	d9c00217 	ldw	r7,8(sp)
100107c8:	d9000017 	ldw	r4,0(sp)
100107cc:	502ed43a 	srli	r23,r10,16
100107d0:	11c5883a 	add	r2,r2,r7
100107d4:	24e5883a 	add	r18,r4,r19
100107d8:	b885883a 	add	r2,r23,r2
100107dc:	d8c00517 	ldw	r3,20(sp)
100107e0:	d9800717 	ldw	r6,28(sp)
100107e4:	da000617 	ldw	r8,24(sp)
100107e8:	da400417 	ldw	r9,16(sp)
100107ec:	11c0022e 	bgeu	r2,r7,100107f8 <__muldf3+0x4f4>
100107f0:	01000074 	movhi	r4,1
100107f4:	4913883a 	add	r9,r9,r4
100107f8:	100ed43a 	srli	r7,r2,16
100107fc:	1004943a 	slli	r2,r2,16
10010800:	55ffffcc 	andi	r23,r10,65535
10010804:	3a53883a 	add	r9,r7,r9
10010808:	8809883a 	mov	r4,r17
1001080c:	800b883a 	mov	r5,r16
10010810:	d8c00515 	stw	r3,20(sp)
10010814:	d9800715 	stw	r6,28(sp)
10010818:	da000615 	stw	r8,24(sp)
1001081c:	da400415 	stw	r9,16(sp)
10010820:	15ef883a 	add	r23,r2,r23
10010824:	00052300 	call	10005230 <__mulsi3>
10010828:	8809883a 	mov	r4,r17
1001082c:	b00b883a 	mov	r5,r22
10010830:	d8800215 	stw	r2,8(sp)
10010834:	00052300 	call	10005230 <__mulsi3>
10010838:	b00b883a 	mov	r5,r22
1001083c:	a809883a 	mov	r4,r21
10010840:	d8800315 	stw	r2,12(sp)
10010844:	00052300 	call	10005230 <__mulsi3>
10010848:	8009883a 	mov	r4,r16
1001084c:	a80b883a 	mov	r5,r21
10010850:	1023883a 	mov	r17,r2
10010854:	00052300 	call	10005230 <__mulsi3>
10010858:	d9c00217 	ldw	r7,8(sp)
1001085c:	da800317 	ldw	r10,12(sp)
10010860:	d8c00517 	ldw	r3,20(sp)
10010864:	3808d43a 	srli	r4,r7,16
10010868:	1285883a 	add	r2,r2,r10
1001086c:	d9800717 	ldw	r6,28(sp)
10010870:	2085883a 	add	r2,r4,r2
10010874:	da000617 	ldw	r8,24(sp)
10010878:	da400417 	ldw	r9,16(sp)
1001087c:	1280022e 	bgeu	r2,r10,10010888 <__muldf3+0x584>
10010880:	01000074 	movhi	r4,1
10010884:	8923883a 	add	r17,r17,r4
10010888:	1008943a 	slli	r4,r2,16
1001088c:	39ffffcc 	andi	r7,r7,65535
10010890:	e4b9883a 	add	fp,fp,r18
10010894:	21cf883a 	add	r7,r4,r7
10010898:	e4e7803a 	cmpltu	r19,fp,r19
1001089c:	3d0f883a 	add	r7,r7,r20
100108a0:	bf39883a 	add	fp,r23,fp
100108a4:	99c9883a 	add	r4,r19,r7
100108a8:	e5ef803a 	cmpltu	r23,fp,r23
100108ac:	490b883a 	add	r5,r9,r4
100108b0:	1004d43a 	srli	r2,r2,16
100108b4:	b965883a 	add	r18,r23,r5
100108b8:	24c9803a 	cmpltu	r4,r4,r19
100108bc:	3d29803a 	cmpltu	r20,r7,r20
100108c0:	a128b03a 	or	r20,r20,r4
100108c4:	95ef803a 	cmpltu	r23,r18,r23
100108c8:	2a53803a 	cmpltu	r9,r5,r9
100108cc:	a0a9883a 	add	r20,r20,r2
100108d0:	4deeb03a 	or	r23,r9,r23
100108d4:	a5ef883a 	add	r23,r20,r23
100108d8:	bc63883a 	add	r17,r23,r17
100108dc:	e004927a 	slli	r2,fp,9
100108e0:	d9000117 	ldw	r4,4(sp)
100108e4:	882e927a 	slli	r23,r17,9
100108e8:	9022d5fa 	srli	r17,r18,23
100108ec:	e038d5fa 	srli	fp,fp,23
100108f0:	1104b03a 	or	r2,r2,r4
100108f4:	9024927a 	slli	r18,r18,9
100108f8:	1004c03a 	cmpne	r2,r2,zero
100108fc:	bc62b03a 	or	r17,r23,r17
10010900:	1738b03a 	or	fp,r2,fp
10010904:	8880402c 	andhi	r2,r17,256
10010908:	e4a4b03a 	or	r18,fp,r18
1001090c:	10000726 	beq	r2,zero,1001092c <__muldf3+0x628>
10010910:	9006d07a 	srli	r3,r18,1
10010914:	880497fa 	slli	r2,r17,31
10010918:	9480004c 	andi	r18,r18,1
1001091c:	8822d07a 	srli	r17,r17,1
10010920:	1ca4b03a 	or	r18,r3,r18
10010924:	14a4b03a 	or	r18,r2,r18
10010928:	4007883a 	mov	r3,r8
1001092c:	1880ffc4 	addi	r2,r3,1023
10010930:	0080460e 	bge	zero,r2,10010a4c <__muldf3+0x748>
10010934:	910001cc 	andi	r4,r18,7
10010938:	20000726 	beq	r4,zero,10010958 <__muldf3+0x654>
1001093c:	910003cc 	andi	r4,r18,15
10010940:	01400104 	movi	r5,4
10010944:	21400426 	beq	r4,r5,10010958 <__muldf3+0x654>
10010948:	9149883a 	add	r4,r18,r5
1001094c:	24a5803a 	cmpltu	r18,r4,r18
10010950:	8ca3883a 	add	r17,r17,r18
10010954:	2025883a 	mov	r18,r4
10010958:	8900402c 	andhi	r4,r17,256
1001095c:	20000426 	beq	r4,zero,10010970 <__muldf3+0x66c>
10010960:	18810004 	addi	r2,r3,1024
10010964:	00ffc034 	movhi	r3,65280
10010968:	18ffffc4 	addi	r3,r3,-1
1001096c:	88e2703a 	and	r17,r17,r3
10010970:	00c1ff84 	movi	r3,2046
10010974:	18bf1316 	blt	r3,r2,100105c4 <__alt_data_end+0xf80105c4>
10010978:	882c977a 	slli	r22,r17,29
1001097c:	9024d0fa 	srli	r18,r18,3
10010980:	8822927a 	slli	r17,r17,9
10010984:	1081ffcc 	andi	r2,r2,2047
10010988:	b4acb03a 	or	r22,r22,r18
1001098c:	8820d33a 	srli	r16,r17,12
10010990:	3027883a 	mov	r19,r6
10010994:	003eba06 	br	10010480 <__alt_data_end+0xf8010480>
10010998:	8080022c 	andhi	r2,r16,8
1001099c:	10000926 	beq	r2,zero,100109c4 <__muldf3+0x6c0>
100109a0:	8880022c 	andhi	r2,r17,8
100109a4:	1000071e 	bne	r2,zero,100109c4 <__muldf3+0x6c0>
100109a8:	00800434 	movhi	r2,16
100109ac:	8c000234 	orhi	r16,r17,8
100109b0:	10bfffc4 	addi	r2,r2,-1
100109b4:	e027883a 	mov	r19,fp
100109b8:	80a0703a 	and	r16,r16,r2
100109bc:	902d883a 	mov	r22,r18
100109c0:	003f1706 	br	10010620 <__alt_data_end+0xf8010620>
100109c4:	00800434 	movhi	r2,16
100109c8:	84000234 	orhi	r16,r16,8
100109cc:	10bfffc4 	addi	r2,r2,-1
100109d0:	80a0703a 	and	r16,r16,r2
100109d4:	003f1206 	br	10010620 <__alt_data_end+0xf8010620>
100109d8:	147ff604 	addi	r17,r2,-40
100109dc:	3462983a 	sll	r17,r6,r17
100109e0:	0025883a 	mov	r18,zero
100109e4:	003ef306 	br	100105b4 <__alt_data_end+0xf80105b4>
100109e8:	3009883a 	mov	r4,r6
100109ec:	d9400215 	stw	r5,8(sp)
100109f0:	d9800715 	stw	r6,28(sp)
100109f4:	da400415 	stw	r9,16(sp)
100109f8:	da800315 	stw	r10,12(sp)
100109fc:	00051cc0 	call	100051cc <__clzsi2>
10010a00:	10800804 	addi	r2,r2,32
10010a04:	da800317 	ldw	r10,12(sp)
10010a08:	da400417 	ldw	r9,16(sp)
10010a0c:	d9800717 	ldw	r6,28(sp)
10010a10:	d9400217 	ldw	r5,8(sp)
10010a14:	003edd06 	br	1001058c <__alt_data_end+0xf801058c>
10010a18:	143ff604 	addi	r16,r2,-40
10010a1c:	ac20983a 	sll	r16,r21,r16
10010a20:	002d883a 	mov	r22,zero
10010a24:	003ec106 	br	1001052c <__alt_data_end+0xf801052c>
10010a28:	d9800715 	stw	r6,28(sp)
10010a2c:	d9c00215 	stw	r7,8(sp)
10010a30:	da400415 	stw	r9,16(sp)
10010a34:	00051cc0 	call	100051cc <__clzsi2>
10010a38:	10800804 	addi	r2,r2,32
10010a3c:	da400417 	ldw	r9,16(sp)
10010a40:	d9c00217 	ldw	r7,8(sp)
10010a44:	d9800717 	ldw	r6,28(sp)
10010a48:	003eae06 	br	10010504 <__alt_data_end+0xf8010504>
10010a4c:	00c00044 	movi	r3,1
10010a50:	1887c83a 	sub	r3,r3,r2
10010a54:	01000e04 	movi	r4,56
10010a58:	20fe8516 	blt	r4,r3,10010470 <__alt_data_end+0xf8010470>
10010a5c:	010007c4 	movi	r4,31
10010a60:	20c01b16 	blt	r4,r3,10010ad0 <__muldf3+0x7cc>
10010a64:	00800804 	movi	r2,32
10010a68:	10c5c83a 	sub	r2,r2,r3
10010a6c:	888a983a 	sll	r5,r17,r2
10010a70:	90c8d83a 	srl	r4,r18,r3
10010a74:	9084983a 	sll	r2,r18,r2
10010a78:	88e2d83a 	srl	r17,r17,r3
10010a7c:	2906b03a 	or	r3,r5,r4
10010a80:	1004c03a 	cmpne	r2,r2,zero
10010a84:	1886b03a 	or	r3,r3,r2
10010a88:	188001cc 	andi	r2,r3,7
10010a8c:	10000726 	beq	r2,zero,10010aac <__muldf3+0x7a8>
10010a90:	188003cc 	andi	r2,r3,15
10010a94:	01000104 	movi	r4,4
10010a98:	11000426 	beq	r2,r4,10010aac <__muldf3+0x7a8>
10010a9c:	1805883a 	mov	r2,r3
10010aa0:	10c00104 	addi	r3,r2,4
10010aa4:	1885803a 	cmpltu	r2,r3,r2
10010aa8:	88a3883a 	add	r17,r17,r2
10010aac:	8880202c 	andhi	r2,r17,128
10010ab0:	10001c26 	beq	r2,zero,10010b24 <__muldf3+0x820>
10010ab4:	3027883a 	mov	r19,r6
10010ab8:	00800044 	movi	r2,1
10010abc:	0021883a 	mov	r16,zero
10010ac0:	002d883a 	mov	r22,zero
10010ac4:	003e6e06 	br	10010480 <__alt_data_end+0xf8010480>
10010ac8:	4007883a 	mov	r3,r8
10010acc:	003f9706 	br	1001092c <__alt_data_end+0xf801092c>
10010ad0:	017ff844 	movi	r5,-31
10010ad4:	2885c83a 	sub	r2,r5,r2
10010ad8:	888ad83a 	srl	r5,r17,r2
10010adc:	00800804 	movi	r2,32
10010ae0:	18801a26 	beq	r3,r2,10010b4c <__muldf3+0x848>
10010ae4:	01001004 	movi	r4,64
10010ae8:	20c7c83a 	sub	r3,r4,r3
10010aec:	88e2983a 	sll	r17,r17,r3
10010af0:	8ca4b03a 	or	r18,r17,r18
10010af4:	9004c03a 	cmpne	r2,r18,zero
10010af8:	2884b03a 	or	r2,r5,r2
10010afc:	144001cc 	andi	r17,r2,7
10010b00:	88000d1e 	bne	r17,zero,10010b38 <__muldf3+0x834>
10010b04:	0021883a 	mov	r16,zero
10010b08:	102cd0fa 	srli	r22,r2,3
10010b0c:	3027883a 	mov	r19,r6
10010b10:	0005883a 	mov	r2,zero
10010b14:	b46cb03a 	or	r22,r22,r17
10010b18:	003e5906 	br	10010480 <__alt_data_end+0xf8010480>
10010b1c:	1007883a 	mov	r3,r2
10010b20:	0023883a 	mov	r17,zero
10010b24:	8820927a 	slli	r16,r17,9
10010b28:	1805883a 	mov	r2,r3
10010b2c:	8822977a 	slli	r17,r17,29
10010b30:	8020d33a 	srli	r16,r16,12
10010b34:	003ff406 	br	10010b08 <__alt_data_end+0xf8010b08>
10010b38:	10c003cc 	andi	r3,r2,15
10010b3c:	01000104 	movi	r4,4
10010b40:	193ff626 	beq	r3,r4,10010b1c <__alt_data_end+0xf8010b1c>
10010b44:	0023883a 	mov	r17,zero
10010b48:	003fd506 	br	10010aa0 <__alt_data_end+0xf8010aa0>
10010b4c:	0023883a 	mov	r17,zero
10010b50:	003fe706 	br	10010af0 <__alt_data_end+0xf8010af0>
10010b54:	00800434 	movhi	r2,16
10010b58:	8c000234 	orhi	r16,r17,8
10010b5c:	10bfffc4 	addi	r2,r2,-1
10010b60:	3027883a 	mov	r19,r6
10010b64:	80a0703a 	and	r16,r16,r2
10010b68:	902d883a 	mov	r22,r18
10010b6c:	003eac06 	br	10010620 <__alt_data_end+0xf8010620>

10010b70 <__subdf3>:
10010b70:	02000434 	movhi	r8,16
10010b74:	423fffc4 	addi	r8,r8,-1
10010b78:	defffb04 	addi	sp,sp,-20
10010b7c:	2a14703a 	and	r10,r5,r8
10010b80:	3812d53a 	srli	r9,r7,20
10010b84:	3a10703a 	and	r8,r7,r8
10010b88:	2006d77a 	srli	r3,r4,29
10010b8c:	3004d77a 	srli	r2,r6,29
10010b90:	dc000015 	stw	r16,0(sp)
10010b94:	501490fa 	slli	r10,r10,3
10010b98:	2820d53a 	srli	r16,r5,20
10010b9c:	401090fa 	slli	r8,r8,3
10010ba0:	dc800215 	stw	r18,8(sp)
10010ba4:	dc400115 	stw	r17,4(sp)
10010ba8:	dfc00415 	stw	ra,16(sp)
10010bac:	202290fa 	slli	r17,r4,3
10010bb0:	dcc00315 	stw	r19,12(sp)
10010bb4:	4a41ffcc 	andi	r9,r9,2047
10010bb8:	0101ffc4 	movi	r4,2047
10010bbc:	2824d7fa 	srli	r18,r5,31
10010bc0:	8401ffcc 	andi	r16,r16,2047
10010bc4:	50c6b03a 	or	r3,r10,r3
10010bc8:	380ed7fa 	srli	r7,r7,31
10010bcc:	408ab03a 	or	r5,r8,r2
10010bd0:	300c90fa 	slli	r6,r6,3
10010bd4:	49009626 	beq	r9,r4,10010e30 <__subdf3+0x2c0>
10010bd8:	39c0005c 	xori	r7,r7,1
10010bdc:	8245c83a 	sub	r2,r16,r9
10010be0:	3c807426 	beq	r7,r18,10010db4 <__subdf3+0x244>
10010be4:	0080af0e 	bge	zero,r2,10010ea4 <__subdf3+0x334>
10010be8:	48002a1e 	bne	r9,zero,10010c94 <__subdf3+0x124>
10010bec:	2988b03a 	or	r4,r5,r6
10010bf0:	20009a1e 	bne	r4,zero,10010e5c <__subdf3+0x2ec>
10010bf4:	888001cc 	andi	r2,r17,7
10010bf8:	10000726 	beq	r2,zero,10010c18 <__subdf3+0xa8>
10010bfc:	888003cc 	andi	r2,r17,15
10010c00:	01000104 	movi	r4,4
10010c04:	11000426 	beq	r2,r4,10010c18 <__subdf3+0xa8>
10010c08:	890b883a 	add	r5,r17,r4
10010c0c:	2c63803a 	cmpltu	r17,r5,r17
10010c10:	1c47883a 	add	r3,r3,r17
10010c14:	2823883a 	mov	r17,r5
10010c18:	1880202c 	andhi	r2,r3,128
10010c1c:	10005926 	beq	r2,zero,10010d84 <__subdf3+0x214>
10010c20:	84000044 	addi	r16,r16,1
10010c24:	0081ffc4 	movi	r2,2047
10010c28:	8080be26 	beq	r16,r2,10010f24 <__subdf3+0x3b4>
10010c2c:	017fe034 	movhi	r5,65408
10010c30:	297fffc4 	addi	r5,r5,-1
10010c34:	1946703a 	and	r3,r3,r5
10010c38:	1804977a 	slli	r2,r3,29
10010c3c:	1806927a 	slli	r3,r3,9
10010c40:	8822d0fa 	srli	r17,r17,3
10010c44:	8401ffcc 	andi	r16,r16,2047
10010c48:	180ad33a 	srli	r5,r3,12
10010c4c:	9100004c 	andi	r4,r18,1
10010c50:	1444b03a 	or	r2,r2,r17
10010c54:	80c1ffcc 	andi	r3,r16,2047
10010c58:	1820953a 	slli	r16,r3,20
10010c5c:	20c03fcc 	andi	r3,r4,255
10010c60:	180897fa 	slli	r4,r3,31
10010c64:	00c00434 	movhi	r3,16
10010c68:	18ffffc4 	addi	r3,r3,-1
10010c6c:	28c6703a 	and	r3,r5,r3
10010c70:	1c06b03a 	or	r3,r3,r16
10010c74:	1906b03a 	or	r3,r3,r4
10010c78:	dfc00417 	ldw	ra,16(sp)
10010c7c:	dcc00317 	ldw	r19,12(sp)
10010c80:	dc800217 	ldw	r18,8(sp)
10010c84:	dc400117 	ldw	r17,4(sp)
10010c88:	dc000017 	ldw	r16,0(sp)
10010c8c:	dec00504 	addi	sp,sp,20
10010c90:	f800283a 	ret
10010c94:	0101ffc4 	movi	r4,2047
10010c98:	813fd626 	beq	r16,r4,10010bf4 <__alt_data_end+0xf8010bf4>
10010c9c:	29402034 	orhi	r5,r5,128
10010ca0:	01000e04 	movi	r4,56
10010ca4:	2080a316 	blt	r4,r2,10010f34 <__subdf3+0x3c4>
10010ca8:	010007c4 	movi	r4,31
10010cac:	2080c616 	blt	r4,r2,10010fc8 <__subdf3+0x458>
10010cb0:	01000804 	movi	r4,32
10010cb4:	2089c83a 	sub	r4,r4,r2
10010cb8:	2910983a 	sll	r8,r5,r4
10010cbc:	308ed83a 	srl	r7,r6,r2
10010cc0:	3108983a 	sll	r4,r6,r4
10010cc4:	2884d83a 	srl	r2,r5,r2
10010cc8:	41ccb03a 	or	r6,r8,r7
10010ccc:	2008c03a 	cmpne	r4,r4,zero
10010cd0:	310cb03a 	or	r6,r6,r4
10010cd4:	898dc83a 	sub	r6,r17,r6
10010cd8:	89a3803a 	cmpltu	r17,r17,r6
10010cdc:	1887c83a 	sub	r3,r3,r2
10010ce0:	1c47c83a 	sub	r3,r3,r17
10010ce4:	3023883a 	mov	r17,r6
10010ce8:	1880202c 	andhi	r2,r3,128
10010cec:	10002326 	beq	r2,zero,10010d7c <__subdf3+0x20c>
10010cf0:	04c02034 	movhi	r19,128
10010cf4:	9cffffc4 	addi	r19,r19,-1
10010cf8:	1ce6703a 	and	r19,r3,r19
10010cfc:	98007a26 	beq	r19,zero,10010ee8 <__subdf3+0x378>
10010d00:	9809883a 	mov	r4,r19
10010d04:	00051cc0 	call	100051cc <__clzsi2>
10010d08:	113ffe04 	addi	r4,r2,-8
10010d0c:	00c007c4 	movi	r3,31
10010d10:	19007b16 	blt	r3,r4,10010f00 <__subdf3+0x390>
10010d14:	00800804 	movi	r2,32
10010d18:	1105c83a 	sub	r2,r2,r4
10010d1c:	8884d83a 	srl	r2,r17,r2
10010d20:	9906983a 	sll	r3,r19,r4
10010d24:	8922983a 	sll	r17,r17,r4
10010d28:	10c4b03a 	or	r2,r2,r3
10010d2c:	24007816 	blt	r4,r16,10010f10 <__subdf3+0x3a0>
10010d30:	2421c83a 	sub	r16,r4,r16
10010d34:	80c00044 	addi	r3,r16,1
10010d38:	010007c4 	movi	r4,31
10010d3c:	20c09516 	blt	r4,r3,10010f94 <__subdf3+0x424>
10010d40:	01400804 	movi	r5,32
10010d44:	28cbc83a 	sub	r5,r5,r3
10010d48:	88c8d83a 	srl	r4,r17,r3
10010d4c:	8962983a 	sll	r17,r17,r5
10010d50:	114a983a 	sll	r5,r2,r5
10010d54:	10c6d83a 	srl	r3,r2,r3
10010d58:	8804c03a 	cmpne	r2,r17,zero
10010d5c:	290ab03a 	or	r5,r5,r4
10010d60:	28a2b03a 	or	r17,r5,r2
10010d64:	0021883a 	mov	r16,zero
10010d68:	003fa206 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10010d6c:	2090b03a 	or	r8,r4,r2
10010d70:	40018e26 	beq	r8,zero,100113ac <__subdf3+0x83c>
10010d74:	1007883a 	mov	r3,r2
10010d78:	2023883a 	mov	r17,r4
10010d7c:	888001cc 	andi	r2,r17,7
10010d80:	103f9e1e 	bne	r2,zero,10010bfc <__alt_data_end+0xf8010bfc>
10010d84:	1804977a 	slli	r2,r3,29
10010d88:	8822d0fa 	srli	r17,r17,3
10010d8c:	1810d0fa 	srli	r8,r3,3
10010d90:	9100004c 	andi	r4,r18,1
10010d94:	1444b03a 	or	r2,r2,r17
10010d98:	00c1ffc4 	movi	r3,2047
10010d9c:	80c02826 	beq	r16,r3,10010e40 <__subdf3+0x2d0>
10010da0:	01400434 	movhi	r5,16
10010da4:	297fffc4 	addi	r5,r5,-1
10010da8:	80e0703a 	and	r16,r16,r3
10010dac:	414a703a 	and	r5,r8,r5
10010db0:	003fa806 	br	10010c54 <__alt_data_end+0xf8010c54>
10010db4:	0080630e 	bge	zero,r2,10010f44 <__subdf3+0x3d4>
10010db8:	48003026 	beq	r9,zero,10010e7c <__subdf3+0x30c>
10010dbc:	0101ffc4 	movi	r4,2047
10010dc0:	813f8c26 	beq	r16,r4,10010bf4 <__alt_data_end+0xf8010bf4>
10010dc4:	29402034 	orhi	r5,r5,128
10010dc8:	01000e04 	movi	r4,56
10010dcc:	2080a90e 	bge	r4,r2,10011074 <__subdf3+0x504>
10010dd0:	298cb03a 	or	r6,r5,r6
10010dd4:	3012c03a 	cmpne	r9,r6,zero
10010dd8:	0005883a 	mov	r2,zero
10010ddc:	4c53883a 	add	r9,r9,r17
10010de0:	4c63803a 	cmpltu	r17,r9,r17
10010de4:	10c7883a 	add	r3,r2,r3
10010de8:	88c7883a 	add	r3,r17,r3
10010dec:	4823883a 	mov	r17,r9
10010df0:	1880202c 	andhi	r2,r3,128
10010df4:	1000d026 	beq	r2,zero,10011138 <__subdf3+0x5c8>
10010df8:	84000044 	addi	r16,r16,1
10010dfc:	0081ffc4 	movi	r2,2047
10010e00:	8080fe26 	beq	r16,r2,100111fc <__subdf3+0x68c>
10010e04:	00bfe034 	movhi	r2,65408
10010e08:	10bfffc4 	addi	r2,r2,-1
10010e0c:	1886703a 	and	r3,r3,r2
10010e10:	880ad07a 	srli	r5,r17,1
10010e14:	180497fa 	slli	r2,r3,31
10010e18:	8900004c 	andi	r4,r17,1
10010e1c:	2922b03a 	or	r17,r5,r4
10010e20:	1806d07a 	srli	r3,r3,1
10010e24:	1462b03a 	or	r17,r2,r17
10010e28:	3825883a 	mov	r18,r7
10010e2c:	003f7106 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10010e30:	2984b03a 	or	r2,r5,r6
10010e34:	103f6826 	beq	r2,zero,10010bd8 <__alt_data_end+0xf8010bd8>
10010e38:	39c03fcc 	andi	r7,r7,255
10010e3c:	003f6706 	br	10010bdc <__alt_data_end+0xf8010bdc>
10010e40:	4086b03a 	or	r3,r8,r2
10010e44:	18015226 	beq	r3,zero,10011390 <__subdf3+0x820>
10010e48:	00c00434 	movhi	r3,16
10010e4c:	41400234 	orhi	r5,r8,8
10010e50:	18ffffc4 	addi	r3,r3,-1
10010e54:	28ca703a 	and	r5,r5,r3
10010e58:	003f7e06 	br	10010c54 <__alt_data_end+0xf8010c54>
10010e5c:	10bfffc4 	addi	r2,r2,-1
10010e60:	1000491e 	bne	r2,zero,10010f88 <__subdf3+0x418>
10010e64:	898fc83a 	sub	r7,r17,r6
10010e68:	89e3803a 	cmpltu	r17,r17,r7
10010e6c:	1947c83a 	sub	r3,r3,r5
10010e70:	1c47c83a 	sub	r3,r3,r17
10010e74:	3823883a 	mov	r17,r7
10010e78:	003f9b06 	br	10010ce8 <__alt_data_end+0xf8010ce8>
10010e7c:	2988b03a 	or	r4,r5,r6
10010e80:	203f5c26 	beq	r4,zero,10010bf4 <__alt_data_end+0xf8010bf4>
10010e84:	10bfffc4 	addi	r2,r2,-1
10010e88:	1000931e 	bne	r2,zero,100110d8 <__subdf3+0x568>
10010e8c:	898d883a 	add	r6,r17,r6
10010e90:	3463803a 	cmpltu	r17,r6,r17
10010e94:	1947883a 	add	r3,r3,r5
10010e98:	88c7883a 	add	r3,r17,r3
10010e9c:	3023883a 	mov	r17,r6
10010ea0:	003fd306 	br	10010df0 <__alt_data_end+0xf8010df0>
10010ea4:	1000541e 	bne	r2,zero,10010ff8 <__subdf3+0x488>
10010ea8:	80800044 	addi	r2,r16,1
10010eac:	1081ffcc 	andi	r2,r2,2047
10010eb0:	01000044 	movi	r4,1
10010eb4:	2080a20e 	bge	r4,r2,10011140 <__subdf3+0x5d0>
10010eb8:	8989c83a 	sub	r4,r17,r6
10010ebc:	8905803a 	cmpltu	r2,r17,r4
10010ec0:	1967c83a 	sub	r19,r3,r5
10010ec4:	98a7c83a 	sub	r19,r19,r2
10010ec8:	9880202c 	andhi	r2,r19,128
10010ecc:	10006326 	beq	r2,zero,1001105c <__subdf3+0x4ec>
10010ed0:	3463c83a 	sub	r17,r6,r17
10010ed4:	28c7c83a 	sub	r3,r5,r3
10010ed8:	344d803a 	cmpltu	r6,r6,r17
10010edc:	19a7c83a 	sub	r19,r3,r6
10010ee0:	3825883a 	mov	r18,r7
10010ee4:	983f861e 	bne	r19,zero,10010d00 <__alt_data_end+0xf8010d00>
10010ee8:	8809883a 	mov	r4,r17
10010eec:	00051cc0 	call	100051cc <__clzsi2>
10010ef0:	10800804 	addi	r2,r2,32
10010ef4:	113ffe04 	addi	r4,r2,-8
10010ef8:	00c007c4 	movi	r3,31
10010efc:	193f850e 	bge	r3,r4,10010d14 <__alt_data_end+0xf8010d14>
10010f00:	10bff604 	addi	r2,r2,-40
10010f04:	8884983a 	sll	r2,r17,r2
10010f08:	0023883a 	mov	r17,zero
10010f0c:	243f880e 	bge	r4,r16,10010d30 <__alt_data_end+0xf8010d30>
10010f10:	00ffe034 	movhi	r3,65408
10010f14:	18ffffc4 	addi	r3,r3,-1
10010f18:	8121c83a 	sub	r16,r16,r4
10010f1c:	10c6703a 	and	r3,r2,r3
10010f20:	003f3406 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10010f24:	9100004c 	andi	r4,r18,1
10010f28:	000b883a 	mov	r5,zero
10010f2c:	0005883a 	mov	r2,zero
10010f30:	003f4806 	br	10010c54 <__alt_data_end+0xf8010c54>
10010f34:	298cb03a 	or	r6,r5,r6
10010f38:	300cc03a 	cmpne	r6,r6,zero
10010f3c:	0005883a 	mov	r2,zero
10010f40:	003f6406 	br	10010cd4 <__alt_data_end+0xf8010cd4>
10010f44:	10009a1e 	bne	r2,zero,100111b0 <__subdf3+0x640>
10010f48:	82400044 	addi	r9,r16,1
10010f4c:	4881ffcc 	andi	r2,r9,2047
10010f50:	02800044 	movi	r10,1
10010f54:	5080670e 	bge	r10,r2,100110f4 <__subdf3+0x584>
10010f58:	0081ffc4 	movi	r2,2047
10010f5c:	4880af26 	beq	r9,r2,1001121c <__subdf3+0x6ac>
10010f60:	898d883a 	add	r6,r17,r6
10010f64:	1945883a 	add	r2,r3,r5
10010f68:	3447803a 	cmpltu	r3,r6,r17
10010f6c:	1887883a 	add	r3,r3,r2
10010f70:	182297fa 	slli	r17,r3,31
10010f74:	300cd07a 	srli	r6,r6,1
10010f78:	1806d07a 	srli	r3,r3,1
10010f7c:	4821883a 	mov	r16,r9
10010f80:	89a2b03a 	or	r17,r17,r6
10010f84:	003f1b06 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10010f88:	0101ffc4 	movi	r4,2047
10010f8c:	813f441e 	bne	r16,r4,10010ca0 <__alt_data_end+0xf8010ca0>
10010f90:	003f1806 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10010f94:	843ff844 	addi	r16,r16,-31
10010f98:	01400804 	movi	r5,32
10010f9c:	1408d83a 	srl	r4,r2,r16
10010fa0:	19405026 	beq	r3,r5,100110e4 <__subdf3+0x574>
10010fa4:	01401004 	movi	r5,64
10010fa8:	28c7c83a 	sub	r3,r5,r3
10010fac:	10c4983a 	sll	r2,r2,r3
10010fb0:	88a2b03a 	or	r17,r17,r2
10010fb4:	8822c03a 	cmpne	r17,r17,zero
10010fb8:	2462b03a 	or	r17,r4,r17
10010fbc:	0007883a 	mov	r3,zero
10010fc0:	0021883a 	mov	r16,zero
10010fc4:	003f6d06 	br	10010d7c <__alt_data_end+0xf8010d7c>
10010fc8:	11fff804 	addi	r7,r2,-32
10010fcc:	01000804 	movi	r4,32
10010fd0:	29ced83a 	srl	r7,r5,r7
10010fd4:	11004526 	beq	r2,r4,100110ec <__subdf3+0x57c>
10010fd8:	01001004 	movi	r4,64
10010fdc:	2089c83a 	sub	r4,r4,r2
10010fe0:	2904983a 	sll	r2,r5,r4
10010fe4:	118cb03a 	or	r6,r2,r6
10010fe8:	300cc03a 	cmpne	r6,r6,zero
10010fec:	398cb03a 	or	r6,r7,r6
10010ff0:	0005883a 	mov	r2,zero
10010ff4:	003f3706 	br	10010cd4 <__alt_data_end+0xf8010cd4>
10010ff8:	80002a26 	beq	r16,zero,100110a4 <__subdf3+0x534>
10010ffc:	0101ffc4 	movi	r4,2047
10011000:	49006626 	beq	r9,r4,1001119c <__subdf3+0x62c>
10011004:	0085c83a 	sub	r2,zero,r2
10011008:	18c02034 	orhi	r3,r3,128
1001100c:	01000e04 	movi	r4,56
10011010:	20807e16 	blt	r4,r2,1001120c <__subdf3+0x69c>
10011014:	010007c4 	movi	r4,31
10011018:	2080e716 	blt	r4,r2,100113b8 <__subdf3+0x848>
1001101c:	01000804 	movi	r4,32
10011020:	2089c83a 	sub	r4,r4,r2
10011024:	1914983a 	sll	r10,r3,r4
10011028:	8890d83a 	srl	r8,r17,r2
1001102c:	8908983a 	sll	r4,r17,r4
10011030:	1884d83a 	srl	r2,r3,r2
10011034:	5222b03a 	or	r17,r10,r8
10011038:	2006c03a 	cmpne	r3,r4,zero
1001103c:	88e2b03a 	or	r17,r17,r3
10011040:	3463c83a 	sub	r17,r6,r17
10011044:	2885c83a 	sub	r2,r5,r2
10011048:	344d803a 	cmpltu	r6,r6,r17
1001104c:	1187c83a 	sub	r3,r2,r6
10011050:	4821883a 	mov	r16,r9
10011054:	3825883a 	mov	r18,r7
10011058:	003f2306 	br	10010ce8 <__alt_data_end+0xf8010ce8>
1001105c:	24d0b03a 	or	r8,r4,r19
10011060:	40001b1e 	bne	r8,zero,100110d0 <__subdf3+0x560>
10011064:	0005883a 	mov	r2,zero
10011068:	0009883a 	mov	r4,zero
1001106c:	0021883a 	mov	r16,zero
10011070:	003f4906 	br	10010d98 <__alt_data_end+0xf8010d98>
10011074:	010007c4 	movi	r4,31
10011078:	20803a16 	blt	r4,r2,10011164 <__subdf3+0x5f4>
1001107c:	01000804 	movi	r4,32
10011080:	2089c83a 	sub	r4,r4,r2
10011084:	2912983a 	sll	r9,r5,r4
10011088:	3090d83a 	srl	r8,r6,r2
1001108c:	3108983a 	sll	r4,r6,r4
10011090:	2884d83a 	srl	r2,r5,r2
10011094:	4a12b03a 	or	r9,r9,r8
10011098:	2008c03a 	cmpne	r4,r4,zero
1001109c:	4912b03a 	or	r9,r9,r4
100110a0:	003f4e06 	br	10010ddc <__alt_data_end+0xf8010ddc>
100110a4:	1c48b03a 	or	r4,r3,r17
100110a8:	20003c26 	beq	r4,zero,1001119c <__subdf3+0x62c>
100110ac:	0084303a 	nor	r2,zero,r2
100110b0:	1000381e 	bne	r2,zero,10011194 <__subdf3+0x624>
100110b4:	3463c83a 	sub	r17,r6,r17
100110b8:	28c5c83a 	sub	r2,r5,r3
100110bc:	344d803a 	cmpltu	r6,r6,r17
100110c0:	1187c83a 	sub	r3,r2,r6
100110c4:	4821883a 	mov	r16,r9
100110c8:	3825883a 	mov	r18,r7
100110cc:	003f0606 	br	10010ce8 <__alt_data_end+0xf8010ce8>
100110d0:	2023883a 	mov	r17,r4
100110d4:	003f0906 	br	10010cfc <__alt_data_end+0xf8010cfc>
100110d8:	0101ffc4 	movi	r4,2047
100110dc:	813f3a1e 	bne	r16,r4,10010dc8 <__alt_data_end+0xf8010dc8>
100110e0:	003ec406 	br	10010bf4 <__alt_data_end+0xf8010bf4>
100110e4:	0005883a 	mov	r2,zero
100110e8:	003fb106 	br	10010fb0 <__alt_data_end+0xf8010fb0>
100110ec:	0005883a 	mov	r2,zero
100110f0:	003fbc06 	br	10010fe4 <__alt_data_end+0xf8010fe4>
100110f4:	1c44b03a 	or	r2,r3,r17
100110f8:	80008e1e 	bne	r16,zero,10011334 <__subdf3+0x7c4>
100110fc:	1000c826 	beq	r2,zero,10011420 <__subdf3+0x8b0>
10011100:	2984b03a 	or	r2,r5,r6
10011104:	103ebb26 	beq	r2,zero,10010bf4 <__alt_data_end+0xf8010bf4>
10011108:	8989883a 	add	r4,r17,r6
1001110c:	1945883a 	add	r2,r3,r5
10011110:	2447803a 	cmpltu	r3,r4,r17
10011114:	1887883a 	add	r3,r3,r2
10011118:	1880202c 	andhi	r2,r3,128
1001111c:	2023883a 	mov	r17,r4
10011120:	103f1626 	beq	r2,zero,10010d7c <__alt_data_end+0xf8010d7c>
10011124:	00bfe034 	movhi	r2,65408
10011128:	10bfffc4 	addi	r2,r2,-1
1001112c:	5021883a 	mov	r16,r10
10011130:	1886703a 	and	r3,r3,r2
10011134:	003eaf06 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10011138:	3825883a 	mov	r18,r7
1001113c:	003f0f06 	br	10010d7c <__alt_data_end+0xf8010d7c>
10011140:	1c44b03a 	or	r2,r3,r17
10011144:	8000251e 	bne	r16,zero,100111dc <__subdf3+0x66c>
10011148:	1000661e 	bne	r2,zero,100112e4 <__subdf3+0x774>
1001114c:	2990b03a 	or	r8,r5,r6
10011150:	40009626 	beq	r8,zero,100113ac <__subdf3+0x83c>
10011154:	2807883a 	mov	r3,r5
10011158:	3023883a 	mov	r17,r6
1001115c:	3825883a 	mov	r18,r7
10011160:	003ea406 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10011164:	127ff804 	addi	r9,r2,-32
10011168:	01000804 	movi	r4,32
1001116c:	2a52d83a 	srl	r9,r5,r9
10011170:	11008c26 	beq	r2,r4,100113a4 <__subdf3+0x834>
10011174:	01001004 	movi	r4,64
10011178:	2085c83a 	sub	r2,r4,r2
1001117c:	2884983a 	sll	r2,r5,r2
10011180:	118cb03a 	or	r6,r2,r6
10011184:	300cc03a 	cmpne	r6,r6,zero
10011188:	4992b03a 	or	r9,r9,r6
1001118c:	0005883a 	mov	r2,zero
10011190:	003f1206 	br	10010ddc <__alt_data_end+0xf8010ddc>
10011194:	0101ffc4 	movi	r4,2047
10011198:	493f9c1e 	bne	r9,r4,1001100c <__alt_data_end+0xf801100c>
1001119c:	2807883a 	mov	r3,r5
100111a0:	3023883a 	mov	r17,r6
100111a4:	4821883a 	mov	r16,r9
100111a8:	3825883a 	mov	r18,r7
100111ac:	003e9106 	br	10010bf4 <__alt_data_end+0xf8010bf4>
100111b0:	80001f1e 	bne	r16,zero,10011230 <__subdf3+0x6c0>
100111b4:	1c48b03a 	or	r4,r3,r17
100111b8:	20005a26 	beq	r4,zero,10011324 <__subdf3+0x7b4>
100111bc:	0084303a 	nor	r2,zero,r2
100111c0:	1000561e 	bne	r2,zero,1001131c <__subdf3+0x7ac>
100111c4:	89a3883a 	add	r17,r17,r6
100111c8:	1945883a 	add	r2,r3,r5
100111cc:	898d803a 	cmpltu	r6,r17,r6
100111d0:	3087883a 	add	r3,r6,r2
100111d4:	4821883a 	mov	r16,r9
100111d8:	003f0506 	br	10010df0 <__alt_data_end+0xf8010df0>
100111dc:	10002b1e 	bne	r2,zero,1001128c <__subdf3+0x71c>
100111e0:	2984b03a 	or	r2,r5,r6
100111e4:	10008026 	beq	r2,zero,100113e8 <__subdf3+0x878>
100111e8:	2807883a 	mov	r3,r5
100111ec:	3023883a 	mov	r17,r6
100111f0:	3825883a 	mov	r18,r7
100111f4:	0401ffc4 	movi	r16,2047
100111f8:	003e7e06 	br	10010bf4 <__alt_data_end+0xf8010bf4>
100111fc:	3809883a 	mov	r4,r7
10011200:	0011883a 	mov	r8,zero
10011204:	0005883a 	mov	r2,zero
10011208:	003ee306 	br	10010d98 <__alt_data_end+0xf8010d98>
1001120c:	1c62b03a 	or	r17,r3,r17
10011210:	8822c03a 	cmpne	r17,r17,zero
10011214:	0005883a 	mov	r2,zero
10011218:	003f8906 	br	10011040 <__alt_data_end+0xf8011040>
1001121c:	3809883a 	mov	r4,r7
10011220:	4821883a 	mov	r16,r9
10011224:	0011883a 	mov	r8,zero
10011228:	0005883a 	mov	r2,zero
1001122c:	003eda06 	br	10010d98 <__alt_data_end+0xf8010d98>
10011230:	0101ffc4 	movi	r4,2047
10011234:	49003b26 	beq	r9,r4,10011324 <__subdf3+0x7b4>
10011238:	0085c83a 	sub	r2,zero,r2
1001123c:	18c02034 	orhi	r3,r3,128
10011240:	01000e04 	movi	r4,56
10011244:	20806e16 	blt	r4,r2,10011400 <__subdf3+0x890>
10011248:	010007c4 	movi	r4,31
1001124c:	20807716 	blt	r4,r2,1001142c <__subdf3+0x8bc>
10011250:	01000804 	movi	r4,32
10011254:	2089c83a 	sub	r4,r4,r2
10011258:	1914983a 	sll	r10,r3,r4
1001125c:	8890d83a 	srl	r8,r17,r2
10011260:	8908983a 	sll	r4,r17,r4
10011264:	1884d83a 	srl	r2,r3,r2
10011268:	5222b03a 	or	r17,r10,r8
1001126c:	2006c03a 	cmpne	r3,r4,zero
10011270:	88e2b03a 	or	r17,r17,r3
10011274:	89a3883a 	add	r17,r17,r6
10011278:	1145883a 	add	r2,r2,r5
1001127c:	898d803a 	cmpltu	r6,r17,r6
10011280:	3087883a 	add	r3,r6,r2
10011284:	4821883a 	mov	r16,r9
10011288:	003ed906 	br	10010df0 <__alt_data_end+0xf8010df0>
1001128c:	2984b03a 	or	r2,r5,r6
10011290:	10004226 	beq	r2,zero,1001139c <__subdf3+0x82c>
10011294:	1808d0fa 	srli	r4,r3,3
10011298:	8822d0fa 	srli	r17,r17,3
1001129c:	1806977a 	slli	r3,r3,29
100112a0:	2080022c 	andhi	r2,r4,8
100112a4:	1c62b03a 	or	r17,r3,r17
100112a8:	10000826 	beq	r2,zero,100112cc <__subdf3+0x75c>
100112ac:	2812d0fa 	srli	r9,r5,3
100112b0:	4880022c 	andhi	r2,r9,8
100112b4:	1000051e 	bne	r2,zero,100112cc <__subdf3+0x75c>
100112b8:	300cd0fa 	srli	r6,r6,3
100112bc:	2804977a 	slli	r2,r5,29
100112c0:	4809883a 	mov	r4,r9
100112c4:	3825883a 	mov	r18,r7
100112c8:	11a2b03a 	or	r17,r2,r6
100112cc:	8806d77a 	srli	r3,r17,29
100112d0:	200890fa 	slli	r4,r4,3
100112d4:	882290fa 	slli	r17,r17,3
100112d8:	0401ffc4 	movi	r16,2047
100112dc:	1906b03a 	or	r3,r3,r4
100112e0:	003e4406 	br	10010bf4 <__alt_data_end+0xf8010bf4>
100112e4:	2984b03a 	or	r2,r5,r6
100112e8:	103e4226 	beq	r2,zero,10010bf4 <__alt_data_end+0xf8010bf4>
100112ec:	8989c83a 	sub	r4,r17,r6
100112f0:	8911803a 	cmpltu	r8,r17,r4
100112f4:	1945c83a 	sub	r2,r3,r5
100112f8:	1205c83a 	sub	r2,r2,r8
100112fc:	1200202c 	andhi	r8,r2,128
10011300:	403e9a26 	beq	r8,zero,10010d6c <__alt_data_end+0xf8010d6c>
10011304:	3463c83a 	sub	r17,r6,r17
10011308:	28c5c83a 	sub	r2,r5,r3
1001130c:	344d803a 	cmpltu	r6,r6,r17
10011310:	1187c83a 	sub	r3,r2,r6
10011314:	3825883a 	mov	r18,r7
10011318:	003e3606 	br	10010bf4 <__alt_data_end+0xf8010bf4>
1001131c:	0101ffc4 	movi	r4,2047
10011320:	493fc71e 	bne	r9,r4,10011240 <__alt_data_end+0xf8011240>
10011324:	2807883a 	mov	r3,r5
10011328:	3023883a 	mov	r17,r6
1001132c:	4821883a 	mov	r16,r9
10011330:	003e3006 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10011334:	10003626 	beq	r2,zero,10011410 <__subdf3+0x8a0>
10011338:	2984b03a 	or	r2,r5,r6
1001133c:	10001726 	beq	r2,zero,1001139c <__subdf3+0x82c>
10011340:	1808d0fa 	srli	r4,r3,3
10011344:	8822d0fa 	srli	r17,r17,3
10011348:	1806977a 	slli	r3,r3,29
1001134c:	2080022c 	andhi	r2,r4,8
10011350:	1c62b03a 	or	r17,r3,r17
10011354:	10000726 	beq	r2,zero,10011374 <__subdf3+0x804>
10011358:	2812d0fa 	srli	r9,r5,3
1001135c:	4880022c 	andhi	r2,r9,8
10011360:	1000041e 	bne	r2,zero,10011374 <__subdf3+0x804>
10011364:	300cd0fa 	srli	r6,r6,3
10011368:	2804977a 	slli	r2,r5,29
1001136c:	4809883a 	mov	r4,r9
10011370:	11a2b03a 	or	r17,r2,r6
10011374:	8806d77a 	srli	r3,r17,29
10011378:	200890fa 	slli	r4,r4,3
1001137c:	882290fa 	slli	r17,r17,3
10011380:	3825883a 	mov	r18,r7
10011384:	1906b03a 	or	r3,r3,r4
10011388:	0401ffc4 	movi	r16,2047
1001138c:	003e1906 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10011390:	000b883a 	mov	r5,zero
10011394:	0005883a 	mov	r2,zero
10011398:	003e2e06 	br	10010c54 <__alt_data_end+0xf8010c54>
1001139c:	0401ffc4 	movi	r16,2047
100113a0:	003e1406 	br	10010bf4 <__alt_data_end+0xf8010bf4>
100113a4:	0005883a 	mov	r2,zero
100113a8:	003f7506 	br	10011180 <__alt_data_end+0xf8011180>
100113ac:	0005883a 	mov	r2,zero
100113b0:	0009883a 	mov	r4,zero
100113b4:	003e7806 	br	10010d98 <__alt_data_end+0xf8010d98>
100113b8:	123ff804 	addi	r8,r2,-32
100113bc:	01000804 	movi	r4,32
100113c0:	1a10d83a 	srl	r8,r3,r8
100113c4:	11002526 	beq	r2,r4,1001145c <__subdf3+0x8ec>
100113c8:	01001004 	movi	r4,64
100113cc:	2085c83a 	sub	r2,r4,r2
100113d0:	1884983a 	sll	r2,r3,r2
100113d4:	1444b03a 	or	r2,r2,r17
100113d8:	1004c03a 	cmpne	r2,r2,zero
100113dc:	40a2b03a 	or	r17,r8,r2
100113e0:	0005883a 	mov	r2,zero
100113e4:	003f1606 	br	10011040 <__alt_data_end+0xf8011040>
100113e8:	02000434 	movhi	r8,16
100113ec:	0009883a 	mov	r4,zero
100113f0:	423fffc4 	addi	r8,r8,-1
100113f4:	00bfffc4 	movi	r2,-1
100113f8:	0401ffc4 	movi	r16,2047
100113fc:	003e6606 	br	10010d98 <__alt_data_end+0xf8010d98>
10011400:	1c62b03a 	or	r17,r3,r17
10011404:	8822c03a 	cmpne	r17,r17,zero
10011408:	0005883a 	mov	r2,zero
1001140c:	003f9906 	br	10011274 <__alt_data_end+0xf8011274>
10011410:	2807883a 	mov	r3,r5
10011414:	3023883a 	mov	r17,r6
10011418:	0401ffc4 	movi	r16,2047
1001141c:	003df506 	br	10010bf4 <__alt_data_end+0xf8010bf4>
10011420:	2807883a 	mov	r3,r5
10011424:	3023883a 	mov	r17,r6
10011428:	003df206 	br	10010bf4 <__alt_data_end+0xf8010bf4>
1001142c:	123ff804 	addi	r8,r2,-32
10011430:	01000804 	movi	r4,32
10011434:	1a10d83a 	srl	r8,r3,r8
10011438:	11000a26 	beq	r2,r4,10011464 <__subdf3+0x8f4>
1001143c:	01001004 	movi	r4,64
10011440:	2085c83a 	sub	r2,r4,r2
10011444:	1884983a 	sll	r2,r3,r2
10011448:	1444b03a 	or	r2,r2,r17
1001144c:	1004c03a 	cmpne	r2,r2,zero
10011450:	40a2b03a 	or	r17,r8,r2
10011454:	0005883a 	mov	r2,zero
10011458:	003f8606 	br	10011274 <__alt_data_end+0xf8011274>
1001145c:	0005883a 	mov	r2,zero
10011460:	003fdc06 	br	100113d4 <__alt_data_end+0xf80113d4>
10011464:	0005883a 	mov	r2,zero
10011468:	003ff706 	br	10011448 <__alt_data_end+0xf8011448>

1001146c <__fixdfsi>:
1001146c:	280cd53a 	srli	r6,r5,20
10011470:	00c00434 	movhi	r3,16
10011474:	18ffffc4 	addi	r3,r3,-1
10011478:	3181ffcc 	andi	r6,r6,2047
1001147c:	01c0ff84 	movi	r7,1022
10011480:	28c6703a 	and	r3,r5,r3
10011484:	280ad7fa 	srli	r5,r5,31
10011488:	3980120e 	bge	r7,r6,100114d4 <__fixdfsi+0x68>
1001148c:	00810744 	movi	r2,1053
10011490:	11800c16 	blt	r2,r6,100114c4 <__fixdfsi+0x58>
10011494:	00810cc4 	movi	r2,1075
10011498:	1185c83a 	sub	r2,r2,r6
1001149c:	01c007c4 	movi	r7,31
100114a0:	18c00434 	orhi	r3,r3,16
100114a4:	38800d16 	blt	r7,r2,100114dc <__fixdfsi+0x70>
100114a8:	31befb44 	addi	r6,r6,-1043
100114ac:	2084d83a 	srl	r2,r4,r2
100114b0:	1986983a 	sll	r3,r3,r6
100114b4:	1884b03a 	or	r2,r3,r2
100114b8:	28000726 	beq	r5,zero,100114d8 <__fixdfsi+0x6c>
100114bc:	0085c83a 	sub	r2,zero,r2
100114c0:	f800283a 	ret
100114c4:	00a00034 	movhi	r2,32768
100114c8:	10bfffc4 	addi	r2,r2,-1
100114cc:	2885883a 	add	r2,r5,r2
100114d0:	f800283a 	ret
100114d4:	0005883a 	mov	r2,zero
100114d8:	f800283a 	ret
100114dc:	008104c4 	movi	r2,1043
100114e0:	1185c83a 	sub	r2,r2,r6
100114e4:	1884d83a 	srl	r2,r3,r2
100114e8:	003ff306 	br	100114b8 <__alt_data_end+0xf80114b8>

100114ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100114ec:	defffe04 	addi	sp,sp,-8
100114f0:	dfc00115 	stw	ra,4(sp)
100114f4:	df000015 	stw	fp,0(sp)
100114f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100114fc:	d0a00c17 	ldw	r2,-32720(gp)
10011500:	10000326 	beq	r2,zero,10011510 <alt_get_errno+0x24>
10011504:	d0a00c17 	ldw	r2,-32720(gp)
10011508:	103ee83a 	callr	r2
1001150c:	00000106 	br	10011514 <alt_get_errno+0x28>
10011510:	d0a6e004 	addi	r2,gp,-25728
}
10011514:	e037883a 	mov	sp,fp
10011518:	dfc00117 	ldw	ra,4(sp)
1001151c:	df000017 	ldw	fp,0(sp)
10011520:	dec00204 	addi	sp,sp,8
10011524:	f800283a 	ret

10011528 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10011528:	defffb04 	addi	sp,sp,-20
1001152c:	dfc00415 	stw	ra,16(sp)
10011530:	df000315 	stw	fp,12(sp)
10011534:	df000304 	addi	fp,sp,12
10011538:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1001153c:	e0bfff17 	ldw	r2,-4(fp)
10011540:	10000816 	blt	r2,zero,10011564 <close+0x3c>
10011544:	01400304 	movi	r5,12
10011548:	e13fff17 	ldw	r4,-4(fp)
1001154c:	00052300 	call	10005230 <__mulsi3>
10011550:	1007883a 	mov	r3,r2
10011554:	00840074 	movhi	r2,4097
10011558:	10943b04 	addi	r2,r2,20716
1001155c:	1885883a 	add	r2,r3,r2
10011560:	00000106 	br	10011568 <close+0x40>
10011564:	0005883a 	mov	r2,zero
10011568:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1001156c:	e0bffd17 	ldw	r2,-12(fp)
10011570:	10001926 	beq	r2,zero,100115d8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10011574:	e0bffd17 	ldw	r2,-12(fp)
10011578:	10800017 	ldw	r2,0(r2)
1001157c:	10800417 	ldw	r2,16(r2)
10011580:	10000626 	beq	r2,zero,1001159c <close+0x74>
10011584:	e0bffd17 	ldw	r2,-12(fp)
10011588:	10800017 	ldw	r2,0(r2)
1001158c:	10800417 	ldw	r2,16(r2)
10011590:	e13ffd17 	ldw	r4,-12(fp)
10011594:	103ee83a 	callr	r2
10011598:	00000106 	br	100115a0 <close+0x78>
1001159c:	0005883a 	mov	r2,zero
100115a0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100115a4:	e13fff17 	ldw	r4,-4(fp)
100115a8:	0011c100 	call	10011c10 <alt_release_fd>
    if (rval < 0)
100115ac:	e0bffe17 	ldw	r2,-8(fp)
100115b0:	1000070e 	bge	r2,zero,100115d0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100115b4:	00114ec0 	call	100114ec <alt_get_errno>
100115b8:	1007883a 	mov	r3,r2
100115bc:	e0bffe17 	ldw	r2,-8(fp)
100115c0:	0085c83a 	sub	r2,zero,r2
100115c4:	18800015 	stw	r2,0(r3)
      return -1;
100115c8:	00bfffc4 	movi	r2,-1
100115cc:	00000706 	br	100115ec <close+0xc4>
    }
    return 0;
100115d0:	0005883a 	mov	r2,zero
100115d4:	00000506 	br	100115ec <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100115d8:	00114ec0 	call	100114ec <alt_get_errno>
100115dc:	1007883a 	mov	r3,r2
100115e0:	00801444 	movi	r2,81
100115e4:	18800015 	stw	r2,0(r3)
    return -1;
100115e8:	00bfffc4 	movi	r2,-1
  }
}
100115ec:	e037883a 	mov	sp,fp
100115f0:	dfc00117 	ldw	ra,4(sp)
100115f4:	df000017 	ldw	fp,0(sp)
100115f8:	dec00204 	addi	sp,sp,8
100115fc:	f800283a 	ret

10011600 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011600:	defffc04 	addi	sp,sp,-16
10011604:	df000315 	stw	fp,12(sp)
10011608:	df000304 	addi	fp,sp,12
1001160c:	e13ffd15 	stw	r4,-12(fp)
10011610:	e17ffe15 	stw	r5,-8(fp)
10011614:	e1bfff15 	stw	r6,-4(fp)
  return len;
10011618:	e0bfff17 	ldw	r2,-4(fp)
}
1001161c:	e037883a 	mov	sp,fp
10011620:	df000017 	ldw	fp,0(sp)
10011624:	dec00104 	addi	sp,sp,4
10011628:	f800283a 	ret

1001162c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001162c:	defffe04 	addi	sp,sp,-8
10011630:	dfc00115 	stw	ra,4(sp)
10011634:	df000015 	stw	fp,0(sp)
10011638:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001163c:	d0a00c17 	ldw	r2,-32720(gp)
10011640:	10000326 	beq	r2,zero,10011650 <alt_get_errno+0x24>
10011644:	d0a00c17 	ldw	r2,-32720(gp)
10011648:	103ee83a 	callr	r2
1001164c:	00000106 	br	10011654 <alt_get_errno+0x28>
10011650:	d0a6e004 	addi	r2,gp,-25728
}
10011654:	e037883a 	mov	sp,fp
10011658:	dfc00117 	ldw	ra,4(sp)
1001165c:	df000017 	ldw	fp,0(sp)
10011660:	dec00204 	addi	sp,sp,8
10011664:	f800283a 	ret

10011668 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10011668:	defffb04 	addi	sp,sp,-20
1001166c:	dfc00415 	stw	ra,16(sp)
10011670:	df000315 	stw	fp,12(sp)
10011674:	df000304 	addi	fp,sp,12
10011678:	e13ffe15 	stw	r4,-8(fp)
1001167c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011680:	e0bffe17 	ldw	r2,-8(fp)
10011684:	10000816 	blt	r2,zero,100116a8 <fstat+0x40>
10011688:	01400304 	movi	r5,12
1001168c:	e13ffe17 	ldw	r4,-8(fp)
10011690:	00052300 	call	10005230 <__mulsi3>
10011694:	1007883a 	mov	r3,r2
10011698:	00840074 	movhi	r2,4097
1001169c:	10943b04 	addi	r2,r2,20716
100116a0:	1885883a 	add	r2,r3,r2
100116a4:	00000106 	br	100116ac <fstat+0x44>
100116a8:	0005883a 	mov	r2,zero
100116ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100116b0:	e0bffd17 	ldw	r2,-12(fp)
100116b4:	10001026 	beq	r2,zero,100116f8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100116b8:	e0bffd17 	ldw	r2,-12(fp)
100116bc:	10800017 	ldw	r2,0(r2)
100116c0:	10800817 	ldw	r2,32(r2)
100116c4:	10000726 	beq	r2,zero,100116e4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100116c8:	e0bffd17 	ldw	r2,-12(fp)
100116cc:	10800017 	ldw	r2,0(r2)
100116d0:	10800817 	ldw	r2,32(r2)
100116d4:	e17fff17 	ldw	r5,-4(fp)
100116d8:	e13ffd17 	ldw	r4,-12(fp)
100116dc:	103ee83a 	callr	r2
100116e0:	00000a06 	br	1001170c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100116e4:	e0bfff17 	ldw	r2,-4(fp)
100116e8:	00c80004 	movi	r3,8192
100116ec:	10c00115 	stw	r3,4(r2)
      return 0;
100116f0:	0005883a 	mov	r2,zero
100116f4:	00000506 	br	1001170c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100116f8:	001162c0 	call	1001162c <alt_get_errno>
100116fc:	1007883a 	mov	r3,r2
10011700:	00801444 	movi	r2,81
10011704:	18800015 	stw	r2,0(r3)
    return -1;
10011708:	00bfffc4 	movi	r2,-1
  }
}
1001170c:	e037883a 	mov	sp,fp
10011710:	dfc00117 	ldw	ra,4(sp)
10011714:	df000017 	ldw	fp,0(sp)
10011718:	dec00204 	addi	sp,sp,8
1001171c:	f800283a 	ret

10011720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011720:	defffe04 	addi	sp,sp,-8
10011724:	dfc00115 	stw	ra,4(sp)
10011728:	df000015 	stw	fp,0(sp)
1001172c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011730:	d0a00c17 	ldw	r2,-32720(gp)
10011734:	10000326 	beq	r2,zero,10011744 <alt_get_errno+0x24>
10011738:	d0a00c17 	ldw	r2,-32720(gp)
1001173c:	103ee83a 	callr	r2
10011740:	00000106 	br	10011748 <alt_get_errno+0x28>
10011744:	d0a6e004 	addi	r2,gp,-25728
}
10011748:	e037883a 	mov	sp,fp
1001174c:	dfc00117 	ldw	ra,4(sp)
10011750:	df000017 	ldw	fp,0(sp)
10011754:	dec00204 	addi	sp,sp,8
10011758:	f800283a 	ret

1001175c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1001175c:	deffed04 	addi	sp,sp,-76
10011760:	dfc01215 	stw	ra,72(sp)
10011764:	df001115 	stw	fp,68(sp)
10011768:	df001104 	addi	fp,sp,68
1001176c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011770:	e0bfff17 	ldw	r2,-4(fp)
10011774:	10000816 	blt	r2,zero,10011798 <isatty+0x3c>
10011778:	01400304 	movi	r5,12
1001177c:	e13fff17 	ldw	r4,-4(fp)
10011780:	00052300 	call	10005230 <__mulsi3>
10011784:	1007883a 	mov	r3,r2
10011788:	00840074 	movhi	r2,4097
1001178c:	10943b04 	addi	r2,r2,20716
10011790:	1885883a 	add	r2,r3,r2
10011794:	00000106 	br	1001179c <isatty+0x40>
10011798:	0005883a 	mov	r2,zero
1001179c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100117a0:	e0bfef17 	ldw	r2,-68(fp)
100117a4:	10000e26 	beq	r2,zero,100117e0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100117a8:	e0bfef17 	ldw	r2,-68(fp)
100117ac:	10800017 	ldw	r2,0(r2)
100117b0:	10800817 	ldw	r2,32(r2)
100117b4:	1000021e 	bne	r2,zero,100117c0 <isatty+0x64>
    {
      return 1;
100117b8:	00800044 	movi	r2,1
100117bc:	00000d06 	br	100117f4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100117c0:	e0bff004 	addi	r2,fp,-64
100117c4:	100b883a 	mov	r5,r2
100117c8:	e13fff17 	ldw	r4,-4(fp)
100117cc:	00116680 	call	10011668 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100117d0:	e0bff117 	ldw	r2,-60(fp)
100117d4:	10880020 	cmpeqi	r2,r2,8192
100117d8:	10803fcc 	andi	r2,r2,255
100117dc:	00000506 	br	100117f4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100117e0:	00117200 	call	10011720 <alt_get_errno>
100117e4:	1007883a 	mov	r3,r2
100117e8:	00801444 	movi	r2,81
100117ec:	18800015 	stw	r2,0(r3)
    return 0;
100117f0:	0005883a 	mov	r2,zero
  }
}
100117f4:	e037883a 	mov	sp,fp
100117f8:	dfc00117 	ldw	ra,4(sp)
100117fc:	df000017 	ldw	fp,0(sp)
10011800:	dec00204 	addi	sp,sp,8
10011804:	f800283a 	ret

10011808 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10011808:	defffc04 	addi	sp,sp,-16
1001180c:	df000315 	stw	fp,12(sp)
10011810:	df000304 	addi	fp,sp,12
10011814:	e13ffd15 	stw	r4,-12(fp)
10011818:	e17ffe15 	stw	r5,-8(fp)
1001181c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10011820:	e0fffe17 	ldw	r3,-8(fp)
10011824:	e0bffd17 	ldw	r2,-12(fp)
10011828:	18800c26 	beq	r3,r2,1001185c <alt_load_section+0x54>
  {
    while( to != end )
1001182c:	00000806 	br	10011850 <alt_load_section+0x48>
    {
      *to++ = *from++;
10011830:	e0bffe17 	ldw	r2,-8(fp)
10011834:	10c00104 	addi	r3,r2,4
10011838:	e0fffe15 	stw	r3,-8(fp)
1001183c:	e0fffd17 	ldw	r3,-12(fp)
10011840:	19000104 	addi	r4,r3,4
10011844:	e13ffd15 	stw	r4,-12(fp)
10011848:	18c00017 	ldw	r3,0(r3)
1001184c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10011850:	e0fffe17 	ldw	r3,-8(fp)
10011854:	e0bfff17 	ldw	r2,-4(fp)
10011858:	18bff51e 	bne	r3,r2,10011830 <__alt_data_end+0xf8011830>
    {
      *to++ = *from++;
    }
  }
}
1001185c:	0001883a 	nop
10011860:	e037883a 	mov	sp,fp
10011864:	df000017 	ldw	fp,0(sp)
10011868:	dec00104 	addi	sp,sp,4
1001186c:	f800283a 	ret

10011870 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10011870:	defffe04 	addi	sp,sp,-8
10011874:	dfc00115 	stw	ra,4(sp)
10011878:	df000015 	stw	fp,0(sp)
1001187c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10011880:	01840074 	movhi	r6,4097
10011884:	3198c404 	addi	r6,r6,25360
10011888:	01440074 	movhi	r5,4097
1001188c:	29520804 	addi	r5,r5,18464
10011890:	01040074 	movhi	r4,4097
10011894:	2118c404 	addi	r4,r4,25360
10011898:	00118080 	call	10011808 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1001189c:	01840034 	movhi	r6,4096
100118a0:	31808c04 	addi	r6,r6,560
100118a4:	01440034 	movhi	r5,4096
100118a8:	29400804 	addi	r5,r5,32
100118ac:	01040034 	movhi	r4,4096
100118b0:	21000804 	addi	r4,r4,32
100118b4:	00118080 	call	10011808 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100118b8:	01840074 	movhi	r6,4097
100118bc:	31920804 	addi	r6,r6,18464
100118c0:	01440074 	movhi	r5,4097
100118c4:	294f7004 	addi	r5,r5,15808
100118c8:	01040074 	movhi	r4,4097
100118cc:	210f7004 	addi	r4,r4,15808
100118d0:	00118080 	call	10011808 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100118d4:	0012d080 	call	10012d08 <alt_dcache_flush_all>
  alt_icache_flush_all();
100118d8:	0012ec80 	call	10012ec8 <alt_icache_flush_all>
}
100118dc:	0001883a 	nop
100118e0:	e037883a 	mov	sp,fp
100118e4:	dfc00117 	ldw	ra,4(sp)
100118e8:	df000017 	ldw	fp,0(sp)
100118ec:	dec00204 	addi	sp,sp,8
100118f0:	f800283a 	ret

100118f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100118f4:	defffe04 	addi	sp,sp,-8
100118f8:	dfc00115 	stw	ra,4(sp)
100118fc:	df000015 	stw	fp,0(sp)
10011900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011904:	d0a00c17 	ldw	r2,-32720(gp)
10011908:	10000326 	beq	r2,zero,10011918 <alt_get_errno+0x24>
1001190c:	d0a00c17 	ldw	r2,-32720(gp)
10011910:	103ee83a 	callr	r2
10011914:	00000106 	br	1001191c <alt_get_errno+0x28>
10011918:	d0a6e004 	addi	r2,gp,-25728
}
1001191c:	e037883a 	mov	sp,fp
10011920:	dfc00117 	ldw	ra,4(sp)
10011924:	df000017 	ldw	fp,0(sp)
10011928:	dec00204 	addi	sp,sp,8
1001192c:	f800283a 	ret

10011930 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10011930:	defff904 	addi	sp,sp,-28
10011934:	dfc00615 	stw	ra,24(sp)
10011938:	df000515 	stw	fp,20(sp)
1001193c:	df000504 	addi	fp,sp,20
10011940:	e13ffd15 	stw	r4,-12(fp)
10011944:	e17ffe15 	stw	r5,-8(fp)
10011948:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1001194c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011950:	e0bffd17 	ldw	r2,-12(fp)
10011954:	10000816 	blt	r2,zero,10011978 <lseek+0x48>
10011958:	01400304 	movi	r5,12
1001195c:	e13ffd17 	ldw	r4,-12(fp)
10011960:	00052300 	call	10005230 <__mulsi3>
10011964:	1007883a 	mov	r3,r2
10011968:	00840074 	movhi	r2,4097
1001196c:	10943b04 	addi	r2,r2,20716
10011970:	1885883a 	add	r2,r3,r2
10011974:	00000106 	br	1001197c <lseek+0x4c>
10011978:	0005883a 	mov	r2,zero
1001197c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10011980:	e0bffc17 	ldw	r2,-16(fp)
10011984:	10001026 	beq	r2,zero,100119c8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10011988:	e0bffc17 	ldw	r2,-16(fp)
1001198c:	10800017 	ldw	r2,0(r2)
10011990:	10800717 	ldw	r2,28(r2)
10011994:	10000926 	beq	r2,zero,100119bc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10011998:	e0bffc17 	ldw	r2,-16(fp)
1001199c:	10800017 	ldw	r2,0(r2)
100119a0:	10800717 	ldw	r2,28(r2)
100119a4:	e1bfff17 	ldw	r6,-4(fp)
100119a8:	e17ffe17 	ldw	r5,-8(fp)
100119ac:	e13ffc17 	ldw	r4,-16(fp)
100119b0:	103ee83a 	callr	r2
100119b4:	e0bffb15 	stw	r2,-20(fp)
100119b8:	00000506 	br	100119d0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100119bc:	00bfde84 	movi	r2,-134
100119c0:	e0bffb15 	stw	r2,-20(fp)
100119c4:	00000206 	br	100119d0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100119c8:	00bfebc4 	movi	r2,-81
100119cc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100119d0:	e0bffb17 	ldw	r2,-20(fp)
100119d4:	1000070e 	bge	r2,zero,100119f4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100119d8:	00118f40 	call	100118f4 <alt_get_errno>
100119dc:	1007883a 	mov	r3,r2
100119e0:	e0bffb17 	ldw	r2,-20(fp)
100119e4:	0085c83a 	sub	r2,zero,r2
100119e8:	18800015 	stw	r2,0(r3)
    rc = -1;
100119ec:	00bfffc4 	movi	r2,-1
100119f0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100119f4:	e0bffb17 	ldw	r2,-20(fp)
}
100119f8:	e037883a 	mov	sp,fp
100119fc:	dfc00117 	ldw	ra,4(sp)
10011a00:	df000017 	ldw	fp,0(sp)
10011a04:	dec00204 	addi	sp,sp,8
10011a08:	f800283a 	ret

10011a0c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10011a0c:	defffd04 	addi	sp,sp,-12
10011a10:	dfc00215 	stw	ra,8(sp)
10011a14:	df000115 	stw	fp,4(sp)
10011a18:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10011a1c:	0009883a 	mov	r4,zero
10011a20:	0011f980 	call	10011f98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10011a24:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10011a28:	0011fd00 	call	10011fd0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10011a2c:	01840074 	movhi	r6,4097
10011a30:	3191fe04 	addi	r6,r6,18424
10011a34:	01440074 	movhi	r5,4097
10011a38:	2951fe04 	addi	r5,r5,18424
10011a3c:	01040074 	movhi	r4,4097
10011a40:	2111fe04 	addi	r4,r4,18424
10011a44:	001326c0 	call	1001326c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10011a48:	0012e080 	call	10012e08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10011a4c:	01040074 	movhi	r4,4097
10011a50:	210b9a04 	addi	r4,r4,11880
10011a54:	0013a2c0 	call	10013a2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10011a58:	d0a6e117 	ldw	r2,-25724(gp)
10011a5c:	d0e6e217 	ldw	r3,-25720(gp)
10011a60:	d126e317 	ldw	r4,-25716(gp)
10011a64:	200d883a 	mov	r6,r4
10011a68:	180b883a 	mov	r5,r3
10011a6c:	1009883a 	mov	r4,r2
10011a70:	0000f580 	call	10000f58 <main>
10011a74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10011a78:	01000044 	movi	r4,1
10011a7c:	00115280 	call	10011528 <close>
  exit (result);
10011a80:	e13fff17 	ldw	r4,-4(fp)
10011a84:	0013a400 	call	10013a40 <exit>

10011a88 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10011a88:	defffe04 	addi	sp,sp,-8
10011a8c:	df000115 	stw	fp,4(sp)
10011a90:	df000104 	addi	fp,sp,4
10011a94:	e13fff15 	stw	r4,-4(fp)
}
10011a98:	0001883a 	nop
10011a9c:	e037883a 	mov	sp,fp
10011aa0:	df000017 	ldw	fp,0(sp)
10011aa4:	dec00104 	addi	sp,sp,4
10011aa8:	f800283a 	ret

10011aac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10011aac:	defffe04 	addi	sp,sp,-8
10011ab0:	df000115 	stw	fp,4(sp)
10011ab4:	df000104 	addi	fp,sp,4
10011ab8:	e13fff15 	stw	r4,-4(fp)
}
10011abc:	0001883a 	nop
10011ac0:	e037883a 	mov	sp,fp
10011ac4:	df000017 	ldw	fp,0(sp)
10011ac8:	dec00104 	addi	sp,sp,4
10011acc:	f800283a 	ret

10011ad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011ad0:	defffe04 	addi	sp,sp,-8
10011ad4:	dfc00115 	stw	ra,4(sp)
10011ad8:	df000015 	stw	fp,0(sp)
10011adc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011ae0:	d0a00c17 	ldw	r2,-32720(gp)
10011ae4:	10000326 	beq	r2,zero,10011af4 <alt_get_errno+0x24>
10011ae8:	d0a00c17 	ldw	r2,-32720(gp)
10011aec:	103ee83a 	callr	r2
10011af0:	00000106 	br	10011af8 <alt_get_errno+0x28>
10011af4:	d0a6e004 	addi	r2,gp,-25728
}
10011af8:	e037883a 	mov	sp,fp
10011afc:	dfc00117 	ldw	ra,4(sp)
10011b00:	df000017 	ldw	fp,0(sp)
10011b04:	dec00204 	addi	sp,sp,8
10011b08:	f800283a 	ret

10011b0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10011b0c:	defff904 	addi	sp,sp,-28
10011b10:	dfc00615 	stw	ra,24(sp)
10011b14:	df000515 	stw	fp,20(sp)
10011b18:	df000504 	addi	fp,sp,20
10011b1c:	e13ffd15 	stw	r4,-12(fp)
10011b20:	e17ffe15 	stw	r5,-8(fp)
10011b24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011b28:	e0bffd17 	ldw	r2,-12(fp)
10011b2c:	10000816 	blt	r2,zero,10011b50 <read+0x44>
10011b30:	01400304 	movi	r5,12
10011b34:	e13ffd17 	ldw	r4,-12(fp)
10011b38:	00052300 	call	10005230 <__mulsi3>
10011b3c:	1007883a 	mov	r3,r2
10011b40:	00840074 	movhi	r2,4097
10011b44:	10943b04 	addi	r2,r2,20716
10011b48:	1885883a 	add	r2,r3,r2
10011b4c:	00000106 	br	10011b54 <read+0x48>
10011b50:	0005883a 	mov	r2,zero
10011b54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011b58:	e0bffb17 	ldw	r2,-20(fp)
10011b5c:	10002226 	beq	r2,zero,10011be8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10011b60:	e0bffb17 	ldw	r2,-20(fp)
10011b64:	10800217 	ldw	r2,8(r2)
10011b68:	108000cc 	andi	r2,r2,3
10011b6c:	10800060 	cmpeqi	r2,r2,1
10011b70:	1000181e 	bne	r2,zero,10011bd4 <read+0xc8>
        (fd->dev->read))
10011b74:	e0bffb17 	ldw	r2,-20(fp)
10011b78:	10800017 	ldw	r2,0(r2)
10011b7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10011b80:	10001426 	beq	r2,zero,10011bd4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10011b84:	e0bffb17 	ldw	r2,-20(fp)
10011b88:	10800017 	ldw	r2,0(r2)
10011b8c:	10800517 	ldw	r2,20(r2)
10011b90:	e0ffff17 	ldw	r3,-4(fp)
10011b94:	180d883a 	mov	r6,r3
10011b98:	e17ffe17 	ldw	r5,-8(fp)
10011b9c:	e13ffb17 	ldw	r4,-20(fp)
10011ba0:	103ee83a 	callr	r2
10011ba4:	e0bffc15 	stw	r2,-16(fp)
10011ba8:	e0bffc17 	ldw	r2,-16(fp)
10011bac:	1000070e 	bge	r2,zero,10011bcc <read+0xc0>
        {
          ALT_ERRNO = -rval;
10011bb0:	0011ad00 	call	10011ad0 <alt_get_errno>
10011bb4:	1007883a 	mov	r3,r2
10011bb8:	e0bffc17 	ldw	r2,-16(fp)
10011bbc:	0085c83a 	sub	r2,zero,r2
10011bc0:	18800015 	stw	r2,0(r3)
          return -1;
10011bc4:	00bfffc4 	movi	r2,-1
10011bc8:	00000c06 	br	10011bfc <read+0xf0>
        }
        return rval;
10011bcc:	e0bffc17 	ldw	r2,-16(fp)
10011bd0:	00000a06 	br	10011bfc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10011bd4:	0011ad00 	call	10011ad0 <alt_get_errno>
10011bd8:	1007883a 	mov	r3,r2
10011bdc:	00800344 	movi	r2,13
10011be0:	18800015 	stw	r2,0(r3)
10011be4:	00000406 	br	10011bf8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10011be8:	0011ad00 	call	10011ad0 <alt_get_errno>
10011bec:	1007883a 	mov	r3,r2
10011bf0:	00801444 	movi	r2,81
10011bf4:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011bf8:	00bfffc4 	movi	r2,-1
}
10011bfc:	e037883a 	mov	sp,fp
10011c00:	dfc00117 	ldw	ra,4(sp)
10011c04:	df000017 	ldw	fp,0(sp)
10011c08:	dec00204 	addi	sp,sp,8
10011c0c:	f800283a 	ret

10011c10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10011c10:	defffc04 	addi	sp,sp,-16
10011c14:	dfc00315 	stw	ra,12(sp)
10011c18:	df000215 	stw	fp,8(sp)
10011c1c:	dc000115 	stw	r16,4(sp)
10011c20:	df000204 	addi	fp,sp,8
10011c24:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10011c28:	e0bffe17 	ldw	r2,-8(fp)
10011c2c:	108000d0 	cmplti	r2,r2,3
10011c30:	1000111e 	bne	r2,zero,10011c78 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10011c34:	04040074 	movhi	r16,4097
10011c38:	84143b04 	addi	r16,r16,20716
10011c3c:	e0bffe17 	ldw	r2,-8(fp)
10011c40:	01400304 	movi	r5,12
10011c44:	1009883a 	mov	r4,r2
10011c48:	00052300 	call	10005230 <__mulsi3>
10011c4c:	8085883a 	add	r2,r16,r2
10011c50:	10800204 	addi	r2,r2,8
10011c54:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10011c58:	04040074 	movhi	r16,4097
10011c5c:	84143b04 	addi	r16,r16,20716
10011c60:	e0bffe17 	ldw	r2,-8(fp)
10011c64:	01400304 	movi	r5,12
10011c68:	1009883a 	mov	r4,r2
10011c6c:	00052300 	call	10005230 <__mulsi3>
10011c70:	8085883a 	add	r2,r16,r2
10011c74:	10000015 	stw	zero,0(r2)
  }
}
10011c78:	0001883a 	nop
10011c7c:	e6ffff04 	addi	sp,fp,-4
10011c80:	dfc00217 	ldw	ra,8(sp)
10011c84:	df000117 	ldw	fp,4(sp)
10011c88:	dc000017 	ldw	r16,0(sp)
10011c8c:	dec00304 	addi	sp,sp,12
10011c90:	f800283a 	ret

10011c94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10011c94:	defff904 	addi	sp,sp,-28
10011c98:	df000615 	stw	fp,24(sp)
10011c9c:	df000604 	addi	fp,sp,24
10011ca0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011ca4:	0005303a 	rdctl	r2,status
10011ca8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011cac:	e0fffe17 	ldw	r3,-8(fp)
10011cb0:	00bfff84 	movi	r2,-2
10011cb4:	1884703a 	and	r2,r3,r2
10011cb8:	1001703a 	wrctl	status,r2
  
  return context;
10011cbc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10011cc0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10011cc4:	d0a00d17 	ldw	r2,-32716(gp)
10011cc8:	10c000c4 	addi	r3,r2,3
10011ccc:	00bfff04 	movi	r2,-4
10011cd0:	1884703a 	and	r2,r3,r2
10011cd4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10011cd8:	d0e00d17 	ldw	r3,-32716(gp)
10011cdc:	e0bfff17 	ldw	r2,-4(fp)
10011ce0:	1887883a 	add	r3,r3,r2
10011ce4:	00860034 	movhi	r2,6144
10011ce8:	10800004 	addi	r2,r2,0
10011cec:	10c0062e 	bgeu	r2,r3,10011d08 <sbrk+0x74>
10011cf0:	e0bffb17 	ldw	r2,-20(fp)
10011cf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011cf8:	e0bffa17 	ldw	r2,-24(fp)
10011cfc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10011d00:	00bfffc4 	movi	r2,-1
10011d04:	00000b06 	br	10011d34 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10011d08:	d0a00d17 	ldw	r2,-32716(gp)
10011d0c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10011d10:	d0e00d17 	ldw	r3,-32716(gp)
10011d14:	e0bfff17 	ldw	r2,-4(fp)
10011d18:	1885883a 	add	r2,r3,r2
10011d1c:	d0a00d15 	stw	r2,-32716(gp)
10011d20:	e0bffb17 	ldw	r2,-20(fp)
10011d24:	e0bffc15 	stw	r2,-16(fp)
10011d28:	e0bffc17 	ldw	r2,-16(fp)
10011d2c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10011d30:	e0bffd17 	ldw	r2,-12(fp)
} 
10011d34:	e037883a 	mov	sp,fp
10011d38:	df000017 	ldw	fp,0(sp)
10011d3c:	dec00104 	addi	sp,sp,4
10011d40:	f800283a 	ret

10011d44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011d44:	defffe04 	addi	sp,sp,-8
10011d48:	dfc00115 	stw	ra,4(sp)
10011d4c:	df000015 	stw	fp,0(sp)
10011d50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011d54:	d0a00c17 	ldw	r2,-32720(gp)
10011d58:	10000326 	beq	r2,zero,10011d68 <alt_get_errno+0x24>
10011d5c:	d0a00c17 	ldw	r2,-32720(gp)
10011d60:	103ee83a 	callr	r2
10011d64:	00000106 	br	10011d6c <alt_get_errno+0x28>
10011d68:	d0a6e004 	addi	r2,gp,-25728
}
10011d6c:	e037883a 	mov	sp,fp
10011d70:	dfc00117 	ldw	ra,4(sp)
10011d74:	df000017 	ldw	fp,0(sp)
10011d78:	dec00204 	addi	sp,sp,8
10011d7c:	f800283a 	ret

10011d80 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
10011d80:	defffc04 	addi	sp,sp,-16
10011d84:	dfc00315 	stw	ra,12(sp)
10011d88:	df000215 	stw	fp,8(sp)
10011d8c:	df000204 	addi	fp,sp,8
10011d90:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011d94:	d0a6e617 	ldw	r2,-25704(gp)
  clock_t ticks = alt_nticks(); 
10011d98:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10011d9c:	d0a6e517 	ldw	r2,-25708(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
10011da0:	1000061e 	bne	r2,zero,10011dbc <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
10011da4:	0011d440 	call	10011d44 <alt_get_errno>
10011da8:	1007883a 	mov	r3,r2
10011dac:	00801604 	movi	r2,88
10011db0:	18800015 	stw	r2,0(r3)
    return 0;
10011db4:	0005883a 	mov	r2,zero
10011db8:	00000a06 	br	10011de4 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
10011dbc:	e0bfff17 	ldw	r2,-4(fp)
10011dc0:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
10011dc4:	e0bfff17 	ldw	r2,-4(fp)
10011dc8:	e0fffe17 	ldw	r3,-8(fp)
10011dcc:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
10011dd0:	e0bfff17 	ldw	r2,-4(fp)
10011dd4:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
10011dd8:	e0bfff17 	ldw	r2,-4(fp)
10011ddc:	10000315 	stw	zero,12(r2)

  return ticks;
10011de0:	e0bffe17 	ldw	r2,-8(fp)
}
10011de4:	e037883a 	mov	sp,fp
10011de8:	dfc00117 	ldw	ra,4(sp)
10011dec:	df000017 	ldw	fp,0(sp)
10011df0:	dec00204 	addi	sp,sp,8
10011df4:	f800283a 	ret

10011df8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10011df8:	defffd04 	addi	sp,sp,-12
10011dfc:	dfc00215 	stw	ra,8(sp)
10011e00:	df000115 	stw	fp,4(sp)
10011e04:	df000104 	addi	fp,sp,4
10011e08:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10011e0c:	e13fff17 	ldw	r4,-4(fp)
10011e10:	0012bb00 	call	10012bb0 <alt_busy_sleep>
}
10011e14:	e037883a 	mov	sp,fp
10011e18:	dfc00117 	ldw	ra,4(sp)
10011e1c:	df000017 	ldw	fp,0(sp)
10011e20:	dec00204 	addi	sp,sp,8
10011e24:	f800283a 	ret

10011e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011e28:	defffe04 	addi	sp,sp,-8
10011e2c:	dfc00115 	stw	ra,4(sp)
10011e30:	df000015 	stw	fp,0(sp)
10011e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011e38:	d0a00c17 	ldw	r2,-32720(gp)
10011e3c:	10000326 	beq	r2,zero,10011e4c <alt_get_errno+0x24>
10011e40:	d0a00c17 	ldw	r2,-32720(gp)
10011e44:	103ee83a 	callr	r2
10011e48:	00000106 	br	10011e50 <alt_get_errno+0x28>
10011e4c:	d0a6e004 	addi	r2,gp,-25728
}
10011e50:	e037883a 	mov	sp,fp
10011e54:	dfc00117 	ldw	ra,4(sp)
10011e58:	df000017 	ldw	fp,0(sp)
10011e5c:	dec00204 	addi	sp,sp,8
10011e60:	f800283a 	ret

10011e64 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10011e64:	defff904 	addi	sp,sp,-28
10011e68:	dfc00615 	stw	ra,24(sp)
10011e6c:	df000515 	stw	fp,20(sp)
10011e70:	df000504 	addi	fp,sp,20
10011e74:	e13ffd15 	stw	r4,-12(fp)
10011e78:	e17ffe15 	stw	r5,-8(fp)
10011e7c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011e80:	e0bffd17 	ldw	r2,-12(fp)
10011e84:	10000816 	blt	r2,zero,10011ea8 <write+0x44>
10011e88:	01400304 	movi	r5,12
10011e8c:	e13ffd17 	ldw	r4,-12(fp)
10011e90:	00052300 	call	10005230 <__mulsi3>
10011e94:	1007883a 	mov	r3,r2
10011e98:	00840074 	movhi	r2,4097
10011e9c:	10943b04 	addi	r2,r2,20716
10011ea0:	1885883a 	add	r2,r3,r2
10011ea4:	00000106 	br	10011eac <write+0x48>
10011ea8:	0005883a 	mov	r2,zero
10011eac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011eb0:	e0bffb17 	ldw	r2,-20(fp)
10011eb4:	10002126 	beq	r2,zero,10011f3c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10011eb8:	e0bffb17 	ldw	r2,-20(fp)
10011ebc:	10800217 	ldw	r2,8(r2)
10011ec0:	108000cc 	andi	r2,r2,3
10011ec4:	10001826 	beq	r2,zero,10011f28 <write+0xc4>
10011ec8:	e0bffb17 	ldw	r2,-20(fp)
10011ecc:	10800017 	ldw	r2,0(r2)
10011ed0:	10800617 	ldw	r2,24(r2)
10011ed4:	10001426 	beq	r2,zero,10011f28 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10011ed8:	e0bffb17 	ldw	r2,-20(fp)
10011edc:	10800017 	ldw	r2,0(r2)
10011ee0:	10800617 	ldw	r2,24(r2)
10011ee4:	e0ffff17 	ldw	r3,-4(fp)
10011ee8:	180d883a 	mov	r6,r3
10011eec:	e17ffe17 	ldw	r5,-8(fp)
10011ef0:	e13ffb17 	ldw	r4,-20(fp)
10011ef4:	103ee83a 	callr	r2
10011ef8:	e0bffc15 	stw	r2,-16(fp)
10011efc:	e0bffc17 	ldw	r2,-16(fp)
10011f00:	1000070e 	bge	r2,zero,10011f20 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10011f04:	0011e280 	call	10011e28 <alt_get_errno>
10011f08:	1007883a 	mov	r3,r2
10011f0c:	e0bffc17 	ldw	r2,-16(fp)
10011f10:	0085c83a 	sub	r2,zero,r2
10011f14:	18800015 	stw	r2,0(r3)
        return -1;
10011f18:	00bfffc4 	movi	r2,-1
10011f1c:	00000c06 	br	10011f50 <write+0xec>
      }
      return rval;
10011f20:	e0bffc17 	ldw	r2,-16(fp)
10011f24:	00000a06 	br	10011f50 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10011f28:	0011e280 	call	10011e28 <alt_get_errno>
10011f2c:	1007883a 	mov	r3,r2
10011f30:	00800344 	movi	r2,13
10011f34:	18800015 	stw	r2,0(r3)
10011f38:	00000406 	br	10011f4c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10011f3c:	0011e280 	call	10011e28 <alt_get_errno>
10011f40:	1007883a 	mov	r3,r2
10011f44:	00801444 	movi	r2,81
10011f48:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011f4c:	00bfffc4 	movi	r2,-1
}
10011f50:	e037883a 	mov	sp,fp
10011f54:	dfc00117 	ldw	ra,4(sp)
10011f58:	df000017 	ldw	fp,0(sp)
10011f5c:	dec00204 	addi	sp,sp,8
10011f60:	f800283a 	ret

10011f64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10011f64:	defffd04 	addi	sp,sp,-12
10011f68:	dfc00215 	stw	ra,8(sp)
10011f6c:	df000115 	stw	fp,4(sp)
10011f70:	df000104 	addi	fp,sp,4
10011f74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10011f78:	d1600904 	addi	r5,gp,-32732
10011f7c:	e13fff17 	ldw	r4,-4(fp)
10011f80:	0012d640 	call	10012d64 <alt_dev_llist_insert>
}
10011f84:	e037883a 	mov	sp,fp
10011f88:	dfc00117 	ldw	ra,4(sp)
10011f8c:	df000017 	ldw	fp,0(sp)
10011f90:	dec00204 	addi	sp,sp,8
10011f94:	f800283a 	ret

10011f98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10011f98:	defffd04 	addi	sp,sp,-12
10011f9c:	dfc00215 	stw	ra,8(sp)
10011fa0:	df000115 	stw	fp,4(sp)
10011fa4:	df000104 	addi	fp,sp,4
10011fa8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10011fac:	00137100 	call	10013710 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10011fb0:	00800044 	movi	r2,1
10011fb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10011fb8:	0001883a 	nop
10011fbc:	e037883a 	mov	sp,fp
10011fc0:	dfc00117 	ldw	ra,4(sp)
10011fc4:	df000017 	ldw	fp,0(sp)
10011fc8:	dec00204 	addi	sp,sp,8
10011fcc:	f800283a 	ret

10011fd0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10011fd0:	defffe04 	addi	sp,sp,-8
10011fd4:	dfc00115 	stw	ra,4(sp)
10011fd8:	df000015 	stw	fp,0(sp)
10011fdc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10011fe0:	01800144 	movi	r6,5
10011fe4:	000b883a 	mov	r5,zero
10011fe8:	01040074 	movhi	r4,4097
10011fec:	2114a504 	addi	r4,r4,21140
10011ff0:	00121800 	call	10012180 <altera_avalon_jtag_uart_init>
10011ff4:	01040074 	movhi	r4,4097
10011ff8:	21149b04 	addi	r4,r4,21100
10011ffc:	0011f640 	call	10011f64 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10012000:	0001883a 	nop
}
10012004:	0001883a 	nop
10012008:	e037883a 	mov	sp,fp
1001200c:	dfc00117 	ldw	ra,4(sp)
10012010:	df000017 	ldw	fp,0(sp)
10012014:	dec00204 	addi	sp,sp,8
10012018:	f800283a 	ret

1001201c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001201c:	defffa04 	addi	sp,sp,-24
10012020:	dfc00515 	stw	ra,20(sp)
10012024:	df000415 	stw	fp,16(sp)
10012028:	df000404 	addi	fp,sp,16
1001202c:	e13ffd15 	stw	r4,-12(fp)
10012030:	e17ffe15 	stw	r5,-8(fp)
10012034:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012038:	e0bffd17 	ldw	r2,-12(fp)
1001203c:	10800017 	ldw	r2,0(r2)
10012040:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10012044:	e0bffc17 	ldw	r2,-16(fp)
10012048:	10c00a04 	addi	r3,r2,40
1001204c:	e0bffd17 	ldw	r2,-12(fp)
10012050:	10800217 	ldw	r2,8(r2)
10012054:	100f883a 	mov	r7,r2
10012058:	e1bfff17 	ldw	r6,-4(fp)
1001205c:	e17ffe17 	ldw	r5,-8(fp)
10012060:	1809883a 	mov	r4,r3
10012064:	00126440 	call	10012644 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10012068:	e037883a 	mov	sp,fp
1001206c:	dfc00117 	ldw	ra,4(sp)
10012070:	df000017 	ldw	fp,0(sp)
10012074:	dec00204 	addi	sp,sp,8
10012078:	f800283a 	ret

1001207c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001207c:	defffa04 	addi	sp,sp,-24
10012080:	dfc00515 	stw	ra,20(sp)
10012084:	df000415 	stw	fp,16(sp)
10012088:	df000404 	addi	fp,sp,16
1001208c:	e13ffd15 	stw	r4,-12(fp)
10012090:	e17ffe15 	stw	r5,-8(fp)
10012094:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012098:	e0bffd17 	ldw	r2,-12(fp)
1001209c:	10800017 	ldw	r2,0(r2)
100120a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100120a4:	e0bffc17 	ldw	r2,-16(fp)
100120a8:	10c00a04 	addi	r3,r2,40
100120ac:	e0bffd17 	ldw	r2,-12(fp)
100120b0:	10800217 	ldw	r2,8(r2)
100120b4:	100f883a 	mov	r7,r2
100120b8:	e1bfff17 	ldw	r6,-4(fp)
100120bc:	e17ffe17 	ldw	r5,-8(fp)
100120c0:	1809883a 	mov	r4,r3
100120c4:	00128600 	call	10012860 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100120c8:	e037883a 	mov	sp,fp
100120cc:	dfc00117 	ldw	ra,4(sp)
100120d0:	df000017 	ldw	fp,0(sp)
100120d4:	dec00204 	addi	sp,sp,8
100120d8:	f800283a 	ret

100120dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100120dc:	defffc04 	addi	sp,sp,-16
100120e0:	dfc00315 	stw	ra,12(sp)
100120e4:	df000215 	stw	fp,8(sp)
100120e8:	df000204 	addi	fp,sp,8
100120ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100120f0:	e0bfff17 	ldw	r2,-4(fp)
100120f4:	10800017 	ldw	r2,0(r2)
100120f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100120fc:	e0bffe17 	ldw	r2,-8(fp)
10012100:	10c00a04 	addi	r3,r2,40
10012104:	e0bfff17 	ldw	r2,-4(fp)
10012108:	10800217 	ldw	r2,8(r2)
1001210c:	100b883a 	mov	r5,r2
10012110:	1809883a 	mov	r4,r3
10012114:	00124ec0 	call	100124ec <altera_avalon_jtag_uart_close>
}
10012118:	e037883a 	mov	sp,fp
1001211c:	dfc00117 	ldw	ra,4(sp)
10012120:	df000017 	ldw	fp,0(sp)
10012124:	dec00204 	addi	sp,sp,8
10012128:	f800283a 	ret

1001212c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001212c:	defffa04 	addi	sp,sp,-24
10012130:	dfc00515 	stw	ra,20(sp)
10012134:	df000415 	stw	fp,16(sp)
10012138:	df000404 	addi	fp,sp,16
1001213c:	e13ffd15 	stw	r4,-12(fp)
10012140:	e17ffe15 	stw	r5,-8(fp)
10012144:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10012148:	e0bffd17 	ldw	r2,-12(fp)
1001214c:	10800017 	ldw	r2,0(r2)
10012150:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10012154:	e0bffc17 	ldw	r2,-16(fp)
10012158:	10800a04 	addi	r2,r2,40
1001215c:	e1bfff17 	ldw	r6,-4(fp)
10012160:	e17ffe17 	ldw	r5,-8(fp)
10012164:	1009883a 	mov	r4,r2
10012168:	00125540 	call	10012554 <altera_avalon_jtag_uart_ioctl>
}
1001216c:	e037883a 	mov	sp,fp
10012170:	dfc00117 	ldw	ra,4(sp)
10012174:	df000017 	ldw	fp,0(sp)
10012178:	dec00204 	addi	sp,sp,8
1001217c:	f800283a 	ret

10012180 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10012180:	defffa04 	addi	sp,sp,-24
10012184:	dfc00515 	stw	ra,20(sp)
10012188:	df000415 	stw	fp,16(sp)
1001218c:	df000404 	addi	fp,sp,16
10012190:	e13ffd15 	stw	r4,-12(fp)
10012194:	e17ffe15 	stw	r5,-8(fp)
10012198:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001219c:	e0bffd17 	ldw	r2,-12(fp)
100121a0:	00c00044 	movi	r3,1
100121a4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100121a8:	e0bffd17 	ldw	r2,-12(fp)
100121ac:	10800017 	ldw	r2,0(r2)
100121b0:	10800104 	addi	r2,r2,4
100121b4:	1007883a 	mov	r3,r2
100121b8:	e0bffd17 	ldw	r2,-12(fp)
100121bc:	10800817 	ldw	r2,32(r2)
100121c0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100121c4:	e0bffe17 	ldw	r2,-8(fp)
100121c8:	e0ffff17 	ldw	r3,-4(fp)
100121cc:	d8000015 	stw	zero,0(sp)
100121d0:	e1fffd17 	ldw	r7,-12(fp)
100121d4:	01840074 	movhi	r6,4097
100121d8:	31889004 	addi	r6,r6,8768
100121dc:	180b883a 	mov	r5,r3
100121e0:	1009883a 	mov	r4,r2
100121e4:	0012ee80 	call	10012ee8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100121e8:	e0bffd17 	ldw	r2,-12(fp)
100121ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100121f0:	e0bffd17 	ldw	r2,-12(fp)
100121f4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100121f8:	d0e6e517 	ldw	r3,-25708(gp)
100121fc:	e1fffd17 	ldw	r7,-12(fp)
10012200:	01840074 	movhi	r6,4097
10012204:	31891304 	addi	r6,r6,9292
10012208:	180b883a 	mov	r5,r3
1001220c:	1009883a 	mov	r4,r2
10012210:	0012a840 	call	10012a84 <alt_alarm_start>
10012214:	1000040e 	bge	r2,zero,10012228 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012218:	e0fffd17 	ldw	r3,-12(fp)
1001221c:	00a00034 	movhi	r2,32768
10012220:	10bfffc4 	addi	r2,r2,-1
10012224:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10012228:	0001883a 	nop
1001222c:	e037883a 	mov	sp,fp
10012230:	dfc00117 	ldw	ra,4(sp)
10012234:	df000017 	ldw	fp,0(sp)
10012238:	dec00204 	addi	sp,sp,8
1001223c:	f800283a 	ret

10012240 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10012240:	defff804 	addi	sp,sp,-32
10012244:	df000715 	stw	fp,28(sp)
10012248:	df000704 	addi	fp,sp,28
1001224c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10012250:	e0bfff17 	ldw	r2,-4(fp)
10012254:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10012258:	e0bffb17 	ldw	r2,-20(fp)
1001225c:	10800017 	ldw	r2,0(r2)
10012260:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012264:	e0bffc17 	ldw	r2,-16(fp)
10012268:	10800104 	addi	r2,r2,4
1001226c:	10800037 	ldwio	r2,0(r2)
10012270:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10012274:	e0bffd17 	ldw	r2,-12(fp)
10012278:	1080c00c 	andi	r2,r2,768
1001227c:	10006d26 	beq	r2,zero,10012434 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10012280:	e0bffd17 	ldw	r2,-12(fp)
10012284:	1080400c 	andi	r2,r2,256
10012288:	10003526 	beq	r2,zero,10012360 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1001228c:	00800074 	movhi	r2,1
10012290:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012294:	e0bffb17 	ldw	r2,-20(fp)
10012298:	10800a17 	ldw	r2,40(r2)
1001229c:	10800044 	addi	r2,r2,1
100122a0:	1081ffcc 	andi	r2,r2,2047
100122a4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100122a8:	e0bffb17 	ldw	r2,-20(fp)
100122ac:	10c00b17 	ldw	r3,44(r2)
100122b0:	e0bffe17 	ldw	r2,-8(fp)
100122b4:	18801526 	beq	r3,r2,1001230c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100122b8:	e0bffc17 	ldw	r2,-16(fp)
100122bc:	10800037 	ldwio	r2,0(r2)
100122c0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100122c4:	e0bff917 	ldw	r2,-28(fp)
100122c8:	10a0000c 	andi	r2,r2,32768
100122cc:	10001126 	beq	r2,zero,10012314 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100122d0:	e0bffb17 	ldw	r2,-20(fp)
100122d4:	10800a17 	ldw	r2,40(r2)
100122d8:	e0fff917 	ldw	r3,-28(fp)
100122dc:	1809883a 	mov	r4,r3
100122e0:	e0fffb17 	ldw	r3,-20(fp)
100122e4:	1885883a 	add	r2,r3,r2
100122e8:	10800e04 	addi	r2,r2,56
100122ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100122f0:	e0bffb17 	ldw	r2,-20(fp)
100122f4:	10800a17 	ldw	r2,40(r2)
100122f8:	10800044 	addi	r2,r2,1
100122fc:	10c1ffcc 	andi	r3,r2,2047
10012300:	e0bffb17 	ldw	r2,-20(fp)
10012304:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012308:	003fe206 	br	10012294 <__alt_data_end+0xf8012294>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1001230c:	0001883a 	nop
10012310:	00000106 	br	10012318 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10012314:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012318:	e0bff917 	ldw	r2,-28(fp)
1001231c:	10bfffec 	andhi	r2,r2,65535
10012320:	10000f26 	beq	r2,zero,10012360 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012324:	e0bffb17 	ldw	r2,-20(fp)
10012328:	10c00817 	ldw	r3,32(r2)
1001232c:	00bfff84 	movi	r2,-2
10012330:	1886703a 	and	r3,r3,r2
10012334:	e0bffb17 	ldw	r2,-20(fp)
10012338:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1001233c:	e0bffc17 	ldw	r2,-16(fp)
10012340:	10800104 	addi	r2,r2,4
10012344:	1007883a 	mov	r3,r2
10012348:	e0bffb17 	ldw	r2,-20(fp)
1001234c:	10800817 	ldw	r2,32(r2)
10012350:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012354:	e0bffc17 	ldw	r2,-16(fp)
10012358:	10800104 	addi	r2,r2,4
1001235c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012360:	e0bffd17 	ldw	r2,-12(fp)
10012364:	1080800c 	andi	r2,r2,512
10012368:	103fbe26 	beq	r2,zero,10012264 <__alt_data_end+0xf8012264>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1001236c:	e0bffd17 	ldw	r2,-12(fp)
10012370:	1004d43a 	srli	r2,r2,16
10012374:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10012378:	00001406 	br	100123cc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1001237c:	e0bffc17 	ldw	r2,-16(fp)
10012380:	e0fffb17 	ldw	r3,-20(fp)
10012384:	18c00d17 	ldw	r3,52(r3)
10012388:	e13ffb17 	ldw	r4,-20(fp)
1001238c:	20c7883a 	add	r3,r4,r3
10012390:	18c20e04 	addi	r3,r3,2104
10012394:	18c00003 	ldbu	r3,0(r3)
10012398:	18c03fcc 	andi	r3,r3,255
1001239c:	18c0201c 	xori	r3,r3,128
100123a0:	18ffe004 	addi	r3,r3,-128
100123a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100123a8:	e0bffb17 	ldw	r2,-20(fp)
100123ac:	10800d17 	ldw	r2,52(r2)
100123b0:	10800044 	addi	r2,r2,1
100123b4:	10c1ffcc 	andi	r3,r2,2047
100123b8:	e0bffb17 	ldw	r2,-20(fp)
100123bc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100123c0:	e0bffa17 	ldw	r2,-24(fp)
100123c4:	10bfffc4 	addi	r2,r2,-1
100123c8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100123cc:	e0bffa17 	ldw	r2,-24(fp)
100123d0:	10000526 	beq	r2,zero,100123e8 <altera_avalon_jtag_uart_irq+0x1a8>
100123d4:	e0bffb17 	ldw	r2,-20(fp)
100123d8:	10c00d17 	ldw	r3,52(r2)
100123dc:	e0bffb17 	ldw	r2,-20(fp)
100123e0:	10800c17 	ldw	r2,48(r2)
100123e4:	18bfe51e 	bne	r3,r2,1001237c <__alt_data_end+0xf801237c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100123e8:	e0bffa17 	ldw	r2,-24(fp)
100123ec:	103f9d26 	beq	r2,zero,10012264 <__alt_data_end+0xf8012264>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100123f0:	e0bffb17 	ldw	r2,-20(fp)
100123f4:	10c00817 	ldw	r3,32(r2)
100123f8:	00bfff44 	movi	r2,-3
100123fc:	1886703a 	and	r3,r3,r2
10012400:	e0bffb17 	ldw	r2,-20(fp)
10012404:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012408:	e0bffb17 	ldw	r2,-20(fp)
1001240c:	10800017 	ldw	r2,0(r2)
10012410:	10800104 	addi	r2,r2,4
10012414:	1007883a 	mov	r3,r2
10012418:	e0bffb17 	ldw	r2,-20(fp)
1001241c:	10800817 	ldw	r2,32(r2)
10012420:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012424:	e0bffc17 	ldw	r2,-16(fp)
10012428:	10800104 	addi	r2,r2,4
1001242c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012430:	003f8c06 	br	10012264 <__alt_data_end+0xf8012264>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10012434:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10012438:	0001883a 	nop
1001243c:	e037883a 	mov	sp,fp
10012440:	df000017 	ldw	fp,0(sp)
10012444:	dec00104 	addi	sp,sp,4
10012448:	f800283a 	ret

1001244c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1001244c:	defff804 	addi	sp,sp,-32
10012450:	df000715 	stw	fp,28(sp)
10012454:	df000704 	addi	fp,sp,28
10012458:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1001245c:	e0bffb17 	ldw	r2,-20(fp)
10012460:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012464:	e0bff917 	ldw	r2,-28(fp)
10012468:	10800017 	ldw	r2,0(r2)
1001246c:	10800104 	addi	r2,r2,4
10012470:	10800037 	ldwio	r2,0(r2)
10012474:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012478:	e0bffa17 	ldw	r2,-24(fp)
1001247c:	1081000c 	andi	r2,r2,1024
10012480:	10000b26 	beq	r2,zero,100124b0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012484:	e0bff917 	ldw	r2,-28(fp)
10012488:	10800017 	ldw	r2,0(r2)
1001248c:	10800104 	addi	r2,r2,4
10012490:	1007883a 	mov	r3,r2
10012494:	e0bff917 	ldw	r2,-28(fp)
10012498:	10800817 	ldw	r2,32(r2)
1001249c:	10810014 	ori	r2,r2,1024
100124a0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100124a4:	e0bff917 	ldw	r2,-28(fp)
100124a8:	10000915 	stw	zero,36(r2)
100124ac:	00000a06 	br	100124d8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100124b0:	e0bff917 	ldw	r2,-28(fp)
100124b4:	10c00917 	ldw	r3,36(r2)
100124b8:	00a00034 	movhi	r2,32768
100124bc:	10bfff04 	addi	r2,r2,-4
100124c0:	10c00536 	bltu	r2,r3,100124d8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100124c4:	e0bff917 	ldw	r2,-28(fp)
100124c8:	10800917 	ldw	r2,36(r2)
100124cc:	10c00044 	addi	r3,r2,1
100124d0:	e0bff917 	ldw	r2,-28(fp)
100124d4:	10c00915 	stw	r3,36(r2)
100124d8:	d0a6e517 	ldw	r2,-25708(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100124dc:	e037883a 	mov	sp,fp
100124e0:	df000017 	ldw	fp,0(sp)
100124e4:	dec00104 	addi	sp,sp,4
100124e8:	f800283a 	ret

100124ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100124ec:	defffd04 	addi	sp,sp,-12
100124f0:	df000215 	stw	fp,8(sp)
100124f4:	df000204 	addi	fp,sp,8
100124f8:	e13ffe15 	stw	r4,-8(fp)
100124fc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012500:	00000506 	br	10012518 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012504:	e0bfff17 	ldw	r2,-4(fp)
10012508:	1090000c 	andi	r2,r2,16384
1001250c:	10000226 	beq	r2,zero,10012518 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012510:	00bffd44 	movi	r2,-11
10012514:	00000b06 	br	10012544 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012518:	e0bffe17 	ldw	r2,-8(fp)
1001251c:	10c00d17 	ldw	r3,52(r2)
10012520:	e0bffe17 	ldw	r2,-8(fp)
10012524:	10800c17 	ldw	r2,48(r2)
10012528:	18800526 	beq	r3,r2,10012540 <altera_avalon_jtag_uart_close+0x54>
1001252c:	e0bffe17 	ldw	r2,-8(fp)
10012530:	10c00917 	ldw	r3,36(r2)
10012534:	e0bffe17 	ldw	r2,-8(fp)
10012538:	10800117 	ldw	r2,4(r2)
1001253c:	18bff136 	bltu	r3,r2,10012504 <__alt_data_end+0xf8012504>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012540:	0005883a 	mov	r2,zero
}
10012544:	e037883a 	mov	sp,fp
10012548:	df000017 	ldw	fp,0(sp)
1001254c:	dec00104 	addi	sp,sp,4
10012550:	f800283a 	ret

10012554 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012554:	defffa04 	addi	sp,sp,-24
10012558:	df000515 	stw	fp,20(sp)
1001255c:	df000504 	addi	fp,sp,20
10012560:	e13ffd15 	stw	r4,-12(fp)
10012564:	e17ffe15 	stw	r5,-8(fp)
10012568:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1001256c:	00bff9c4 	movi	r2,-25
10012570:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012574:	e0bffe17 	ldw	r2,-8(fp)
10012578:	10da8060 	cmpeqi	r3,r2,27137
1001257c:	1800031e 	bne	r3,zero,1001258c <altera_avalon_jtag_uart_ioctl+0x38>
10012580:	109a80a0 	cmpeqi	r2,r2,27138
10012584:	1000181e 	bne	r2,zero,100125e8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012588:	00002906 	br	10012630 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1001258c:	e0bffd17 	ldw	r2,-12(fp)
10012590:	10c00117 	ldw	r3,4(r2)
10012594:	00a00034 	movhi	r2,32768
10012598:	10bfffc4 	addi	r2,r2,-1
1001259c:	18802126 	beq	r3,r2,10012624 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100125a0:	e0bfff17 	ldw	r2,-4(fp)
100125a4:	10800017 	ldw	r2,0(r2)
100125a8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100125ac:	e0bffc17 	ldw	r2,-16(fp)
100125b0:	10800090 	cmplti	r2,r2,2
100125b4:	1000061e 	bne	r2,zero,100125d0 <altera_avalon_jtag_uart_ioctl+0x7c>
100125b8:	e0fffc17 	ldw	r3,-16(fp)
100125bc:	00a00034 	movhi	r2,32768
100125c0:	10bfffc4 	addi	r2,r2,-1
100125c4:	18800226 	beq	r3,r2,100125d0 <altera_avalon_jtag_uart_ioctl+0x7c>
100125c8:	e0bffc17 	ldw	r2,-16(fp)
100125cc:	00000206 	br	100125d8 <altera_avalon_jtag_uart_ioctl+0x84>
100125d0:	00a00034 	movhi	r2,32768
100125d4:	10bfff84 	addi	r2,r2,-2
100125d8:	e0fffd17 	ldw	r3,-12(fp)
100125dc:	18800115 	stw	r2,4(r3)
      rc = 0;
100125e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100125e4:	00000f06 	br	10012624 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100125e8:	e0bffd17 	ldw	r2,-12(fp)
100125ec:	10c00117 	ldw	r3,4(r2)
100125f0:	00a00034 	movhi	r2,32768
100125f4:	10bfffc4 	addi	r2,r2,-1
100125f8:	18800c26 	beq	r3,r2,1001262c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100125fc:	e0bffd17 	ldw	r2,-12(fp)
10012600:	10c00917 	ldw	r3,36(r2)
10012604:	e0bffd17 	ldw	r2,-12(fp)
10012608:	10800117 	ldw	r2,4(r2)
1001260c:	1885803a 	cmpltu	r2,r3,r2
10012610:	10c03fcc 	andi	r3,r2,255
10012614:	e0bfff17 	ldw	r2,-4(fp)
10012618:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001261c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012620:	00000206 	br	1001262c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012624:	0001883a 	nop
10012628:	00000106 	br	10012630 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1001262c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012630:	e0bffb17 	ldw	r2,-20(fp)
}
10012634:	e037883a 	mov	sp,fp
10012638:	df000017 	ldw	fp,0(sp)
1001263c:	dec00104 	addi	sp,sp,4
10012640:	f800283a 	ret

10012644 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012644:	defff304 	addi	sp,sp,-52
10012648:	dfc00c15 	stw	ra,48(sp)
1001264c:	df000b15 	stw	fp,44(sp)
10012650:	df000b04 	addi	fp,sp,44
10012654:	e13ffc15 	stw	r4,-16(fp)
10012658:	e17ffd15 	stw	r5,-12(fp)
1001265c:	e1bffe15 	stw	r6,-8(fp)
10012660:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012664:	e0bffd17 	ldw	r2,-12(fp)
10012668:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001266c:	00004706 	br	1001278c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012670:	e0bffc17 	ldw	r2,-16(fp)
10012674:	10800a17 	ldw	r2,40(r2)
10012678:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1001267c:	e0bffc17 	ldw	r2,-16(fp)
10012680:	10800b17 	ldw	r2,44(r2)
10012684:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012688:	e0fff717 	ldw	r3,-36(fp)
1001268c:	e0bff817 	ldw	r2,-32(fp)
10012690:	18800536 	bltu	r3,r2,100126a8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012694:	e0fff717 	ldw	r3,-36(fp)
10012698:	e0bff817 	ldw	r2,-32(fp)
1001269c:	1885c83a 	sub	r2,r3,r2
100126a0:	e0bff615 	stw	r2,-40(fp)
100126a4:	00000406 	br	100126b8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100126a8:	00c20004 	movi	r3,2048
100126ac:	e0bff817 	ldw	r2,-32(fp)
100126b0:	1885c83a 	sub	r2,r3,r2
100126b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100126b8:	e0bff617 	ldw	r2,-40(fp)
100126bc:	10001e26 	beq	r2,zero,10012738 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100126c0:	e0fffe17 	ldw	r3,-8(fp)
100126c4:	e0bff617 	ldw	r2,-40(fp)
100126c8:	1880022e 	bgeu	r3,r2,100126d4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100126cc:	e0bffe17 	ldw	r2,-8(fp)
100126d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100126d4:	e0bffc17 	ldw	r2,-16(fp)
100126d8:	10c00e04 	addi	r3,r2,56
100126dc:	e0bff817 	ldw	r2,-32(fp)
100126e0:	1885883a 	add	r2,r3,r2
100126e4:	e1bff617 	ldw	r6,-40(fp)
100126e8:	100b883a 	mov	r5,r2
100126ec:	e13ff517 	ldw	r4,-44(fp)
100126f0:	000af1c0 	call	1000af1c <memcpy>
      ptr   += n;
100126f4:	e0fff517 	ldw	r3,-44(fp)
100126f8:	e0bff617 	ldw	r2,-40(fp)
100126fc:	1885883a 	add	r2,r3,r2
10012700:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012704:	e0fffe17 	ldw	r3,-8(fp)
10012708:	e0bff617 	ldw	r2,-40(fp)
1001270c:	1885c83a 	sub	r2,r3,r2
10012710:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012714:	e0fff817 	ldw	r3,-32(fp)
10012718:	e0bff617 	ldw	r2,-40(fp)
1001271c:	1885883a 	add	r2,r3,r2
10012720:	10c1ffcc 	andi	r3,r2,2047
10012724:	e0bffc17 	ldw	r2,-16(fp)
10012728:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1001272c:	e0bffe17 	ldw	r2,-8(fp)
10012730:	00bfcf16 	blt	zero,r2,10012670 <__alt_data_end+0xf8012670>
10012734:	00000106 	br	1001273c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10012738:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1001273c:	e0fff517 	ldw	r3,-44(fp)
10012740:	e0bffd17 	ldw	r2,-12(fp)
10012744:	1880141e 	bne	r3,r2,10012798 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10012748:	e0bfff17 	ldw	r2,-4(fp)
1001274c:	1090000c 	andi	r2,r2,16384
10012750:	1000131e 	bne	r2,zero,100127a0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012754:	0001883a 	nop
10012758:	e0bffc17 	ldw	r2,-16(fp)
1001275c:	10c00a17 	ldw	r3,40(r2)
10012760:	e0bff717 	ldw	r2,-36(fp)
10012764:	1880051e 	bne	r3,r2,1001277c <altera_avalon_jtag_uart_read+0x138>
10012768:	e0bffc17 	ldw	r2,-16(fp)
1001276c:	10c00917 	ldw	r3,36(r2)
10012770:	e0bffc17 	ldw	r2,-16(fp)
10012774:	10800117 	ldw	r2,4(r2)
10012778:	18bff736 	bltu	r3,r2,10012758 <__alt_data_end+0xf8012758>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1001277c:	e0bffc17 	ldw	r2,-16(fp)
10012780:	10c00a17 	ldw	r3,40(r2)
10012784:	e0bff717 	ldw	r2,-36(fp)
10012788:	18800726 	beq	r3,r2,100127a8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001278c:	e0bffe17 	ldw	r2,-8(fp)
10012790:	00bfb716 	blt	zero,r2,10012670 <__alt_data_end+0xf8012670>
10012794:	00000506 	br	100127ac <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012798:	0001883a 	nop
1001279c:	00000306 	br	100127ac <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100127a0:	0001883a 	nop
100127a4:	00000106 	br	100127ac <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100127a8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100127ac:	e0fff517 	ldw	r3,-44(fp)
100127b0:	e0bffd17 	ldw	r2,-12(fp)
100127b4:	18801826 	beq	r3,r2,10012818 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100127b8:	0005303a 	rdctl	r2,status
100127bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100127c0:	e0fffb17 	ldw	r3,-20(fp)
100127c4:	00bfff84 	movi	r2,-2
100127c8:	1884703a 	and	r2,r3,r2
100127cc:	1001703a 	wrctl	status,r2
  
  return context;
100127d0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100127d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100127d8:	e0bffc17 	ldw	r2,-16(fp)
100127dc:	10800817 	ldw	r2,32(r2)
100127e0:	10c00054 	ori	r3,r2,1
100127e4:	e0bffc17 	ldw	r2,-16(fp)
100127e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100127ec:	e0bffc17 	ldw	r2,-16(fp)
100127f0:	10800017 	ldw	r2,0(r2)
100127f4:	10800104 	addi	r2,r2,4
100127f8:	1007883a 	mov	r3,r2
100127fc:	e0bffc17 	ldw	r2,-16(fp)
10012800:	10800817 	ldw	r2,32(r2)
10012804:	18800035 	stwio	r2,0(r3)
10012808:	e0bffa17 	ldw	r2,-24(fp)
1001280c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012810:	e0bff917 	ldw	r2,-28(fp)
10012814:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012818:	e0fff517 	ldw	r3,-44(fp)
1001281c:	e0bffd17 	ldw	r2,-12(fp)
10012820:	18800426 	beq	r3,r2,10012834 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10012824:	e0fff517 	ldw	r3,-44(fp)
10012828:	e0bffd17 	ldw	r2,-12(fp)
1001282c:	1885c83a 	sub	r2,r3,r2
10012830:	00000606 	br	1001284c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10012834:	e0bfff17 	ldw	r2,-4(fp)
10012838:	1090000c 	andi	r2,r2,16384
1001283c:	10000226 	beq	r2,zero,10012848 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10012840:	00bffd44 	movi	r2,-11
10012844:	00000106 	br	1001284c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10012848:	00bffec4 	movi	r2,-5
}
1001284c:	e037883a 	mov	sp,fp
10012850:	dfc00117 	ldw	ra,4(sp)
10012854:	df000017 	ldw	fp,0(sp)
10012858:	dec00204 	addi	sp,sp,8
1001285c:	f800283a 	ret

10012860 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10012860:	defff304 	addi	sp,sp,-52
10012864:	dfc00c15 	stw	ra,48(sp)
10012868:	df000b15 	stw	fp,44(sp)
1001286c:	df000b04 	addi	fp,sp,44
10012870:	e13ffc15 	stw	r4,-16(fp)
10012874:	e17ffd15 	stw	r5,-12(fp)
10012878:	e1bffe15 	stw	r6,-8(fp)
1001287c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10012880:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10012884:	e0bffd17 	ldw	r2,-12(fp)
10012888:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001288c:	00003706 	br	1001296c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10012890:	e0bffc17 	ldw	r2,-16(fp)
10012894:	10800c17 	ldw	r2,48(r2)
10012898:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1001289c:	e0bffc17 	ldw	r2,-16(fp)
100128a0:	10800d17 	ldw	r2,52(r2)
100128a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100128a8:	e0fff917 	ldw	r3,-28(fp)
100128ac:	e0bff517 	ldw	r2,-44(fp)
100128b0:	1880062e 	bgeu	r3,r2,100128cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100128b4:	e0fff517 	ldw	r3,-44(fp)
100128b8:	e0bff917 	ldw	r2,-28(fp)
100128bc:	1885c83a 	sub	r2,r3,r2
100128c0:	10bfffc4 	addi	r2,r2,-1
100128c4:	e0bff615 	stw	r2,-40(fp)
100128c8:	00000b06 	br	100128f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100128cc:	e0bff517 	ldw	r2,-44(fp)
100128d0:	10000526 	beq	r2,zero,100128e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100128d4:	00c20004 	movi	r3,2048
100128d8:	e0bff917 	ldw	r2,-28(fp)
100128dc:	1885c83a 	sub	r2,r3,r2
100128e0:	e0bff615 	stw	r2,-40(fp)
100128e4:	00000406 	br	100128f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100128e8:	00c1ffc4 	movi	r3,2047
100128ec:	e0bff917 	ldw	r2,-28(fp)
100128f0:	1885c83a 	sub	r2,r3,r2
100128f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100128f8:	e0bff617 	ldw	r2,-40(fp)
100128fc:	10001e26 	beq	r2,zero,10012978 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10012900:	e0fffe17 	ldw	r3,-8(fp)
10012904:	e0bff617 	ldw	r2,-40(fp)
10012908:	1880022e 	bgeu	r3,r2,10012914 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1001290c:	e0bffe17 	ldw	r2,-8(fp)
10012910:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10012914:	e0bffc17 	ldw	r2,-16(fp)
10012918:	10c20e04 	addi	r3,r2,2104
1001291c:	e0bff917 	ldw	r2,-28(fp)
10012920:	1885883a 	add	r2,r3,r2
10012924:	e1bff617 	ldw	r6,-40(fp)
10012928:	e17ffd17 	ldw	r5,-12(fp)
1001292c:	1009883a 	mov	r4,r2
10012930:	000af1c0 	call	1000af1c <memcpy>
      ptr   += n;
10012934:	e0fffd17 	ldw	r3,-12(fp)
10012938:	e0bff617 	ldw	r2,-40(fp)
1001293c:	1885883a 	add	r2,r3,r2
10012940:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10012944:	e0fffe17 	ldw	r3,-8(fp)
10012948:	e0bff617 	ldw	r2,-40(fp)
1001294c:	1885c83a 	sub	r2,r3,r2
10012950:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012954:	e0fff917 	ldw	r3,-28(fp)
10012958:	e0bff617 	ldw	r2,-40(fp)
1001295c:	1885883a 	add	r2,r3,r2
10012960:	10c1ffcc 	andi	r3,r2,2047
10012964:	e0bffc17 	ldw	r2,-16(fp)
10012968:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001296c:	e0bffe17 	ldw	r2,-8(fp)
10012970:	00bfc716 	blt	zero,r2,10012890 <__alt_data_end+0xf8012890>
10012974:	00000106 	br	1001297c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10012978:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001297c:	0005303a 	rdctl	r2,status
10012980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012984:	e0fffb17 	ldw	r3,-20(fp)
10012988:	00bfff84 	movi	r2,-2
1001298c:	1884703a 	and	r2,r3,r2
10012990:	1001703a 	wrctl	status,r2
  
  return context;
10012994:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10012998:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001299c:	e0bffc17 	ldw	r2,-16(fp)
100129a0:	10800817 	ldw	r2,32(r2)
100129a4:	10c00094 	ori	r3,r2,2
100129a8:	e0bffc17 	ldw	r2,-16(fp)
100129ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100129b0:	e0bffc17 	ldw	r2,-16(fp)
100129b4:	10800017 	ldw	r2,0(r2)
100129b8:	10800104 	addi	r2,r2,4
100129bc:	1007883a 	mov	r3,r2
100129c0:	e0bffc17 	ldw	r2,-16(fp)
100129c4:	10800817 	ldw	r2,32(r2)
100129c8:	18800035 	stwio	r2,0(r3)
100129cc:	e0bffa17 	ldw	r2,-24(fp)
100129d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100129d4:	e0bff817 	ldw	r2,-32(fp)
100129d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100129dc:	e0bffe17 	ldw	r2,-8(fp)
100129e0:	0080100e 	bge	zero,r2,10012a24 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
100129e4:	e0bfff17 	ldw	r2,-4(fp)
100129e8:	1090000c 	andi	r2,r2,16384
100129ec:	1000101e 	bne	r2,zero,10012a30 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100129f0:	0001883a 	nop
100129f4:	e0bffc17 	ldw	r2,-16(fp)
100129f8:	10c00d17 	ldw	r3,52(r2)
100129fc:	e0bff517 	ldw	r2,-44(fp)
10012a00:	1880051e 	bne	r3,r2,10012a18 <altera_avalon_jtag_uart_write+0x1b8>
10012a04:	e0bffc17 	ldw	r2,-16(fp)
10012a08:	10c00917 	ldw	r3,36(r2)
10012a0c:	e0bffc17 	ldw	r2,-16(fp)
10012a10:	10800117 	ldw	r2,4(r2)
10012a14:	18bff736 	bltu	r3,r2,100129f4 <__alt_data_end+0xf80129f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10012a18:	e0bffc17 	ldw	r2,-16(fp)
10012a1c:	10800917 	ldw	r2,36(r2)
10012a20:	1000051e 	bne	r2,zero,10012a38 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10012a24:	e0bffe17 	ldw	r2,-8(fp)
10012a28:	00bfd016 	blt	zero,r2,1001296c <__alt_data_end+0xf801296c>
10012a2c:	00000306 	br	10012a3c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10012a30:	0001883a 	nop
10012a34:	00000106 	br	10012a3c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10012a38:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10012a3c:	e0fffd17 	ldw	r3,-12(fp)
10012a40:	e0bff717 	ldw	r2,-36(fp)
10012a44:	18800426 	beq	r3,r2,10012a58 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10012a48:	e0fffd17 	ldw	r3,-12(fp)
10012a4c:	e0bff717 	ldw	r2,-36(fp)
10012a50:	1885c83a 	sub	r2,r3,r2
10012a54:	00000606 	br	10012a70 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10012a58:	e0bfff17 	ldw	r2,-4(fp)
10012a5c:	1090000c 	andi	r2,r2,16384
10012a60:	10000226 	beq	r2,zero,10012a6c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10012a64:	00bffd44 	movi	r2,-11
10012a68:	00000106 	br	10012a70 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10012a6c:	00bffec4 	movi	r2,-5
}
10012a70:	e037883a 	mov	sp,fp
10012a74:	dfc00117 	ldw	ra,4(sp)
10012a78:	df000017 	ldw	fp,0(sp)
10012a7c:	dec00204 	addi	sp,sp,8
10012a80:	f800283a 	ret

10012a84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10012a84:	defff504 	addi	sp,sp,-44
10012a88:	df000a15 	stw	fp,40(sp)
10012a8c:	df000a04 	addi	fp,sp,40
10012a90:	e13ffc15 	stw	r4,-16(fp)
10012a94:	e17ffd15 	stw	r5,-12(fp)
10012a98:	e1bffe15 	stw	r6,-8(fp)
10012a9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10012aa0:	e03ff615 	stw	zero,-40(fp)
10012aa4:	d0a6e517 	ldw	r2,-25708(gp)
  
  if (alt_ticks_per_second ())
10012aa8:	10003c26 	beq	r2,zero,10012b9c <alt_alarm_start+0x118>
  {
    if (alarm)
10012aac:	e0bffc17 	ldw	r2,-16(fp)
10012ab0:	10003826 	beq	r2,zero,10012b94 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10012ab4:	e0bffc17 	ldw	r2,-16(fp)
10012ab8:	e0fffe17 	ldw	r3,-8(fp)
10012abc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10012ac0:	e0bffc17 	ldw	r2,-16(fp)
10012ac4:	e0ffff17 	ldw	r3,-4(fp)
10012ac8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012acc:	0005303a 	rdctl	r2,status
10012ad0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012ad4:	e0fff917 	ldw	r3,-28(fp)
10012ad8:	00bfff84 	movi	r2,-2
10012adc:	1884703a 	and	r2,r3,r2
10012ae0:	1001703a 	wrctl	status,r2
  
  return context;
10012ae4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10012ae8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10012aec:	d0a6e617 	ldw	r2,-25704(gp)
      
      current_nticks = alt_nticks();
10012af0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10012af4:	e0fffd17 	ldw	r3,-12(fp)
10012af8:	e0bff617 	ldw	r2,-40(fp)
10012afc:	1885883a 	add	r2,r3,r2
10012b00:	10c00044 	addi	r3,r2,1
10012b04:	e0bffc17 	ldw	r2,-16(fp)
10012b08:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10012b0c:	e0bffc17 	ldw	r2,-16(fp)
10012b10:	10c00217 	ldw	r3,8(r2)
10012b14:	e0bff617 	ldw	r2,-40(fp)
10012b18:	1880042e 	bgeu	r3,r2,10012b2c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10012b1c:	e0bffc17 	ldw	r2,-16(fp)
10012b20:	00c00044 	movi	r3,1
10012b24:	10c00405 	stb	r3,16(r2)
10012b28:	00000206 	br	10012b34 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10012b2c:	e0bffc17 	ldw	r2,-16(fp)
10012b30:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10012b34:	e0bffc17 	ldw	r2,-16(fp)
10012b38:	d0e00f04 	addi	r3,gp,-32708
10012b3c:	e0fffa15 	stw	r3,-24(fp)
10012b40:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012b44:	e0bffb17 	ldw	r2,-20(fp)
10012b48:	e0fffa17 	ldw	r3,-24(fp)
10012b4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012b50:	e0bffa17 	ldw	r2,-24(fp)
10012b54:	10c00017 	ldw	r3,0(r2)
10012b58:	e0bffb17 	ldw	r2,-20(fp)
10012b5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012b60:	e0bffa17 	ldw	r2,-24(fp)
10012b64:	10800017 	ldw	r2,0(r2)
10012b68:	e0fffb17 	ldw	r3,-20(fp)
10012b6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012b70:	e0bffa17 	ldw	r2,-24(fp)
10012b74:	e0fffb17 	ldw	r3,-20(fp)
10012b78:	10c00015 	stw	r3,0(r2)
10012b7c:	e0bff817 	ldw	r2,-32(fp)
10012b80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012b84:	e0bff717 	ldw	r2,-36(fp)
10012b88:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10012b8c:	0005883a 	mov	r2,zero
10012b90:	00000306 	br	10012ba0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10012b94:	00bffa84 	movi	r2,-22
10012b98:	00000106 	br	10012ba0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10012b9c:	00bfde84 	movi	r2,-134
  }
}
10012ba0:	e037883a 	mov	sp,fp
10012ba4:	df000017 	ldw	fp,0(sp)
10012ba8:	dec00104 	addi	sp,sp,4
10012bac:	f800283a 	ret

10012bb0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10012bb0:	defffa04 	addi	sp,sp,-24
10012bb4:	dfc00515 	stw	ra,20(sp)
10012bb8:	df000415 	stw	fp,16(sp)
10012bbc:	df000404 	addi	fp,sp,16
10012bc0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10012bc4:	00800244 	movi	r2,9
10012bc8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10012bcc:	014003f4 	movhi	r5,15
10012bd0:	29509004 	addi	r5,r5,16960
10012bd4:	e13ffd17 	ldw	r4,-12(fp)
10012bd8:	00052300 	call	10005230 <__mulsi3>
10012bdc:	100b883a 	mov	r5,r2
10012be0:	0100bef4 	movhi	r4,763
10012be4:	213c2004 	addi	r4,r4,-3968
10012be8:	00044c80 	call	100044c8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10012bec:	100b883a 	mov	r5,r2
10012bf0:	01200034 	movhi	r4,32768
10012bf4:	213fffc4 	addi	r4,r4,-1
10012bf8:	00044c80 	call	100044c8 <__udivsi3>
10012bfc:	100b883a 	mov	r5,r2
10012c00:	e13fff17 	ldw	r4,-4(fp)
10012c04:	00044c80 	call	100044c8 <__udivsi3>
10012c08:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10012c0c:	e0bffe17 	ldw	r2,-8(fp)
10012c10:	10002a26 	beq	r2,zero,10012cbc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10012c14:	e03ffc15 	stw	zero,-16(fp)
10012c18:	00001706 	br	10012c78 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10012c1c:	00a00034 	movhi	r2,32768
10012c20:	10bfffc4 	addi	r2,r2,-1
10012c24:	10bfffc4 	addi	r2,r2,-1
10012c28:	103ffe1e 	bne	r2,zero,10012c24 <__alt_data_end+0xf8012c24>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10012c2c:	014003f4 	movhi	r5,15
10012c30:	29509004 	addi	r5,r5,16960
10012c34:	e13ffd17 	ldw	r4,-12(fp)
10012c38:	00052300 	call	10005230 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10012c3c:	100b883a 	mov	r5,r2
10012c40:	0100bef4 	movhi	r4,763
10012c44:	213c2004 	addi	r4,r4,-3968
10012c48:	00044c80 	call	100044c8 <__udivsi3>
10012c4c:	100b883a 	mov	r5,r2
10012c50:	01200034 	movhi	r4,32768
10012c54:	213fffc4 	addi	r4,r4,-1
10012c58:	00044c80 	call	100044c8 <__udivsi3>
10012c5c:	1007883a 	mov	r3,r2
10012c60:	e0bfff17 	ldw	r2,-4(fp)
10012c64:	10c5c83a 	sub	r2,r2,r3
10012c68:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10012c6c:	e0bffc17 	ldw	r2,-16(fp)
10012c70:	10800044 	addi	r2,r2,1
10012c74:	e0bffc15 	stw	r2,-16(fp)
10012c78:	e0fffc17 	ldw	r3,-16(fp)
10012c7c:	e0bffe17 	ldw	r2,-8(fp)
10012c80:	18bfe616 	blt	r3,r2,10012c1c <__alt_data_end+0xf8012c1c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10012c84:	014003f4 	movhi	r5,15
10012c88:	29509004 	addi	r5,r5,16960
10012c8c:	e13ffd17 	ldw	r4,-12(fp)
10012c90:	00052300 	call	10005230 <__mulsi3>
10012c94:	100b883a 	mov	r5,r2
10012c98:	0100bef4 	movhi	r4,763
10012c9c:	213c2004 	addi	r4,r4,-3968
10012ca0:	00044c80 	call	100044c8 <__udivsi3>
10012ca4:	e17fff17 	ldw	r5,-4(fp)
10012ca8:	1009883a 	mov	r4,r2
10012cac:	00052300 	call	10005230 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012cb0:	10bfffc4 	addi	r2,r2,-1
10012cb4:	103ffe1e 	bne	r2,zero,10012cb0 <__alt_data_end+0xf8012cb0>
10012cb8:	00000d06 	br	10012cf0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10012cbc:	014003f4 	movhi	r5,15
10012cc0:	29509004 	addi	r5,r5,16960
10012cc4:	e13ffd17 	ldw	r4,-12(fp)
10012cc8:	00052300 	call	10005230 <__mulsi3>
10012ccc:	100b883a 	mov	r5,r2
10012cd0:	0100bef4 	movhi	r4,763
10012cd4:	213c2004 	addi	r4,r4,-3968
10012cd8:	00044c80 	call	100044c8 <__udivsi3>
10012cdc:	e17fff17 	ldw	r5,-4(fp)
10012ce0:	1009883a 	mov	r4,r2
10012ce4:	00052300 	call	10005230 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012ce8:	10bfffc4 	addi	r2,r2,-1
10012cec:	00bffe16 	blt	zero,r2,10012ce8 <__alt_data_end+0xf8012ce8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10012cf0:	0005883a 	mov	r2,zero
}
10012cf4:	e037883a 	mov	sp,fp
10012cf8:	dfc00117 	ldw	ra,4(sp)
10012cfc:	df000017 	ldw	fp,0(sp)
10012d00:	dec00204 	addi	sp,sp,8
10012d04:	f800283a 	ret

10012d08 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10012d08:	deffff04 	addi	sp,sp,-4
10012d0c:	df000015 	stw	fp,0(sp)
10012d10:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10012d14:	0001883a 	nop
10012d18:	e037883a 	mov	sp,fp
10012d1c:	df000017 	ldw	fp,0(sp)
10012d20:	dec00104 	addi	sp,sp,4
10012d24:	f800283a 	ret

10012d28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012d28:	defffe04 	addi	sp,sp,-8
10012d2c:	dfc00115 	stw	ra,4(sp)
10012d30:	df000015 	stw	fp,0(sp)
10012d34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012d38:	d0a00c17 	ldw	r2,-32720(gp)
10012d3c:	10000326 	beq	r2,zero,10012d4c <alt_get_errno+0x24>
10012d40:	d0a00c17 	ldw	r2,-32720(gp)
10012d44:	103ee83a 	callr	r2
10012d48:	00000106 	br	10012d50 <alt_get_errno+0x28>
10012d4c:	d0a6e004 	addi	r2,gp,-25728
}
10012d50:	e037883a 	mov	sp,fp
10012d54:	dfc00117 	ldw	ra,4(sp)
10012d58:	df000017 	ldw	fp,0(sp)
10012d5c:	dec00204 	addi	sp,sp,8
10012d60:	f800283a 	ret

10012d64 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10012d64:	defffa04 	addi	sp,sp,-24
10012d68:	dfc00515 	stw	ra,20(sp)
10012d6c:	df000415 	stw	fp,16(sp)
10012d70:	df000404 	addi	fp,sp,16
10012d74:	e13ffe15 	stw	r4,-8(fp)
10012d78:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10012d7c:	e0bffe17 	ldw	r2,-8(fp)
10012d80:	10000326 	beq	r2,zero,10012d90 <alt_dev_llist_insert+0x2c>
10012d84:	e0bffe17 	ldw	r2,-8(fp)
10012d88:	10800217 	ldw	r2,8(r2)
10012d8c:	1000061e 	bne	r2,zero,10012da8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10012d90:	0012d280 	call	10012d28 <alt_get_errno>
10012d94:	1007883a 	mov	r3,r2
10012d98:	00800584 	movi	r2,22
10012d9c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10012da0:	00bffa84 	movi	r2,-22
10012da4:	00001306 	br	10012df4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10012da8:	e0bffe17 	ldw	r2,-8(fp)
10012dac:	e0ffff17 	ldw	r3,-4(fp)
10012db0:	e0fffc15 	stw	r3,-16(fp)
10012db4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012db8:	e0bffd17 	ldw	r2,-12(fp)
10012dbc:	e0fffc17 	ldw	r3,-16(fp)
10012dc0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012dc4:	e0bffc17 	ldw	r2,-16(fp)
10012dc8:	10c00017 	ldw	r3,0(r2)
10012dcc:	e0bffd17 	ldw	r2,-12(fp)
10012dd0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012dd4:	e0bffc17 	ldw	r2,-16(fp)
10012dd8:	10800017 	ldw	r2,0(r2)
10012ddc:	e0fffd17 	ldw	r3,-12(fp)
10012de0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012de4:	e0bffc17 	ldw	r2,-16(fp)
10012de8:	e0fffd17 	ldw	r3,-12(fp)
10012dec:	10c00015 	stw	r3,0(r2)

  return 0;  
10012df0:	0005883a 	mov	r2,zero
}
10012df4:	e037883a 	mov	sp,fp
10012df8:	dfc00117 	ldw	ra,4(sp)
10012dfc:	df000017 	ldw	fp,0(sp)
10012e00:	dec00204 	addi	sp,sp,8
10012e04:	f800283a 	ret

10012e08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10012e08:	defffd04 	addi	sp,sp,-12
10012e0c:	dfc00215 	stw	ra,8(sp)
10012e10:	df000115 	stw	fp,4(sp)
10012e14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10012e18:	00840074 	movhi	r2,4097
10012e1c:	108f6f04 	addi	r2,r2,15804
10012e20:	e0bfff15 	stw	r2,-4(fp)
10012e24:	00000606 	br	10012e40 <_do_ctors+0x38>
        (*ctor) (); 
10012e28:	e0bfff17 	ldw	r2,-4(fp)
10012e2c:	10800017 	ldw	r2,0(r2)
10012e30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10012e34:	e0bfff17 	ldw	r2,-4(fp)
10012e38:	10bfff04 	addi	r2,r2,-4
10012e3c:	e0bfff15 	stw	r2,-4(fp)
10012e40:	e0ffff17 	ldw	r3,-4(fp)
10012e44:	00840074 	movhi	r2,4097
10012e48:	108f7004 	addi	r2,r2,15808
10012e4c:	18bff62e 	bgeu	r3,r2,10012e28 <__alt_data_end+0xf8012e28>
        (*ctor) (); 
}
10012e50:	0001883a 	nop
10012e54:	e037883a 	mov	sp,fp
10012e58:	dfc00117 	ldw	ra,4(sp)
10012e5c:	df000017 	ldw	fp,0(sp)
10012e60:	dec00204 	addi	sp,sp,8
10012e64:	f800283a 	ret

10012e68 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10012e68:	defffd04 	addi	sp,sp,-12
10012e6c:	dfc00215 	stw	ra,8(sp)
10012e70:	df000115 	stw	fp,4(sp)
10012e74:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10012e78:	00840074 	movhi	r2,4097
10012e7c:	108f6f04 	addi	r2,r2,15804
10012e80:	e0bfff15 	stw	r2,-4(fp)
10012e84:	00000606 	br	10012ea0 <_do_dtors+0x38>
        (*dtor) (); 
10012e88:	e0bfff17 	ldw	r2,-4(fp)
10012e8c:	10800017 	ldw	r2,0(r2)
10012e90:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10012e94:	e0bfff17 	ldw	r2,-4(fp)
10012e98:	10bfff04 	addi	r2,r2,-4
10012e9c:	e0bfff15 	stw	r2,-4(fp)
10012ea0:	e0ffff17 	ldw	r3,-4(fp)
10012ea4:	00840074 	movhi	r2,4097
10012ea8:	108f7004 	addi	r2,r2,15808
10012eac:	18bff62e 	bgeu	r3,r2,10012e88 <__alt_data_end+0xf8012e88>
        (*dtor) (); 
}
10012eb0:	0001883a 	nop
10012eb4:	e037883a 	mov	sp,fp
10012eb8:	dfc00117 	ldw	ra,4(sp)
10012ebc:	df000017 	ldw	fp,0(sp)
10012ec0:	dec00204 	addi	sp,sp,8
10012ec4:	f800283a 	ret

10012ec8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10012ec8:	deffff04 	addi	sp,sp,-4
10012ecc:	df000015 	stw	fp,0(sp)
10012ed0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10012ed4:	0001883a 	nop
10012ed8:	e037883a 	mov	sp,fp
10012edc:	df000017 	ldw	fp,0(sp)
10012ee0:	dec00104 	addi	sp,sp,4
10012ee4:	f800283a 	ret

10012ee8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10012ee8:	defff904 	addi	sp,sp,-28
10012eec:	dfc00615 	stw	ra,24(sp)
10012ef0:	df000515 	stw	fp,20(sp)
10012ef4:	df000504 	addi	fp,sp,20
10012ef8:	e13ffc15 	stw	r4,-16(fp)
10012efc:	e17ffd15 	stw	r5,-12(fp)
10012f00:	e1bffe15 	stw	r6,-8(fp)
10012f04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10012f08:	e0800217 	ldw	r2,8(fp)
10012f0c:	d8800015 	stw	r2,0(sp)
10012f10:	e1ffff17 	ldw	r7,-4(fp)
10012f14:	e1bffe17 	ldw	r6,-8(fp)
10012f18:	e17ffd17 	ldw	r5,-12(fp)
10012f1c:	e13ffc17 	ldw	r4,-16(fp)
10012f20:	00130980 	call	10013098 <alt_iic_isr_register>
}  
10012f24:	e037883a 	mov	sp,fp
10012f28:	dfc00117 	ldw	ra,4(sp)
10012f2c:	df000017 	ldw	fp,0(sp)
10012f30:	dec00204 	addi	sp,sp,8
10012f34:	f800283a 	ret

10012f38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10012f38:	defff904 	addi	sp,sp,-28
10012f3c:	df000615 	stw	fp,24(sp)
10012f40:	df000604 	addi	fp,sp,24
10012f44:	e13ffe15 	stw	r4,-8(fp)
10012f48:	e17fff15 	stw	r5,-4(fp)
10012f4c:	e0bfff17 	ldw	r2,-4(fp)
10012f50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012f54:	0005303a 	rdctl	r2,status
10012f58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012f5c:	e0fffb17 	ldw	r3,-20(fp)
10012f60:	00bfff84 	movi	r2,-2
10012f64:	1884703a 	and	r2,r3,r2
10012f68:	1001703a 	wrctl	status,r2
  
  return context;
10012f6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012f70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10012f74:	00c00044 	movi	r3,1
10012f78:	e0bffa17 	ldw	r2,-24(fp)
10012f7c:	1884983a 	sll	r2,r3,r2
10012f80:	1007883a 	mov	r3,r2
10012f84:	d0a6e417 	ldw	r2,-25712(gp)
10012f88:	1884b03a 	or	r2,r3,r2
10012f8c:	d0a6e415 	stw	r2,-25712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10012f90:	d0a6e417 	ldw	r2,-25712(gp)
10012f94:	100170fa 	wrctl	ienable,r2
10012f98:	e0bffc17 	ldw	r2,-16(fp)
10012f9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012fa0:	e0bffd17 	ldw	r2,-12(fp)
10012fa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10012fa8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10012fac:	0001883a 	nop
}
10012fb0:	e037883a 	mov	sp,fp
10012fb4:	df000017 	ldw	fp,0(sp)
10012fb8:	dec00104 	addi	sp,sp,4
10012fbc:	f800283a 	ret

10012fc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10012fc0:	defff904 	addi	sp,sp,-28
10012fc4:	df000615 	stw	fp,24(sp)
10012fc8:	df000604 	addi	fp,sp,24
10012fcc:	e13ffe15 	stw	r4,-8(fp)
10012fd0:	e17fff15 	stw	r5,-4(fp)
10012fd4:	e0bfff17 	ldw	r2,-4(fp)
10012fd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012fdc:	0005303a 	rdctl	r2,status
10012fe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012fe4:	e0fffb17 	ldw	r3,-20(fp)
10012fe8:	00bfff84 	movi	r2,-2
10012fec:	1884703a 	and	r2,r3,r2
10012ff0:	1001703a 	wrctl	status,r2
  
  return context;
10012ff4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012ff8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10012ffc:	00c00044 	movi	r3,1
10013000:	e0bffa17 	ldw	r2,-24(fp)
10013004:	1884983a 	sll	r2,r3,r2
10013008:	0084303a 	nor	r2,zero,r2
1001300c:	1007883a 	mov	r3,r2
10013010:	d0a6e417 	ldw	r2,-25712(gp)
10013014:	1884703a 	and	r2,r3,r2
10013018:	d0a6e415 	stw	r2,-25712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001301c:	d0a6e417 	ldw	r2,-25712(gp)
10013020:	100170fa 	wrctl	ienable,r2
10013024:	e0bffc17 	ldw	r2,-16(fp)
10013028:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001302c:	e0bffd17 	ldw	r2,-12(fp)
10013030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013034:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013038:	0001883a 	nop
}
1001303c:	e037883a 	mov	sp,fp
10013040:	df000017 	ldw	fp,0(sp)
10013044:	dec00104 	addi	sp,sp,4
10013048:	f800283a 	ret

1001304c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001304c:	defffc04 	addi	sp,sp,-16
10013050:	df000315 	stw	fp,12(sp)
10013054:	df000304 	addi	fp,sp,12
10013058:	e13ffe15 	stw	r4,-8(fp)
1001305c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10013060:	000530fa 	rdctl	r2,ienable
10013064:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10013068:	00c00044 	movi	r3,1
1001306c:	e0bfff17 	ldw	r2,-4(fp)
10013070:	1884983a 	sll	r2,r3,r2
10013074:	1007883a 	mov	r3,r2
10013078:	e0bffd17 	ldw	r2,-12(fp)
1001307c:	1884703a 	and	r2,r3,r2
10013080:	1004c03a 	cmpne	r2,r2,zero
10013084:	10803fcc 	andi	r2,r2,255
}
10013088:	e037883a 	mov	sp,fp
1001308c:	df000017 	ldw	fp,0(sp)
10013090:	dec00104 	addi	sp,sp,4
10013094:	f800283a 	ret

10013098 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013098:	defff504 	addi	sp,sp,-44
1001309c:	dfc00a15 	stw	ra,40(sp)
100130a0:	df000915 	stw	fp,36(sp)
100130a4:	df000904 	addi	fp,sp,36
100130a8:	e13ffc15 	stw	r4,-16(fp)
100130ac:	e17ffd15 	stw	r5,-12(fp)
100130b0:	e1bffe15 	stw	r6,-8(fp)
100130b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100130b8:	00bffa84 	movi	r2,-22
100130bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100130c0:	e0bffd17 	ldw	r2,-12(fp)
100130c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100130c8:	e0bff817 	ldw	r2,-32(fp)
100130cc:	10800808 	cmpgei	r2,r2,32
100130d0:	1000271e 	bne	r2,zero,10013170 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100130d4:	0005303a 	rdctl	r2,status
100130d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100130dc:	e0fffb17 	ldw	r3,-20(fp)
100130e0:	00bfff84 	movi	r2,-2
100130e4:	1884703a 	and	r2,r3,r2
100130e8:	1001703a 	wrctl	status,r2
  
  return context;
100130ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100130f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100130f4:	00840074 	movhi	r2,4097
100130f8:	109fa504 	addi	r2,r2,32404
100130fc:	e0fff817 	ldw	r3,-32(fp)
10013100:	180690fa 	slli	r3,r3,3
10013104:	10c5883a 	add	r2,r2,r3
10013108:	e0fffe17 	ldw	r3,-8(fp)
1001310c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10013110:	00840074 	movhi	r2,4097
10013114:	109fa504 	addi	r2,r2,32404
10013118:	e0fff817 	ldw	r3,-32(fp)
1001311c:	180690fa 	slli	r3,r3,3
10013120:	10c5883a 	add	r2,r2,r3
10013124:	10800104 	addi	r2,r2,4
10013128:	e0ffff17 	ldw	r3,-4(fp)
1001312c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10013130:	e0bffe17 	ldw	r2,-8(fp)
10013134:	10000526 	beq	r2,zero,1001314c <alt_iic_isr_register+0xb4>
10013138:	e0bff817 	ldw	r2,-32(fp)
1001313c:	100b883a 	mov	r5,r2
10013140:	e13ffc17 	ldw	r4,-16(fp)
10013144:	0012f380 	call	10012f38 <alt_ic_irq_enable>
10013148:	00000406 	br	1001315c <alt_iic_isr_register+0xc4>
1001314c:	e0bff817 	ldw	r2,-32(fp)
10013150:	100b883a 	mov	r5,r2
10013154:	e13ffc17 	ldw	r4,-16(fp)
10013158:	0012fc00 	call	10012fc0 <alt_ic_irq_disable>
1001315c:	e0bff715 	stw	r2,-36(fp)
10013160:	e0bffa17 	ldw	r2,-24(fp)
10013164:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013168:	e0bff917 	ldw	r2,-28(fp)
1001316c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10013170:	e0bff717 	ldw	r2,-36(fp)
}
10013174:	e037883a 	mov	sp,fp
10013178:	dfc00117 	ldw	ra,4(sp)
1001317c:	df000017 	ldw	fp,0(sp)
10013180:	dec00204 	addi	sp,sp,8
10013184:	f800283a 	ret

10013188 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013188:	defff804 	addi	sp,sp,-32
1001318c:	dfc00715 	stw	ra,28(sp)
10013190:	df000615 	stw	fp,24(sp)
10013194:	dc000515 	stw	r16,20(sp)
10013198:	df000604 	addi	fp,sp,24
1001319c:	e13ffb15 	stw	r4,-20(fp)
100131a0:	e17ffc15 	stw	r5,-16(fp)
100131a4:	e1bffd15 	stw	r6,-12(fp)
100131a8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100131ac:	e1bffe17 	ldw	r6,-8(fp)
100131b0:	e17ffd17 	ldw	r5,-12(fp)
100131b4:	e13ffc17 	ldw	r4,-16(fp)
100131b8:	00134100 	call	10013410 <open>
100131bc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100131c0:	e0bffa17 	ldw	r2,-24(fp)
100131c4:	10002216 	blt	r2,zero,10013250 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100131c8:	04040074 	movhi	r16,4097
100131cc:	84143b04 	addi	r16,r16,20716
100131d0:	e0bffa17 	ldw	r2,-24(fp)
100131d4:	01400304 	movi	r5,12
100131d8:	1009883a 	mov	r4,r2
100131dc:	00052300 	call	10005230 <__mulsi3>
100131e0:	8085883a 	add	r2,r16,r2
100131e4:	10c00017 	ldw	r3,0(r2)
100131e8:	e0bffb17 	ldw	r2,-20(fp)
100131ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100131f0:	04040074 	movhi	r16,4097
100131f4:	84143b04 	addi	r16,r16,20716
100131f8:	e0bffa17 	ldw	r2,-24(fp)
100131fc:	01400304 	movi	r5,12
10013200:	1009883a 	mov	r4,r2
10013204:	00052300 	call	10005230 <__mulsi3>
10013208:	8085883a 	add	r2,r16,r2
1001320c:	10800104 	addi	r2,r2,4
10013210:	10c00017 	ldw	r3,0(r2)
10013214:	e0bffb17 	ldw	r2,-20(fp)
10013218:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1001321c:	04040074 	movhi	r16,4097
10013220:	84143b04 	addi	r16,r16,20716
10013224:	e0bffa17 	ldw	r2,-24(fp)
10013228:	01400304 	movi	r5,12
1001322c:	1009883a 	mov	r4,r2
10013230:	00052300 	call	10005230 <__mulsi3>
10013234:	8085883a 	add	r2,r16,r2
10013238:	10800204 	addi	r2,r2,8
1001323c:	10c00017 	ldw	r3,0(r2)
10013240:	e0bffb17 	ldw	r2,-20(fp)
10013244:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013248:	e13ffa17 	ldw	r4,-24(fp)
1001324c:	0011c100 	call	10011c10 <alt_release_fd>
  }
} 
10013250:	0001883a 	nop
10013254:	e6ffff04 	addi	sp,fp,-4
10013258:	dfc00217 	ldw	ra,8(sp)
1001325c:	df000117 	ldw	fp,4(sp)
10013260:	dc000017 	ldw	r16,0(sp)
10013264:	dec00304 	addi	sp,sp,12
10013268:	f800283a 	ret

1001326c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001326c:	defffb04 	addi	sp,sp,-20
10013270:	dfc00415 	stw	ra,16(sp)
10013274:	df000315 	stw	fp,12(sp)
10013278:	df000304 	addi	fp,sp,12
1001327c:	e13ffd15 	stw	r4,-12(fp)
10013280:	e17ffe15 	stw	r5,-8(fp)
10013284:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013288:	01c07fc4 	movi	r7,511
1001328c:	01800044 	movi	r6,1
10013290:	e17ffd17 	ldw	r5,-12(fp)
10013294:	01040074 	movhi	r4,4097
10013298:	21143e04 	addi	r4,r4,20728
1001329c:	00131880 	call	10013188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100132a0:	01c07fc4 	movi	r7,511
100132a4:	000d883a 	mov	r6,zero
100132a8:	e17ffe17 	ldw	r5,-8(fp)
100132ac:	01040074 	movhi	r4,4097
100132b0:	21143b04 	addi	r4,r4,20716
100132b4:	00131880 	call	10013188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100132b8:	01c07fc4 	movi	r7,511
100132bc:	01800044 	movi	r6,1
100132c0:	e17fff17 	ldw	r5,-4(fp)
100132c4:	01040074 	movhi	r4,4097
100132c8:	21144104 	addi	r4,r4,20740
100132cc:	00131880 	call	10013188 <alt_open_fd>
}  
100132d0:	0001883a 	nop
100132d4:	e037883a 	mov	sp,fp
100132d8:	dfc00117 	ldw	ra,4(sp)
100132dc:	df000017 	ldw	fp,0(sp)
100132e0:	dec00204 	addi	sp,sp,8
100132e4:	f800283a 	ret

100132e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100132e8:	defffe04 	addi	sp,sp,-8
100132ec:	dfc00115 	stw	ra,4(sp)
100132f0:	df000015 	stw	fp,0(sp)
100132f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100132f8:	d0a00c17 	ldw	r2,-32720(gp)
100132fc:	10000326 	beq	r2,zero,1001330c <alt_get_errno+0x24>
10013300:	d0a00c17 	ldw	r2,-32720(gp)
10013304:	103ee83a 	callr	r2
10013308:	00000106 	br	10013310 <alt_get_errno+0x28>
1001330c:	d0a6e004 	addi	r2,gp,-25728
}
10013310:	e037883a 	mov	sp,fp
10013314:	dfc00117 	ldw	ra,4(sp)
10013318:	df000017 	ldw	fp,0(sp)
1001331c:	dec00204 	addi	sp,sp,8
10013320:	f800283a 	ret

10013324 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013324:	defffb04 	addi	sp,sp,-20
10013328:	dfc00415 	stw	ra,16(sp)
1001332c:	df000315 	stw	fp,12(sp)
10013330:	dc000215 	stw	r16,8(sp)
10013334:	df000304 	addi	fp,sp,12
10013338:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1001333c:	e0bffe17 	ldw	r2,-8(fp)
10013340:	10800217 	ldw	r2,8(r2)
10013344:	10d00034 	orhi	r3,r2,16384
10013348:	e0bffe17 	ldw	r2,-8(fp)
1001334c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013350:	e03ffd15 	stw	zero,-12(fp)
10013354:	00002306 	br	100133e4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013358:	04040074 	movhi	r16,4097
1001335c:	84143b04 	addi	r16,r16,20716
10013360:	e0bffd17 	ldw	r2,-12(fp)
10013364:	01400304 	movi	r5,12
10013368:	1009883a 	mov	r4,r2
1001336c:	00052300 	call	10005230 <__mulsi3>
10013370:	8085883a 	add	r2,r16,r2
10013374:	10c00017 	ldw	r3,0(r2)
10013378:	e0bffe17 	ldw	r2,-8(fp)
1001337c:	10800017 	ldw	r2,0(r2)
10013380:	1880151e 	bne	r3,r2,100133d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013384:	04040074 	movhi	r16,4097
10013388:	84143b04 	addi	r16,r16,20716
1001338c:	e0bffd17 	ldw	r2,-12(fp)
10013390:	01400304 	movi	r5,12
10013394:	1009883a 	mov	r4,r2
10013398:	00052300 	call	10005230 <__mulsi3>
1001339c:	8085883a 	add	r2,r16,r2
100133a0:	10800204 	addi	r2,r2,8
100133a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100133a8:	10000b0e 	bge	r2,zero,100133d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100133ac:	01400304 	movi	r5,12
100133b0:	e13ffd17 	ldw	r4,-12(fp)
100133b4:	00052300 	call	10005230 <__mulsi3>
100133b8:	1007883a 	mov	r3,r2
100133bc:	00840074 	movhi	r2,4097
100133c0:	10943b04 	addi	r2,r2,20716
100133c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100133c8:	e0bffe17 	ldw	r2,-8(fp)
100133cc:	18800226 	beq	r3,r2,100133d8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100133d0:	00bffcc4 	movi	r2,-13
100133d4:	00000806 	br	100133f8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100133d8:	e0bffd17 	ldw	r2,-12(fp)
100133dc:	10800044 	addi	r2,r2,1
100133e0:	e0bffd15 	stw	r2,-12(fp)
100133e4:	d0a00b17 	ldw	r2,-32724(gp)
100133e8:	1007883a 	mov	r3,r2
100133ec:	e0bffd17 	ldw	r2,-12(fp)
100133f0:	18bfd92e 	bgeu	r3,r2,10013358 <__alt_data_end+0xf8013358>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100133f4:	0005883a 	mov	r2,zero
}
100133f8:	e6ffff04 	addi	sp,fp,-4
100133fc:	dfc00217 	ldw	ra,8(sp)
10013400:	df000117 	ldw	fp,4(sp)
10013404:	dc000017 	ldw	r16,0(sp)
10013408:	dec00304 	addi	sp,sp,12
1001340c:	f800283a 	ret

10013410 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013410:	defff604 	addi	sp,sp,-40
10013414:	dfc00915 	stw	ra,36(sp)
10013418:	df000815 	stw	fp,32(sp)
1001341c:	df000804 	addi	fp,sp,32
10013420:	e13ffd15 	stw	r4,-12(fp)
10013424:	e17ffe15 	stw	r5,-8(fp)
10013428:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001342c:	00bfffc4 	movi	r2,-1
10013430:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10013434:	00bffb44 	movi	r2,-19
10013438:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001343c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013440:	d1600904 	addi	r5,gp,-32732
10013444:	e13ffd17 	ldw	r4,-12(fp)
10013448:	00137340 	call	10013734 <alt_find_dev>
1001344c:	e0bff815 	stw	r2,-32(fp)
10013450:	e0bff817 	ldw	r2,-32(fp)
10013454:	1000051e 	bne	r2,zero,1001346c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013458:	e13ffd17 	ldw	r4,-12(fp)
1001345c:	00137c40 	call	100137c4 <alt_find_file>
10013460:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013464:	00800044 	movi	r2,1
10013468:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1001346c:	e0bff817 	ldw	r2,-32(fp)
10013470:	10002b26 	beq	r2,zero,10013520 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013474:	e13ff817 	ldw	r4,-32(fp)
10013478:	00138cc0 	call	100138cc <alt_get_fd>
1001347c:	e0bff915 	stw	r2,-28(fp)
10013480:	e0bff917 	ldw	r2,-28(fp)
10013484:	1000030e 	bge	r2,zero,10013494 <open+0x84>
    {
      status = index;
10013488:	e0bff917 	ldw	r2,-28(fp)
1001348c:	e0bffa15 	stw	r2,-24(fp)
10013490:	00002506 	br	10013528 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10013494:	01400304 	movi	r5,12
10013498:	e13ff917 	ldw	r4,-28(fp)
1001349c:	00052300 	call	10005230 <__mulsi3>
100134a0:	1007883a 	mov	r3,r2
100134a4:	00840074 	movhi	r2,4097
100134a8:	10943b04 	addi	r2,r2,20716
100134ac:	1885883a 	add	r2,r3,r2
100134b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100134b4:	e0fffe17 	ldw	r3,-8(fp)
100134b8:	00900034 	movhi	r2,16384
100134bc:	10bfffc4 	addi	r2,r2,-1
100134c0:	1886703a 	and	r3,r3,r2
100134c4:	e0bffc17 	ldw	r2,-16(fp)
100134c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100134cc:	e0bffb17 	ldw	r2,-20(fp)
100134d0:	1000051e 	bne	r2,zero,100134e8 <open+0xd8>
100134d4:	e13ffc17 	ldw	r4,-16(fp)
100134d8:	00133240 	call	10013324 <alt_file_locked>
100134dc:	e0bffa15 	stw	r2,-24(fp)
100134e0:	e0bffa17 	ldw	r2,-24(fp)
100134e4:	10001016 	blt	r2,zero,10013528 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100134e8:	e0bff817 	ldw	r2,-32(fp)
100134ec:	10800317 	ldw	r2,12(r2)
100134f0:	10000826 	beq	r2,zero,10013514 <open+0x104>
100134f4:	e0bff817 	ldw	r2,-32(fp)
100134f8:	10800317 	ldw	r2,12(r2)
100134fc:	e1ffff17 	ldw	r7,-4(fp)
10013500:	e1bffe17 	ldw	r6,-8(fp)
10013504:	e17ffd17 	ldw	r5,-12(fp)
10013508:	e13ffc17 	ldw	r4,-16(fp)
1001350c:	103ee83a 	callr	r2
10013510:	00000106 	br	10013518 <open+0x108>
10013514:	0005883a 	mov	r2,zero
10013518:	e0bffa15 	stw	r2,-24(fp)
1001351c:	00000206 	br	10013528 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013520:	00bffb44 	movi	r2,-19
10013524:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013528:	e0bffa17 	ldw	r2,-24(fp)
1001352c:	1000090e 	bge	r2,zero,10013554 <open+0x144>
  {
    alt_release_fd (index);  
10013530:	e13ff917 	ldw	r4,-28(fp)
10013534:	0011c100 	call	10011c10 <alt_release_fd>
    ALT_ERRNO = -status;
10013538:	00132e80 	call	100132e8 <alt_get_errno>
1001353c:	1007883a 	mov	r3,r2
10013540:	e0bffa17 	ldw	r2,-24(fp)
10013544:	0085c83a 	sub	r2,zero,r2
10013548:	18800015 	stw	r2,0(r3)
    return -1;
1001354c:	00bfffc4 	movi	r2,-1
10013550:	00000106 	br	10013558 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10013554:	e0bff917 	ldw	r2,-28(fp)
}
10013558:	e037883a 	mov	sp,fp
1001355c:	dfc00117 	ldw	ra,4(sp)
10013560:	df000017 	ldw	fp,0(sp)
10013564:	dec00204 	addi	sp,sp,8
10013568:	f800283a 	ret

1001356c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1001356c:	defffa04 	addi	sp,sp,-24
10013570:	df000515 	stw	fp,20(sp)
10013574:	df000504 	addi	fp,sp,20
10013578:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001357c:	0005303a 	rdctl	r2,status
10013580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013584:	e0fffc17 	ldw	r3,-16(fp)
10013588:	00bfff84 	movi	r2,-2
1001358c:	1884703a 	and	r2,r3,r2
10013590:	1001703a 	wrctl	status,r2
  
  return context;
10013594:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013598:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1001359c:	e0bfff17 	ldw	r2,-4(fp)
100135a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100135a4:	e0bffd17 	ldw	r2,-12(fp)
100135a8:	10800017 	ldw	r2,0(r2)
100135ac:	e0fffd17 	ldw	r3,-12(fp)
100135b0:	18c00117 	ldw	r3,4(r3)
100135b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100135b8:	e0bffd17 	ldw	r2,-12(fp)
100135bc:	10800117 	ldw	r2,4(r2)
100135c0:	e0fffd17 	ldw	r3,-12(fp)
100135c4:	18c00017 	ldw	r3,0(r3)
100135c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100135cc:	e0bffd17 	ldw	r2,-12(fp)
100135d0:	e0fffd17 	ldw	r3,-12(fp)
100135d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100135d8:	e0bffd17 	ldw	r2,-12(fp)
100135dc:	e0fffd17 	ldw	r3,-12(fp)
100135e0:	10c00015 	stw	r3,0(r2)
100135e4:	e0bffb17 	ldw	r2,-20(fp)
100135e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100135ec:	e0bffe17 	ldw	r2,-8(fp)
100135f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100135f4:	0001883a 	nop
100135f8:	e037883a 	mov	sp,fp
100135fc:	df000017 	ldw	fp,0(sp)
10013600:	dec00104 	addi	sp,sp,4
10013604:	f800283a 	ret

10013608 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013608:	defffb04 	addi	sp,sp,-20
1001360c:	dfc00415 	stw	ra,16(sp)
10013610:	df000315 	stw	fp,12(sp)
10013614:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013618:	d0a00f17 	ldw	r2,-32708(gp)
1001361c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013620:	d0a6e617 	ldw	r2,-25704(gp)
10013624:	10800044 	addi	r2,r2,1
10013628:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001362c:	00002e06 	br	100136e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10013630:	e0bffd17 	ldw	r2,-12(fp)
10013634:	10800017 	ldw	r2,0(r2)
10013638:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001363c:	e0bffd17 	ldw	r2,-12(fp)
10013640:	10800403 	ldbu	r2,16(r2)
10013644:	10803fcc 	andi	r2,r2,255
10013648:	10000426 	beq	r2,zero,1001365c <alt_tick+0x54>
1001364c:	d0a6e617 	ldw	r2,-25704(gp)
10013650:	1000021e 	bne	r2,zero,1001365c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013654:	e0bffd17 	ldw	r2,-12(fp)
10013658:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001365c:	e0bffd17 	ldw	r2,-12(fp)
10013660:	10800217 	ldw	r2,8(r2)
10013664:	d0e6e617 	ldw	r3,-25704(gp)
10013668:	18801d36 	bltu	r3,r2,100136e0 <alt_tick+0xd8>
1001366c:	e0bffd17 	ldw	r2,-12(fp)
10013670:	10800403 	ldbu	r2,16(r2)
10013674:	10803fcc 	andi	r2,r2,255
10013678:	1000191e 	bne	r2,zero,100136e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001367c:	e0bffd17 	ldw	r2,-12(fp)
10013680:	10800317 	ldw	r2,12(r2)
10013684:	e0fffd17 	ldw	r3,-12(fp)
10013688:	18c00517 	ldw	r3,20(r3)
1001368c:	1809883a 	mov	r4,r3
10013690:	103ee83a 	callr	r2
10013694:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013698:	e0bfff17 	ldw	r2,-4(fp)
1001369c:	1000031e 	bne	r2,zero,100136ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100136a0:	e13ffd17 	ldw	r4,-12(fp)
100136a4:	001356c0 	call	1001356c <alt_alarm_stop>
100136a8:	00000d06 	br	100136e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100136ac:	e0bffd17 	ldw	r2,-12(fp)
100136b0:	10c00217 	ldw	r3,8(r2)
100136b4:	e0bfff17 	ldw	r2,-4(fp)
100136b8:	1887883a 	add	r3,r3,r2
100136bc:	e0bffd17 	ldw	r2,-12(fp)
100136c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100136c4:	e0bffd17 	ldw	r2,-12(fp)
100136c8:	10c00217 	ldw	r3,8(r2)
100136cc:	d0a6e617 	ldw	r2,-25704(gp)
100136d0:	1880032e 	bgeu	r3,r2,100136e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100136d4:	e0bffd17 	ldw	r2,-12(fp)
100136d8:	00c00044 	movi	r3,1
100136dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100136e0:	e0bffe17 	ldw	r2,-8(fp)
100136e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100136e8:	e0fffd17 	ldw	r3,-12(fp)
100136ec:	d0a00f04 	addi	r2,gp,-32708
100136f0:	18bfcf1e 	bne	r3,r2,10013630 <__alt_data_end+0xf8013630>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100136f4:	0001883a 	nop
}
100136f8:	0001883a 	nop
100136fc:	e037883a 	mov	sp,fp
10013700:	dfc00117 	ldw	ra,4(sp)
10013704:	df000017 	ldw	fp,0(sp)
10013708:	dec00204 	addi	sp,sp,8
1001370c:	f800283a 	ret

10013710 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10013710:	deffff04 	addi	sp,sp,-4
10013714:	df000015 	stw	fp,0(sp)
10013718:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1001371c:	000170fa 	wrctl	ienable,zero
}
10013720:	0001883a 	nop
10013724:	e037883a 	mov	sp,fp
10013728:	df000017 	ldw	fp,0(sp)
1001372c:	dec00104 	addi	sp,sp,4
10013730:	f800283a 	ret

10013734 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013734:	defffa04 	addi	sp,sp,-24
10013738:	dfc00515 	stw	ra,20(sp)
1001373c:	df000415 	stw	fp,16(sp)
10013740:	df000404 	addi	fp,sp,16
10013744:	e13ffe15 	stw	r4,-8(fp)
10013748:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1001374c:	e0bfff17 	ldw	r2,-4(fp)
10013750:	10800017 	ldw	r2,0(r2)
10013754:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013758:	e13ffe17 	ldw	r4,-8(fp)
1001375c:	00054600 	call	10005460 <strlen>
10013760:	10800044 	addi	r2,r2,1
10013764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013768:	00000d06 	br	100137a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001376c:	e0bffc17 	ldw	r2,-16(fp)
10013770:	10800217 	ldw	r2,8(r2)
10013774:	e0fffd17 	ldw	r3,-12(fp)
10013778:	180d883a 	mov	r6,r3
1001377c:	e17ffe17 	ldw	r5,-8(fp)
10013780:	1009883a 	mov	r4,r2
10013784:	0013a780 	call	10013a78 <memcmp>
10013788:	1000021e 	bne	r2,zero,10013794 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001378c:	e0bffc17 	ldw	r2,-16(fp)
10013790:	00000706 	br	100137b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013794:	e0bffc17 	ldw	r2,-16(fp)
10013798:	10800017 	ldw	r2,0(r2)
1001379c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100137a0:	e0fffc17 	ldw	r3,-16(fp)
100137a4:	e0bfff17 	ldw	r2,-4(fp)
100137a8:	18bff01e 	bne	r3,r2,1001376c <__alt_data_end+0xf801376c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100137ac:	0005883a 	mov	r2,zero
}
100137b0:	e037883a 	mov	sp,fp
100137b4:	dfc00117 	ldw	ra,4(sp)
100137b8:	df000017 	ldw	fp,0(sp)
100137bc:	dec00204 	addi	sp,sp,8
100137c0:	f800283a 	ret

100137c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100137c4:	defffb04 	addi	sp,sp,-20
100137c8:	dfc00415 	stw	ra,16(sp)
100137cc:	df000315 	stw	fp,12(sp)
100137d0:	df000304 	addi	fp,sp,12
100137d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100137d8:	d0a00717 	ldw	r2,-32740(gp)
100137dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100137e0:	00003106 	br	100138a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100137e4:	e0bffd17 	ldw	r2,-12(fp)
100137e8:	10800217 	ldw	r2,8(r2)
100137ec:	1009883a 	mov	r4,r2
100137f0:	00054600 	call	10005460 <strlen>
100137f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100137f8:	e0bffd17 	ldw	r2,-12(fp)
100137fc:	10c00217 	ldw	r3,8(r2)
10013800:	e0bffe17 	ldw	r2,-8(fp)
10013804:	10bfffc4 	addi	r2,r2,-1
10013808:	1885883a 	add	r2,r3,r2
1001380c:	10800003 	ldbu	r2,0(r2)
10013810:	10803fcc 	andi	r2,r2,255
10013814:	1080201c 	xori	r2,r2,128
10013818:	10bfe004 	addi	r2,r2,-128
1001381c:	10800bd8 	cmpnei	r2,r2,47
10013820:	1000031e 	bne	r2,zero,10013830 <alt_find_file+0x6c>
    {
      len -= 1;
10013824:	e0bffe17 	ldw	r2,-8(fp)
10013828:	10bfffc4 	addi	r2,r2,-1
1001382c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013830:	e0bffe17 	ldw	r2,-8(fp)
10013834:	e0ffff17 	ldw	r3,-4(fp)
10013838:	1885883a 	add	r2,r3,r2
1001383c:	10800003 	ldbu	r2,0(r2)
10013840:	10803fcc 	andi	r2,r2,255
10013844:	1080201c 	xori	r2,r2,128
10013848:	10bfe004 	addi	r2,r2,-128
1001384c:	10800be0 	cmpeqi	r2,r2,47
10013850:	1000081e 	bne	r2,zero,10013874 <alt_find_file+0xb0>
10013854:	e0bffe17 	ldw	r2,-8(fp)
10013858:	e0ffff17 	ldw	r3,-4(fp)
1001385c:	1885883a 	add	r2,r3,r2
10013860:	10800003 	ldbu	r2,0(r2)
10013864:	10803fcc 	andi	r2,r2,255
10013868:	1080201c 	xori	r2,r2,128
1001386c:	10bfe004 	addi	r2,r2,-128
10013870:	10000a1e 	bne	r2,zero,1001389c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10013874:	e0bffd17 	ldw	r2,-12(fp)
10013878:	10800217 	ldw	r2,8(r2)
1001387c:	e0fffe17 	ldw	r3,-8(fp)
10013880:	180d883a 	mov	r6,r3
10013884:	e17fff17 	ldw	r5,-4(fp)
10013888:	1009883a 	mov	r4,r2
1001388c:	0013a780 	call	10013a78 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013890:	1000021e 	bne	r2,zero,1001389c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10013894:	e0bffd17 	ldw	r2,-12(fp)
10013898:	00000706 	br	100138b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1001389c:	e0bffd17 	ldw	r2,-12(fp)
100138a0:	10800017 	ldw	r2,0(r2)
100138a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100138a8:	e0fffd17 	ldw	r3,-12(fp)
100138ac:	d0a00704 	addi	r2,gp,-32740
100138b0:	18bfcc1e 	bne	r3,r2,100137e4 <__alt_data_end+0xf80137e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100138b4:	0005883a 	mov	r2,zero
}
100138b8:	e037883a 	mov	sp,fp
100138bc:	dfc00117 	ldw	ra,4(sp)
100138c0:	df000017 	ldw	fp,0(sp)
100138c4:	dec00204 	addi	sp,sp,8
100138c8:	f800283a 	ret

100138cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100138cc:	defffa04 	addi	sp,sp,-24
100138d0:	dfc00515 	stw	ra,20(sp)
100138d4:	df000415 	stw	fp,16(sp)
100138d8:	dc000315 	stw	r16,12(sp)
100138dc:	df000404 	addi	fp,sp,16
100138e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100138e4:	00bffa04 	movi	r2,-24
100138e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100138ec:	e03ffc15 	stw	zero,-16(fp)
100138f0:	00001d06 	br	10013968 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
100138f4:	04040074 	movhi	r16,4097
100138f8:	84143b04 	addi	r16,r16,20716
100138fc:	e0bffc17 	ldw	r2,-16(fp)
10013900:	01400304 	movi	r5,12
10013904:	1009883a 	mov	r4,r2
10013908:	00052300 	call	10005230 <__mulsi3>
1001390c:	8085883a 	add	r2,r16,r2
10013910:	10800017 	ldw	r2,0(r2)
10013914:	1000111e 	bne	r2,zero,1001395c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10013918:	04040074 	movhi	r16,4097
1001391c:	84143b04 	addi	r16,r16,20716
10013920:	e0bffc17 	ldw	r2,-16(fp)
10013924:	01400304 	movi	r5,12
10013928:	1009883a 	mov	r4,r2
1001392c:	00052300 	call	10005230 <__mulsi3>
10013930:	8085883a 	add	r2,r16,r2
10013934:	e0fffe17 	ldw	r3,-8(fp)
10013938:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1001393c:	d0e00b17 	ldw	r3,-32724(gp)
10013940:	e0bffc17 	ldw	r2,-16(fp)
10013944:	1880020e 	bge	r3,r2,10013950 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10013948:	e0bffc17 	ldw	r2,-16(fp)
1001394c:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
10013950:	e0bffc17 	ldw	r2,-16(fp)
10013954:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10013958:	00000606 	br	10013974 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001395c:	e0bffc17 	ldw	r2,-16(fp)
10013960:	10800044 	addi	r2,r2,1
10013964:	e0bffc15 	stw	r2,-16(fp)
10013968:	e0bffc17 	ldw	r2,-16(fp)
1001396c:	10800810 	cmplti	r2,r2,32
10013970:	103fe01e 	bne	r2,zero,100138f4 <__alt_data_end+0xf80138f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10013974:	e0bffd17 	ldw	r2,-12(fp)
}
10013978:	e6ffff04 	addi	sp,fp,-4
1001397c:	dfc00217 	ldw	ra,8(sp)
10013980:	df000117 	ldw	fp,4(sp)
10013984:	dc000017 	ldw	r16,0(sp)
10013988:	dec00304 	addi	sp,sp,12
1001398c:	f800283a 	ret

10013990 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10013990:	defffe04 	addi	sp,sp,-8
10013994:	df000115 	stw	fp,4(sp)
10013998:	df000104 	addi	fp,sp,4
1001399c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100139a0:	e0bfff17 	ldw	r2,-4(fp)
100139a4:	10bffe84 	addi	r2,r2,-6
100139a8:	10c00428 	cmpgeui	r3,r2,16
100139ac:	18001a1e 	bne	r3,zero,10013a18 <alt_exception_cause_generated_bad_addr+0x88>
100139b0:	100690ba 	slli	r3,r2,2
100139b4:	00840074 	movhi	r2,4097
100139b8:	108e7204 	addi	r2,r2,14792
100139bc:	1885883a 	add	r2,r3,r2
100139c0:	10800017 	ldw	r2,0(r2)
100139c4:	1000683a 	jmp	r2
100139c8:	10013a08 	cmpgei	zero,r2,1256
100139cc:	10013a08 	cmpgei	zero,r2,1256
100139d0:	10013a18 	cmpnei	zero,r2,1256
100139d4:	10013a18 	cmpnei	zero,r2,1256
100139d8:	10013a18 	cmpnei	zero,r2,1256
100139dc:	10013a08 	cmpgei	zero,r2,1256
100139e0:	10013a10 	cmplti	zero,r2,1256
100139e4:	10013a18 	cmpnei	zero,r2,1256
100139e8:	10013a08 	cmpgei	zero,r2,1256
100139ec:	10013a08 	cmpgei	zero,r2,1256
100139f0:	10013a18 	cmpnei	zero,r2,1256
100139f4:	10013a08 	cmpgei	zero,r2,1256
100139f8:	10013a10 	cmplti	zero,r2,1256
100139fc:	10013a18 	cmpnei	zero,r2,1256
10013a00:	10013a18 	cmpnei	zero,r2,1256
10013a04:	10013a08 	cmpgei	zero,r2,1256
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10013a08:	00800044 	movi	r2,1
10013a0c:	00000306 	br	10013a1c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10013a10:	0005883a 	mov	r2,zero
10013a14:	00000106 	br	10013a1c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10013a18:	0005883a 	mov	r2,zero
  }
}
10013a1c:	e037883a 	mov	sp,fp
10013a20:	df000017 	ldw	fp,0(sp)
10013a24:	dec00104 	addi	sp,sp,4
10013a28:	f800283a 	ret

10013a2c <atexit>:
10013a2c:	200b883a 	mov	r5,r4
10013a30:	000f883a 	mov	r7,zero
10013a34:	000d883a 	mov	r6,zero
10013a38:	0009883a 	mov	r4,zero
10013a3c:	0013af41 	jmpi	10013af4 <__register_exitproc>

10013a40 <exit>:
10013a40:	defffe04 	addi	sp,sp,-8
10013a44:	000b883a 	mov	r5,zero
10013a48:	dc000015 	stw	r16,0(sp)
10013a4c:	dfc00115 	stw	ra,4(sp)
10013a50:	2021883a 	mov	r16,r4
10013a54:	0013c0c0 	call	10013c0c <__call_exitprocs>
10013a58:	00840074 	movhi	r2,4097
10013a5c:	1098b404 	addi	r2,r2,25296
10013a60:	11000017 	ldw	r4,0(r2)
10013a64:	20800f17 	ldw	r2,60(r4)
10013a68:	10000126 	beq	r2,zero,10013a70 <exit+0x30>
10013a6c:	103ee83a 	callr	r2
10013a70:	8009883a 	mov	r4,r16
10013a74:	0013d8c0 	call	10013d8c <_exit>

10013a78 <memcmp>:
10013a78:	01c000c4 	movi	r7,3
10013a7c:	3980192e 	bgeu	r7,r6,10013ae4 <memcmp+0x6c>
10013a80:	2144b03a 	or	r2,r4,r5
10013a84:	11c4703a 	and	r2,r2,r7
10013a88:	10000f26 	beq	r2,zero,10013ac8 <memcmp+0x50>
10013a8c:	20800003 	ldbu	r2,0(r4)
10013a90:	28c00003 	ldbu	r3,0(r5)
10013a94:	10c0151e 	bne	r2,r3,10013aec <memcmp+0x74>
10013a98:	31bfff84 	addi	r6,r6,-2
10013a9c:	01ffffc4 	movi	r7,-1
10013aa0:	00000406 	br	10013ab4 <memcmp+0x3c>
10013aa4:	20800003 	ldbu	r2,0(r4)
10013aa8:	28c00003 	ldbu	r3,0(r5)
10013aac:	31bfffc4 	addi	r6,r6,-1
10013ab0:	10c00e1e 	bne	r2,r3,10013aec <memcmp+0x74>
10013ab4:	21000044 	addi	r4,r4,1
10013ab8:	29400044 	addi	r5,r5,1
10013abc:	31fff91e 	bne	r6,r7,10013aa4 <__alt_data_end+0xf8013aa4>
10013ac0:	0005883a 	mov	r2,zero
10013ac4:	f800283a 	ret
10013ac8:	20c00017 	ldw	r3,0(r4)
10013acc:	28800017 	ldw	r2,0(r5)
10013ad0:	18bfee1e 	bne	r3,r2,10013a8c <__alt_data_end+0xf8013a8c>
10013ad4:	31bfff04 	addi	r6,r6,-4
10013ad8:	21000104 	addi	r4,r4,4
10013adc:	29400104 	addi	r5,r5,4
10013ae0:	39bff936 	bltu	r7,r6,10013ac8 <__alt_data_end+0xf8013ac8>
10013ae4:	303fe91e 	bne	r6,zero,10013a8c <__alt_data_end+0xf8013a8c>
10013ae8:	003ff506 	br	10013ac0 <__alt_data_end+0xf8013ac0>
10013aec:	10c5c83a 	sub	r2,r2,r3
10013af0:	f800283a 	ret

10013af4 <__register_exitproc>:
10013af4:	defffa04 	addi	sp,sp,-24
10013af8:	dc000315 	stw	r16,12(sp)
10013afc:	04040074 	movhi	r16,4097
10013b00:	8418b404 	addi	r16,r16,25296
10013b04:	80c00017 	ldw	r3,0(r16)
10013b08:	dc400415 	stw	r17,16(sp)
10013b0c:	dfc00515 	stw	ra,20(sp)
10013b10:	18805217 	ldw	r2,328(r3)
10013b14:	2023883a 	mov	r17,r4
10013b18:	10003726 	beq	r2,zero,10013bf8 <__register_exitproc+0x104>
10013b1c:	10c00117 	ldw	r3,4(r2)
10013b20:	010007c4 	movi	r4,31
10013b24:	20c00e16 	blt	r4,r3,10013b60 <__register_exitproc+0x6c>
10013b28:	1a000044 	addi	r8,r3,1
10013b2c:	8800221e 	bne	r17,zero,10013bb8 <__register_exitproc+0xc4>
10013b30:	18c00084 	addi	r3,r3,2
10013b34:	18c7883a 	add	r3,r3,r3
10013b38:	18c7883a 	add	r3,r3,r3
10013b3c:	12000115 	stw	r8,4(r2)
10013b40:	10c7883a 	add	r3,r2,r3
10013b44:	19400015 	stw	r5,0(r3)
10013b48:	0005883a 	mov	r2,zero
10013b4c:	dfc00517 	ldw	ra,20(sp)
10013b50:	dc400417 	ldw	r17,16(sp)
10013b54:	dc000317 	ldw	r16,12(sp)
10013b58:	dec00604 	addi	sp,sp,24
10013b5c:	f800283a 	ret
10013b60:	00800034 	movhi	r2,0
10013b64:	10800004 	addi	r2,r2,0
10013b68:	10002626 	beq	r2,zero,10013c04 <__register_exitproc+0x110>
10013b6c:	01006404 	movi	r4,400
10013b70:	d9400015 	stw	r5,0(sp)
10013b74:	d9800115 	stw	r6,4(sp)
10013b78:	d9c00215 	stw	r7,8(sp)
10013b7c:	00000000 	call	10000000 <__alt_mem_sdram>
10013b80:	d9400017 	ldw	r5,0(sp)
10013b84:	d9800117 	ldw	r6,4(sp)
10013b88:	d9c00217 	ldw	r7,8(sp)
10013b8c:	10001d26 	beq	r2,zero,10013c04 <__register_exitproc+0x110>
10013b90:	81000017 	ldw	r4,0(r16)
10013b94:	10000115 	stw	zero,4(r2)
10013b98:	02000044 	movi	r8,1
10013b9c:	22405217 	ldw	r9,328(r4)
10013ba0:	0007883a 	mov	r3,zero
10013ba4:	12400015 	stw	r9,0(r2)
10013ba8:	20805215 	stw	r2,328(r4)
10013bac:	10006215 	stw	zero,392(r2)
10013bb0:	10006315 	stw	zero,396(r2)
10013bb4:	883fde26 	beq	r17,zero,10013b30 <__alt_data_end+0xf8013b30>
10013bb8:	18c9883a 	add	r4,r3,r3
10013bbc:	2109883a 	add	r4,r4,r4
10013bc0:	1109883a 	add	r4,r2,r4
10013bc4:	21802215 	stw	r6,136(r4)
10013bc8:	01800044 	movi	r6,1
10013bcc:	12406217 	ldw	r9,392(r2)
10013bd0:	30cc983a 	sll	r6,r6,r3
10013bd4:	4992b03a 	or	r9,r9,r6
10013bd8:	12406215 	stw	r9,392(r2)
10013bdc:	21c04215 	stw	r7,264(r4)
10013be0:	01000084 	movi	r4,2
10013be4:	893fd21e 	bne	r17,r4,10013b30 <__alt_data_end+0xf8013b30>
10013be8:	11006317 	ldw	r4,396(r2)
10013bec:	218cb03a 	or	r6,r4,r6
10013bf0:	11806315 	stw	r6,396(r2)
10013bf4:	003fce06 	br	10013b30 <__alt_data_end+0xf8013b30>
10013bf8:	18805304 	addi	r2,r3,332
10013bfc:	18805215 	stw	r2,328(r3)
10013c00:	003fc606 	br	10013b1c <__alt_data_end+0xf8013b1c>
10013c04:	00bfffc4 	movi	r2,-1
10013c08:	003fd006 	br	10013b4c <__alt_data_end+0xf8013b4c>

10013c0c <__call_exitprocs>:
10013c0c:	defff504 	addi	sp,sp,-44
10013c10:	df000915 	stw	fp,36(sp)
10013c14:	dd400615 	stw	r21,24(sp)
10013c18:	dc800315 	stw	r18,12(sp)
10013c1c:	dfc00a15 	stw	ra,40(sp)
10013c20:	ddc00815 	stw	r23,32(sp)
10013c24:	dd800715 	stw	r22,28(sp)
10013c28:	dd000515 	stw	r20,20(sp)
10013c2c:	dcc00415 	stw	r19,16(sp)
10013c30:	dc400215 	stw	r17,8(sp)
10013c34:	dc000115 	stw	r16,4(sp)
10013c38:	d9000015 	stw	r4,0(sp)
10013c3c:	2839883a 	mov	fp,r5
10013c40:	04800044 	movi	r18,1
10013c44:	057fffc4 	movi	r21,-1
10013c48:	00840074 	movhi	r2,4097
10013c4c:	1098b404 	addi	r2,r2,25296
10013c50:	12000017 	ldw	r8,0(r2)
10013c54:	45005217 	ldw	r20,328(r8)
10013c58:	44c05204 	addi	r19,r8,328
10013c5c:	a0001c26 	beq	r20,zero,10013cd0 <__call_exitprocs+0xc4>
10013c60:	a0800117 	ldw	r2,4(r20)
10013c64:	15ffffc4 	addi	r23,r2,-1
10013c68:	b8000d16 	blt	r23,zero,10013ca0 <__call_exitprocs+0x94>
10013c6c:	14000044 	addi	r16,r2,1
10013c70:	8421883a 	add	r16,r16,r16
10013c74:	8421883a 	add	r16,r16,r16
10013c78:	84402004 	addi	r17,r16,128
10013c7c:	a463883a 	add	r17,r20,r17
10013c80:	a421883a 	add	r16,r20,r16
10013c84:	e0001e26 	beq	fp,zero,10013d00 <__call_exitprocs+0xf4>
10013c88:	80804017 	ldw	r2,256(r16)
10013c8c:	e0801c26 	beq	fp,r2,10013d00 <__call_exitprocs+0xf4>
10013c90:	bdffffc4 	addi	r23,r23,-1
10013c94:	843fff04 	addi	r16,r16,-4
10013c98:	8c7fff04 	addi	r17,r17,-4
10013c9c:	bd7ff91e 	bne	r23,r21,10013c84 <__alt_data_end+0xf8013c84>
10013ca0:	00800034 	movhi	r2,0
10013ca4:	10800004 	addi	r2,r2,0
10013ca8:	10000926 	beq	r2,zero,10013cd0 <__call_exitprocs+0xc4>
10013cac:	a0800117 	ldw	r2,4(r20)
10013cb0:	1000301e 	bne	r2,zero,10013d74 <__call_exitprocs+0x168>
10013cb4:	a0800017 	ldw	r2,0(r20)
10013cb8:	10003226 	beq	r2,zero,10013d84 <__call_exitprocs+0x178>
10013cbc:	a009883a 	mov	r4,r20
10013cc0:	98800015 	stw	r2,0(r19)
10013cc4:	00000000 	call	10000000 <__alt_mem_sdram>
10013cc8:	9d000017 	ldw	r20,0(r19)
10013ccc:	a03fe41e 	bne	r20,zero,10013c60 <__alt_data_end+0xf8013c60>
10013cd0:	dfc00a17 	ldw	ra,40(sp)
10013cd4:	df000917 	ldw	fp,36(sp)
10013cd8:	ddc00817 	ldw	r23,32(sp)
10013cdc:	dd800717 	ldw	r22,28(sp)
10013ce0:	dd400617 	ldw	r21,24(sp)
10013ce4:	dd000517 	ldw	r20,20(sp)
10013ce8:	dcc00417 	ldw	r19,16(sp)
10013cec:	dc800317 	ldw	r18,12(sp)
10013cf0:	dc400217 	ldw	r17,8(sp)
10013cf4:	dc000117 	ldw	r16,4(sp)
10013cf8:	dec00b04 	addi	sp,sp,44
10013cfc:	f800283a 	ret
10013d00:	a0800117 	ldw	r2,4(r20)
10013d04:	80c00017 	ldw	r3,0(r16)
10013d08:	10bfffc4 	addi	r2,r2,-1
10013d0c:	15c01426 	beq	r2,r23,10013d60 <__call_exitprocs+0x154>
10013d10:	80000015 	stw	zero,0(r16)
10013d14:	183fde26 	beq	r3,zero,10013c90 <__alt_data_end+0xf8013c90>
10013d18:	95c8983a 	sll	r4,r18,r23
10013d1c:	a0806217 	ldw	r2,392(r20)
10013d20:	a5800117 	ldw	r22,4(r20)
10013d24:	2084703a 	and	r2,r4,r2
10013d28:	10000b26 	beq	r2,zero,10013d58 <__call_exitprocs+0x14c>
10013d2c:	a0806317 	ldw	r2,396(r20)
10013d30:	2088703a 	and	r4,r4,r2
10013d34:	20000c1e 	bne	r4,zero,10013d68 <__call_exitprocs+0x15c>
10013d38:	89400017 	ldw	r5,0(r17)
10013d3c:	d9000017 	ldw	r4,0(sp)
10013d40:	183ee83a 	callr	r3
10013d44:	a0800117 	ldw	r2,4(r20)
10013d48:	15bfbf1e 	bne	r2,r22,10013c48 <__alt_data_end+0xf8013c48>
10013d4c:	98800017 	ldw	r2,0(r19)
10013d50:	153fcf26 	beq	r2,r20,10013c90 <__alt_data_end+0xf8013c90>
10013d54:	003fbc06 	br	10013c48 <__alt_data_end+0xf8013c48>
10013d58:	183ee83a 	callr	r3
10013d5c:	003ff906 	br	10013d44 <__alt_data_end+0xf8013d44>
10013d60:	a5c00115 	stw	r23,4(r20)
10013d64:	003feb06 	br	10013d14 <__alt_data_end+0xf8013d14>
10013d68:	89000017 	ldw	r4,0(r17)
10013d6c:	183ee83a 	callr	r3
10013d70:	003ff406 	br	10013d44 <__alt_data_end+0xf8013d44>
10013d74:	a0800017 	ldw	r2,0(r20)
10013d78:	a027883a 	mov	r19,r20
10013d7c:	1029883a 	mov	r20,r2
10013d80:	003fb606 	br	10013c5c <__alt_data_end+0xf8013c5c>
10013d84:	0005883a 	mov	r2,zero
10013d88:	003ffb06 	br	10013d78 <__alt_data_end+0xf8013d78>

10013d8c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10013d8c:	defffd04 	addi	sp,sp,-12
10013d90:	df000215 	stw	fp,8(sp)
10013d94:	df000204 	addi	fp,sp,8
10013d98:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10013d9c:	0001883a 	nop
10013da0:	e0bfff17 	ldw	r2,-4(fp)
10013da4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10013da8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10013dac:	10000226 	beq	r2,zero,10013db8 <_exit+0x2c>
    ALT_SIM_FAIL();
10013db0:	002af070 	cmpltui	zero,zero,43969
10013db4:	00000106 	br	10013dbc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10013db8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10013dbc:	003fff06 	br	10013dbc <__alt_data_end+0xf8013dbc>
